{"version":3,"file":"vendors-node_modules_react-native_src_private_featureflags_ReactNativeFeatureFlags_js.chunk.bundle","sources":["webpack://sataccommodation/./node_modules/react-native/src/private/featureflags/specs/NativeReactNativeFeatureFlags.js","webpack://sataccommodation/./node_modules/react-native/src/private/featureflags/ReactNativeFeatureFlags.js","webpack://sataccommodation/./node_modules/react-native/src/private/featureflags/ReactNativeFeatureFlagsBase.js"],"sourcesContent":["                                                                               \nimport * as TurboModuleRegistry from '../../../../Libraries/TurboModule/TurboModuleRegistry';\n                                           \n                                  \n                                                             \n                                                                    \n                                                \n                                                     \n                                                             \n                                                \n                                                \n                                                  \n                                                 \n                                                                      \n                                    \n                                        \n                                               \n                                                               \n                                                 \n                                                 \n                                                   \n                                               \n                                     \n                                                         \n                                                                    \n                                                          \n                                              \n                                                 \n                                       \n                                       \n                                           \n                                                                      \n                                                                    \n                                                                              \n                                         \n                                                                    \n                                          \n                                               \n                                                              \n                                                     \n                                    \n                                                           \n                                                        \n                                                          \n                                                      \n                                       \n                                                       \n                                         \n                                   \n \nconst NativeReactNativeFeatureFlags        = TurboModuleRegistry.get      ('NativeReactNativeFeatureFlagsCxx');\nexport default NativeReactNativeFeatureFlags;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @generated SignedSource<<3037cf1c938dae492b656333cec9633c>>\n *       strict\n */\n\n/**\n * IMPORTANT: Do NOT modify this file directly.\n *\n * To change the definition of the flags, edit\n *   packages/react-native/scripts/featureflags/ReactNativeFeatureFlags.config.js.\n *\n * To regenerate this code, run the following script from the repo root:\n *   yarn featureflags --update\n */\n\nimport {\n              \n                    \n  createJavaScriptFlagGetter,\n  createNativeFlagGetter,\n  setOverrides,\n} from './ReactNativeFeatureFlagsBase';\n\n                                                       \n                                  \n                                                    \n                                             \n                                             \n                                                          \n                                                  \n                                           \n                                                   \n                                           \n                                                       \n                                            \n                                                              \n                                                       \n                                                                \n                                                   \n                                                    \n                                            \n   \n\n                                                                                                 \n\n                                                 \n                                   \n                                  \n                                                             \n                                                                    \n                                                \n                                                     \n                                                             \n                                                \n                                                \n                                                  \n                                                 \n                                                                      \n                                    \n                                        \n                                               \n                                                               \n                                                 \n                                                 \n                                                   \n                                               \n                                     \n                                                         \n                                                                    \n                                                          \n                                              \n                                                 \n                                       \n                                       \n                                           \n                                                                      \n                                                                    \n                                                                              \n                                         \n                                                                    \n                                          \n                                               \n                                                              \n                                                     \n                                    \n                                                           \n                                                        \n                                                          \n                                                      \n                                       \n                                                       \n                                         \n                                   \n   \n\n/**\n * JS-only flag for testing. Do NOT modify.\n */\nexport const jsOnlyTestFlag                  = createJavaScriptFlagGetter('jsOnlyTestFlag', false);\n\n/**\n * Enables an experimental flush-queue debouncing in Animated.js.\n */\nexport const animatedShouldDebounceQueueFlush                  = createJavaScriptFlagGetter('animatedShouldDebounceQueueFlush', false);\n\n/**\n * Enables an experimental mega-operation for Animated.js that replaces many calls to native with a single call into native, to reduce JSI/JNI traffic.\n */\nexport const animatedShouldUseSingleOp                  = createJavaScriptFlagGetter('animatedShouldUseSingleOp', false);\n\n/**\n * Disables InteractionManager and replaces its scheduler with `setImmediate`.\n */\nexport const disableInteractionManager                  = createJavaScriptFlagGetter('disableInteractionManager', false);\n\n/**\n * Skips InteractionManager in `Batchinator` and invokes callbacks synchronously.\n */\nexport const disableInteractionManagerInBatchinator                  = createJavaScriptFlagGetter('disableInteractionManagerInBatchinator', false);\n\n/**\n * Enables access to the host tree in Fabric using DOM-compatible APIs.\n */\nexport const enableAccessToHostTreeInFabric                  = createJavaScriptFlagGetter('enableAccessToHostTreeInFabric', false);\n\n/**\n * Enables Animated to skip non-allowlisted props and styles.\n */\nexport const enableAnimatedAllowlist                  = createJavaScriptFlagGetter('enableAnimatedAllowlist', true);\n\n/**\n * Enables an experimental to use the proper clearIntermediate instead of calling the wrong clearTimeout and canceling another timer.\n */\nexport const enableAnimatedClearImmediateFix                  = createJavaScriptFlagGetter('enableAnimatedClearImmediateFix', true);\n\n/**\n * Enables Animated to analyze props to minimize invalidating `AnimatedProps`.\n */\nexport const enableAnimatedPropsMemo                  = createJavaScriptFlagGetter('enableAnimatedPropsMemo', true);\n\n/**\n * Fixing an edge case where the current window size is not properly calculated with fast scrolling. Window size collapsed to 1 element even if windowSize more than the current amount of elements\n */\nexport const fixVirtualizeListCollapseWindowSize                  = createJavaScriptFlagGetter('fixVirtualizeListCollapseWindowSize', false);\n\n/**\n * Function used to enable / disabled Layout Animations in React Native.\n */\nexport const isLayoutAnimationEnabled                  = createJavaScriptFlagGetter('isLayoutAnimationEnabled', true);\n\n/**\n * If the animation is within Animated.loop, we do not send state updates to React.\n */\nexport const shouldSkipStateUpdatesForLoopingAnimations                  = createJavaScriptFlagGetter('shouldSkipStateUpdatesForLoopingAnimations', true);\n\n/**\n * Enables use of AnimatedObject for animating transform values.\n */\nexport const shouldUseAnimatedObjectForTransform                  = createJavaScriptFlagGetter('shouldUseAnimatedObjectForTransform', false);\n\n/**\n * removeClippedSubviews prop will be used as the default in FlatList on iOS to match Android\n */\nexport const shouldUseRemoveClippedSubviewsAsDefaultOnIOS                  = createJavaScriptFlagGetter('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);\n\n/**\n * Enables use of setNativeProps in JS driven animations.\n */\nexport const shouldUseSetNativePropsInFabric                  = createJavaScriptFlagGetter('shouldUseSetNativePropsInFabric', true);\n\n/**\n * Changes construction of the animation graph to `useInsertionEffect` instead of `useLayoutEffect`.\n */\nexport const useInsertionEffectsForAnimations                  = createJavaScriptFlagGetter('useInsertionEffectsForAnimations', true);\n\n/**\n * Enable a variant of TextInput that moves some state to refs to avoid unnecessary re-renders\n */\nexport const useRefsForTextInputState                  = createJavaScriptFlagGetter('useRefsForTextInputState', false);\n\n/**\n * Common flag for testing. Do NOT modify.\n */\nexport const commonTestFlag                  = createNativeFlagGetter('commonTestFlag', false);\n/**\n * Common flag for testing (without native implementation). Do NOT modify.\n */\nexport const commonTestFlagWithoutNativeImplementation                  = createNativeFlagGetter('commonTestFlagWithoutNativeImplementation', false);\n/**\n * Do not wait for a main-thread dispatch to complete init to start executing work on the JS thread on Android\n */\nexport const completeReactInstanceCreationOnBgThreadOnAndroid                  = createNativeFlagGetter('completeReactInstanceCreationOnBgThreadOnAndroid', true);\n/**\n * The bridgeless architecture enables the event loop by default. This feature flag allows us to force disabling it in specific instances.\n */\nexport const disableEventLoopOnBridgeless                  = createNativeFlagGetter('disableEventLoopOnBridgeless', false);\n/**\n * Prevent FabricMountingManager from reordering mountitems, which may lead to invalid state on the UI thread\n */\nexport const disableMountItemReorderingAndroid                  = createNativeFlagGetter('disableMountItemReorderingAndroid', false);\n/**\n * When enabled, Andoid will accumulate updates in rawProps to reduce the number of mounting instructions for cascading rerenders.\n */\nexport const enableAccumulatedUpdatesInRawPropsAndroid                  = createNativeFlagGetter('enableAccumulatedUpdatesInRawPropsAndroid', false);\n/**\n * Feature flag to enable the new bridgeless architecture. Note: Enabling this will force enable the following flags: `useTurboModules` & `enableFabricRenderer.\n */\nexport const enableBridgelessArchitecture                  = createNativeFlagGetter('enableBridgelessArchitecture', false);\n/**\n * Enable prop iterator setter-style construction of Props in C++ (this flag is not used in Java).\n */\nexport const enableCppPropsIteratorSetter                  = createNativeFlagGetter('enableCppPropsIteratorSetter', false);\n/**\n * Deletes views that were pre-allocated but never mounted on the screen.\n */\nexport const enableDeletionOfUnmountedViews                  = createNativeFlagGetter('enableDeletionOfUnmountedViews', false);\n/**\n * Feature flag to configure eager attachment of the root view/initialisation of the JS code.\n */\nexport const enableEagerRootViewAttachment                  = createNativeFlagGetter('enableEagerRootViewAttachment', false);\n/**\n * Enables the retention of EventEmitterWrapper on Android till the touch gesture is over to fix a bug on pressable (#44610)\n */\nexport const enableEventEmitterRetentionDuringGesturesOnAndroid                  = createNativeFlagGetter('enableEventEmitterRetentionDuringGesturesOnAndroid', false);\n/**\n * This feature flag enables logs for Fabric.\n */\nexport const enableFabricLogs                  = createNativeFlagGetter('enableFabricLogs', false);\n/**\n * Enables the use of the Fabric renderer in the whole app.\n */\nexport const enableFabricRenderer                  = createNativeFlagGetter('enableFabricRenderer', false);\n/**\n * Synchronise the view command dispatching with mounting of new transaction\n */\nexport const enableFixForViewCommandRace                  = createNativeFlagGetter('enableFixForViewCommandRace', false);\n/**\n * When enabled, the renderer would only fail commits when they propagate state and the last commit that updated state changed before committing.\n */\nexport const enableGranularShadowTreeStateReconciliation                  = createNativeFlagGetter('enableGranularShadowTreeStateReconciliation', false);\n/**\n * iOS Views will clip to their padding box vs border box\n */\nexport const enableIOSViewClipToPaddingBox                  = createNativeFlagGetter('enableIOSViewClipToPaddingBox', false);\n/**\n * When enabled, Andoid will build and initiate image prefetch requests on ImageShadowNode::layout\n */\nexport const enableImagePrefetchingAndroid                  = createNativeFlagGetter('enableImagePrefetchingAndroid', false);\n/**\n * When enabled, LayoutAnimations API will animate state changes on Android.\n */\nexport const enableLayoutAnimationsOnAndroid                  = createNativeFlagGetter('enableLayoutAnimationsOnAndroid', false);\n/**\n * When enabled, LayoutAnimations API will animate state changes on iOS.\n */\nexport const enableLayoutAnimationsOnIOS                  = createNativeFlagGetter('enableLayoutAnimationsOnIOS', true);\n/**\n * Enables the reporting of long tasks through `PerformanceObserver`. Only works if the event loop is enabled.\n */\nexport const enableLongTaskAPI                  = createNativeFlagGetter('enableLongTaskAPI', false);\n/**\n * Use BackgroundDrawable and BorderDrawable instead of CSSBackgroundDrawable\n */\nexport const enableNewBackgroundAndBorderDrawables                  = createNativeFlagGetter('enableNewBackgroundAndBorderDrawables', false);\n/**\n * Moves execution of pre-mount items to outside the choregrapher in the main thread, so we can estimate idle time more precisely (Android only).\n */\nexport const enablePreciseSchedulingForPremountItemsOnAndroid                  = createNativeFlagGetter('enablePreciseSchedulingForPremountItemsOnAndroid', false);\n/**\n * When enabled, Android will receive prop updates based on the differences between the last rendered shadow node and the last committed shadow node.\n */\nexport const enablePropsUpdateReconciliationAndroid                  = createNativeFlagGetter('enablePropsUpdateReconciliationAndroid', false);\n/**\n * Report paint time inside the Event Timing API implementation (PerformanceObserver).\n */\nexport const enableReportEventPaintTime                  = createNativeFlagGetter('enableReportEventPaintTime', false);\n/**\n * Dispatches state updates synchronously in Fabric (e.g.: updates the scroll position in the shadow tree synchronously from the main thread).\n */\nexport const enableSynchronousStateUpdates                  = createNativeFlagGetter('enableSynchronousStateUpdates', false);\n/**\n * Ensures that JavaScript always has a consistent view of the state of the UI (e.g.: commits done in other threads are not immediately propagated to JS during its execution).\n */\nexport const enableUIConsistency                  = createNativeFlagGetter('enableUIConsistency', false);\n/**\n * Enables View Recycling. When enabled, individual ViewManagers must still opt-in.\n */\nexport const enableViewRecycling                  = createNativeFlagGetter('enableViewRecycling', false);\n/**\n * When enabled, rawProps in Props will not include Yoga specific props.\n */\nexport const excludeYogaFromRawProps                  = createNativeFlagGetter('excludeYogaFromRawProps', false);\n/**\n * Fixes a bug in Differentiator where parent views may be referenced before they're created\n */\nexport const fixDifferentiatorEmittingUpdatesWithWrongParentTag                  = createNativeFlagGetter('fixDifferentiatorEmittingUpdatesWithWrongParentTag', true);\n/**\n * Uses the default event priority instead of the discreet event priority by default when dispatching events from Fabric to React.\n */\nexport const fixMappingOfEventPrioritiesBetweenFabricAndReact                  = createNativeFlagGetter('fixMappingOfEventPrioritiesBetweenFabricAndReact', false);\n/**\n * Fixes a limitation on Android where the mounting coordinator would report there are no pending transactions but some of them were actually not processed due to the use of the push model.\n */\nexport const fixMountingCoordinatorReportedPendingTransactionsOnAndroid                  = createNativeFlagGetter('fixMountingCoordinatorReportedPendingTransactionsOnAndroid', false);\n/**\n * Flag determining if the React Native DevTools (Fusebox) CDP backend should be enabled in release builds. This flag is global and should not be changed across React Host lifetimes.\n */\nexport const fuseboxEnabledRelease                  = createNativeFlagGetter('fuseboxEnabledRelease', false);\n/**\n * Construct modules that requires eager init on the dedicate native modules thread\n */\nexport const initEagerTurboModulesOnNativeModulesQueueAndroid                  = createNativeFlagGetter('initEagerTurboModulesOnNativeModulesQueueAndroid', true);\n/**\n * Only enqueue Choreographer calls if there is an ongoing animation, instead of enqueueing every frame.\n */\nexport const lazyAnimationCallbacks                  = createNativeFlagGetter('lazyAnimationCallbacks', false);\n/**\n * Adds support for loading vector drawable assets in the Image component (only on Android)\n */\nexport const loadVectorDrawablesOnImages                  = createNativeFlagGetter('loadVectorDrawablesOnImages', true);\n/**\n * Enables storing js caller stack when creating promise in native module. This is useful in case of Promise rejection and tracing the cause.\n */\nexport const traceTurboModulePromiseRejectionsOnAndroid                  = createNativeFlagGetter('traceTurboModulePromiseRejectionsOnAndroid', false);\n/**\n * In Bridgeless mode, use the always available javascript error reporting pipeline.\n */\nexport const useAlwaysAvailableJSErrorHandling                  = createNativeFlagGetter('useAlwaysAvailableJSErrorHandling', false);\n/**\n * Should this application enable the Fabric Interop Layer for Android? If yes, the application will behave so that it can accept non-Fabric components and render them on Fabric. This toggle is controlling extra logic such as custom event dispatching that are needed for the Fabric Interop Layer to work correctly.\n */\nexport const useFabricInterop                  = createNativeFlagGetter('useFabricInterop', false);\n/**\n * Invoke callbacks immediately on the ReactInstance rather than going through a background thread for synchronization\n */\nexport const useImmediateExecutorInAndroidBridgeless                  = createNativeFlagGetter('useImmediateExecutorInAndroidBridgeless', true);\n/**\n * When enabled, the native view configs are used in bridgeless mode.\n */\nexport const useNativeViewConfigsInBridgelessMode                  = createNativeFlagGetter('useNativeViewConfigsInBridgelessMode', false);\n/**\n * Moves more of the work in view preallocation to the main thread to free up JS thread.\n */\nexport const useOptimisedViewPreallocationOnAndroid                  = createNativeFlagGetter('useOptimisedViewPreallocationOnAndroid', false);\n/**\n * Uses an optimized mechanism for event batching on Android that does not need to wait for a Choreographer frame callback.\n */\nexport const useOptimizedEventBatchingOnAndroid                  = createNativeFlagGetter('useOptimizedEventBatchingOnAndroid', false);\n/**\n * Instead of using folly::dynamic as internal representation in RawProps and RawValue, use jsi::Value\n */\nexport const useRawPropsJsiValue                  = createNativeFlagGetter('useRawPropsJsiValue', false);\n/**\n * When enabled, cloning shadow nodes within react native will update the reference held by the current JS fiber tree.\n */\nexport const useRuntimeShadowNodeReferenceUpdate                  = createNativeFlagGetter('useRuntimeShadowNodeReferenceUpdate', true);\n/**\n * In Bridgeless mode, should legacy NativeModules use the TurboModule system?\n */\nexport const useTurboModuleInterop                  = createNativeFlagGetter('useTurboModuleInterop', false);\n/**\n * When enabled, NativeModules will be executed by using the TurboModule system\n */\nexport const useTurboModules                  = createNativeFlagGetter('useTurboModules', false);\n\n/**\n * Overrides the feature flags with the provided methods.\n * NOTE: Only JS-only flags can be overridden from JavaScript using this API.\n */\nexport const override = setOverrides;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n * @format\n */\n\n             \n                                \n                                         \n                                   \n\nimport NativeReactNativeFeatureFlags from './specs/NativeReactNativeFeatureFlags';\n\nconst accessedFeatureFlags              = new Set();\nlet overrides                                         ;\n\n                                \n\n// This defines the types for the overrides object, whose methods also receive\n// the default value as a parameter.\n                                       \n                                                               \n   \n\nfunction createGetter                              (\n  configName        ,\n  customValueGetter            ,\n  defaultValue   ,\n)            {\n  let cachedValue    ;\n\n  return () => {\n    if (cachedValue == null) {\n      cachedValue = customValueGetter() ?? defaultValue;\n    }\n    return cachedValue;\n  };\n}\n\nexport function createJavaScriptFlagGetter \n                                          \n (\n  configName   ,\n  defaultValue                                              ,\n)                                                       {\n  return createGetter(\n    configName,\n    () => {\n      accessedFeatureFlags.add(configName);\n      return overrides?.[configName]?.(defaultValue);\n    },\n    defaultValue,\n  );\n}\n\n                                                                              \n\nexport function createNativeFlagGetter                              (\n  configName   ,\n  defaultValue                                                  ,\n)                                                           {\n  return createGetter(\n    configName,\n    () => {\n      const valueFromNative = NativeReactNativeFeatureFlags?.[configName]?.();\n      if (valueFromNative == null) {\n        logUnavailableNativeModuleError(configName);\n      }\n      return valueFromNative;\n    },\n    defaultValue,\n  );\n}\n\nexport function getOverrides()                                          {\n  return overrides;\n}\n\nexport function setOverrides(\n  newOverrides                                        ,\n)       {\n  if (overrides != null) {\n    throw new Error('Feature flags cannot be overridden more than once');\n  }\n\n  if (accessedFeatureFlags.size > 0) {\n    const accessedFeatureFlagsStr = Array.from(accessedFeatureFlags).join(', ');\n    throw new Error(\n      `Feature flags were accessed before being overridden: ${accessedFeatureFlagsStr}`,\n    );\n  }\n\n  overrides = newOverrides;\n}\n\nconst reportedConfigNames              = new Set();\n\nfunction logUnavailableNativeModuleError(configName        )       {\n  if (!reportedConfigNames.has(configName)) {\n    reportedConfigNames.add(configName);\n    console.error(\n      `Could not access feature flag '${configName}' because native module method was not available`,\n    );\n  }\n}\n"],"names":["_default","NativeReactNativeFeatureFlags","_TurboModuleRegistry","animatedShouldDebounceQueueFlush","animatedShouldUseSingleOp","commonTestFlag","commonTestFlagWithoutNativeImplementation","completeReactInstanceCreationOnBgThreadOnAndroid","disableEventLoopOnBridgeless","disableInteractionManager","disableInteractionManagerInBatchinator","disableMountItemReorderingAndroid","enableAccessToHostTreeInFabric","enableAccumulatedUpdatesInRawPropsAndroid","enableAnimatedAllowlist","enableAnimatedClearImmediateFix","enableAnimatedPropsMemo","enableBridgelessArchitecture","enableCppPropsIteratorSetter","enableDeletionOfUnmountedViews","enableEagerRootViewAttachment","enableEventEmitterRetentionDuringGesturesOnAndroid","enableFabricLogs","enableFabricRenderer","enableFixForViewCommandRace","enableGranularShadowTreeStateReconciliation","enableIOSViewClipToPaddingBox","enableImagePrefetchingAndroid","enableLayoutAnimationsOnAndroid","enableLayoutAnimationsOnIOS","enableLongTaskAPI","enableNewBackgroundAndBorderDrawables","enablePreciseSchedulingForPremountItemsOnAndroid","enablePropsUpdateReconciliationAndroid","enableReportEventPaintTime","enableSynchronousStateUpdates","enableUIConsistency","enableViewRecycling","excludeYogaFromRawProps","fixDifferentiatorEmittingUpdatesWithWrongParentTag","fixMappingOfEventPrioritiesBetweenFabricAndReact","fixMountingCoordinatorReportedPendingTransactionsOnAndroid","fixVirtualizeListCollapseWindowSize","fuseboxEnabledRelease","initEagerTurboModulesOnNativeModulesQueueAndroid","isLayoutAnimationEnabled","jsOnlyTestFlag","lazyAnimationCallbacks","loadVectorDrawablesOnImages","override","shouldSkipStateUpdatesForLoopingAnimations","shouldUseAnimatedObjectForTransform","shouldUseRemoveClippedSubviewsAsDefaultOnIOS","shouldUseSetNativePropsInFabric","traceTurboModulePromiseRejectionsOnAndroid","useAlwaysAvailableJSErrorHandling","useFabricInterop","useImmediateExecutorInAndroidBridgeless","useInsertionEffectsForAnimations","useNativeViewConfigsInBridgelessMode","useOptimisedViewPreallocationOnAndroid","useOptimizedEventBatchingOnAndroid","useRawPropsJsiValue","useRefsForTextInputState","useRuntimeShadowNodeReferenceUpdate","useTurboModuleInterop","useTurboModules","_ReactNativeFeatureFlagsBase","createJavaScriptFlagGetter","createNativeFlagGetter","getOverrides","setOverrides","accessedFeatureFlags","Set","overrides","createGetter","configName","customValueGetter","defaultValue","cachedValue","_NativeReactNativeFeatureFlags","valueFromNative","logUnavailableNativeModuleError","newOverrides","Error","accessedFeatureFlagsStr","Array","reportedConfigNames","console"],"mappings":"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"}