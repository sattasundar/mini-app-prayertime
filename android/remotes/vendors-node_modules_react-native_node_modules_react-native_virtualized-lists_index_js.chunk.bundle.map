{"version":3,"file":"vendors-node_modules_react-native_node_modules_react-native_virtualized-lists_index_js.chunk.bundle","sources":["webpack://sataccommodation/./node_modules/react-native/node_modules/@react-native/virtualized-lists/Interaction/Batchinator.js","webpack://sataccommodation/./node_modules/react-native/node_modules/@react-native/virtualized-lists/Lists/CellRenderMask.js","webpack://sataccommodation/./node_modules/react-native/node_modules/@react-native/virtualized-lists/Lists/ChildListCollection.js","webpack://sataccommodation/./node_modules/react-native/node_modules/@react-native/virtualized-lists/Lists/FillRateHelper.js","webpack://sataccommodation/./node_modules/react-native/node_modules/@react-native/virtualized-lists/Lists/ListMetricsAggregator.js","webpack://sataccommodation/./node_modules/react-native/node_modules/@react-native/virtualized-lists/Lists/StateSafePureComponent.js","webpack://sataccommodation/./node_modules/react-native/node_modules/@react-native/virtualized-lists/Lists/ViewabilityHelper.js","webpack://sataccommodation/./node_modules/react-native/node_modules/@react-native/virtualized-lists/Lists/VirtualizeUtils.js","webpack://sataccommodation/./node_modules/react-native/node_modules/@react-native/virtualized-lists/Lists/VirtualizedList.js","webpack://sataccommodation/./node_modules/react-native/node_modules/@react-native/virtualized-lists/Lists/VirtualizedListCellRenderer.js","webpack://sataccommodation/./node_modules/react-native/node_modules/@react-native/virtualized-lists/Lists/VirtualizedListContext.js","webpack://sataccommodation/./node_modules/react-native/node_modules/@react-native/virtualized-lists/Lists/VirtualizedListProps.js","webpack://sataccommodation/./node_modules/react-native/node_modules/@react-native/virtualized-lists/Lists/VirtualizedSectionList.js","webpack://sataccommodation/./node_modules/react-native/node_modules/@react-native/virtualized-lists/Utilities/clamp.js","webpack://sataccommodation/./node_modules/react-native/node_modules/@react-native/virtualized-lists/Utilities/infoLog.js","webpack://sataccommodation/./node_modules/react-native/node_modules/@react-native/virtualized-lists/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict-local\n * @format\n */\n\nimport {InteractionManager} from 'react-native';\nimport * as ReactNativeFeatureFlags from 'react-native/src/private/featureflags/ReactNativeFeatureFlags';\n\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\nclass Batchinator {\n  _callback            ;\n  _delay        ;\n  _taskHandle                            ;\n\n  constructor(callback            , delay        ) {\n    this._delay = delay;\n    this._callback = callback;\n  }\n\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n  dispose()       {\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n      this._taskHandle = null;\n    }\n  }\n\n  schedule()       {\n    if (this._taskHandle) {\n      return;\n    }\n    const invokeCallback = () => {\n      // Note that we clear the handle before invoking the callback so that if the callback calls\n      // schedule again, it will actually schedule another task.\n      this._taskHandle = null;\n      this._callback();\n    };\n\n    const timeoutHandle = setTimeout(\n      // NOTE: When shipping this, delete `Batchinator` instead of only these\n      // lines of code. Without `InteractionManager`, it's just a `setTimeout`.\n      ReactNativeFeatureFlags.disableInteractionManagerInBatchinator()\n        ? invokeCallback\n        : () => {\n            this._taskHandle =\n              InteractionManager.runAfterInteractions(invokeCallback);\n          },\n      this._delay,\n    );\n    this._taskHandle = {cancel: () => clearTimeout(timeoutHandle)};\n  }\n}\n\nmodule.exports = Batchinator;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n * @format\n */\n\nimport invariant from 'invariant';\n\n                          \n                \n               \n                    \n  \n\nexport class CellRenderMask {\n  _numCells        ;\n  _regions                   ;\n\n  constructor(numCells        ) {\n    invariant(\n      numCells >= 0,\n      'CellRenderMask must contain a non-negative number os cells',\n    );\n\n    this._numCells = numCells;\n\n    if (numCells === 0) {\n      this._regions = [];\n    } else {\n      this._regions = [\n        {\n          first: 0,\n          last: numCells - 1,\n          isSpacer: true,\n        },\n      ];\n    }\n  }\n\n  enumerateRegions()                             {\n    return this._regions;\n  }\n\n  addCells(cells                               )       {\n    invariant(\n      cells.first >= 0 &&\n        cells.first < this._numCells &&\n        cells.last >= -1 &&\n        cells.last < this._numCells &&\n        cells.last >= cells.first - 1,\n      'CellRenderMask.addCells called with invalid cell range',\n    );\n\n    // VirtualizedList uses inclusive ranges, where zero-count states are\n    // possible. E.g. [0, -1] for no cells, starting at 0.\n    if (cells.last < cells.first) {\n      return;\n    }\n\n    const [firstIntersect, firstIntersectIdx] = this._findRegion(cells.first);\n    const [lastIntersect, lastIntersectIdx] = this._findRegion(cells.last);\n\n    // Fast-path if the cells to add are already all present in the mask. We\n    // will otherwise need to do some mutation.\n    if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n      return;\n    }\n\n    // We need to replace the existing covered regions with 1-3 new regions\n    // depending whether we need to split spacers out of overlapping regions.\n    const newLeadRegion                    = [];\n    const newTailRegion                    = [];\n    const newMainRegion             = {\n      ...cells,\n      isSpacer: false,\n    };\n\n    if (firstIntersect.first < newMainRegion.first) {\n      if (firstIntersect.isSpacer) {\n        newLeadRegion.push({\n          first: firstIntersect.first,\n          last: newMainRegion.first - 1,\n          isSpacer: true,\n        });\n      } else {\n        newMainRegion.first = firstIntersect.first;\n      }\n    }\n\n    if (lastIntersect.last > newMainRegion.last) {\n      if (lastIntersect.isSpacer) {\n        newTailRegion.push({\n          first: newMainRegion.last + 1,\n          last: lastIntersect.last,\n          isSpacer: true,\n        });\n      } else {\n        newMainRegion.last = lastIntersect.last;\n      }\n    }\n\n    const replacementRegions                    = [\n      ...newLeadRegion,\n      newMainRegion,\n      ...newTailRegion,\n    ];\n    const numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n    this._regions.splice(\n      firstIntersectIdx,\n      numRegionsToDelete,\n      ...replacementRegions,\n    );\n  }\n\n  numCells()         {\n    return this._numCells;\n  }\n\n  equals(other                )          {\n    return (\n      this._numCells === other._numCells &&\n      this._regions.length === other._regions.length &&\n      this._regions.every(\n        (region, i) =>\n          region.first === other._regions[i].first &&\n          region.last === other._regions[i].last &&\n          region.isSpacer === other._regions[i].isSpacer,\n      )\n    );\n  }\n\n  _findRegion(cellIdx        )                       {\n    let firstIdx = 0;\n    let lastIdx = this._regions.length - 1;\n\n    while (firstIdx <= lastIdx) {\n      const middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n      const middleRegion = this._regions[middleIdx];\n\n      if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n        return [middleRegion, middleIdx];\n      } else if (cellIdx < middleRegion.first) {\n        lastIdx = middleIdx - 1;\n      } else if (cellIdx > middleRegion.last) {\n        firstIdx = middleIdx + 1;\n      }\n    }\n\n    invariant(false, `A region was not found containing cellIdx ${cellIdx}`);\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n * @format\n */\n\nimport invariant from 'invariant';\n\nexport default class ChildListCollection        {\n  _cellKeyToChildren                          = new Map();\n  _childrenToCellKey                     = new Map();\n\n  add(list       , cellKey        )       {\n    invariant(\n      !this._childrenToCellKey.has(list),\n      'Trying to add already present child list',\n    );\n\n    const cellLists = this._cellKeyToChildren.get(cellKey) ?? new Set();\n    cellLists.add(list);\n    this._cellKeyToChildren.set(cellKey, cellLists);\n\n    this._childrenToCellKey.set(list, cellKey);\n  }\n\n  remove(list       )       {\n    const cellKey = this._childrenToCellKey.get(list);\n    invariant(cellKey != null, 'Trying to remove non-present child list');\n    this._childrenToCellKey.delete(list);\n\n    const cellLists = this._cellKeyToChildren.get(cellKey);\n    invariant(cellLists, '_cellKeyToChildren should contain cellKey');\n    cellLists.delete(list);\n\n    if (cellLists.size === 0) {\n      this._cellKeyToChildren.delete(cellKey);\n    }\n  }\n\n  forEach(fn               )       {\n    for (const listSet of this._cellKeyToChildren.values()) {\n      for (const list of listSet) {\n        fn(list);\n      }\n    }\n  }\n\n  forEachInCell(cellKey        , fn               )       {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      fn(list);\n    }\n  }\n\n  anyInCell(cellKey        , fn                  )          {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      if (fn(list)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  size()         {\n    return this._childrenToCellKey.size;\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n'use strict';\n\n                                                             \n\nimport ListMetricsAggregator from './ListMetricsAggregator';\n\n                                \n\nclass Info {\n  any_blank_count         = 0;\n  any_blank_ms         = 0;\n  any_blank_speed_sum         = 0;\n  mostly_blank_count         = 0;\n  mostly_blank_ms         = 0;\n  pixels_blank         = 0;\n  pixels_sampled         = 0;\n  pixels_scrolled         = 0;\n  total_time_spent         = 0;\n  sample_count         = 0;\n}\n\nconst DEBUG = false;\n\nlet _listeners                        = [];\nlet _minSampleCount = 10;\nlet _sampleRate = DEBUG ? 1 : null;\n\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\nclass FillRateHelper {\n  _anyBlankStartTime          = null;\n  _enabled = false;\n  _listMetrics                       ;\n  _info       = new Info();\n  _mostlyBlankStartTime          = null;\n  _samplesStartTime          = null;\n\n  static addListener(callback                      )   \n                       \n       \n    {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n    _listeners.push(callback);\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      },\n    };\n  }\n\n  static setSampleRate(sampleRate        ) {\n    _sampleRate = sampleRate;\n  }\n\n  static setMinSampleCount(minSampleCount        ) {\n    _minSampleCount = minSampleCount;\n  }\n\n  constructor(listMetrics                       ) {\n    this._listMetrics = listMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  }\n\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n    const start = this._samplesStartTime; // const for flow\n    if (start == null) {\n      DEBUG &&\n        console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n      return;\n    }\n    const total_time_spent = global.performance.now() - start;\n    const info      = {\n      ...this._info,\n      total_time_spent,\n    };\n    if (DEBUG) {\n      const derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank:\n          this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min:\n          this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min:\n          this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent,\n      };\n      for (const key in derived) {\n        // $FlowFixMe[prop-missing]\n        // $FlowFixMe[invalid-computed-prop]\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n      console.debug('FillRateHelper deactivateAndFlush: ', {derived, info});\n    }\n    _listeners.forEach(listener => listener(info));\n    this._resetData();\n  }\n\n  computeBlankness(\n    props   \n                         \n                                   \n         \n     ,\n    cellsAroundViewport   \n                    \n                   \n         \n     ,\n    scrollMetrics   \n                      \n                     \n                       \n                            \n         \n     ,\n  )         {\n    if (\n      !this._enabled ||\n      props.getItemCount(props.data) === 0 ||\n      cellsAroundViewport.last < cellsAroundViewport.first ||\n      this._samplesStartTime == null\n    ) {\n      return 0;\n    }\n    const {dOffset, offset, velocity, visibleLength} = scrollMetrics;\n\n    // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    const scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n    const now = global.performance.now();\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n    this._anyBlankStartTime = null;\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n    this._mostlyBlankStartTime = null;\n\n    let blankTop = 0;\n    let first = cellsAroundViewport.first;\n    let firstFrame = this._listMetrics.getCellMetrics(first, props);\n    while (\n      first <= cellsAroundViewport.last &&\n      (!firstFrame || !firstFrame.isMounted)\n    ) {\n      firstFrame = this._listMetrics.getCellMetrics(first, props);\n      first++;\n    }\n    // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(\n        visibleLength,\n        Math.max(0, firstFrame.offset - offset),\n      );\n    }\n    let blankBottom = 0;\n    let last = cellsAroundViewport.last;\n    let lastFrame = this._listMetrics.getCellMetrics(last, props);\n    while (\n      last >= cellsAroundViewport.first &&\n      (!lastFrame || !lastFrame.isMounted)\n    ) {\n      lastFrame = this._listMetrics.getCellMetrics(last, props);\n      last--;\n    }\n    // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      const bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(\n        visibleLength,\n        Math.max(0, offset + visibleLength - bottomEdge),\n      );\n    }\n    const pixels_blank = Math.round(blankTop + blankBottom);\n    const blankness = pixels_blank / visibleLength;\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n    return blankness;\n  }\n\n  enabled()          {\n    return this._enabled;\n  }\n\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n}\n\nmodule.exports = FillRateHelper;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict-local\n * @format\n */\n\n                                                                          \n                                                                        \n\nimport {keyExtractor as defaultKeyExtractor} from './VirtualizeUtils';\nimport invariant from 'invariant';\n\n                           \n     \n                                  \n     \n                \n     \n                                                \n     \n                 \n     \n                                                                             \n         \n     \n                 \n     \n                                                 \n     \n                     \n  \n\n// TODO: `inverted` can be incorporated here if it is moved to an order\n// based implementation instead of transform.\n                               \n                      \n               \n  \n\n/**\n * Subset of VirtualizedList props needed to calculate cell metrics\n */\n                               \n                                     \n                                                     \n                                           \n                                                        \n                                                      \n     \n  \n\n/**\n * Provides an interface to query information about the metrics of a list and its cells.\n */\nexport default class ListMetricsAggregator {\n  _averageCellLength = 0;\n  _cellMetrics                           = new Map();\n  _contentLength         ;\n  _highestMeasuredCellIndex = 0;\n  _measuredCellsLength = 0;\n  _measuredCellsCount = 0;\n  _orientation                  = {\n    horizontal: false,\n    rtl: false,\n  };\n\n  /**\n   * Notify the ListMetricsAggregator that a cell has been laid out.\n   *\n   * @returns whether the cell layout has changed since last notification\n   */\n  notifyCellLayout({\n    cellIndex,\n    cellKey,\n    orientation,\n    layout,\n  }   \n                      \n                    \n                                 \n                   \n   )          {\n    this._invalidateIfOrientationChanged(orientation);\n\n    const next              = {\n      index: cellIndex,\n      length: this._selectLength(layout),\n      isMounted: true,\n      offset: this.flowRelativeOffset(layout),\n    };\n    const curr = this._cellMetrics.get(cellKey);\n\n    if (!curr || next.offset !== curr.offset || next.length !== curr.length) {\n      if (curr) {\n        const dLength = next.length - curr.length;\n        this._measuredCellsLength += dLength;\n      } else {\n        this._measuredCellsLength += next.length;\n        this._measuredCellsCount += 1;\n      }\n\n      this._averageCellLength =\n        this._measuredCellsLength / this._measuredCellsCount;\n      this._cellMetrics.set(cellKey, next);\n      this._highestMeasuredCellIndex = Math.max(\n        this._highestMeasuredCellIndex,\n        cellIndex,\n      );\n      return true;\n    } else {\n      curr.isMounted = true;\n      return false;\n    }\n  }\n\n  /**\n   * Notify ListMetricsAggregator that a cell has been unmounted.\n   */\n  notifyCellUnmounted(cellKey        )       {\n    const curr = this._cellMetrics.get(cellKey);\n    if (curr) {\n      curr.isMounted = false;\n    }\n  }\n\n  /**\n   * Notify ListMetricsAggregator that the lists content container has been laid out.\n   */\n  notifyListContentLayout({\n    orientation,\n    layout,\n  }   \n                                 \n                                                       \n   )       {\n    this._invalidateIfOrientationChanged(orientation);\n    this._contentLength = this._selectLength(layout);\n  }\n\n  /**\n   * Return the average length of the cells which have been measured\n   */\n  getAverageCellLength()         {\n    return this._averageCellLength;\n  }\n\n  /**\n   * Return the highest measured cell index (or 0 if nothing has been measured\n   * yet)\n   */\n  getHighestMeasuredCellIndex()         {\n    return this._highestMeasuredCellIndex;\n  }\n\n  /**\n   * Returns the exact metrics of a cell if it has already been laid out,\n   * otherwise an estimate based on the average length of previously measured\n   * cells\n   */\n  getCellMetricsApprox(index        , props                 )              {\n    const frame = this.getCellMetrics(index, props);\n    if (frame && frame.index === index) {\n      // check for invalid frames due to row re-ordering\n      return frame;\n    } else {\n      let offset;\n\n      const highestMeasuredCellIndex = this.getHighestMeasuredCellIndex();\n      if (highestMeasuredCellIndex < index) {\n        // If any of the cells before this one have been laid out already, we\n        // should use that information in the estimations.\n        // This is important because if the list has a header, the initial cell\n        // will have a larger offset that we should take into account here.\n        const highestMeasuredCellFrame = this.getCellMetrics(\n          highestMeasuredCellIndex,\n          props,\n        );\n        if (highestMeasuredCellFrame) {\n          offset =\n            highestMeasuredCellFrame.offset +\n            highestMeasuredCellFrame.length +\n            this._averageCellLength * (index - highestMeasuredCellIndex - 1);\n        }\n      }\n\n      if (offset == null) {\n        offset = this._averageCellLength * index;\n      }\n\n      const {data, getItemCount} = props;\n      invariant(\n        index >= 0 && index < getItemCount(data),\n        'Tried to get frame for out of range index ' + index,\n      );\n      return {\n        length: this._averageCellLength,\n        offset,\n        index,\n        isMounted: false,\n      };\n    }\n  }\n\n  /**\n   * Returns the exact metrics of a cell if it has already been laid out\n   */\n  getCellMetrics(index        , props                 )               {\n    const {data, getItem, getItemCount, getItemLayout} = props;\n    invariant(\n      index >= 0 && index < getItemCount(data),\n      'Tried to get metrics for out of range cell index ' + index,\n    );\n    const keyExtractor = props.keyExtractor ?? defaultKeyExtractor;\n    const frame = this._cellMetrics.get(\n      keyExtractor(getItem(data, index), index),\n    );\n    if (frame && frame.index === index) {\n      return frame;\n    }\n\n    if (getItemLayout) {\n      const {length, offset} = getItemLayout(data, index);\n      // TODO: `isMounted` is used for both \"is exact layout\" and \"has been\n      // unmounted\". Should be refactored.\n      return {index, length, offset, isMounted: true};\n    }\n\n    return null;\n  }\n\n  /**\n   * Gets an approximate offset to an item at a given index. Supports\n   * fractional indices.\n   */\n  getCellOffsetApprox(index        , props                 )         {\n    if (Number.isInteger(index)) {\n      return this.getCellMetricsApprox(index, props).offset;\n    } else {\n      const frameMetrics = this.getCellMetricsApprox(Math.floor(index), props);\n      const remainder = index - Math.floor(index);\n      return frameMetrics.offset + remainder * frameMetrics.length;\n    }\n  }\n\n  /**\n   * Returns the length of all ScrollView content along the scrolling axis.\n   */\n  getContentLength()         {\n    return this._contentLength ?? 0;\n  }\n\n  /**\n   * Whether a content length has been observed\n   */\n  hasContentLength()          {\n    return this._contentLength != null;\n  }\n\n  /**\n   * Finds the flow-relative offset (e.g. starting from the left in LTR, but\n   * right in RTL) from a layout box.\n   */\n  flowRelativeOffset(layout        , referenceContentLength          )         {\n    const {horizontal, rtl} = this._orientation;\n\n    if (horizontal && rtl) {\n      const contentLength = referenceContentLength ?? this._contentLength;\n      invariant(\n        contentLength != null,\n        'ListMetricsAggregator must be notified of list content layout before resolving offsets',\n      );\n      return (\n        contentLength -\n        (this._selectOffset(layout) + this._selectLength(layout))\n      );\n    } else {\n      return this._selectOffset(layout);\n    }\n  }\n\n  /**\n   * Converts a flow-relative offset to a cartesian offset\n   */\n  cartesianOffset(flowRelativeOffset        )         {\n    const {horizontal, rtl} = this._orientation;\n\n    if (horizontal && rtl) {\n      invariant(\n        this._contentLength != null,\n        'ListMetricsAggregator must be notified of list content layout before resolving offsets',\n      );\n      return this._contentLength - flowRelativeOffset;\n    } else {\n      return flowRelativeOffset;\n    }\n  }\n\n  _invalidateIfOrientationChanged(orientation                 )       {\n    if (orientation.rtl !== this._orientation.rtl) {\n      this._cellMetrics.clear();\n    }\n\n    if (orientation.horizontal !== this._orientation.horizontal) {\n      this._averageCellLength = 0;\n      this._highestMeasuredCellIndex = 0;\n      this._measuredCellsLength = 0;\n      this._measuredCellsCount = 0;\n    }\n\n    this._orientation = orientation;\n  }\n\n  _selectLength({\n    width,\n    height,\n  }                                                 )         {\n    return this._orientation.horizontal ? width : height;\n  }\n\n  _selectOffset({x, y}                                        )         {\n    return this._orientation.horizontal ? x : y;\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n * @format\n */\n\nimport invariant from 'invariant';\nimport * as React from 'react';\n\n/**\n * `setState` is called asynchronously, and should not rely on the value of\n * `this.props` or `this.state`:\n * https://react.dev/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous\n *\n * SafePureComponent adds runtime enforcement, to catch cases where these\n * variables are read in a state updater function, instead of the ones passed\n * in.\n */\nexport default class StateSafePureComponent \n        \n                      \n  extends React.PureComponent               {\n  _inAsyncStateUpdate = false;\n\n  constructor(props       ) {\n    super(props);\n    this._installSetStateHooks();\n  }\n\n  setState(\n    partialState                                                         ,\n    callback              ,\n  )       {\n    if (typeof partialState === 'function') {\n      super.setState((state, props) => {\n        this._inAsyncStateUpdate = true;\n        let ret;\n        try {\n          ret = partialState(state, props);\n        } catch (err) {\n          throw err;\n        } finally {\n          this._inAsyncStateUpdate = false;\n        }\n        return ret;\n      }, callback);\n    } else {\n      super.setState(partialState, callback);\n    }\n  }\n\n  _installSetStateHooks() {\n    const that = this;\n    let {props, state} = this;\n\n    Object.defineProperty(this, 'props', {\n      get() {\n        invariant(\n          !that._inAsyncStateUpdate,\n          '\"this.props\" should not be accessed during state updates',\n        );\n        return props;\n      },\n      set(newProps       ) {\n        props = newProps;\n      },\n    });\n    Object.defineProperty(this, 'state', {\n      get() {\n        invariant(\n          !that._inAsyncStateUpdate,\n          '\"this.state\" should not be acceessed during state updates',\n        );\n        return state;\n      },\n      set(newState       ) {\n        state = newState;\n      },\n    });\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n'use strict';\n\n                                                             \n\nimport ListMetricsAggregator from './ListMetricsAggregator';\n\nconst invariant = require('invariant');\n\n                         \n            \n              \n                 \n                      \n                \n     \n  \n\n                                             \n                                       \n                                  \n                                    \n                              \n       \n             \n     \n  \n\n                                            \n     \n                                                                                                 \n                                                                                                   \n                                                    \n     \n                           \n\n     \n                                                                                       \n                                                                                              \n                                                                                               \n                                                                                               \n     \n                                            \n\n     \n                                                                                                  \n                                                             \n     \n                                       \n\n     \n                                                                                                 \n            \n     \n                               \n    \n\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\nclass ViewabilityHelper {\n  _config                   ;\n  _hasInteracted          = false;\n  _timers              = new Set();\n  _viewableIndices                = [];\n  _viewableItems                         = new Map();\n\n  constructor(\n    config                    = {viewAreaCoveragePercentThreshold: 0},\n  ) {\n    this._config = config;\n  }\n\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n  dispose() {\n    /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n     * comment suppresses an error found when Flow v0.63 was deployed. To see\n     * the error delete this comment and run Flow. */\n    this._timers.forEach(clearTimeout);\n  }\n\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n  computeViewableItems(\n    props                 ,\n    scrollOffset        ,\n    viewportHeight        ,\n    listMetrics                       ,\n    // Optional optimization to reduce the scan size\n    renderRange    \n                    \n                   \n         \n     ,\n  )                {\n    const itemCount = props.getItemCount(props.data);\n    const {itemVisiblePercentThreshold, viewAreaCoveragePercentThreshold} =\n      this._config;\n    const viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    const viewablePercentThreshold = viewAreaMode\n      ? viewAreaCoveragePercentThreshold\n      : itemVisiblePercentThreshold;\n    invariant(\n      viewablePercentThreshold != null &&\n        (itemVisiblePercentThreshold != null) !==\n          (viewAreaCoveragePercentThreshold != null),\n      'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold',\n    );\n    const viewableIndices = [];\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n    let firstVisible = -1;\n    const {first, last} = renderRange || {first: 0, last: itemCount - 1};\n    if (last >= itemCount) {\n      console.warn(\n        'Invalid render range computing viewability ' +\n          JSON.stringify({renderRange, itemCount}),\n      );\n      return [];\n    }\n    for (let idx = first; idx <= last; idx++) {\n      const metrics = listMetrics.getCellMetrics(idx, props);\n      if (!metrics) {\n        continue;\n      }\n      const top = Math.floor(metrics.offset - scrollOffset);\n      const bottom = Math.floor(top + metrics.length);\n\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n        if (\n          _isViewable(\n            viewAreaMode,\n            viewablePercentThreshold,\n            top,\n            bottom,\n            viewportHeight,\n            metrics.length,\n          )\n        ) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n    return viewableIndices;\n  }\n\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n  onUpdate(\n    props                 ,\n    scrollOffset        ,\n    viewportHeight        ,\n    listMetrics                       ,\n    createViewToken   \n                    \n                          \n                             \n                  ,\n    onViewableItemsChanged    \n                                      \n                                \n         \n              ,\n    // Optional optimization to reduce the scan size\n    renderRange    \n                    \n                   \n         \n     ,\n  )       {\n    const itemCount = props.getItemCount(props.data);\n    if (\n      (this._config.waitForInteraction && !this._hasInteracted) ||\n      itemCount === 0 ||\n      !listMetrics.getCellMetrics(0, props)\n    ) {\n      return;\n    }\n    let viewableIndices                = [];\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(\n        props,\n        scrollOffset,\n        viewportHeight,\n        listMetrics,\n        renderRange,\n      );\n    }\n    if (\n      this._viewableIndices.length === viewableIndices.length &&\n      this._viewableIndices.every((v, ii) => v === viewableIndices[ii])\n    ) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n    this._viewableIndices = viewableIndices;\n    if (this._config.minimumViewTime) {\n      const handle            = setTimeout(() => {\n        /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n         * comment suppresses an error found when Flow v0.63 was deployed. To\n         * see the error delete this comment and run Flow. */\n        this._timers.delete(handle);\n        this._onUpdateSync(\n          props,\n          viewableIndices,\n          onViewableItemsChanged,\n          createViewToken,\n        );\n      }, this._config.minimumViewTime);\n      /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n       * comment suppresses an error found when Flow v0.63 was deployed. To see\n       * the error delete this comment and run Flow. */\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(\n        props,\n        viewableIndices,\n        onViewableItemsChanged,\n        createViewToken,\n      );\n    }\n  }\n\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync(\n    props                 ,\n    viewableIndicesToCheck               ,\n    onViewableItemsChanged    \n                                \n                                      \n         \n              ,\n    createViewToken   \n                    \n                          \n                             \n                  ,\n  ) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii =>\n      this._viewableIndices.includes(ii),\n    );\n    const prevItems = this._viewableItems;\n    const nextItems = new Map(\n      viewableIndicesToCheck.map(ii => {\n        const viewable = createViewToken(ii, true, props);\n        return [viewable.key, viewable];\n      }),\n    );\n\n    const changed = [];\n    for (const [key, viewable] of nextItems) {\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n    for (const [key, viewable] of prevItems) {\n      if (!nextItems.has(key)) {\n        changed.push({...viewable, isViewable: false});\n      }\n    }\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config,\n      });\n    }\n  }\n}\n\nfunction _isViewable(\n  viewAreaMode         ,\n  viewablePercentThreshold        ,\n  top        ,\n  bottom        ,\n  viewportHeight        ,\n  itemLength        ,\n)          {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    const pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    const percent =\n      100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(\n  top        ,\n  bottom        ,\n  viewportHeight        ,\n)         {\n  const visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(\n  top        ,\n  bottom        ,\n  viewportHeight        ,\n)          {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nmodule.exports = ViewabilityHelper;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n'use strict';\n\n                                    \n                  \n                                 \n\nimport * as ReactNativeFeatureFlags from 'react-native/src/private/featureflags/ReactNativeFeatureFlags';\n\n/**\n * Used to find the indices of the frames that overlap the given offsets. Useful for finding the\n * items that bound different windows of content, such as the visible area or the buffered overscan\n * area.\n */\nexport function elementsThatOverlapOffsets(\n  offsets               ,\n  props                 ,\n  listMetrics                       ,\n  zoomScale         = 1,\n)                {\n  const itemCount = props.getItemCount(props.data);\n  const result = [];\n  for (let offsetIndex = 0; offsetIndex < offsets.length; offsetIndex++) {\n    const currentOffset = offsets[offsetIndex];\n    let left = 0;\n    let right = itemCount - 1;\n\n    while (left <= right) {\n      const mid = left + Math.floor((right - left) / 2);\n      const frame = listMetrics.getCellMetricsApprox(mid, props);\n      const scaledOffsetStart = frame.offset * zoomScale;\n      const scaledOffsetEnd = (frame.offset + frame.length) * zoomScale;\n\n      // We want the first frame that contains the offset, with inclusive bounds. Thus, for the\n      // first frame the scaledOffsetStart is inclusive, while for other frames it is exclusive.\n      if (\n        (mid === 0 && currentOffset < scaledOffsetStart) ||\n        (mid !== 0 && currentOffset <= scaledOffsetStart)\n      ) {\n        right = mid - 1;\n      } else if (currentOffset > scaledOffsetEnd) {\n        left = mid + 1;\n      } else {\n        result[offsetIndex] = mid;\n        break;\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Computes the number of elements in the `next` range that are new compared to the `prev` range.\n * Handy for calculating how many new items will be rendered when the render window changes so we\n * can restrict the number of new items render at once so that content can appear on the screen\n * faster.\n */\nexport function newRangeCount(\n  prev   \n                  \n                 \n       \n   ,\n  next   \n                  \n                 \n       \n   ,\n)         {\n  return (\n    next.last -\n    next.first +\n    1 -\n    Math.max(\n      0,\n      1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first),\n    )\n  );\n}\n\n/**\n * Custom logic for determining which items should be rendered given the current frame and scroll\n * metrics, as well as the previous render state. The algorithm may evolve over time, but generally\n * prioritizes the visible area first, then expands that with overscan regions ahead and behind,\n * biased in the direction of scroll.\n */\nexport function computeWindowedRenderLimits(\n  props                 ,\n  maxToRenderPerBatch        ,\n  windowSize        ,\n  prev   \n                  \n                 \n   ,\n  listMetrics                       ,\n  scrollMetrics   \n               \n                   \n                     \n                          \n                      \n       \n   ,\n)   \n                \n               \n  {\n  const itemCount = props.getItemCount(props.data);\n  if (itemCount === 0) {\n    return {first: 0, last: -1};\n  }\n  const {offset, velocity, visibleLength, zoomScale = 1} = scrollMetrics;\n\n  // Start with visible area, then compute maximum overscan region by expanding from there, biased\n  // in the direction of scroll. Total overscan area is capped, which should cap memory consumption\n  // too.\n  const visibleBegin = Math.max(0, offset);\n  const visibleEnd = visibleBegin + visibleLength;\n  const overscanLength = (windowSize - 1) * visibleLength;\n\n  // Considering velocity seems to introduce more churn than it's worth.\n  const leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));\n\n  const fillPreference =\n    velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n\n  const overscanBegin = Math.max(\n    0,\n    visibleBegin - (1 - leadFactor) * overscanLength,\n  );\n  const overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n\n  const lastItemOffset =\n    listMetrics.getCellMetricsApprox(itemCount - 1, props).offset * zoomScale;\n  if (lastItemOffset < overscanBegin) {\n    // Entire list is before our overscan window\n    return {\n      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n      last: itemCount - 1,\n    };\n  }\n\n  // Find the indices that correspond to the items at the render boundaries we're targeting.\n  let [overscanFirst, first, last, overscanLast] = elementsThatOverlapOffsets(\n    [overscanBegin, visibleBegin, visibleEnd, overscanEnd],\n    props,\n    listMetrics,\n    zoomScale,\n  );\n  overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n  first = first == null ? Math.max(0, overscanFirst) : first;\n  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n  last =\n    last == null\n      ? Math.min(overscanLast, first + maxToRenderPerBatch - 1)\n      : last;\n  const visible = {first, last};\n\n  // We want to limit the number of new cells we're rendering per batch so that we can fill the\n  // content on the screen quickly. If we rendered the entire overscan window at once, the user\n  // could be staring at white space for a long time waiting for a bunch of offscreen content to\n  // render.\n  let newCellCount = newRangeCount(prev, visible);\n\n  while (true) {\n    if (first <= overscanFirst && last >= overscanLast) {\n      // If we fill the entire overscan range, we're done.\n      break;\n    }\n    const maxNewCells = newCellCount >= maxToRenderPerBatch;\n\n    let firstWillAddMore;\n    let lastWillAddMore;\n\n    if (ReactNativeFeatureFlags.fixVirtualizeListCollapseWindowSize()) {\n      firstWillAddMore = first <= prev.first;\n      lastWillAddMore = last >= prev.last;\n    } else {\n      firstWillAddMore = first <= prev.first || first > prev.last;\n      lastWillAddMore = last >= prev.last || last < prev.first;\n    }\n\n    const firstShouldIncrement =\n      first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n    const lastShouldIncrement =\n      last < overscanLast && (!maxNewCells || !lastWillAddMore);\n    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n      // We only want to stop if we've hit maxNewCells AND we cannot increment first or last\n      // without rendering new items. This let's us preserve as many already rendered items as\n      // possible, reducing render churn and keeping the rendered overscan range as large as\n      // possible.\n      break;\n    }\n    if (\n      firstShouldIncrement &&\n      !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)\n    ) {\n      if (firstWillAddMore) {\n        newCellCount++;\n      }\n      first--;\n    }\n    if (\n      lastShouldIncrement &&\n      !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)\n    ) {\n      if (lastWillAddMore) {\n        newCellCount++;\n      }\n      last++;\n    }\n  }\n  if (\n    !(\n      last >= first &&\n      first >= 0 &&\n      last < itemCount &&\n      first >= overscanFirst &&\n      last <= overscanLast &&\n      first <= visible.first &&\n      last >= visible.last\n    )\n  ) {\n    throw new Error(\n      'Bad window calculation ' +\n        JSON.stringify({\n          first,\n          last,\n          itemCount,\n          overscanFirst,\n          overscanLast,\n          visible,\n        }),\n    );\n  }\n  return {first, last};\n}\n\nexport function keyExtractor(item     , index        )         {\n  if (typeof item === 'object' && item?.key != null) {\n    return item.key;\n  }\n  if (typeof item === 'object' && item?.id != null) {\n    return item.id;\n  }\n  return String(index);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n                                                                              \n                                                   \n             \n       \n        \n                  \n                 \n             \n                                \n                                                                                                 \n                                                                                \n             \n              \n              \n                                                     \n\nimport Batchinator from '../Interaction/Batchinator';\nimport clamp from '../Utilities/clamp';\nimport infoLog from '../Utilities/infoLog';\nimport {CellRenderMask} from './CellRenderMask';\nimport ChildListCollection from './ChildListCollection';\nimport FillRateHelper from './FillRateHelper';\nimport ListMetricsAggregator from './ListMetricsAggregator';\nimport StateSafePureComponent from './StateSafePureComponent';\nimport ViewabilityHelper from './ViewabilityHelper';\nimport CellRenderer from './VirtualizedListCellRenderer';\nimport {\n  VirtualizedListCellContextProvider,\n  VirtualizedListContext,\n  VirtualizedListContextProvider,\n} from './VirtualizedListContext.js';\nimport {\n  horizontalOrDefault,\n  initialNumToRenderOrDefault,\n  maxToRenderPerBatchOrDefault,\n  onEndReachedThresholdOrDefault,\n  onStartReachedThresholdOrDefault,\n  windowSizeOrDefault,\n} from './VirtualizedListProps';\nimport {\n  computeWindowedRenderLimits,\n  keyExtractor as defaultKeyExtractor,\n} from './VirtualizeUtils';\nimport invariant from 'invariant';\nimport nullthrows from 'nullthrows';\nimport * as React from 'react';\nimport {\n  I18nManager,\n  Platform,\n  RefreshControl,\n  ScrollView,\n  StyleSheet,\n  View,\n  findNodeHandle,\n} from 'react-native';\n\n                                                          \n\nconst ON_EDGE_REACHED_EPSILON = 0.001;\n\nlet _usedIndexForKey = false;\nlet _keylessItemComponentName         = '';\n\n                                       \n                                       \n                                  \n                                    \n                              \n       \n             \n     \n  \n\n              \n                             \n                                                     \n                                                                                           \n                               \n                                                                                             \n                                   \n  \n\nfunction getScrollingThreshold(threshold        , visibleLength        ) {\n  return (threshold * visibleLength) / 2;\n}\n\n/**\n * Base implementation for the more convenient [`<FlatList>`](https://reactnative.dev/docs/flatlist)\n * and [`<SectionList>`](https://reactnative.dev/docs/sectionlist) components, which are also better\n * documented. In general, this should only really be used if you need more flexibility than\n * `FlatList` provides, e.g. for use with immutable data instead of plain arrays.\n *\n * Virtualization massively improves memory consumption and performance of large lists by\n * maintaining a finite render window of active items and replacing all items outside of the render\n * window with appropriately sized blank space. The window adapts to scrolling behavior, and items\n * are rendered incrementally with low-pri (after any running interactions) if they are far from the\n * visible area, or with hi-pri otherwise to minimize the potential of seeing blank space.\n *\n * Some caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` or `id` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n * - As an effort to remove defaultProps, use helper functions when referencing certain props\n *\n */\nclass VirtualizedList extends StateSafePureComponent               {\n  static contextType                                = VirtualizedListContext;\n\n  // scrollToEnd may be janky without getItemLayout prop\n  scrollToEnd(params                              ) {\n    const animated = params ? params.animated : true;\n    const veryLast = this.props.getItemCount(this.props.data) - 1;\n    if (veryLast < 0) {\n      return;\n    }\n    const frame = this._listMetrics.getCellMetricsApprox(veryLast, this.props);\n    const offset = Math.max(\n      0,\n      frame.offset +\n        frame.length +\n        this._footerLength -\n        this._scrollMetrics.visibleLength,\n    );\n\n    // TODO: consider using `ref.scrollToEnd` directly\n    this.scrollToOffset({animated, offset});\n  }\n\n  // scrollToIndex may be janky without getItemLayout prop\n  scrollToIndex(params   \n                        \n                  \n                        \n                          \n       \n   )             {\n    const {data, getItemCount, getItemLayout, onScrollToIndexFailed} =\n      this.props;\n    const {animated, index, viewOffset, viewPosition} = params;\n    invariant(\n      index >= 0,\n      `scrollToIndex out of range: requested index ${index} but minimum is 0`,\n    );\n    invariant(\n      getItemCount(data) >= 1,\n      `scrollToIndex out of range: item length ${getItemCount(\n        data,\n      )} but minimum is 1`,\n    );\n    invariant(\n      index < getItemCount(data),\n      `scrollToIndex out of range: requested index ${index} is out of 0 to ${\n        getItemCount(data) - 1\n      }`,\n    );\n    if (\n      !getItemLayout &&\n      index > this._listMetrics.getHighestMeasuredCellIndex()\n    ) {\n      invariant(\n        !!onScrollToIndexFailed,\n        'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' +\n          'otherwise there is no way to know the location of offscreen indices or handle failures.',\n      );\n      onScrollToIndexFailed({\n        averageItemLength: this._listMetrics.getAverageCellLength(),\n        highestMeasuredFrameIndex:\n          this._listMetrics.getHighestMeasuredCellIndex(),\n        index,\n      });\n      return;\n    }\n    const frame = this._listMetrics.getCellMetricsApprox(\n      Math.floor(index),\n      this.props,\n    );\n    const offset =\n      Math.max(\n        0,\n        this._listMetrics.getCellOffsetApprox(index, this.props) -\n          (viewPosition || 0) *\n            (this._scrollMetrics.visibleLength - frame.length),\n      ) - (viewOffset || 0);\n\n    this.scrollToOffset({offset, animated});\n  }\n\n  // scrollToItem may be janky without getItemLayout prop. Required linear scan through items -\n  // use scrollToIndex instead if possible.\n  scrollToItem(params   \n                        \n               \n                        \n                          \n       \n   ) {\n    const {item} = params;\n    const {data, getItem, getItemCount} = this.props;\n    const itemCount = getItemCount(data);\n    for (let index = 0; index < itemCount; index++) {\n      if (getItem(data, index) === item) {\n        this.scrollToIndex({...params, index});\n        break;\n      }\n    }\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Param `offset` expects the offset to scroll to.\n   * In case of `horizontal` is true, the offset is the x-value,\n   * in any other case the offset is the y-value.\n   *\n   * Param `animated` (`true` by default) defines whether the list\n   * should do an animation while scrolling.\n   */\n  scrollToOffset(params                                            ) {\n    const {animated, offset} = params;\n    const scrollRef = this._scrollRef;\n\n    if (scrollRef == null) {\n      return;\n    }\n\n    if (scrollRef.scrollTo == null) {\n      console.warn(\n        'No scrollTo method provided. This may be because you have two nested ' +\n          'VirtualizedLists with the same orientation, or because you are ' +\n          'using a custom component that does not implement scrollTo.',\n      );\n      return;\n    }\n\n    const {horizontal, rtl} = this._orientation();\n    if (horizontal && rtl && !this._listMetrics.hasContentLength()) {\n      console.warn(\n        'scrollToOffset may not be called in RTL before content is laid out',\n      );\n      return;\n    }\n\n    scrollRef.scrollTo({\n      animated,\n      ...this._scrollToParamsFromOffset(offset),\n    });\n  }\n\n  _scrollToParamsFromOffset(offset        )                           {\n    const {horizontal, rtl} = this._orientation();\n    if (horizontal && rtl) {\n      // Add the visible length of the scrollview so that the offset is right-aligned\n      const cartOffset = this._listMetrics.cartesianOffset(\n        offset + this._scrollMetrics.visibleLength,\n      );\n      return horizontal ? {x: cartOffset} : {y: cartOffset};\n    } else {\n      return horizontal ? {x: offset} : {y: offset};\n    }\n  }\n\n  recordInteraction() {\n    this._nestedChildLists.forEach(childList => {\n      childList.recordInteraction();\n    });\n    this._viewabilityTuples.forEach(t => {\n      t.viewabilityHelper.recordInteraction();\n    });\n    this._updateViewableItems(this.props, this.state.cellsAroundViewport);\n  }\n\n  flashScrollIndicators() {\n    if (this._scrollRef == null) {\n      return;\n    }\n\n    this._scrollRef.flashScrollIndicators();\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   * Note that `this._scrollRef` might not be a `ScrollView`, so we\n   * need to check that it responds to `getScrollResponder` before calling it.\n   */\n  getScrollResponder()                       {\n    if (this._scrollRef && this._scrollRef.getScrollResponder) {\n      return this._scrollRef.getScrollResponder();\n    }\n  }\n\n  getScrollableNode()          {\n    if (this._scrollRef && this._scrollRef.getScrollableNode) {\n      return this._scrollRef.getScrollableNode();\n    } else {\n      return findNodeHandle(this._scrollRef);\n    }\n  }\n\n  getScrollRef() \n                                          \n                                     {\n    if (this._scrollRef && this._scrollRef.getScrollRef) {\n      return this._scrollRef.getScrollRef();\n    } else {\n      return this._scrollRef;\n    }\n  }\n\n  setNativeProps(props        ) {\n    if (this._scrollRef) {\n      this._scrollRef.setNativeProps(props);\n    }\n  }\n\n  _getCellKey()         {\n    return this.context?.cellKey || 'rootList';\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  _getScrollMetrics = () => {\n    return this._scrollMetrics;\n  };\n\n  hasMore()          {\n    return this._hasMore;\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  _getOutermostParentListRef = () => {\n    if (this._isNestedWithSameOrientation()) {\n      return this.context.getOutermostParentListRef();\n    } else {\n      return this;\n    }\n  };\n\n  _registerAsNestedChild = (childList   \n                    \n                         \n   )       => {\n    this._nestedChildLists.add(childList.ref, childList.cellKey);\n    if (this._hasInteracted) {\n      childList.ref.recordInteraction();\n    }\n  };\n\n  _unregisterAsNestedChild = (childList                        )       => {\n    this._nestedChildLists.remove(childList.ref);\n  };\n\n  state       ;\n\n  constructor(props       ) {\n    super(props);\n    this._checkProps(props);\n\n    this._fillRateHelper = new FillRateHelper(this._listMetrics);\n    this._updateCellsToRenderBatcher = new Batchinator(\n      this._updateCellsToRender,\n      this.props.updateCellsBatchingPeriod ?? 50,\n    );\n\n    if (this.props.viewabilityConfigCallbackPairs) {\n      this._viewabilityTuples = this.props.viewabilityConfigCallbackPairs.map(\n        pair => ({\n          viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),\n          onViewableItemsChanged: pair.onViewableItemsChanged,\n        }),\n      );\n    } else {\n      const {onViewableItemsChanged, viewabilityConfig} = this.props;\n      if (onViewableItemsChanged) {\n        this._viewabilityTuples.push({\n          viewabilityHelper: new ViewabilityHelper(viewabilityConfig),\n          onViewableItemsChanged: onViewableItemsChanged,\n        });\n      }\n    }\n\n    const initialRenderRegion = VirtualizedList._initialRenderRegion(props);\n\n    const minIndexForVisible =\n      this.props.maintainVisibleContentPosition?.minIndexForVisible ?? 0;\n\n    this.state = {\n      cellsAroundViewport: initialRenderRegion,\n      renderMask: VirtualizedList._createRenderMask(props, initialRenderRegion),\n      firstVisibleItemKey:\n        this.props.getItemCount(this.props.data) > minIndexForVisible\n          ? VirtualizedList._getItemKey(this.props, minIndexForVisible)\n          : null,\n      // When we have a non-zero initialScrollIndex, we will receive a\n      // scroll event later so this will prevent the window from updating\n      // until we get a valid offset.\n      pendingScrollUpdateCount:\n        this.props.initialScrollIndex != null &&\n        this.props.initialScrollIndex > 0\n          ? 1\n          : 0,\n    };\n  }\n\n  _checkProps(props       ) {\n    const {onScroll, windowSize, getItemCount, data, initialScrollIndex} =\n      props;\n\n    invariant(\n      // $FlowFixMe[prop-missing]\n      !onScroll || !onScroll.__isNative,\n      'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' +\n        'to support native onScroll events with useNativeDriver',\n    );\n    invariant(\n      windowSizeOrDefault(windowSize) > 0,\n      'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.',\n    );\n\n    invariant(\n      getItemCount,\n      'VirtualizedList: The \"getItemCount\" prop must be provided',\n    );\n\n    const itemCount = getItemCount(data);\n\n    if (\n      initialScrollIndex != null &&\n      !this._hasTriggeredInitialScrollToIndex &&\n      (initialScrollIndex < 0 ||\n        (itemCount > 0 && initialScrollIndex >= itemCount)) &&\n      !this._hasWarned.initialScrollIndex\n    ) {\n      console.warn(\n        `initialScrollIndex \"${initialScrollIndex}\" is not valid (list has ${itemCount} items)`,\n      );\n      this._hasWarned.initialScrollIndex = true;\n    }\n\n    if (__DEV__ && !this._hasWarned.flexWrap) {\n      // $FlowFixMe[underconstrained-implicit-instantiation]\n      const flatStyles = StyleSheet.flatten(this.props.contentContainerStyle);\n      if (flatStyles != null && flatStyles.flexWrap === 'wrap') {\n        console.warn(\n          '`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' +\n            'Consider using `numColumns` with `FlatList` instead.',\n        );\n        this._hasWarned.flexWrap = true;\n      }\n    }\n  }\n\n  static _findItemIndexWithKey(\n    props       ,\n    key        ,\n    hint         ,\n  )          {\n    const itemCount = props.getItemCount(props.data);\n    if (hint != null && hint >= 0 && hint < itemCount) {\n      const curKey = VirtualizedList._getItemKey(props, hint);\n      if (curKey === key) {\n        return hint;\n      }\n    }\n    for (let ii = 0; ii < itemCount; ii++) {\n      const curKey = VirtualizedList._getItemKey(props, ii);\n      if (curKey === key) {\n        return ii;\n      }\n    }\n    return null;\n  }\n\n  static _getItemKey(\n    props   \n                          \n                                \n                                          \n         \n     ,\n    index        ,\n  )         {\n    const item = props.getItem(props.data, index);\n    return VirtualizedList._keyExtractor(item, index, props);\n  }\n\n  static _createRenderMask(\n    props       ,\n    cellsAroundViewport                               ,\n    additionalRegions                                                 ,\n  )                 {\n    const itemCount = props.getItemCount(props.data);\n\n    invariant(\n      cellsAroundViewport.first >= 0 &&\n        cellsAroundViewport.last >= cellsAroundViewport.first - 1 &&\n        cellsAroundViewport.last < itemCount,\n      `Invalid cells around viewport \"[${cellsAroundViewport.first}, ${cellsAroundViewport.last}]\" was passed to VirtualizedList._createRenderMask`,\n    );\n\n    const renderMask = new CellRenderMask(itemCount);\n\n    if (itemCount > 0) {\n      const allRegions = [cellsAroundViewport, ...(additionalRegions ?? [])];\n      for (const region of allRegions) {\n        renderMask.addCells(region);\n      }\n\n      // The initially rendered cells are retained as part of the\n      // \"scroll-to-top\" optimization\n      if (props.initialScrollIndex == null || props.initialScrollIndex <= 0) {\n        const initialRegion = VirtualizedList._initialRenderRegion(props);\n        renderMask.addCells(initialRegion);\n      }\n\n      // The layout coordinates of sticker headers may be off-screen while the\n      // actual header is on-screen. Keep the most recent before the viewport\n      // rendered, even if its layout coordinates are not in viewport.\n      const stickyIndicesSet = new Set(props.stickyHeaderIndices);\n      VirtualizedList._ensureClosestStickyHeader(\n        props,\n        stickyIndicesSet,\n        renderMask,\n        cellsAroundViewport.first,\n      );\n    }\n\n    return renderMask;\n  }\n\n  static _initialRenderRegion(props       )                                {\n    const itemCount = props.getItemCount(props.data);\n\n    const firstCellIndex = Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(props.initialScrollIndex ?? 0)),\n    );\n\n    const lastCellIndex =\n      Math.min(\n        itemCount,\n        firstCellIndex + initialNumToRenderOrDefault(props.initialNumToRender),\n      ) - 1;\n\n    return {\n      first: firstCellIndex,\n      last: lastCellIndex,\n    };\n  }\n\n  static _ensureClosestStickyHeader(\n    props       ,\n    stickyIndicesSet             ,\n    renderMask                ,\n    cellIdx        ,\n  ) {\n    const stickyOffset = props.ListHeaderComponent ? 1 : 0;\n\n    for (let itemIdx = cellIdx - 1; itemIdx >= 0; itemIdx--) {\n      if (stickyIndicesSet.has(itemIdx + stickyOffset)) {\n        renderMask.addCells({first: itemIdx, last: itemIdx});\n        break;\n      }\n    }\n  }\n\n  _adjustCellsAroundViewport(\n    props       ,\n    cellsAroundViewport                               ,\n    pendingScrollUpdateCount        ,\n  )                                {\n    const {data, getItemCount} = props;\n    const onEndReachedThreshold = onEndReachedThresholdOrDefault(\n      props.onEndReachedThreshold,\n    );\n    const {offset, visibleLength} = this._scrollMetrics;\n    const contentLength = this._listMetrics.getContentLength();\n    const distanceFromEnd = contentLength - visibleLength - offset;\n\n    // Wait until the scroll view metrics have been set up. And until then,\n    // we will trust the initialNumToRender suggestion\n    if (visibleLength <= 0 || contentLength <= 0) {\n      return cellsAroundViewport.last >= getItemCount(data)\n        ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props)\n        : cellsAroundViewport;\n    }\n\n    let newCellsAroundViewport                               ;\n    if (props.disableVirtualization) {\n      const renderAhead =\n        distanceFromEnd < onEndReachedThreshold * visibleLength\n          ? maxToRenderPerBatchOrDefault(props.maxToRenderPerBatch)\n          : 0;\n\n      newCellsAroundViewport = {\n        first: 0,\n        last: Math.min(\n          cellsAroundViewport.last + renderAhead,\n          getItemCount(data) - 1,\n        ),\n      };\n    } else {\n      // If we have a pending scroll update, we should not adjust the render window as it\n      // might override the correct window.\n      if (pendingScrollUpdateCount > 0) {\n        return cellsAroundViewport.last >= getItemCount(data)\n          ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props)\n          : cellsAroundViewport;\n      }\n\n      newCellsAroundViewport = computeWindowedRenderLimits(\n        props,\n        maxToRenderPerBatchOrDefault(props.maxToRenderPerBatch),\n        windowSizeOrDefault(props.windowSize),\n        cellsAroundViewport,\n        this._listMetrics,\n        this._scrollMetrics,\n      );\n      invariant(\n        newCellsAroundViewport.last < getItemCount(data),\n        'computeWindowedRenderLimits() should return range in-bounds',\n      );\n    }\n\n    if (this._nestedChildLists.size() > 0) {\n      // If some cell in the new state has a child list in it, we should only render\n      // up through that item, so that we give that list a chance to render.\n      // Otherwise there's churn from multiple child lists mounting and un-mounting\n      // their items.\n\n      // Will this prevent rendering if the nested list doesn't realize the end?\n      const childIdx = this._findFirstChildWithMore(\n        newCellsAroundViewport.first,\n        newCellsAroundViewport.last,\n      );\n\n      newCellsAroundViewport.last = childIdx ?? newCellsAroundViewport.last;\n    }\n\n    return newCellsAroundViewport;\n  }\n\n  _findFirstChildWithMore(first        , last        )                {\n    for (let ii = first; ii <= last; ii++) {\n      const cellKeyForIndex = this._indicesToKeys.get(ii);\n      if (\n        cellKeyForIndex != null &&\n        this._nestedChildLists.anyInCell(cellKeyForIndex, childList =>\n          childList.hasMore(),\n        )\n      ) {\n        return ii;\n      }\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    if (this._isNestedWithSameOrientation()) {\n      this.context.registerAsNestedChild({\n        ref: this,\n        cellKey: this.context.cellKey,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._isNestedWithSameOrientation()) {\n      this.context.unregisterAsNestedChild({ref: this});\n    }\n    this._updateCellsToRenderBatcher.dispose();\n    this._viewabilityTuples.forEach(tuple => {\n      tuple.viewabilityHelper.dispose();\n    });\n    this._fillRateHelper.deactivateAndFlush();\n  }\n\n  static getDerivedStateFromProps(newProps       , prevState       )        {\n    // first and last could be stale (e.g. if a new, shorter items props is passed in), so we make\n    // sure we're rendering a reasonable range here.\n    const itemCount = newProps.getItemCount(newProps.data);\n    if (itemCount === prevState.renderMask.numCells()) {\n      return prevState;\n    }\n\n    let maintainVisibleContentPositionAdjustment          = null;\n    const prevFirstVisibleItemKey = prevState.firstVisibleItemKey;\n    const minIndexForVisible =\n      newProps.maintainVisibleContentPosition?.minIndexForVisible ?? 0;\n    const newFirstVisibleItemKey =\n      newProps.getItemCount(newProps.data) > minIndexForVisible\n        ? VirtualizedList._getItemKey(newProps, minIndexForVisible)\n        : null;\n    if (\n      newProps.maintainVisibleContentPosition != null &&\n      prevFirstVisibleItemKey != null &&\n      newFirstVisibleItemKey != null\n    ) {\n      if (newFirstVisibleItemKey !== prevFirstVisibleItemKey) {\n        // Fast path if items were added at the start of the list.\n        const hint =\n          itemCount - prevState.renderMask.numCells() + minIndexForVisible;\n        const firstVisibleItemIndex = VirtualizedList._findItemIndexWithKey(\n          newProps,\n          prevFirstVisibleItemKey,\n          hint,\n        );\n        maintainVisibleContentPositionAdjustment =\n          firstVisibleItemIndex != null\n            ? firstVisibleItemIndex - minIndexForVisible\n            : null;\n      } else {\n        maintainVisibleContentPositionAdjustment = null;\n      }\n    }\n\n    const constrainedCells = VirtualizedList._constrainToItemCount(\n      maintainVisibleContentPositionAdjustment != null\n        ? {\n            first:\n              prevState.cellsAroundViewport.first +\n              maintainVisibleContentPositionAdjustment,\n            last:\n              prevState.cellsAroundViewport.last +\n              maintainVisibleContentPositionAdjustment,\n          }\n        : prevState.cellsAroundViewport,\n      newProps,\n    );\n\n    return {\n      cellsAroundViewport: constrainedCells,\n      renderMask: VirtualizedList._createRenderMask(newProps, constrainedCells),\n      firstVisibleItemKey: newFirstVisibleItemKey,\n      pendingScrollUpdateCount:\n        maintainVisibleContentPositionAdjustment != null\n          ? prevState.pendingScrollUpdateCount + 1\n          : prevState.pendingScrollUpdateCount,\n    };\n  }\n\n  _pushCells(\n    cells               ,\n    stickyHeaderIndices               ,\n    stickyIndicesFromProps             ,\n    first        ,\n    last        ,\n    inversionStyle               ,\n  ) {\n    const {\n      CellRendererComponent,\n      ItemSeparatorComponent,\n      ListHeaderComponent,\n      ListItemComponent,\n      data,\n      debug,\n      getItem,\n      getItemCount,\n      getItemLayout,\n      horizontal,\n      renderItem,\n    } = this.props;\n    const stickyOffset = ListHeaderComponent ? 1 : 0;\n    const end = getItemCount(data) - 1;\n    let prevCellKey;\n    last = Math.min(end, last);\n\n    for (let ii = first; ii <= last; ii++) {\n      const item = getItem(data, ii);\n      const key = VirtualizedList._keyExtractor(item, ii, this.props);\n\n      this._indicesToKeys.set(ii, key);\n      if (stickyIndicesFromProps.has(ii + stickyOffset)) {\n        stickyHeaderIndices.push(cells.length);\n      }\n\n      const shouldListenForLayout =\n        getItemLayout == null || debug || this._fillRateHelper.enabled();\n\n      cells.push(\n        <CellRenderer\n          CellRendererComponent={CellRendererComponent}\n          ItemSeparatorComponent={ii < end ? ItemSeparatorComponent : undefined}\n          ListItemComponent={ListItemComponent}\n          cellKey={key}\n          horizontal={horizontal}\n          index={ii}\n          inversionStyle={inversionStyle}\n          item={item}\n          key={key}\n          prevCellKey={prevCellKey}\n          onUpdateSeparators={this._onUpdateSeparators}\n          onCellFocusCapture={this._onCellFocusCapture}\n          onUnmount={this._onCellUnmount}\n          ref={ref => {\n            this._cellRefs[key] = ref;\n          }}\n          renderItem={renderItem}\n          {...(shouldListenForLayout && {\n            onCellLayout: this._onCellLayout,\n          })}\n        />,\n      );\n      prevCellKey = key;\n    }\n  }\n\n  static _constrainToItemCount(\n    cells                               ,\n    props       ,\n  )                                {\n    const itemCount = props.getItemCount(props.data);\n    const lastPossibleCellIndex = itemCount - 1;\n\n    // Constraining `last` may significantly shrink the window. Adjust `first`\n    // to expand the window if the new `last` results in a new window smaller\n    // than the number of cells rendered per batch.\n    const maxToRenderPerBatch = maxToRenderPerBatchOrDefault(\n      props.maxToRenderPerBatch,\n    );\n    const maxFirst = Math.max(0, lastPossibleCellIndex - maxToRenderPerBatch);\n\n    return {\n      first: clamp(0, cells.first, maxFirst),\n      last: Math.min(lastPossibleCellIndex, cells.last),\n    };\n  }\n\n  _onUpdateSeparators = (keys                , newProps        ) => {\n    keys.forEach(key => {\n      const ref = key != null && this._cellRefs[key];\n      ref && ref.updateSeparatorProps(newProps);\n    });\n  };\n\n  _isNestedWithSameOrientation()          {\n    const nestedContext = this.context;\n    return !!(\n      nestedContext &&\n      !!nestedContext.horizontal === horizontalOrDefault(this.props.horizontal)\n    );\n  }\n\n  _getSpacerKey = (isVertical         )         =>\n    isVertical ? 'height' : 'width';\n\n  static _keyExtractor(\n    item      ,\n    index        ,\n    props   \n                                                            \n         \n     ,\n  )         {\n    if (props.keyExtractor != null) {\n      return props.keyExtractor(item, index);\n    }\n\n    const key = defaultKeyExtractor(item, index);\n    if (key === String(index)) {\n      _usedIndexForKey = true;\n      if (item.type && item.type.displayName) {\n        _keylessItemComponentName = item.type.displayName;\n      }\n    }\n    return key;\n  }\n\n  render()             {\n    this._checkProps(this.props);\n    const {ListEmptyComponent, ListFooterComponent, ListHeaderComponent} =\n      this.props;\n    const {data, horizontal} = this.props;\n    const inversionStyle = this.props.inverted\n      ? horizontalOrDefault(this.props.horizontal)\n        ? styles.horizontallyInverted\n        : styles.verticallyInverted\n      : null;\n    const cells                          = [];\n    const stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);\n    const stickyHeaderIndices = [];\n\n    // 1. Add cell for ListHeaderComponent\n    if (ListHeaderComponent) {\n      if (stickyIndicesFromProps.has(0)) {\n        stickyHeaderIndices.push(0);\n      }\n      const element = React.isValidElement(ListHeaderComponent) ? (\n        ListHeaderComponent\n      ) : (\n        // $FlowFixMe[not-a-component]\n        // $FlowFixMe[incompatible-type-arg]\n        <ListHeaderComponent />\n      );\n      cells.push(\n        <VirtualizedListCellContextProvider\n          cellKey={this._getCellKey() + '-header'}\n          key=\"$header\">\n          <View\n            // We expect that header component will be a single native view so make it\n            // not collapsable to avoid this view being flattened and make this assumption\n            // no longer true.\n            collapsable={false}\n            onLayout={this._onLayoutHeader}\n            style={StyleSheet.compose(\n              inversionStyle,\n              this.props.ListHeaderComponentStyle,\n            )}>\n            {\n              // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors\n              element\n            }\n          </View>\n        </VirtualizedListCellContextProvider>,\n      );\n    }\n\n    // 2a. Add a cell for ListEmptyComponent if applicable\n    const itemCount = this.props.getItemCount(data);\n    if (itemCount === 0 && ListEmptyComponent) {\n      const element                                    = ((React.isValidElement(\n        ListEmptyComponent,\n      ) ? (\n        ListEmptyComponent\n      ) : (\n        // $FlowFixMe[not-a-component]\n        // $FlowFixMe[incompatible-type-arg]\n        <ListEmptyComponent />\n      ))     );\n      cells.push(\n        <VirtualizedListCellContextProvider\n          cellKey={this._getCellKey() + '-empty'}\n          key=\"$empty\">\n          {React.cloneElement(element, {\n            onLayout: (event             ) => {\n              this._onLayoutEmpty(event);\n              // $FlowFixMe[prop-missing] React.Element internal inspection\n              if (element.props.onLayout) {\n                element.props.onLayout(event);\n              }\n            },\n            // $FlowFixMe[prop-missing] React.Element internal inspection\n            style: StyleSheet.compose(inversionStyle, element.props.style),\n          })}\n        </VirtualizedListCellContextProvider>,\n      );\n    }\n\n    // 2b. Add cells and spacers for each item\n    if (itemCount > 0) {\n      _usedIndexForKey = false;\n      _keylessItemComponentName = '';\n      const spacerKey = this._getSpacerKey(!horizontal);\n\n      const renderRegions = this.state.renderMask.enumerateRegions();\n      const lastRegion = renderRegions[renderRegions.length - 1];\n      const lastSpacer = lastRegion?.isSpacer ? lastRegion : null;\n\n      for (const section of renderRegions) {\n        if (section.isSpacer) {\n          // Legacy behavior is to avoid spacers when virtualization is\n          // disabled (including head spacers on initial render).\n          if (this.props.disableVirtualization) {\n            continue;\n          }\n\n          // Without getItemLayout, we limit our tail spacer to the _highestMeasuredFrameIndex to\n          // prevent the user for hyperscrolling into un-measured area because otherwise content will\n          // likely jump around as it renders in above the viewport.\n          const isLastSpacer = section === lastSpacer;\n          const constrainToMeasured = isLastSpacer && !this.props.getItemLayout;\n          const last = constrainToMeasured\n            ? clamp(\n                section.first - 1,\n                section.last,\n                this._listMetrics.getHighestMeasuredCellIndex(),\n              )\n            : section.last;\n\n          const firstMetrics = this._listMetrics.getCellMetricsApprox(\n            section.first,\n            this.props,\n          );\n          const lastMetrics = this._listMetrics.getCellMetricsApprox(\n            last,\n            this.props,\n          );\n          const spacerSize =\n            lastMetrics.offset + lastMetrics.length - firstMetrics.offset;\n          cells.push(\n            <View\n              key={`$spacer-${section.first}`}\n              // $FlowFixMe[incompatible-type]\n              style={{[spacerKey]: spacerSize}}\n            />,\n          );\n        } else {\n          this._pushCells(\n            cells,\n            stickyHeaderIndices,\n            stickyIndicesFromProps,\n            section.first,\n            section.last,\n            inversionStyle,\n          );\n        }\n      }\n\n      if (!this._hasWarned.keys && _usedIndexForKey) {\n        console.warn(\n          'VirtualizedList: missing keys for items, make sure to specify a key or id property on each ' +\n            'item or provide a custom keyExtractor.',\n          _keylessItemComponentName,\n        );\n        this._hasWarned.keys = true;\n      }\n    }\n\n    // 3. Add cell for ListFooterComponent\n    if (ListFooterComponent) {\n      const element = React.isValidElement(ListFooterComponent) ? (\n        ListFooterComponent\n      ) : (\n        // $FlowFixMe[not-a-component]\n        // $FlowFixMe[incompatible-type-arg]\n        <ListFooterComponent />\n      );\n      cells.push(\n        <VirtualizedListCellContextProvider\n          cellKey={this._getFooterCellKey()}\n          key=\"$footer\">\n          <View\n            onLayout={this._onLayoutFooter}\n            style={StyleSheet.compose(\n              inversionStyle,\n              this.props.ListFooterComponentStyle,\n            )}>\n            {\n              // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors\n              element\n            }\n          </View>\n        </VirtualizedListCellContextProvider>,\n      );\n    }\n\n    // 4. Render the ScrollView\n    const scrollProps = {\n      ...this.props,\n      onContentSizeChange: this._onContentSizeChange,\n      onLayout: this._onLayout,\n      onScroll: this._onScroll,\n      onScrollBeginDrag: this._onScrollBeginDrag,\n      onScrollEndDrag: this._onScrollEndDrag,\n      onMomentumScrollBegin: this._onMomentumScrollBegin,\n      onMomentumScrollEnd: this._onMomentumScrollEnd,\n      // iOS/macOS requires a non-zero scrollEventThrottle to fire more than a\n      // single notification while scrolling. This will otherwise no-op.\n      scrollEventThrottle: this.props.scrollEventThrottle ?? 0.0001,\n      invertStickyHeaders:\n        this.props.invertStickyHeaders !== undefined\n          ? this.props.invertStickyHeaders\n          : this.props.inverted,\n      stickyHeaderIndices,\n      style: inversionStyle\n        ? [inversionStyle, this.props.style]\n        : this.props.style,\n      isInvertedVirtualizedList: this.props.inverted,\n      maintainVisibleContentPosition:\n        this.props.maintainVisibleContentPosition != null\n          ? {\n              ...this.props.maintainVisibleContentPosition,\n              // Adjust index to account for ListHeaderComponent.\n              minIndexForVisible:\n                this.props.maintainVisibleContentPosition.minIndexForVisible +\n                (this.props.ListHeaderComponent ? 1 : 0),\n            }\n          : undefined,\n    };\n\n    this._hasMore = this.state.cellsAroundViewport.last < itemCount - 1;\n\n    const innerRet = (\n      <VirtualizedListContextProvider\n        value={{\n          cellKey: null,\n          getScrollMetrics: this._getScrollMetrics,\n          horizontal: horizontalOrDefault(this.props.horizontal),\n          getOutermostParentListRef: this._getOutermostParentListRef,\n          registerAsNestedChild: this._registerAsNestedChild,\n          unregisterAsNestedChild: this._unregisterAsNestedChild,\n        }}>\n        {React.cloneElement(\n          (\n            this.props.renderScrollComponent ||\n            this._defaultRenderScrollComponent\n          )(scrollProps),\n          {\n            ref: this._captureScrollRef,\n          },\n          cells,\n        )}\n      </VirtualizedListContextProvider>\n    );\n    let ret             = innerRet;\n    if (__DEV__) {\n      ret = (\n        <ScrollView.Context.Consumer>\n          {scrollContext => {\n            if (\n              scrollContext != null &&\n              !scrollContext.horizontal ===\n                !horizontalOrDefault(this.props.horizontal) &&\n              !this._hasWarned.nesting &&\n              this.context == null &&\n              this.props.scrollEnabled !== false\n            ) {\n              console.error(\n                'VirtualizedLists should never be nested inside plain ScrollViews with the same ' +\n                  'orientation because it can break windowing and other functionality - use another ' +\n                  'VirtualizedList-backed container instead.',\n              );\n              this._hasWarned.nesting = true;\n            }\n            return innerRet;\n          }}\n        </ScrollView.Context.Consumer>\n      );\n    }\n    if (this.props.debug) {\n      return (\n        <View style={styles.debug}>\n          {ret}\n          {this._renderDebugOverlay()}\n        </View>\n      );\n    } else {\n      return ret;\n    }\n  }\n\n  componentDidUpdate(prevProps       ) {\n    const {data, extraData, getItemLayout} = this.props;\n    if (data !== prevProps.data || extraData !== prevProps.extraData) {\n      // clear the viewableIndices cache to also trigger\n      // the onViewableItemsChanged callback with the new data\n      this._viewabilityTuples.forEach(tuple => {\n        tuple.viewabilityHelper.resetViewableIndices();\n      });\n    }\n    // The `this._hiPriInProgress` is guaranteeing a hiPri cell update will only happen\n    // once per fiber update. The `_scheduleCellsToRenderUpdate` will set it to true\n    // if a hiPri update needs to perform. If `componentDidUpdate` is triggered with\n    // `this._hiPriInProgress=true`, means it's triggered by the hiPri update. The\n    // `_scheduleCellsToRenderUpdate` will check this condition and not perform\n    // another hiPri update.\n    const hiPriInProgress = this._hiPriInProgress;\n    this._scheduleCellsToRenderUpdate();\n    // Make sure setting `this._hiPriInProgress` back to false after `componentDidUpdate`\n    // is triggered with `this._hiPriInProgress = true`\n    if (hiPriInProgress) {\n      this._hiPriInProgress = false;\n    }\n\n    // We only call `onEndReached` after we render the last cell, but when\n    // getItemLayout is present, we can scroll past the last rendered cell, and\n    // never trigger a new layout or bounds change, so we need to check again\n    // after rendering more cells.\n    if (getItemLayout != null) {\n      this._maybeCallOnEdgeReached();\n    }\n  }\n\n  _cellRefs                                       = {};\n  _fillRateHelper                ;\n  _listMetrics                        = new ListMetricsAggregator();\n  _footerLength = 0;\n  // Used for preventing scrollToIndex from being called multiple times for initialScrollIndex\n  _hasTriggeredInitialScrollToIndex = false;\n  _hasInteracted = false;\n  _hasMore = false;\n  _hasWarned                      = {};\n  _headerLength = 0;\n  _hiPriInProgress          = false; // flag to prevent infinite hiPri cell limit update\n  _indicesToKeys                      = new Map();\n  _lastFocusedCellKey          = null;\n  _nestedChildLists                                       =\n    new ChildListCollection();\n  _offsetFromParentVirtualizedList         = 0;\n  _pendingViewabilityUpdate          = false;\n  _prevParentOffset         = 0;\n  _scrollMetrics   \n                    \n               \n                   \n                      \n                     \n                          \n                      \n    = {\n    dOffset: 0,\n    dt: 10,\n    offset: 0,\n    timestamp: 0,\n    velocity: 0,\n    visibleLength: 0,\n    zoomScale: 1,\n  };\n  _scrollRef                         = null;\n  _sentStartForContentLength = 0;\n  _sentEndForContentLength = 0;\n  _updateCellsToRenderBatcher             ;\n  _viewabilityTuples                                        = [];\n\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  _captureScrollRef = ref => {\n    this._scrollRef = ref;\n  };\n\n  _computeBlankness() {\n    this._fillRateHelper.computeBlankness(\n      this.props,\n      this.state.cellsAroundViewport,\n      this._scrollMetrics,\n    );\n  }\n\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  _defaultRenderScrollComponent = props => {\n    const onRefresh = props.onRefresh;\n    if (this._isNestedWithSameOrientation()) {\n      // Prevent VirtualizedList._onContentSizeChange from being triggered by a bubbling onContentSizeChange event.\n      // This could lead to internal inconsistencies within VirtualizedList.\n      const {onContentSizeChange, ...otherProps} = props;\n      return <View {...otherProps} />;\n    } else if (onRefresh) {\n      invariant(\n        typeof props.refreshing === 'boolean',\n        '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' +\n          JSON.stringify(props.refreshing ?? 'undefined') +\n          '`',\n      );\n      return (\n        // $FlowFixMe[prop-missing] Invalid prop usage\n        // $FlowFixMe[incompatible-use]\n        <ScrollView\n          {...props}\n          refreshControl={\n            props.refreshControl == null ? (\n              <RefreshControl\n                // $FlowFixMe[incompatible-type]\n                refreshing={props.refreshing}\n                onRefresh={onRefresh}\n                progressViewOffset={props.progressViewOffset}\n              />\n            ) : (\n              props.refreshControl\n            )\n          }\n        />\n      );\n    } else {\n      // $FlowFixMe[prop-missing] Invalid prop usage\n      // $FlowFixMe[incompatible-use]\n      return <ScrollView {...props} />;\n    }\n  };\n\n  _onCellLayout = (\n    e             ,\n    cellKey        ,\n    cellIndex        ,\n  )       => {\n    const layoutHasChanged = this._listMetrics.notifyCellLayout({\n      cellIndex,\n      cellKey,\n      layout: e.nativeEvent.layout,\n      orientation: this._orientation(),\n    });\n\n    if (layoutHasChanged) {\n      this._scheduleCellsToRenderUpdate();\n    }\n\n    this._triggerRemeasureForChildListsInCell(cellKey);\n    this._computeBlankness();\n    this._updateViewableItems(this.props, this.state.cellsAroundViewport);\n  };\n\n  _onCellFocusCapture = (cellKey        ) => {\n    this._lastFocusedCellKey = cellKey;\n    this._updateCellsToRender();\n  };\n\n  _onCellUnmount = (cellKey        ) => {\n    delete this._cellRefs[cellKey];\n    this._listMetrics.notifyCellUnmounted(cellKey);\n  };\n\n  _triggerRemeasureForChildListsInCell(cellKey        )       {\n    this._nestedChildLists.forEachInCell(cellKey, childList => {\n      childList.measureLayoutRelativeToContainingList();\n    });\n  }\n\n  measureLayoutRelativeToContainingList()       {\n    // TODO (T35574538): findNodeHandle sometimes crashes with \"Unable to find\n    // node on an unmounted component\" during scrolling\n    try {\n      if (!this._scrollRef) {\n        return;\n      }\n      // We are assuming that getOutermostParentListRef().getScrollRef()\n      // is a non-null reference to a ScrollView\n      this._scrollRef.measureLayout(\n        this.context.getOutermostParentListRef().getScrollRef(),\n        (x, y, width, height) => {\n          this._offsetFromParentVirtualizedList = this._selectOffset({x, y});\n          this._listMetrics.notifyListContentLayout({\n            layout: {width, height},\n            orientation: this._orientation(),\n          });\n          const scrollMetrics = this._convertParentScrollMetrics(\n            this.context.getScrollMetrics(),\n          );\n\n          const metricsChanged =\n            this._scrollMetrics.visibleLength !== scrollMetrics.visibleLength ||\n            this._scrollMetrics.offset !== scrollMetrics.offset;\n\n          if (metricsChanged) {\n            this._scrollMetrics.visibleLength = scrollMetrics.visibleLength;\n            this._scrollMetrics.offset = scrollMetrics.offset;\n\n            // If metrics of the scrollView changed, then we triggered remeasure for child list\n            // to ensure VirtualizedList has the right information.\n            this._nestedChildLists.forEach(childList => {\n              childList.measureLayoutRelativeToContainingList();\n            });\n          }\n        },\n        error => {\n          console.warn(\n            \"VirtualizedList: Encountered an error while measuring a list's\" +\n              ' offset from its containing VirtualizedList.',\n          );\n        },\n      );\n    } catch (error) {\n      console.warn(\n        'measureLayoutRelativeToContainingList threw an error',\n        error.stack,\n      );\n    }\n  }\n\n  _onLayout = (e             ) => {\n    if (this._isNestedWithSameOrientation()) {\n      // Need to adjust our scroll metrics to be relative to our containing\n      // VirtualizedList before we can make claims about list item viewability\n      this.measureLayoutRelativeToContainingList();\n    } else {\n      this._scrollMetrics.visibleLength = this._selectLength(\n        e.nativeEvent.layout,\n      );\n    }\n    this.props.onLayout && this.props.onLayout(e);\n    this._scheduleCellsToRenderUpdate();\n    this._maybeCallOnEdgeReached();\n  };\n\n  _onLayoutEmpty = (e             ) => {\n    this.props.onLayout && this.props.onLayout(e);\n  };\n\n  _getFooterCellKey()         {\n    return this._getCellKey() + '-footer';\n  }\n\n  _onLayoutFooter = (e             ) => {\n    this._triggerRemeasureForChildListsInCell(this._getFooterCellKey());\n    this._footerLength = this._selectLength(e.nativeEvent.layout);\n  };\n\n  _onLayoutHeader = (e             ) => {\n    this._headerLength = this._selectLength(e.nativeEvent.layout);\n  };\n\n  // $FlowFixMe[missing-local-annot]\n  _renderDebugOverlay() {\n    const normalize =\n      this._scrollMetrics.visibleLength /\n      (this._listMetrics.getContentLength() || 1);\n    const framesInLayout = [];\n    const itemCount = this.props.getItemCount(this.props.data);\n    for (let ii = 0; ii < itemCount; ii++) {\n      const frame = this._listMetrics.getCellMetricsApprox(ii, this.props);\n      if (frame.isMounted) {\n        framesInLayout.push(frame);\n      }\n    }\n    const windowTop = this._listMetrics.getCellMetricsApprox(\n      this.state.cellsAroundViewport.first,\n      this.props,\n    ).offset;\n    const frameLast = this._listMetrics.getCellMetricsApprox(\n      this.state.cellsAroundViewport.last,\n      this.props,\n    );\n    const windowLen = frameLast.offset + frameLast.length - windowTop;\n    const visTop = this._scrollMetrics.offset;\n    const visLen = this._scrollMetrics.visibleLength;\n\n    return (\n      <View style={[styles.debugOverlayBase, styles.debugOverlay]}>\n        {framesInLayout.map((f, ii) => (\n          <View\n            key={'f' + ii}\n            style={[\n              styles.debugOverlayBase,\n              styles.debugOverlayFrame,\n              {\n                top: f.offset * normalize,\n                height: f.length * normalize,\n              },\n            ]}\n          />\n        ))}\n        <View\n          style={[\n            styles.debugOverlayBase,\n            styles.debugOverlayFrameLast,\n            {\n              top: windowTop * normalize,\n              height: windowLen * normalize,\n            },\n          ]}\n        />\n        <View\n          style={[\n            styles.debugOverlayBase,\n            styles.debugOverlayFrameVis,\n            {\n              top: visTop * normalize,\n              height: visLen * normalize,\n            },\n          ]}\n        />\n      </View>\n    );\n  }\n\n  _selectLength(\n    metrics             \n                     \n                    \n         \n      ,\n  )         {\n    return !horizontalOrDefault(this.props.horizontal)\n      ? metrics.height\n      : metrics.width;\n  }\n\n  _selectOffset({x, y}                                        )         {\n    return this._orientation().horizontal ? x : y;\n  }\n\n  _orientation()                  {\n    return {\n      horizontal: horizontalOrDefault(this.props.horizontal),\n      rtl: I18nManager.isRTL,\n    };\n  }\n\n  _maybeCallOnEdgeReached() {\n    const {\n      data,\n      getItemCount,\n      onStartReached,\n      onStartReachedThreshold,\n      onEndReached,\n      onEndReachedThreshold,\n    } = this.props;\n    // Wait until we have real metrics\n    if (\n      !this._listMetrics.hasContentLength() ||\n      this._scrollMetrics.visibleLength === 0\n    ) {\n      return;\n    }\n\n    // If we have any pending scroll updates it means that the scroll metrics\n    // are out of date and we should not call any of the edge reached callbacks.\n    if (this.state.pendingScrollUpdateCount > 0) {\n      return;\n    }\n\n    const {visibleLength, offset} = this._scrollMetrics;\n    let distanceFromStart = offset;\n    let distanceFromEnd =\n      this._listMetrics.getContentLength() - visibleLength - offset;\n\n    // Especially when oERT is zero it's necessary to 'floor' very small distance values to be 0\n    // since debouncing causes us to not fire this event for every single \"pixel\" we scroll and can thus\n    // be at the edge of the list with a distance approximating 0 but not quite there.\n    if (distanceFromStart < ON_EDGE_REACHED_EPSILON) {\n      distanceFromStart = 0;\n    }\n    if (distanceFromEnd < ON_EDGE_REACHED_EPSILON) {\n      distanceFromEnd = 0;\n    }\n\n    // TODO: T121172172 Look into why we're \"defaulting\" to a threshold of 2px\n    // when oERT is not present (different from 2 viewports used elsewhere)\n    const DEFAULT_THRESHOLD_PX = 2;\n\n    const startThreshold =\n      onStartReachedThreshold != null\n        ? onStartReachedThreshold * visibleLength\n        : DEFAULT_THRESHOLD_PX;\n    const endThreshold =\n      onEndReachedThreshold != null\n        ? onEndReachedThreshold * visibleLength\n        : DEFAULT_THRESHOLD_PX;\n    const isWithinStartThreshold = distanceFromStart <= startThreshold;\n    const isWithinEndThreshold = distanceFromEnd <= endThreshold;\n\n    // First check if the user just scrolled within the end threshold\n    // and call onEndReached only once for a given content length,\n    // and only if onStartReached is not being executed\n    if (\n      onEndReached &&\n      this.state.cellsAroundViewport.last === getItemCount(data) - 1 &&\n      isWithinEndThreshold &&\n      this._listMetrics.getContentLength() !== this._sentEndForContentLength\n    ) {\n      this._sentEndForContentLength = this._listMetrics.getContentLength();\n      onEndReached({distanceFromEnd});\n    }\n\n    // Next check if the user just scrolled within the start threshold\n    // and call onStartReached only once for a given content length,\n    // and only if onEndReached is not being executed\n    if (\n      onStartReached != null &&\n      this.state.cellsAroundViewport.first === 0 &&\n      isWithinStartThreshold &&\n      this._listMetrics.getContentLength() !== this._sentStartForContentLength\n    ) {\n      this._sentStartForContentLength = this._listMetrics.getContentLength();\n      onStartReached({distanceFromStart});\n    }\n\n    // If the user scrolls away from the start or end and back again,\n    // cause onStartReached or onEndReached to be triggered again\n    if (!isWithinStartThreshold) {\n      this._sentStartForContentLength = 0;\n    }\n    if (!isWithinEndThreshold) {\n      this._sentEndForContentLength = 0;\n    }\n  }\n\n  _onContentSizeChange = (width        , height        ) => {\n    this._listMetrics.notifyListContentLayout({\n      layout: {width, height},\n      orientation: this._orientation(),\n    });\n\n    this._maybeScrollToInitialScrollIndex(width, height);\n\n    if (this.props.onContentSizeChange) {\n      this.props.onContentSizeChange(width, height);\n    }\n    this._scheduleCellsToRenderUpdate();\n    this._maybeCallOnEdgeReached();\n  };\n\n  /**\n   * Scroll to a specified `initialScrollIndex` prop after the ScrollView\n   * content has been laid out, if it is still valid. Only a single scroll is\n   * triggered throughout the lifetime of the list.\n   */\n  _maybeScrollToInitialScrollIndex(\n    contentWidth        ,\n    contentHeight        ,\n  ) {\n    if (\n      contentWidth > 0 &&\n      contentHeight > 0 &&\n      this.props.initialScrollIndex != null &&\n      this.props.initialScrollIndex > 0 &&\n      !this._hasTriggeredInitialScrollToIndex\n    ) {\n      if (this.props.contentOffset == null) {\n        if (\n          this.props.initialScrollIndex <\n          this.props.getItemCount(this.props.data)\n        ) {\n          this.scrollToIndex({\n            animated: false,\n            index: nullthrows(this.props.initialScrollIndex),\n          });\n        } else {\n          this.scrollToEnd({animated: false});\n        }\n      }\n      this._hasTriggeredInitialScrollToIndex = true;\n    }\n  }\n\n  /* Translates metrics from a scroll event in a parent VirtualizedList into\n   * coordinates relative to the child list.\n   */\n  _convertParentScrollMetrics = (metrics   \n                          \n                   \n       \n   )             => {\n    // Offset of the top of the nested list relative to the top of its parent's viewport\n    const offset = metrics.offset - this._offsetFromParentVirtualizedList;\n    // Child's visible length is the same as its parent's\n    const visibleLength = metrics.visibleLength;\n    const dOffset = offset - this._scrollMetrics.offset;\n    const contentLength = this._listMetrics.getContentLength();\n\n    return {\n      visibleLength,\n      contentLength,\n      offset,\n      dOffset,\n    };\n  };\n\n  unstable_onScroll(e        ) {\n    this._onScroll(e);\n  }\n\n  _onScroll = (e        ) => {\n    this._nestedChildLists.forEach(childList => {\n      childList._onScroll(e);\n    });\n    if (this.props.onScroll) {\n      this.props.onScroll(e);\n    }\n    const timestamp = e.timeStamp;\n    let visibleLength = this._selectLength(e.nativeEvent.layoutMeasurement);\n    let contentLength = this._selectLength(e.nativeEvent.contentSize);\n    let offset = this._offsetFromScrollEvent(e);\n    let dOffset = offset - this._scrollMetrics.offset;\n\n    if (this._isNestedWithSameOrientation()) {\n      if (this._listMetrics.getContentLength() === 0) {\n        // Ignore scroll events until onLayout has been called and we\n        // know our offset from our offset from our parent\n        return;\n      }\n      ({visibleLength, contentLength, offset, dOffset} =\n        this._convertParentScrollMetrics({\n          visibleLength,\n          offset,\n        }));\n    }\n\n    const dt = this._scrollMetrics.timestamp\n      ? Math.max(1, timestamp - this._scrollMetrics.timestamp)\n      : 1;\n    const velocity = dOffset / dt;\n\n    if (\n      dt > 500 &&\n      this._scrollMetrics.dt > 500 &&\n      contentLength > 5 * visibleLength &&\n      !this._hasWarned.perf\n    ) {\n      infoLog(\n        'VirtualizedList: You have a large list that is slow to update - make sure your ' +\n          'renderItem function renders components that follow React performance best practices ' +\n          'like PureComponent, shouldComponentUpdate, etc.',\n        {dt, prevDt: this._scrollMetrics.dt, contentLength},\n      );\n      this._hasWarned.perf = true;\n    }\n\n    // For invalid negative values (w/ RTL), set this to 1.\n    const zoomScale = e.nativeEvent.zoomScale < 0 ? 1 : e.nativeEvent.zoomScale;\n    this._scrollMetrics = {\n      dt,\n      dOffset,\n      offset,\n      timestamp,\n      velocity,\n      visibleLength,\n      zoomScale,\n    };\n    if (this.state.pendingScrollUpdateCount > 0) {\n      this.setState(state => ({\n        pendingScrollUpdateCount: state.pendingScrollUpdateCount - 1,\n      }));\n    }\n    this._updateViewableItems(this.props, this.state.cellsAroundViewport);\n    if (!this.props) {\n      return;\n    }\n    this._maybeCallOnEdgeReached();\n    if (velocity !== 0) {\n      this._fillRateHelper.activate();\n    }\n    this._computeBlankness();\n    this._scheduleCellsToRenderUpdate();\n  };\n\n  _offsetFromScrollEvent(e             )         {\n    const {contentOffset, contentSize, layoutMeasurement} = e.nativeEvent;\n    const {horizontal, rtl} = this._orientation();\n    if (horizontal && rtl) {\n      return (\n        this._selectLength(contentSize) -\n        (this._selectOffset(contentOffset) +\n          this._selectLength(layoutMeasurement))\n      );\n    } else {\n      return this._selectOffset(contentOffset);\n    }\n  }\n\n  _scheduleCellsToRenderUpdate() {\n    // Only trigger high-priority updates if we've actually rendered cells,\n    // and with that size estimate, accurately compute how many cells we should render.\n    // Otherwise, it would just render as many cells as it can (of zero dimension),\n    // each time through attempting to render more (limited by maxToRenderPerBatch),\n    // starving the renderer from actually laying out the objects and computing _averageCellLength.\n    // If this is triggered in an `componentDidUpdate` followed by a hiPri cellToRenderUpdate\n    // We shouldn't do another hipri cellToRenderUpdate\n    if (\n      (this._listMetrics.getAverageCellLength() > 0 ||\n        this.props.getItemLayout != null) &&\n      this._shouldRenderWithPriority() &&\n      !this._hiPriInProgress\n    ) {\n      this._hiPriInProgress = true;\n      // Don't worry about interactions when scrolling quickly; focus on filling content as fast\n      // as possible.\n      this._updateCellsToRenderBatcher.dispose();\n      this._updateCellsToRender();\n      return;\n    } else {\n      this._updateCellsToRenderBatcher.schedule();\n    }\n  }\n\n  _shouldRenderWithPriority()          {\n    const {first, last} = this.state.cellsAroundViewport;\n    const {offset, visibleLength, velocity} = this._scrollMetrics;\n    const itemCount = this.props.getItemCount(this.props.data);\n    let hiPri = false;\n    const onStartReachedThreshold = onStartReachedThresholdOrDefault(\n      this.props.onStartReachedThreshold,\n    );\n    const onEndReachedThreshold = onEndReachedThresholdOrDefault(\n      this.props.onEndReachedThreshold,\n    );\n    // Mark as high priority if we're close to the start of the first item\n    // But only if there are items before the first rendered item\n    if (first > 0) {\n      const distTop =\n        offset -\n        this._listMetrics.getCellMetricsApprox(first, this.props).offset;\n      hiPri =\n        distTop < 0 ||\n        (velocity < -2 &&\n          distTop <\n            getScrollingThreshold(onStartReachedThreshold, visibleLength));\n    }\n    // Mark as high priority if we're close to the end of the last item\n    // But only if there are items after the last rendered item\n    if (!hiPri && last >= 0 && last < itemCount - 1) {\n      const distBottom =\n        this._listMetrics.getCellMetricsApprox(last, this.props).offset -\n        (offset + visibleLength);\n      hiPri =\n        distBottom < 0 ||\n        (velocity > 2 &&\n          distBottom <\n            getScrollingThreshold(onEndReachedThreshold, visibleLength));\n    }\n\n    return hiPri;\n  }\n\n  unstable_onScrollBeginDrag(e             ) {\n    this._onScrollBeginDrag(e);\n  }\n\n  _onScrollBeginDrag = (e             )       => {\n    this._nestedChildLists.forEach(childList => {\n      childList._onScrollBeginDrag(e);\n    });\n    this._viewabilityTuples.forEach(tuple => {\n      tuple.viewabilityHelper.recordInteraction();\n    });\n    this._hasInteracted = true;\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  };\n\n  unstable_onScrollEndDrag(e             ) {\n    this._onScrollEndDrag(e);\n  }\n\n  _onScrollEndDrag = (e             )       => {\n    this._nestedChildLists.forEach(childList => {\n      childList._onScrollEndDrag(e);\n    });\n    const {velocity} = e.nativeEvent;\n    if (velocity) {\n      this._scrollMetrics.velocity = this._selectOffset(velocity);\n    }\n    this._computeBlankness();\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  };\n\n  unstable_onMomentumScrollBegin(e             ) {\n    this._onMomentumScrollBegin(e);\n  }\n\n  _onMomentumScrollBegin = (e             )       => {\n    this._nestedChildLists.forEach(childList => {\n      childList._onMomentumScrollBegin(e);\n    });\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n  };\n\n  unstable_onMomentumScrollEnd(e             ) {\n    this._onMomentumScrollEnd(e);\n  }\n\n  _onMomentumScrollEnd = (e             )       => {\n    this._nestedChildLists.forEach(childList => {\n      childList._onMomentumScrollEnd(e);\n    });\n    this._scrollMetrics.velocity = 0;\n    this._computeBlankness();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  };\n\n  _updateCellsToRender = () => {\n    this._updateViewableItems(this.props, this.state.cellsAroundViewport);\n\n    this.setState((state, props) => {\n      const cellsAroundViewport = this._adjustCellsAroundViewport(\n        props,\n        state.cellsAroundViewport,\n        state.pendingScrollUpdateCount,\n      );\n      const renderMask = VirtualizedList._createRenderMask(\n        props,\n        cellsAroundViewport,\n        this._getNonViewportRenderRegions(props),\n      );\n\n      if (\n        cellsAroundViewport.first === state.cellsAroundViewport.first &&\n        cellsAroundViewport.last === state.cellsAroundViewport.last &&\n        renderMask.equals(state.renderMask)\n      ) {\n        return null;\n      }\n\n      return {cellsAroundViewport, renderMask};\n    });\n  };\n\n  _createViewToken = (\n    index        ,\n    isViewable         ,\n    props                 ,\n    // $FlowFixMe[missing-local-annot]\n  ) => {\n    const {data, getItem} = props;\n    const item = getItem(data, index);\n    return {\n      index,\n      item,\n      key: VirtualizedList._keyExtractor(item, index, props),\n      isViewable,\n    };\n  };\n\n  __getListMetrics()                        {\n    return this._listMetrics;\n  }\n\n  _getNonViewportRenderRegions = (\n    props                 ,\n  ) =>                  \n                  \n                 \n        {\n    // Keep a viewport's worth of content around the last focused cell to allow\n    // random navigation around it without any blanking. E.g. tabbing from one\n    // focused item out of viewport to another.\n    if (\n      !(this._lastFocusedCellKey && this._cellRefs[this._lastFocusedCellKey])\n    ) {\n      return [];\n    }\n\n    const lastFocusedCellRenderer = this._cellRefs[this._lastFocusedCellKey];\n    const focusedCellIndex = lastFocusedCellRenderer.props.index;\n    const itemCount = props.getItemCount(props.data);\n\n    // The last cell we rendered may be at a new index. Bail if we don't know\n    // where it is.\n    if (\n      focusedCellIndex >= itemCount ||\n      VirtualizedList._getItemKey(props, focusedCellIndex) !==\n        this._lastFocusedCellKey\n    ) {\n      return [];\n    }\n\n    let first = focusedCellIndex;\n    let heightOfCellsBeforeFocused = 0;\n    for (\n      let i = first - 1;\n      i >= 0 && heightOfCellsBeforeFocused < this._scrollMetrics.visibleLength;\n      i--\n    ) {\n      first--;\n      heightOfCellsBeforeFocused += this._listMetrics.getCellMetricsApprox(\n        i,\n        props,\n      ).length;\n    }\n\n    let last = focusedCellIndex;\n    let heightOfCellsAfterFocused = 0;\n    for (\n      let i = last + 1;\n      i < itemCount &&\n      heightOfCellsAfterFocused < this._scrollMetrics.visibleLength;\n      i++\n    ) {\n      last++;\n      heightOfCellsAfterFocused += this._listMetrics.getCellMetricsApprox(\n        i,\n        props,\n      ).length;\n    }\n\n    return [{first, last}];\n  };\n\n  _updateViewableItems(\n    props                 ,\n    cellsAroundViewport                               ,\n  ) {\n    // If we have any pending scroll updates it means that the scroll metrics\n    // are out of date and we should not call any of the visibility callbacks.\n    if (this.state.pendingScrollUpdateCount > 0) {\n      return;\n    }\n    this._viewabilityTuples.forEach(tuple => {\n      tuple.viewabilityHelper.onUpdate(\n        props,\n        this._scrollMetrics.offset,\n        this._scrollMetrics.visibleLength,\n        this._listMetrics,\n        this._createViewToken,\n        tuple.onViewableItemsChanged,\n        cellsAroundViewport,\n      );\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  verticallyInverted:\n    Platform.OS === 'android'\n      ? {transform: [{scale: -1}]}\n      : {transform: [{scaleY: -1}]},\n  horizontallyInverted: {\n    transform: [{scaleX: -1}],\n  },\n  debug: {\n    flex: 1,\n  },\n  debugOverlayBase: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n  },\n  debugOverlay: {\n    bottom: 0,\n    width: 20,\n    borderColor: 'blue',\n    borderWidth: 1,\n  },\n  debugOverlayFrame: {\n    left: 0,\n    backgroundColor: 'orange',\n  },\n  debugOverlayFrameLast: {\n    left: 0,\n    borderColor: 'green',\n    borderWidth: 2,\n  },\n  debugOverlayFrameVis: {\n    left: 0,\n    borderColor: 'red',\n    borderWidth: 2,\n  },\n});\n\nmodule.exports = VirtualizedList;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n                                                                              \n                                                                                \n             \n             \n              \n                                                     \n\nimport {VirtualizedListCellContextProvider} from './VirtualizedListContext.js';\nimport invariant from 'invariant';\nimport * as React from 'react';\nimport {StyleSheet, View} from 'react-native';\n\n                            \n                                                                         \n                                               \n                                                      \n    \n                                                                       \n                  \n                       \n                \n                                \n              \n                                                                              \n                                                 \n                                       \n                       \n                             \n                                          \n            \n                       \n                                      \n     \n  \n\n                                         \n                       \n                      \n    \n\n                     \n                                        \n     \n  \n\nexport default class CellRenderer        extends React.PureComponent \n               \n               \n  {\n  state               = {\n    separatorProps: {\n      highlighted: false,\n      leadingItem: this.props.item,\n    },\n  };\n\n  static getDerivedStateFromProps(\n    props              ,\n    prevState              ,\n  )                {\n    if (props.item !== prevState.separatorProps.leadingItem) {\n      return {\n        separatorProps: {\n          ...prevState.separatorProps,\n          leadingItem: props.item,\n        },\n      };\n    }\n    return null;\n  }\n\n  // TODO: consider factoring separator stuff out of VirtualizedList into FlatList since it's not\n  // reused by SectionList and we can keep VirtualizedList simpler.\n  // $FlowFixMe[missing-local-annot]\n  _separators = {\n    highlight: () => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators([cellKey, prevCellKey], {\n        highlighted: true,\n      });\n    },\n    unhighlight: () => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators([cellKey, prevCellKey], {\n        highlighted: false,\n      });\n    },\n    updateProps: (\n      select                        ,\n      newProps                       ,\n    ) => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators(\n        [select === 'leading' ? prevCellKey : cellKey],\n        newProps,\n      );\n    },\n  };\n\n  updateSeparatorProps(newProps                       ) {\n    this.setState(state => ({\n      separatorProps: {...state.separatorProps, ...newProps},\n    }));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnmount(this.props.cellKey);\n  }\n\n  _onLayout = (nativeEvent             )       => {\n    this.props.onCellLayout?.(\n      nativeEvent,\n      this.props.cellKey,\n      this.props.index,\n    );\n  };\n\n  _onCellFocusCapture = (e            )       => {\n    this.props.onCellFocusCapture?.(this.props.cellKey);\n  };\n\n  _renderElement(\n    renderItem                        ,\n    ListItemComponent     ,\n    item       ,\n    index        ,\n  )             {\n    if (renderItem && ListItemComponent) {\n      console.warn(\n        'VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take' +\n          ' precedence over renderItem.',\n      );\n    }\n\n    if (ListItemComponent) {\n      return (\n        <ListItemComponent\n          item={item}\n          index={index}\n          separators={this._separators}\n        />\n      );\n    }\n\n    if (renderItem) {\n      return renderItem({\n        item,\n        index,\n        separators: this._separators,\n      });\n    }\n\n    invariant(\n      false,\n      'VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.',\n    );\n  }\n\n  render()             {\n    const {\n      CellRendererComponent,\n      ItemSeparatorComponent,\n      ListItemComponent,\n      cellKey,\n      horizontal,\n      item,\n      index,\n      inversionStyle,\n      onCellLayout,\n      renderItem,\n    } = this.props;\n    const element = this._renderElement(\n      renderItem,\n      ListItemComponent,\n      item,\n      index,\n    );\n\n    // NOTE: that when this is a sticky header, `onLayout` will get automatically extracted and\n    // called explicitly by `ScrollViewStickyHeader`.\n    const itemSeparator             = React.isValidElement(\n      ItemSeparatorComponent,\n    )\n      ? // $FlowFixMe[incompatible-type]\n        ItemSeparatorComponent\n      : // $FlowFixMe[incompatible-type]\n        ItemSeparatorComponent && (\n          <ItemSeparatorComponent {...this.state.separatorProps} />\n        );\n    const cellStyle = inversionStyle\n      ? horizontal\n        ? [styles.rowReverse, inversionStyle]\n        : [styles.columnReverse, inversionStyle]\n      : horizontal\n        ? [styles.row, inversionStyle]\n        : inversionStyle;\n    const result = !CellRendererComponent ? (\n      <View\n        style={cellStyle}\n        onFocusCapture={this._onCellFocusCapture}\n        {...(onCellLayout && {onLayout: this._onLayout})}>\n        {element}\n        {itemSeparator}\n      </View>\n    ) : (\n      <CellRendererComponent\n        cellKey={cellKey}\n        index={index}\n        item={item}\n        style={cellStyle}\n        onFocusCapture={this._onCellFocusCapture}\n        {...(onCellLayout && {onLayout: this._onLayout})}>\n        {element}\n        {itemSeparator}\n      </CellRendererComponent>\n    );\n\n    return (\n      <VirtualizedListCellContextProvider cellKey={this.props.cellKey}>\n        {result}\n      </VirtualizedListCellContextProvider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  rowReverse: {\n    flexDirection: 'row-reverse',\n  },\n  columnReverse: {\n    flexDirection: 'column-reverse',\n  },\n});\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict-local\n * @format\n */\n\n                                                       \n\nimport * as React from 'react';\nimport {useContext, useMemo} from 'react';\n\n                          \n                   \n                           \n                          \n                    \n               \n                   \n                      \n                     \n                          \n                      \n    \n                       \n                                                                     \n                           \n                    \n                                           \n             \n                                                                              \n   \n\nexport const VirtualizedListContext                          =\n  React.createContext(null);\nif (__DEV__) {\n  VirtualizedListContext.displayName = 'VirtualizedListContext';\n}\n\n/**\n * Resets the context. Intended for use by portal-like components (e.g. Modal).\n */\nexport function VirtualizedListContextResetter({\n  children,\n}   \n                       \n )             {\n  return (\n    <VirtualizedListContext.Provider value={null}>\n      {children}\n    </VirtualizedListContext.Provider>\n  );\n}\n\n/**\n * Sets the context with memoization. Intended to be used by `VirtualizedList`.\n */\nexport function VirtualizedListContextProvider({\n  children,\n  value,\n}   \n                       \n                 \n )             {\n  // Avoid setting a newly created context object if the values are identical.\n  const context = useMemo(\n    () => ({\n      cellKey: null,\n      getScrollMetrics: value.getScrollMetrics,\n      horizontal: value.horizontal,\n      getOutermostParentListRef: value.getOutermostParentListRef,\n      registerAsNestedChild: value.registerAsNestedChild,\n      unregisterAsNestedChild: value.unregisterAsNestedChild,\n    }),\n    [\n      value.getScrollMetrics,\n      value.horizontal,\n      value.getOutermostParentListRef,\n      value.registerAsNestedChild,\n      value.unregisterAsNestedChild,\n    ],\n  );\n  return (\n    <VirtualizedListContext.Provider value={context}>\n      {children}\n    </VirtualizedListContext.Provider>\n  );\n}\n\n/**\n * Sets the `cellKey`. Intended to be used by `VirtualizedList` for each cell.\n */\nexport function VirtualizedListCellContextProvider({\n  cellKey,\n  children,\n}   \n                  \n                       \n )             {\n  // Avoid setting a newly created context object if the values are identical.\n  const currContext = useContext(VirtualizedListContext);\n  const context = useMemo(\n    () => (currContext == null ? null : {...currContext, cellKey}),\n    [currContext, cellKey],\n  );\n  return (\n    <VirtualizedListContext.Provider value={context}>\n      {children}\n    </VirtualizedListContext.Provider>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n             \n                    \n                                \n            \n                             \n                                                                                \n             \n             \n              \n                                                     \n\nimport * as React from 'react';\n                                               \n\n                       \n\n                          \n                        \n                          \n                                                                          \n     \n  \n\n                                      \n              \n                \n                         \n     \n  \n\n                                                  \n                  \n                       \n                \n              \n                                               \n                                          \n                       \n   \n\n                                     \n                               \n                \n\n                       \n     \n                                                                                                              \n                                                                                    \n     \n             \n     \n                                                                          \n     \n                                               \n     \n                                                    \n     \n                                      \n   \n                       \n                                     \n     \n                                                                                                \n                                                     \n     \n                   \n     \n                                                                                                    \n                                                                                                    \n                                                    \n     \n                                   \n     \n                                                                                                  \n                                                                                               \n                                                       \n     \n                  \n                   \n                   \n              \n                  \n        \n                   \n                   \n                  \n       \n    \n                        \n     \n                                                                                                    \n                                                                                                   \n                                                               \n     \n                               \n     \n                                                                                            \n                                                                                              \n                                                                                               \n                                       \n     \n                               \n     \n                                                                   \n     \n                      \n                                                        \n     \n                                                                   \n                                                                      \n                                                                           \n                                                       \n     \n                                                                        \n     \n                                                                                               \n                                                                                                 \n                                                                                     \n                              \n     \n                                                     \n     \n                                                                           \n    \n                  \n                                                                                    \n                                                                               \n             \n                                                       \n                                                       \n                                \n                                                  \n                                                    \n                                                       \n                                                        \n                                          \n                      \n                                  \n             \n           \n    \n                                                                                        \n                                                                                                \n                                                                                            \n                                                                                                   \n                   \n     \n                        \n                              \n                                       \n    \n     \n                                                                                           \n                        \n     \n                         \n                              \n                                       \n    \n     \n                                                                                                   \n                        \n     \n                          \n                              \n                                       \n    \n     \n                                                      \n     \n                                           \n     \n                                                                                                \n                        \n     \n                          \n                              \n                                       \n    \n     \n                                                      \n     \n                                           \n     \n                                                                                                 \n                                                                                                \n                                                                    \n     \n                                \n     \n                                                                                    \n                                      \n     \n                                                                 \n     \n                                                                                           \n                                                                                     \n                                                                                    \n                                                \n     \n                                  \n     \n                                                                                                   \n                                                      \n     \n                          \n     \n                                                                                                   \n                                                                                                    \n                                                        \n     \n                                   \n                  \n                                      \n                              \n       \n             \n     \n                                                                                      \n                                        \n     \n                                                                     \n     \n                                                                                            \n                                                                                         \n                                                                                        \n                                                \n     \n                                    \n     \n                                                                   \n                              \n     \n                                    \n                                    \n                              \n       \n             \n                                 \n     \n                                                                                \n     \n                              \n     \n                                                                         \n                                                                              \n                                                                     \n     \n                                                      \n     \n                                                             \n     \n                        \n     \n                                                                                        \n    \n                                                         \n     \n                                  \n     \n                                                                                       \n     \n                                                                               \n     \n                                                                                                  \n                                                                                \n     \n                                      \n     \n                                                                     \n     \n                                        \n     \n                                                                                              \n                                                                                  \n     \n                                                                        \n     \n                                                                                             \n                                                                                                 \n                                                                                                   \n                                                                                                  \n                                                                                       \n     \n                       \n     \n                                                      \n     \n                               \n   \n\n                      \n                                     \n                   \n                   \n   \n\n/**\n * Default Props Helper Functions\n * Use the following helper functions for default values\n */\n\n// horizontalOrDefault(this.props.horizontal)\nexport function horizontalOrDefault(horizontal          )          {\n  return horizontal ?? false;\n}\n\n// initialNumToRenderOrDefault(this.props.initialNumToRender)\nexport function initialNumToRenderOrDefault(\n  initialNumToRender         ,\n)         {\n  return initialNumToRender ?? 10;\n}\n\n// maxToRenderPerBatchOrDefault(this.props.maxToRenderPerBatch)\nexport function maxToRenderPerBatchOrDefault(\n  maxToRenderPerBatch         ,\n)         {\n  return maxToRenderPerBatch ?? 10;\n}\n\n// onStartReachedThresholdOrDefault(this.props.onStartReachedThreshold)\nexport function onStartReachedThresholdOrDefault(\n  onStartReachedThreshold         ,\n)         {\n  return onStartReachedThreshold ?? 2;\n}\n\n// onEndReachedThresholdOrDefault(this.props.onEndReachedThreshold)\nexport function onEndReachedThresholdOrDefault(\n  onEndReachedThreshold         ,\n)         {\n  return onEndReachedThreshold ?? 2;\n}\n\n// windowSizeOrDefault(this.props.windowSize)\nexport function windowSizeOrDefault(windowSize         )         {\n  return windowSize ?? 21;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n                                                   \n\nimport VirtualizedList from './VirtualizedList';\nimport {keyExtractor as defaultKeyExtractor} from './VirtualizeUtils';\nimport invariant from 'invariant';\nimport * as React from 'react';\n                \n\n                                         \n     \n                                                  \n     \n                                     \n     \n                                                                                                  \n                                             \n     \n               \n                                                                        \n                        \n                       \n                  \n                                       \n                 \n                            \n                              \n                                                                              \n         \n      \n       \n                                  \n                                                     \n                                                                 \n     \n  \n\n                                                   \n                                     \n   \n\n                                                   \n     \n                                                      \n     \n                       \n               \n                  \n                      \n                 \n                            \n                              \n                                                                              \n         \n      \n       \n                          \n     \n                                                                                                  \n                                            \n     \n                                                                               \n     \n                                            \n     \n                                                                               \n     \n                                                                                \n                                                                                                   \n                                                                                                \n                                                                                                 \n                                                        \n     \n                                                        \n     \n                                                                                                \n                                                                           \n     \n                                        \n                                                           \n   \n\n                                                                        \n\n                                \n                             \n                             \n           \n                         \n     \n                                                                    \n                                                        \n         \n      \n    \n   \n                                           \n                      \n                    \n                       \n                      \n                        \n   \n\n                                                     \n\n/**\n * Right now this just flattens everything into one list and uses VirtualizedList under the\n * hood. The only operation that might not scale well is concatting the data arrays of all the\n * sections when new props are received, which should be plenty fast for up to ~10,000 items.\n */\nclass VirtualizedSectionList \n                             \n  extends React.PureComponent                         {\n  scrollToLocation(params                            ) {\n    let index = params.itemIndex;\n    for (let i = 0; i < params.sectionIndex; i++) {\n      index += this.props.getItemCount(this.props.sections[i].data) + 2;\n    }\n    let viewOffset = params.viewOffset || 0;\n    if (this._listRef == null) {\n      return;\n    }\n    const listRef = this._listRef;\n    if (params.itemIndex > 0 && this.props.stickySectionHeadersEnabled) {\n      const frame = listRef\n        .__getListMetrics()\n        .getCellMetricsApprox(index - params.itemIndex, listRef.props);\n      viewOffset += frame.length;\n    }\n    const toIndexParams = {\n      ...params,\n      viewOffset,\n      index,\n    };\n    // $FlowFixMe[incompatible-use]\n    this._listRef.scrollToIndex(toIndexParams);\n  }\n\n  getListRef()                   {\n    return this._listRef;\n  }\n\n  render()             {\n    const {\n      ItemSeparatorComponent, // don't pass through, rendered with renderItem\n      SectionSeparatorComponent,\n      renderItem: _renderItem,\n      renderSectionFooter,\n      renderSectionHeader,\n      sections: _sections,\n      stickySectionHeadersEnabled,\n      ...passThroughProps\n    } = this.props;\n\n    const listHeaderOffset = this.props.ListHeaderComponent ? 1 : 0;\n\n    const stickyHeaderIndices = this.props.stickySectionHeadersEnabled\n      ? ([]               )\n      : undefined;\n\n    let itemCount = 0;\n    for (const section of this.props.sections) {\n      // Track the section header indices\n      if (stickyHeaderIndices != null) {\n        stickyHeaderIndices.push(itemCount + listHeaderOffset);\n      }\n\n      // Add two for the section header and footer.\n      itemCount += 2;\n      itemCount += this.props.getItemCount(section.data);\n    }\n    const renderItem = this._renderItem(itemCount);\n\n    return (\n      <VirtualizedList\n        {...passThroughProps}\n        keyExtractor={this._keyExtractor}\n        stickyHeaderIndices={stickyHeaderIndices}\n        renderItem={renderItem}\n        data={this.props.sections}\n        getItem={(sections, index) =>\n          this._getItem(this.props, sections, index)\n        }\n        getItemCount={() => itemCount}\n        onViewableItemsChanged={\n          this.props.onViewableItemsChanged\n            ? this._onViewableItemsChanged\n            : undefined\n        }\n        ref={this._captureRef}\n      />\n    );\n  }\n\n  _getItem(\n    props                 ,\n    sections                       ,\n    index        ,\n  )        {\n    if (!sections) {\n      return null;\n    }\n    let itemIdx = index - 1;\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const sectionData = section.data;\n      const itemCount = props.getItemCount(sectionData);\n      if (itemIdx === -1 || itemIdx === itemCount) {\n        // We intend for there to be overflow by one on both ends of the list.\n        // This will be for headers and footers. When returning a header or footer\n        // item the section itself is the item.\n        return section;\n      } else if (itemIdx < itemCount) {\n        // If we are in the bounds of the list's data then return the item.\n        return props.getItem(sectionData, itemIdx);\n      } else {\n        itemIdx -= itemCount + 2; // Add two for the header and footer\n      }\n    }\n    return null;\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  _keyExtractor = (item      , index        ) => {\n    const info = this._subExtractor(index);\n    return (info && info.key) || String(index);\n  };\n\n  _subExtractor(index        )    \n                      \n                                                            \n                \n                                        \n                   \n                                         \n                      \n                        \n                               \n                         \n                                \n       \n    {\n    let itemIndex = index;\n    const {getItem, getItemCount, keyExtractor, sections} = this.props;\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const sectionData = section.data;\n      const key = section.key || String(i);\n      itemIndex -= 1; // The section adds an item for the header\n      if (itemIndex >= getItemCount(sectionData) + 1) {\n        itemIndex -= getItemCount(sectionData) + 1; // The section adds an item for the footer.\n      } else if (itemIndex === -1) {\n        return {\n          section,\n          key: key + ':header',\n          index: null,\n          header: true,\n          trailingSection: sections[i + 1],\n        };\n      } else if (itemIndex === getItemCount(sectionData)) {\n        return {\n          section,\n          key: key + ':footer',\n          index: null,\n          header: false,\n          trailingSection: sections[i + 1],\n        };\n      } else {\n        const extractor =\n          section.keyExtractor || keyExtractor || defaultKeyExtractor;\n        return {\n          section,\n          key:\n            key + ':' + extractor(getItem(sectionData, itemIndex), itemIndex),\n          index: itemIndex,\n          leadingItem: getItem(sectionData, itemIndex - 1),\n          leadingSection: sections[i - 1],\n          trailingItem: getItem(sectionData, itemIndex + 1),\n          trailingSection: sections[i + 1],\n        };\n      }\n    }\n  }\n\n  _convertViewable = (viewable           )             => {\n    invariant(viewable.index != null, 'Received a broken ViewToken');\n    const info = this._subExtractor(viewable.index);\n    if (!info) {\n      return null;\n    }\n    const keyExtractorWithNullableIndex = info.section.keyExtractor;\n    const keyExtractorWithNonNullableIndex =\n      this.props.keyExtractor || defaultKeyExtractor;\n    const key =\n      keyExtractorWithNullableIndex != null\n        ? keyExtractorWithNullableIndex(viewable.item, info.index)\n        : keyExtractorWithNonNullableIndex(viewable.item, info.index ?? 0);\n\n    return {\n      ...viewable,\n      index: info.index,\n      key,\n      section: info.section,\n    };\n  };\n\n  _onViewableItemsChanged = ({\n    viewableItems,\n    changed,\n  }   \n                                    \n                              \n       \n   ) => {\n    const onViewableItemsChanged = this.props.onViewableItemsChanged;\n    if (onViewableItemsChanged != null) {\n      onViewableItemsChanged({\n        viewableItems: viewableItems\n          .map(this._convertViewable, this)\n          .filter(Boolean),\n        changed: changed.map(this._convertViewable, this).filter(Boolean),\n      });\n    }\n  };\n\n  _renderItem =\n    (listItemCount        )             =>\n    // eslint-disable-next-line react/no-unstable-nested-components\n    ({item, index}                                  ) => {\n      const info = this._subExtractor(index);\n      if (!info) {\n        return null;\n      }\n      const infoIndex = info.index;\n      if (infoIndex == null) {\n        const {section} = info;\n        if (info.header === true) {\n          const {renderSectionHeader} = this.props;\n          return renderSectionHeader ? renderSectionHeader({section}) : null;\n        } else {\n          const {renderSectionFooter} = this.props;\n          return renderSectionFooter ? renderSectionFooter({section}) : null;\n        }\n      } else {\n        const renderItem = info.section.renderItem || this.props.renderItem;\n        const SeparatorComponent = this._getSeparatorComponent(\n          index,\n          info,\n          listItemCount,\n        );\n        invariant(renderItem, 'no renderItem!');\n        return (\n          <ItemWithSeparator\n            SeparatorComponent={SeparatorComponent}\n            LeadingSeparatorComponent={\n              infoIndex === 0 ? this.props.SectionSeparatorComponent : undefined\n            }\n            cellKey={info.key}\n            index={infoIndex}\n            item={item}\n            leadingItem={info.leadingItem}\n            leadingSection={info.leadingSection}\n            prevCellKey={(this._subExtractor(index - 1) || {}).key}\n            // Callback to provide updateHighlight for this item\n            setSelfHighlightCallback={this._setUpdateHighlightFor}\n            setSelfUpdatePropsCallback={this._setUpdatePropsFor}\n            // Provide child ability to set highlight/updateProps for previous item using prevCellKey\n            updateHighlightFor={this._updateHighlightFor}\n            updatePropsFor={this._updatePropsFor}\n            renderItem={renderItem}\n            section={info.section}\n            trailingItem={info.trailingItem}\n            trailingSection={info.trailingSection}\n            inverted={!!this.props.inverted}\n          />\n        );\n      }\n    };\n\n  _updatePropsFor = (cellKey        , value     ) => {\n    const updateProps = this._updatePropsMap[cellKey];\n    if (updateProps != null) {\n      updateProps(value);\n    }\n  };\n\n  _updateHighlightFor = (cellKey        , value         ) => {\n    const updateHighlight = this._updateHighlightMap[cellKey];\n    if (updateHighlight != null) {\n      updateHighlight(value);\n    }\n  };\n\n  _setUpdateHighlightFor = (\n    cellKey        ,\n    updateHighlightFn                    ,\n  ) => {\n    if (updateHighlightFn != null) {\n      this._updateHighlightMap[cellKey] = updateHighlightFn;\n    } else {\n      // $FlowFixMe[prop-missing]\n      delete this._updateHighlightFor[cellKey];\n    }\n  };\n\n  _setUpdatePropsFor = (cellKey        , updatePropsFn                    ) => {\n    if (updatePropsFn != null) {\n      this._updatePropsMap[cellKey] = updatePropsFn;\n    } else {\n      delete this._updatePropsMap[cellKey];\n    }\n  };\n\n  _getSeparatorComponent(\n    index        ,\n    info          ,\n    listItemCount        ,\n  )                            {\n    info = info || this._subExtractor(index);\n    if (!info) {\n      return null;\n    }\n    const ItemSeparatorComponent =\n      info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;\n    const {SectionSeparatorComponent} = this.props;\n    const isLastItemInList = index === listItemCount - 1;\n    const isLastItemInSection =\n      info.index === this.props.getItemCount(info.section.data) - 1;\n    if (SectionSeparatorComponent && isLastItemInSection) {\n      return SectionSeparatorComponent;\n    }\n    if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {\n      return ItemSeparatorComponent;\n    }\n    return null;\n  }\n\n  _updateHighlightMap                                = {};\n  _updatePropsMap                                       = {};\n  _listRef                  ;\n  _captureRef = (ref                        ) => {\n    this._listRef = ref;\n  };\n}\n\n                                                \n                     \n                          \n                  \n                      \n                           \n    \n\n                                          \n                                  \n                                                       \n                                                \n                  \n                \n             \n                             \n                    \n                                 \n            \n                               \n                    \n                                 \n            \n                        \n                                                                    \n                                                               \n                       \n                    \n    \n\nfunction ItemWithSeparator(props                        )             {\n  const {\n    LeadingSeparatorComponent,\n    // this is the trailing separator and is associated with this item\n    SeparatorComponent,\n    cellKey,\n    prevCellKey,\n    setSelfHighlightCallback,\n    updateHighlightFor,\n    setSelfUpdatePropsCallback,\n    updatePropsFor,\n    item,\n    index,\n    section,\n    inverted,\n  } = props;\n\n  const [leadingSeparatorHiglighted, setLeadingSeparatorHighlighted] =\n    React.useState(false);\n\n  const [separatorHighlighted, setSeparatorHighlighted] = React.useState(false);\n\n  const [leadingSeparatorProps, setLeadingSeparatorProps] = React.useState({\n    leadingItem: props.leadingItem,\n    leadingSection: props.leadingSection,\n    section: props.section,\n    trailingItem: props.item,\n    trailingSection: props.trailingSection,\n  });\n  const [separatorProps, setSeparatorProps] = React.useState({\n    leadingItem: props.item,\n    leadingSection: props.leadingSection,\n    section: props.section,\n    trailingItem: props.trailingItem,\n    trailingSection: props.trailingSection,\n  });\n\n  React.useEffect(() => {\n    setSelfHighlightCallback(cellKey, setSeparatorHighlighted);\n    // $FlowFixMe[incompatible-call]\n    setSelfUpdatePropsCallback(cellKey, setSeparatorProps);\n\n    return () => {\n      setSelfUpdatePropsCallback(cellKey, null);\n      setSelfHighlightCallback(cellKey, null);\n    };\n  }, [\n    cellKey,\n    setSelfHighlightCallback,\n    setSeparatorProps,\n    setSelfUpdatePropsCallback,\n  ]);\n\n  const separators = {\n    highlight: () => {\n      setLeadingSeparatorHighlighted(true);\n      setSeparatorHighlighted(true);\n      if (prevCellKey != null) {\n        updateHighlightFor(prevCellKey, true);\n      }\n    },\n    unhighlight: () => {\n      setLeadingSeparatorHighlighted(false);\n      setSeparatorHighlighted(false);\n      if (prevCellKey != null) {\n        updateHighlightFor(prevCellKey, false);\n      }\n    },\n    updateProps: (\n      select                        ,\n      newProps                                       ,\n    ) => {\n      if (select === 'leading') {\n        if (LeadingSeparatorComponent != null) {\n          setLeadingSeparatorProps({...leadingSeparatorProps, ...newProps});\n        } else if (prevCellKey != null) {\n          // update the previous item's separator\n          updatePropsFor(prevCellKey, {...leadingSeparatorProps, ...newProps});\n        }\n      } else if (select === 'trailing' && SeparatorComponent != null) {\n        setSeparatorProps({...separatorProps, ...newProps});\n      }\n    },\n  };\n  const element = props.renderItem({\n    item,\n    index,\n    section,\n    separators,\n  });\n  const leadingSeparator = LeadingSeparatorComponent != null && (\n    <LeadingSeparatorComponent\n      highlighted={leadingSeparatorHiglighted}\n      {...leadingSeparatorProps}\n    />\n  );\n  const separator = SeparatorComponent != null && (\n    <SeparatorComponent\n      highlighted={separatorHighlighted}\n      {...separatorProps}\n    />\n  );\n  const RenderSeparator = leadingSeparator || separator;\n  const firstSeparator = inverted === false ? leadingSeparator : separator;\n  const secondSeparator = inverted === false ? separator : leadingSeparator;\n\n  return (\n    <>\n      {RenderSeparator ? firstSeparator : null}\n      {element}\n      {RenderSeparator ? secondSeparator : null}\n    </>\n  );\n}\n\nmodule.exports = VirtualizedSectionList              \n                       \n               \n                                     \n                                                                 \n      \n    \n                            \n ;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict\n */\n\n'use strict';\n\nfunction clamp(min        , value        , max        )         {\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n\nmodule.exports = clamp;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict\n */\n\n'use strict';\n\n/**\n * Intentional info-level logging for clear separation from ad-hoc console debug logging.\n */\nfunction infoLog(...args              )       {\n  return console.log(...args);\n}\n\nmodule.exports = infoLog;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *      \n */\n\n'use strict';\n\n                                                           \n                                                                 \n                                                             \n                                                                           \n\n                                                                                     \nimport {keyExtractor} from './Lists/VirtualizeUtils';\n\n             \n            \n                    \n                                \n                                   \n             \n                    \n                  \n                 \n             \n                                      \n             \n                                       \n                             \n              \n                                        \n                                                         \n\nmodule.exports = {\n  keyExtractor,\n\n  get VirtualizedList()                  {\n    return require('./Lists/VirtualizedList');\n  },\n  get VirtualizedSectionList()                         {\n    return require('./Lists/VirtualizedSectionList');\n  },\n  get VirtualizedListContextResetter()                                 {\n    const VirtualizedListContext = require('./Lists/VirtualizedListContext');\n    return VirtualizedListContext.VirtualizedListContextResetter;\n  },\n  get ViewabilityHelper()                    {\n    return require('./Lists/ViewabilityHelper');\n  },\n  get FillRateHelper()                 {\n    return require('./Lists/FillRateHelper');\n  },\n};\n"],"names":["Batchinator","callback","delay","dispose","schedule","invokeCallback","timeoutHandle","setTimeout","_ReactNativeFeatureFlags","_reactnative","clearTimeout","module","CellRenderMask","numCells","_invariant","enumerateRegions","addCells","cells","_this__regions","_this__findRegion","firstIntersect","firstIntersectIdx","_this__findRegion1","lastIntersect","lastIntersectIdx","newLeadRegion","newTailRegion","newMainRegion","replacementRegions","numRegionsToDelete","equals","other","region","i","_findRegion","cellIdx","firstIdx","lastIdx","middleIdx","Math","middleRegion","ChildListCollection","Map","add","list","cellKey","cellLists","Set","remove","forEach","fn","listSet","forEachInCell","anyInCell","size","Info","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","listMetrics","activate","console","global","deactivateAndFlush","start","total_time_spent","info","derived","key","listener","computeBlankness","props","cellsAroundViewport","scrollMetrics","dOffset","offset","velocity","visibleLength","scrollSpeed","now","blankTop","first","firstFrame","blankBottom","last","lastFrame","bottomEdge","pixels_blank","blankness","enabled","_resetData","addListener","setSampleRate","sampleRate","setMinSampleCount","minSampleCount","ListMetricsAggregator","notifyCellLayout","ref","cellIndex","orientation","layout","next","curr","dLength","notifyCellUnmounted","notifyListContentLayout","getAverageCellLength","getHighestMeasuredCellIndex","getCellMetricsApprox","index","frame","highestMeasuredCellIndex","highestMeasuredCellFrame","data","getItemCount","getCellMetrics","getItem","getItemLayout","keyExtractor","_VirtualizeUtils","_getItemLayout","length","getCellOffsetApprox","Number","frameMetrics","remainder","getContentLength","hasContentLength","flowRelativeOffset","referenceContentLength","_this__orientation","horizontal","rtl","contentLength","cartesianOffset","_invalidateIfOrientationChanged","_selectLength","width","height","_selectOffset","x","y","StateSafePureComponent","setState","partialState","state","ret","err","_installSetStateHooks","that","_this","Object","newProps","newState","_react","invariant","require","ViewabilityHelper","config","computeViewableItems","scrollOffset","viewportHeight","renderRange","itemCount","_this__config","itemVisiblePercentThreshold","viewAreaCoveragePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","_ref","JSON","idx","metrics","top","bottom","_isViewable","onUpdate","createViewToken","onViewableItemsChanged","v","ii","handle","resetViewableIndices","recordInteraction","_onUpdateSync","viewableIndicesToCheck","prevItems","nextItems","viewable","changed","key1","viewable1","Array","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","percent","visibleHeight","computeWindowedRenderLimits","elementsThatOverlapOffsets","newRangeCount","offsets","result","offsetIndex","currentOffset","left","right","mid","scaledOffsetStart","zoomScale","scaledOffsetEnd","prev","maxToRenderPerBatch","windowSize","visibleBegin","visibleEnd","overscanLength","leadFactor","fillPreference","overscanBegin","overscanEnd","lastItemOffset","_elementsThatOverlapOffsets","overscanFirst","overscanLast","visible","newCellCount","maxNewCells","firstWillAddMore","lastWillAddMore","firstShouldIncrement","lastShouldIncrement","Error","item","String","ON_EDGE_REACHED_EPSILON","_usedIndexForKey","_keylessItemComponentName","getScrollingThreshold","threshold","VirtualizedList","_this_props_maintainVisibleContentPosition","childList","keys","isVertical","_ListMetricsAggregator","_ChildListCollection","onRefresh","onContentSizeChange","otherProps","e","layoutHasChanged","timestamp","dt","_infoLog","tuple","renderMask","isViewable","lastFocusedCellRenderer","focusedCellIndex","heightOfCellsBeforeFocused","heightOfCellsAfterFocused","i1","_FillRateHelper","_Batchinator","pair","_ViewabilityHelper","_this_props","viewabilityConfig","initialRenderRegion","minIndexForVisible","scrollToEnd","params","animated","veryLast","scrollToIndex","onScrollToIndexFailed","viewOffset","viewPosition","scrollToItem","scrollToOffset","scrollRef","_scrollToParamsFromOffset","cartOffset","t","flashScrollIndicators","getScrollResponder","getScrollableNode","getScrollRef","setNativeProps","_getCellKey","_this_context","hasMore","_checkProps","onScroll","initialScrollIndex","_VirtualizedListProps","__DEV__","flatStyles","_adjustCellsAroundViewport","pendingScrollUpdateCount","onEndReachedThreshold","_this__scrollMetrics","distanceFromEnd","newCellsAroundViewport","renderAhead","childIdx","_findFirstChildWithMore","cellKeyForIndex","componentDidMount","componentWillUnmount","_pushCells","stickyHeaderIndices","stickyIndicesFromProps","inversionStyle","stickyOffset","shouldListenForLayout","debug","_VirtualizedListCellRenderer","CellRendererComponent","end","ItemSeparatorComponent","undefined","ListItemComponent","prevCellKey","renderItem","ListHeaderComponent","_isNestedWithSameOrientation","nestedContext","render","ListEmptyComponent","ListFooterComponent","_this_props1","styles","element","_VirtualizedListContext","element1","event","spacerKey","renderRegions","lastRegion","lastSpacer","section","isLastSpacer","constrainToMeasured","_clamp","firstMetrics","lastMetrics","spacerSize","element2","scrollProps","innerRet","scrollContext","componentDidUpdate","prevProps","extraData","hiPriInProgress","_computeBlankness","_triggerRemeasureForChildListsInCell","measureLayoutRelativeToContainingList","metricsChanged","error","_getFooterCellKey","_renderDebugOverlay","normalize","framesInLayout","windowTop","frameLast","windowLen","visTop","visLen","f","_orientation","_maybeCallOnEdgeReached","onStartReached","onStartReachedThreshold","onEndReached","distanceFromStart","DEFAULT_THRESHOLD_PX","startThreshold","endThreshold","isWithinStartThreshold","isWithinEndThreshold","_maybeScrollToInitialScrollIndex","contentWidth","contentHeight","_nullthrows","unstable_onScroll","_offsetFromScrollEvent","_e_nativeEvent","contentOffset","contentSize","layoutMeasurement","_scheduleCellsToRenderUpdate","_shouldRenderWithPriority","_this_state_cellsAroundViewport","hiPri","distTop","distBottom","unstable_onScrollBeginDrag","unstable_onScrollEndDrag","unstable_onMomentumScrollBegin","unstable_onMomentumScrollEnd","__getListMetrics","_updateViewableItems","_findItemIndexWithKey","hint","curKey","curKey1","_getItemKey","_createRenderMask","additionalRegions","_CellRenderMask","allRegions","initialRegion","stickyIndicesSet","_initialRenderRegion","firstCellIndex","lastCellIndex","_ensureClosestStickyHeader","itemIdx","getDerivedStateFromProps","prevState","_newProps_maintainVisibleContentPosition","maintainVisibleContentPositionAdjustment","prevFirstVisibleItemKey","newFirstVisibleItemKey","firstVisibleItemIndex","constrainedCells","_constrainToItemCount","lastPossibleCellIndex","maxFirst","_keyExtractor","_StateSafePureComponent","CellRenderer","select","nativeEvent","updateSeparatorProps","_renderElement","onCellLayout","itemSeparator","cellStyle","VirtualizedListCellContextProvider","VirtualizedListContext","VirtualizedListContextProvider","VirtualizedListContextResetter","children","value","context","currContext","horizontalOrDefault","initialNumToRenderOrDefault","maxToRenderPerBatchOrDefault","onEndReachedThresholdOrDefault","onStartReachedThresholdOrDefault","windowSizeOrDefault","initialNumToRender","VirtualizedSectionList","keyExtractorWithNullableIndex","keyExtractorWithNonNullableIndex","viewableItems","Boolean","listItemCount","infoIndex","renderSectionHeader","renderSectionFooter","SeparatorComponent","ItemWithSeparator","updateProps","updateHighlight","updateHighlightFn","updatePropsFn","scrollToLocation","listRef","toIndexParams","getListRef","SectionSeparatorComponent","_renderItem","_sections","stickySectionHeadersEnabled","passThroughProps","listHeaderOffset","_VirtualizedList","sections","_getItem","sectionData","_subExtractor","itemIndex","extractor","_getSeparatorComponent","isLastItemInList","isLastItemInSection","LeadingSeparatorComponent","setSelfHighlightCallback","updateHighlightFor","setSelfUpdatePropsCallback","updatePropsFor","inverted","_React_useState","leadingSeparatorHiglighted","setLeadingSeparatorHighlighted","_React_useState1","separatorHighlighted","setSeparatorHighlighted","_React_useState2","leadingSeparatorProps","setLeadingSeparatorProps","_React_useState3","separatorProps","setSeparatorProps","separators","leadingSeparator","separator","RenderSeparator","firstSeparator","secondSeparator","clamp","min","max","infoLog","args","_console"],"mappings":"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"}