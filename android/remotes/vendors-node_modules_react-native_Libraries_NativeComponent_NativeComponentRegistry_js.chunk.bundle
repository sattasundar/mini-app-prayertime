(self["webpackChunksataccommodation"] = self["webpackChunksataccommodation"] || []).push([["vendors-node_modules_react-native_Libraries_NativeComponent_NativeComponentRegistry_js"], {
"./node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js ***!
  \****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get get () {
        return get;
    },
    get getWithFallback_DEPRECATED () {
        return getWithFallback_DEPRECATED;
    },
    get setRuntimeConfigProvider () {
        return setRuntimeConfigProvider;
    },
    get unstable_hasStaticViewConfig () {
        return unstable_hasStaticViewConfig;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _getNativeComponentAttributes = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../ReactNative/getNativeComponentAttributes */ "./node_modules/react-native/Libraries/ReactNative/getNativeComponentAttributes.js"));
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../ReactNative/UIManager */ "./node_modules/react-native/Libraries/ReactNative/UIManager.js"));
var _ReactNativeViewConfigRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../Renderer/shims/ReactNativeViewConfigRegistry */ "./node_modules/react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry.js"));
var _StaticViewConfigValidator = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./StaticViewConfigValidator */ "./node_modules/react-native/Libraries/NativeComponent/StaticViewConfigValidator.js"));
var _ViewConfig = __webpack_require__(/*! ./ViewConfig */ "./node_modules/react-native/Libraries/NativeComponent/ViewConfig.js");
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var getRuntimeConfig;
function setRuntimeConfigProvider(runtimeConfigProvider) {
    if (getRuntimeConfig === undefined) {
        getRuntimeConfig = runtimeConfigProvider;
    }
}
function get(name, viewConfigProvider) {
    _ReactNativeViewConfigRegistry.register(name, ()=>{
        var _ref = (getRuntimeConfig === null || getRuntimeConfig === void 0 ? void 0 : getRuntimeConfig(name)) ?? {
            native: !__webpack_require__.g.RN$Bridgeless,
            verify: false
        }, native = _ref.native, verify = _ref.verify;
        var viewConfig;
        if (native) {
            viewConfig = (0, _getNativeComponentAttributes.default)(name) ?? (0, _ViewConfig.createViewConfig)(viewConfigProvider());
        } else {
            viewConfig = (0, _ViewConfig.createViewConfig)(viewConfigProvider()) ?? (0, _getNativeComponentAttributes.default)(name);
        }
        (0, _invariant.default)(viewConfig != null, 'NativeComponentRegistry.get: both static and native view config are missing for native component "%s".', name);
        if (verify) {
            var nativeViewConfig = native ? viewConfig : (0, _getNativeComponentAttributes.default)(name);
            if (nativeViewConfig == null) {
                return viewConfig;
            }
            var staticViewConfig = native ? (0, _ViewConfig.createViewConfig)(viewConfigProvider()) : viewConfig;
            var validationOutput = _StaticViewConfigValidator.validate(name, nativeViewConfig, staticViewConfig);
            if (validationOutput.type === 'invalid') {
                console.error(_StaticViewConfigValidator.stringifyValidationResult(name, validationOutput));
            }
        }
        return viewConfig;
    });
    return name;
}
function getWithFallback_DEPRECATED(name, viewConfigProvider) {
    if (getRuntimeConfig == null) {
        if (hasNativeViewConfig(name)) {
            return get(name, viewConfigProvider);
        }
    } else {
        if (getRuntimeConfig(name) != null) {
            return get(name, viewConfigProvider);
        }
    }
    var FallbackNativeComponent = function(props) {
        return null;
    };
    FallbackNativeComponent.displayName = `Fallback(${name})`;
    return FallbackNativeComponent;
}
function hasNativeViewConfig(name) {
    (0, _invariant.default)(getRuntimeConfig == null, 'Unexpected invocation!');
    return _UIManager.default.getViewManagerConfig(name) != null;
}
function unstable_hasStaticViewConfig(name) {
    var native = ((getRuntimeConfig === null || getRuntimeConfig === void 0 ? void 0 : getRuntimeConfig(name)) ?? {
        native: true
    }).native;
    return !native;
}


}),
"./node_modules/react-native/Libraries/NativeComponent/BaseViewConfig.android.js": 
/*!***************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/NativeComponent/BaseViewConfig.android.js ***!
  \***************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _ReactNativeStyleAttributes = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Components/View/ReactNativeStyleAttributes */ "./node_modules/react-native/Libraries/Components/View/ReactNativeStyleAttributes.js"));
var _ViewConfigIgnore = __webpack_require__(/*! ./ViewConfigIgnore */ "./node_modules/react-native/Libraries/NativeComponent/ViewConfigIgnore.js");
var bubblingEventTypes = {
    // Bubbling events from UIManagerModuleConstants.java
    topChange: {
        phasedRegistrationNames: {
            captured: 'onChangeCapture',
            bubbled: 'onChange'
        }
    },
    topSelect: {
        phasedRegistrationNames: {
            captured: 'onSelectCapture',
            bubbled: 'onSelect'
        }
    },
    topTouchEnd: {
        phasedRegistrationNames: {
            captured: 'onTouchEndCapture',
            bubbled: 'onTouchEnd'
        }
    },
    topTouchCancel: {
        phasedRegistrationNames: {
            captured: 'onTouchCancelCapture',
            bubbled: 'onTouchCancel'
        }
    },
    topTouchStart: {
        phasedRegistrationNames: {
            captured: 'onTouchStartCapture',
            bubbled: 'onTouchStart'
        }
    },
    topTouchMove: {
        phasedRegistrationNames: {
            captured: 'onTouchMoveCapture',
            bubbled: 'onTouchMove'
        }
    },
    // Experimental/Work in Progress Pointer Events (not yet ready for use)
    topPointerCancel: {
        phasedRegistrationNames: {
            captured: 'onPointerCancelCapture',
            bubbled: 'onPointerCancel'
        }
    },
    topPointerDown: {
        phasedRegistrationNames: {
            captured: 'onPointerDownCapture',
            bubbled: 'onPointerDown'
        }
    },
    topPointerEnter: {
        phasedRegistrationNames: {
            captured: 'onPointerEnterCapture',
            bubbled: 'onPointerEnter',
            skipBubbling: true
        }
    },
    topPointerLeave: {
        phasedRegistrationNames: {
            captured: 'onPointerLeaveCapture',
            bubbled: 'onPointerLeave',
            skipBubbling: true
        }
    },
    topPointerMove: {
        phasedRegistrationNames: {
            captured: 'onPointerMoveCapture',
            bubbled: 'onPointerMove'
        }
    },
    topPointerUp: {
        phasedRegistrationNames: {
            captured: 'onPointerUpCapture',
            bubbled: 'onPointerUp'
        }
    },
    topPointerOut: {
        phasedRegistrationNames: {
            captured: 'onPointerOutCapture',
            bubbled: 'onPointerOut'
        }
    },
    topPointerOver: {
        phasedRegistrationNames: {
            captured: 'onPointerOverCapture',
            bubbled: 'onPointerOver'
        }
    },
    topClick: {
        phasedRegistrationNames: {
            captured: 'onClickCapture',
            bubbled: 'onClick'
        }
    }
};
var directEventTypes = {
    topAccessibilityAction: {
        registrationName: 'onAccessibilityAction'
    },
    onGestureHandlerEvent: (0, _ViewConfigIgnore.DynamicallyInjectedByGestureHandler)({
        registrationName: 'onGestureHandlerEvent'
    }),
    onGestureHandlerStateChange: (0, _ViewConfigIgnore.DynamicallyInjectedByGestureHandler)({
        registrationName: 'onGestureHandlerStateChange'
    }),
    // Direct events from UIManagerModuleConstants.java
    topContentSizeChange: {
        registrationName: 'onContentSizeChange'
    },
    topScrollBeginDrag: {
        registrationName: 'onScrollBeginDrag'
    },
    topMessage: {
        registrationName: 'onMessage'
    },
    topSelectionChange: {
        registrationName: 'onSelectionChange'
    },
    topLoadingFinish: {
        registrationName: 'onLoadingFinish'
    },
    topMomentumScrollEnd: {
        registrationName: 'onMomentumScrollEnd'
    },
    topLoadingStart: {
        registrationName: 'onLoadingStart'
    },
    topLoadingError: {
        registrationName: 'onLoadingError'
    },
    topMomentumScrollBegin: {
        registrationName: 'onMomentumScrollBegin'
    },
    topScrollEndDrag: {
        registrationName: 'onScrollEndDrag'
    },
    topScroll: {
        registrationName: 'onScroll'
    },
    topLayout: {
        registrationName: 'onLayout'
    }
};
var validAttributesForNonEventProps = {
    // @ReactProps from BaseViewManager
    backgroundColor: {
        process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
    },
    transform: true,
    transformOrigin: true,
    experimental_backgroundImage: {
        process: (__webpack_require__(/*! ../StyleSheet/processBackgroundImage */ "./node_modules/react-native/Libraries/StyleSheet/processBackgroundImage.js")/* ["default"] */["default"])
    },
    boxShadow: {
        process: (__webpack_require__(/*! ../StyleSheet/processBoxShadow */ "./node_modules/react-native/Libraries/StyleSheet/processBoxShadow.js")/* ["default"] */["default"])
    },
    filter: {
        process: (__webpack_require__(/*! ../StyleSheet/processFilter */ "./node_modules/react-native/Libraries/StyleSheet/processFilter.js")/* ["default"] */["default"])
    },
    mixBlendMode: true,
    isolation: true,
    opacity: true,
    elevation: true,
    shadowColor: {
        process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
    },
    zIndex: true,
    renderToHardwareTextureAndroid: true,
    testID: true,
    nativeID: true,
    accessibilityLabelledBy: true,
    accessibilityLabel: true,
    accessibilityHint: true,
    accessibilityRole: true,
    accessibilityCollection: true,
    accessibilityCollectionItem: true,
    accessibilityState: true,
    accessibilityActions: true,
    accessibilityValue: true,
    importantForAccessibility: true,
    role: true,
    rotation: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true,
    accessibilityLiveRegion: true,
    // @ReactProps from LayoutShadowNode
    width: true,
    minWidth: true,
    collapsable: true,
    collapsableChildren: true,
    maxWidth: true,
    height: true,
    minHeight: true,
    maxHeight: true,
    flex: true,
    flexGrow: true,
    rowGap: true,
    columnGap: true,
    gap: true,
    flexShrink: true,
    flexBasis: true,
    aspectRatio: true,
    flexDirection: true,
    flexWrap: true,
    alignSelf: true,
    alignItems: true,
    alignContent: true,
    justifyContent: true,
    overflow: true,
    display: true,
    boxSizing: true,
    margin: true,
    marginBlock: true,
    marginBlockEnd: true,
    marginBlockStart: true,
    marginBottom: true,
    marginEnd: true,
    marginHorizontal: true,
    marginInline: true,
    marginInlineEnd: true,
    marginInlineStart: true,
    marginLeft: true,
    marginRight: true,
    marginStart: true,
    marginTop: true,
    marginVertical: true,
    padding: true,
    paddingBlock: true,
    paddingBlockEnd: true,
    paddingBlockStart: true,
    paddingBottom: true,
    paddingEnd: true,
    paddingHorizontal: true,
    paddingInline: true,
    paddingInlineEnd: true,
    paddingInlineStart: true,
    paddingLeft: true,
    paddingRight: true,
    paddingStart: true,
    paddingTop: true,
    paddingVertical: true,
    borderWidth: true,
    borderStartWidth: true,
    borderEndWidth: true,
    borderTopWidth: true,
    borderBottomWidth: true,
    borderLeftWidth: true,
    borderRightWidth: true,
    outlineColor: {
        process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
    },
    outlineOffset: true,
    outlineStyle: true,
    outlineWidth: true,
    start: true,
    end: true,
    left: true,
    right: true,
    top: true,
    bottom: true,
    inset: true,
    insetBlock: true,
    insetBlockEnd: true,
    insetBlockStart: true,
    insetInline: true,
    insetInlineEnd: true,
    insetInlineStart: true,
    position: true,
    style: _ReactNativeStyleAttributes.default,
    // ReactClippingViewManager @ReactProps
    removeClippedSubviews: true,
    // ReactViewManager @ReactProps
    accessible: true,
    hasTVPreferredFocus: true,
    nextFocusDown: true,
    nextFocusForward: true,
    nextFocusLeft: true,
    nextFocusRight: true,
    nextFocusUp: true,
    borderRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderBottomRightRadius: true,
    borderBottomLeftRadius: true,
    borderTopStartRadius: true,
    borderTopEndRadius: true,
    borderBottomStartRadius: true,
    borderBottomEndRadius: true,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    borderStyle: true,
    hitSlop: true,
    pointerEvents: true,
    nativeBackgroundAndroid: true,
    nativeForegroundAndroid: true,
    needsOffscreenAlphaCompositing: true,
    borderColor: {
        process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
    },
    borderLeftColor: {
        process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
    },
    borderRightColor: {
        process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
    },
    borderTopColor: {
        process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
    },
    borderBottomColor: {
        process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
    },
    borderStartColor: {
        process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
    },
    borderEndColor: {
        process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
    },
    borderBlockColor: {
        process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
    },
    borderBlockEndColor: {
        process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
    },
    borderBlockStartColor: {
        process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
    },
    focusable: true,
    backfaceVisibility: true
};
// Props for bubbling and direct events
var validAttributesForEventProps = {
    onLayout: true,
    // PanResponder handlers
    onMoveShouldSetResponder: true,
    onMoveShouldSetResponderCapture: true,
    onStartShouldSetResponder: true,
    onStartShouldSetResponderCapture: true,
    onResponderGrant: true,
    onResponderReject: true,
    onResponderStart: true,
    onResponderEnd: true,
    onResponderRelease: true,
    onResponderMove: true,
    onResponderTerminate: true,
    onResponderTerminationRequest: true,
    onShouldBlockNativeResponder: true,
    // Touch events
    onTouchStart: true,
    onTouchMove: true,
    onTouchEnd: true,
    onTouchCancel: true,
    // Pointer events
    onClick: true,
    onClickCapture: true,
    onPointerEnter: true,
    onPointerEnterCapture: true,
    onPointerLeave: true,
    onPointerLeaveCapture: true,
    onPointerMove: true,
    onPointerMoveCapture: true,
    onPointerOut: true,
    onPointerOutCapture: true,
    onPointerOver: true,
    onPointerOverCapture: true
};
/**
 * On Android, Props are derived from a ViewManager and its ShadowNode.
 *
 * Where did we find these base platform props from?
 * - Nearly all component ViewManagers descend from BaseViewManager,
 * - and BaseViewManagers' ShadowNodes descend from LayoutShadowNode.
 * - Also, all components inherit ViewConfigs from UIManagerModuleConstants.java.
 *
 * So, these ViewConfigs are generated from LayoutShadowNode and BaseViewManager.
 */ var PlatformBaseViewConfigAndroid = {
    directEventTypes,
    bubblingEventTypes,
    validAttributes: _object_spread._({}, validAttributesForNonEventProps, validAttributesForEventProps)
};
var _default = PlatformBaseViewConfigAndroid;


}),
"./node_modules/react-native/Libraries/NativeComponent/PlatformBaseViewConfig.js": 
/*!***************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/NativeComponent/PlatformBaseViewConfig.js ***!
  \***************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _BaseViewConfig = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./BaseViewConfig */ "./node_modules/react-native/Libraries/NativeComponent/BaseViewConfig.android.js"));
var PlatformBaseViewConfig = _BaseViewConfig.default;
var _default = PlatformBaseViewConfig;


}),
"./node_modules/react-native/Libraries/NativeComponent/StaticViewConfigValidator.js": 
/*!******************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/NativeComponent/StaticViewConfigValidator.js ***!
  \******************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * During the migration from native view configs to static view configs, this is
 * used to validate that the two are equivalent.
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get stringifyValidationResult () {
        return stringifyValidationResult;
    },
    get validate () {
        return validate;
    }
});
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
function validate(name, nativeViewConfig, staticViewConfig) {
    var differences = [];
    accumulateDifferences(differences, [], {
        bubblingEventTypes: nativeViewConfig.bubblingEventTypes,
        directEventTypes: nativeViewConfig.directEventTypes,
        uiViewClassName: nativeViewConfig.uiViewClassName,
        validAttributes: nativeViewConfig.validAttributes
    }, {
        bubblingEventTypes: staticViewConfig.bubblingEventTypes,
        directEventTypes: staticViewConfig.directEventTypes,
        uiViewClassName: staticViewConfig.uiViewClassName,
        validAttributes: staticViewConfig.validAttributes
    });
    if (differences.length === 0) {
        return {
            type: 'valid'
        };
    }
    return {
        type: 'invalid',
        differences
    };
}
function stringifyValidationResult(name, validationResult) {
    var differences = validationResult.differences;
    return [
        `StaticViewConfigValidator: Invalid static view config for '${name}'.`,
        ''
    ].concat(_to_consumable_array._(differences.map((difference)=>{
        var type = difference.type, path = difference.path;
        switch(type){
            case 'missing':
                return `- '${path.join('.')}' is missing.`;
            case 'unequal':
                return `- '${path.join('.')}' is the wrong value.`;
        }
    })), [
        ''
    ]).join('\n');
}
function accumulateDifferences(differences, path, nativeObject, staticObject) {
    for(var nativeKey in nativeObject){
        // $FlowFixMe[invalid-computed-prop]
        var nativeValue = nativeObject[nativeKey];
        if (!staticObject.hasOwnProperty(nativeKey)) {
            differences.push({
                path: _to_consumable_array._(path).concat([
                    nativeKey
                ]),
                type: 'missing',
                nativeValue
            });
            continue;
        }
        // $FlowFixMe[invalid-computed-prop]
        var staticValue = staticObject[nativeKey];
        var nativeValueIfObject = ifObject(nativeValue);
        if (nativeValueIfObject != null) {
            var staticValueIfObject = ifObject(staticValue);
            if (staticValueIfObject != null) {
                path.push(nativeKey);
                accumulateDifferences(differences, path, nativeValueIfObject, staticValueIfObject);
                path.pop();
                continue;
            }
        }
        if (nativeValue !== staticValue) {
            differences.push({
                path: _to_consumable_array._(path).concat([
                    nativeKey
                ]),
                type: 'unequal',
                nativeValue,
                staticValue
            });
        }
    }
}
function ifObject(value) {
    return typeof value === 'object' && !Array.isArray(value) ? value : null;
}


}),
"./node_modules/react-native/Libraries/NativeComponent/ViewConfig.js": 
/*!***************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/NativeComponent/ViewConfig.js ***!
  \***************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "createViewConfig", ({
    enumerable: true,
    get: function() {
        return createViewConfig;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _PlatformBaseViewConfig = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./PlatformBaseViewConfig */ "./node_modules/react-native/Libraries/NativeComponent/PlatformBaseViewConfig.js"));
function createViewConfig(partialViewConfig) {
    return {
        uiViewClassName: partialViewConfig.uiViewClassName,
        Commands: {},
        bubblingEventTypes: composeIndexers(_PlatformBaseViewConfig.default.bubblingEventTypes, partialViewConfig.bubblingEventTypes),
        directEventTypes: composeIndexers(_PlatformBaseViewConfig.default.directEventTypes, partialViewConfig.directEventTypes),
        // $FlowFixMe[incompatible-return]
        validAttributes: composeIndexers(// $FlowFixMe[incompatible-call] `style` property confuses Flow.
        _PlatformBaseViewConfig.default.validAttributes, // $FlowFixMe[incompatible-call] `style` property confuses Flow.
        partialViewConfig.validAttributes)
    };
}
function composeIndexers(maybeA, maybeB) {
    return maybeA == null || maybeB == null ? maybeA ?? maybeB ?? {} : _object_spread._({}, maybeA, maybeB);
}


}),
"./node_modules/react-native/Libraries/NativeComponent/ViewConfigIgnore.js": 
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/NativeComponent/ViewConfigIgnore.js ***!
  \*********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ConditionallyIgnoredEventHandlers () {
        return ConditionallyIgnoredEventHandlers;
    },
    get DynamicallyInjectedByGestureHandler () {
        return DynamicallyInjectedByGestureHandler;
    },
    get isIgnored () {
        return isIgnored;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var ignoredViewConfigProps = new WeakSet();
function DynamicallyInjectedByGestureHandler(object) {
    ignoredViewConfigProps.add(object);
    return object;
}
function ConditionallyIgnoredEventHandlers(value) {
    if (_Platform.default.OS === 'ios') {
        return value;
    }
    return undefined;
}
function isIgnored(value) {
    if (typeof value === 'object' && value != null) {
        return ignoredViewConfigProps.has(value);
    }
    return false;
}


}),
"./node_modules/react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry.js": 
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry.js ***!
  \*********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @noformat
 * @nolint
 *       strict-local
 * @generated SignedSource<<83073425aa3f71ced2c8c51f25a25938>>
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get customBubblingEventTypes () {
        return customBubblingEventTypes;
    },
    get customDirectEventTypes () {
        return customDirectEventTypes;
    },
    get get () {
        return get;
    },
    get register () {
        return register;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var customBubblingEventTypes = {};
var customDirectEventTypes = {};
var viewConfigCallbacks = new Map();
var viewConfigs = new Map();
function processEventTypes(viewConfig) {
    var bubblingEventTypes = viewConfig.bubblingEventTypes, directEventTypes = viewConfig.directEventTypes;
    if (true) {
        if (bubblingEventTypes != null && directEventTypes != null) {
            for(var topLevelType in directEventTypes){
                (0, _invariant.default)(bubblingEventTypes[topLevelType] == null, 'Event cannot be both direct and bubbling: %s', topLevelType);
            }
        }
    }
    if (bubblingEventTypes != null) {
        for(var topLevelType1 in bubblingEventTypes){
            if (customBubblingEventTypes[topLevelType1] == null) {
                customBubblingEventTypes[topLevelType1] = bubblingEventTypes[topLevelType1];
            }
        }
    }
    if (directEventTypes != null) {
        for(var topLevelType2 in directEventTypes){
            if (customDirectEventTypes[topLevelType2] == null) {
                customDirectEventTypes[topLevelType2] = directEventTypes[topLevelType2];
            }
        }
    }
}
function register(name, callback) {
    (0, _invariant.default)(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
    (0, _invariant.default)(typeof callback === 'function', 'View config getter callback for component `%s` must be a function (received `%s`)', name, callback === null ? 'null' : typeof callback);
    viewConfigCallbacks.set(name, callback);
    return name;
}
function get(name) {
    var viewConfig = viewConfigs.get(name);
    if (viewConfig == null) {
        var callback = viewConfigCallbacks.get(name);
        if (typeof callback !== 'function') {
            (0, _invariant.default)(false, 'View config getter callback for component `%s` must be a function (received `%s`).%s', name, callback === null ? 'null' : typeof callback, // $FlowFixMe[recursive-definition]
            typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
        }
        viewConfig = callback();
        (0, _invariant.default)(viewConfig, 'View config not found for component `%s`', name);
        processEventTypes(viewConfig);
        viewConfigs.set(name, viewConfig);
        // Clear the callback after the config is set so that
        // we don't mask any errors during registration.
        viewConfigCallbacks.set(name, null);
    }
    return viewConfig;
}


}),

}]);//# sourceMappingURL=vendors-node_modules_react-native_Libraries_NativeComponent_NativeComponentRegistry_js.chunk.bundle.map?platform=android