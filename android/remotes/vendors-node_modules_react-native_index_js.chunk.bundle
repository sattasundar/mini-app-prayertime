(self["webpackChunksataccommodation"] = self["webpackChunksataccommodation"] || []).push([["vendors-node_modules_react-native_index_js"], {
"./node_modules/anser/lib/index.js": 
/*!*****************************************!*\
  !*** ./node_modules/anser/lib/index.js ***!
  \*****************************************/
(function (module) {
"use strict";

// This file was originally written by @drudru (https://github.com/drudru/ansi_up), MIT, 2011
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var ANSI_COLORS = [
    [
        {
            color: "0, 0, 0",
            "class": "ansi-black"
        },
        {
            color: "187, 0, 0",
            "class": "ansi-red"
        },
        {
            color: "0, 187, 0",
            "class": "ansi-green"
        },
        {
            color: "187, 187, 0",
            "class": "ansi-yellow"
        },
        {
            color: "0, 0, 187",
            "class": "ansi-blue"
        },
        {
            color: "187, 0, 187",
            "class": "ansi-magenta"
        },
        {
            color: "0, 187, 187",
            "class": "ansi-cyan"
        },
        {
            color: "255,255,255",
            "class": "ansi-white"
        }
    ],
    [
        {
            color: "85, 85, 85",
            "class": "ansi-bright-black"
        },
        {
            color: "255, 85, 85",
            "class": "ansi-bright-red"
        },
        {
            color: "0, 255, 0",
            "class": "ansi-bright-green"
        },
        {
            color: "255, 255, 85",
            "class": "ansi-bright-yellow"
        },
        {
            color: "85, 85, 255",
            "class": "ansi-bright-blue"
        },
        {
            color: "255, 85, 255",
            "class": "ansi-bright-magenta"
        },
        {
            color: "85, 255, 255",
            "class": "ansi-bright-cyan"
        },
        {
            color: "255, 255, 255",
            "class": "ansi-bright-white"
        }
    ]
];
var Anser = function() {
    _createClass(Anser, null, [
        {
            key: "escapeForHtml",
            /**
         * Anser.escapeForHtml
         * Escape the input HTML.
         *
         * This does the minimum escaping of text to make it compliant with HTML.
         * In particular, the '&','<', and '>' characters are escaped. This should
         * be run prior to `ansiToHtml`.
         *
         * @name Anser.escapeForHtml
         * @function
         * @param {String} txt The input text (containing the ANSI snippets).
         * @returns {String} The escaped html.
         */ value: function escapeForHtml(txt) {
                return new Anser().escapeForHtml(txt);
            }
        },
        {
            key: "linkify",
            value: function linkify(txt) {
                return new Anser().linkify(txt);
            }
        },
        {
            key: "ansiToHtml",
            value: function ansiToHtml(txt, options) {
                return new Anser().ansiToHtml(txt, options);
            }
        },
        {
            key: "ansiToJson",
            value: function ansiToJson(txt, options) {
                return new Anser().ansiToJson(txt, options);
            }
        },
        {
            key: "ansiToText",
            value: function ansiToText(txt) {
                return new Anser().ansiToText(txt);
            }
        }
    ]);
    function Anser() {
        _classCallCheck(this, Anser);
        this.fg = this.bg = this.fg_truecolor = this.bg_truecolor = null;
        this.bright = 0;
    }
    /**
     * setupPalette
     * Sets up the palette.
     *
     * @name setupPalette
     * @function
     */ _createClass(Anser, [
        {
            key: "setupPalette",
            value: function setupPalette() {
                this.PALETTE_COLORS = [];
                // Index 0..15 : System color
                for(var i = 0; i < 2; ++i){
                    for(var j = 0; j < 8; ++j){
                        this.PALETTE_COLORS.push(ANSI_COLORS[i][j].color);
                    }
                }
                // Index 16..231 : RGB 6x6x6
                // https://gist.github.com/jasonm23/2868981#file-xterm-256color-yaml
                var levels = [
                    0,
                    95,
                    135,
                    175,
                    215,
                    255
                ];
                var format = function format(r, g, b) {
                    return levels[r] + ", " + levels[g] + ", " + levels[b];
                };
                var r = void 0, g = void 0, b = void 0;
                for(var _r = 0; _r < 6; ++_r){
                    for(var _g = 0; _g < 6; ++_g){
                        for(var _b = 0; _b < 6; ++_b){
                            this.PALETTE_COLORS.push(format(_r, _g, _b));
                        }
                    }
                }
                // Index 232..255 : Grayscale
                var level = 8;
                for(var _i = 0; _i < 24; ++_i, level += 10){
                    this.PALETTE_COLORS.push(format(level, level, level));
                }
            }
        },
        {
            key: "escapeForHtml",
            value: function escapeForHtml(txt) {
                return txt.replace(/[&<>]/gm, function(str) {
                    return str == "&" ? "&amp;" : str == "<" ? "&lt;" : str == ">" ? "&gt;" : "";
                });
            }
        },
        {
            key: "linkify",
            value: function linkify(txt) {
                return txt.replace(/(https?:\/\/[^\s]+)/gm, function(str) {
                    return "<a href=\"" + str + "\">" + str + "</a>";
                });
            }
        },
        {
            key: "ansiToHtml",
            value: function ansiToHtml(txt, options) {
                return this.process(txt, options, true);
            }
        },
        {
            key: "ansiToJson",
            value: function ansiToJson(txt, options) {
                options = options || {};
                options.json = true;
                options.clearLine = false;
                return this.process(txt, options, true);
            }
        },
        {
            key: "ansiToText",
            value: function ansiToText(txt) {
                return this.process(txt, {}, false);
            }
        },
        {
            key: "process",
            value: function process(txt, options, markup) {
                var _this = this;
                var self = this;
                var raw_text_chunks = txt.split(/\033\[/);
                var first_chunk = raw_text_chunks.shift(); // the first chunk is not the result of the split
                if (options === undefined || options === null) {
                    options = {};
                }
                options.clearLine = /\r/.test(txt); // check for Carriage Return
                var color_chunks = raw_text_chunks.map(function(chunk) {
                    return _this.processChunk(chunk, options, markup);
                });
                if (options && options.json) {
                    var first = self.processChunkJson("");
                    first.content = first_chunk;
                    first.clearLine = options.clearLine;
                    color_chunks.unshift(first);
                    if (options.remove_empty) {
                        color_chunks = color_chunks.filter(function(c) {
                            return !c.isEmpty();
                        });
                    }
                    return color_chunks;
                } else {
                    color_chunks.unshift(first_chunk);
                }
                return color_chunks.join("");
            }
        },
        {
            key: "processChunkJson",
            value: function processChunkJson(text, options, markup) {
                // Are we using classes or styles?
                options = typeof options == "undefined" ? {} : options;
                var use_classes = options.use_classes = typeof options.use_classes != "undefined" && options.use_classes;
                var key = options.key = use_classes ? "class" : "color";
                var result = {
                    content: text,
                    fg: null,
                    bg: null,
                    fg_truecolor: null,
                    bg_truecolor: null,
                    clearLine: options.clearLine,
                    decoration: null,
                    was_processed: false,
                    isEmpty: function isEmpty() {
                        return !result.content;
                    }
                };
                // Each "chunk" is the text after the CSI (ESC + "[") and before the next CSI/EOF.
                //
                // This regex matches four groups within a chunk.
                //
                // The first and third groups match code type.
                // We supported only SGR command. It has empty first group and "m" in third.
                //
                // The second group matches all of the number+semicolon command sequences
                // before the "m" (or other trailing) character.
                // These are the graphics or SGR commands.
                //
                // The last group is the text (including newlines) that is colored by
                // the other group"s commands.
                var matches = text.match(/^([!\x3c-\x3f]*)([\d;]*)([\x20-\x2c]*[\x40-\x7e])([\s\S]*)/m);
                if (!matches) return result;
                var orig_txt = result.content = matches[4];
                var nums = matches[2].split(";");
                // We currently support only "SGR" (Select Graphic Rendition)
                // Simply ignore if not a SGR command.
                if (matches[1] !== "" || matches[3] !== "m") {
                    return result;
                }
                if (!markup) {
                    return result;
                }
                var self = this;
                self.decoration = null;
                while(nums.length > 0){
                    var num_str = nums.shift();
                    var num = parseInt(num_str);
                    if (isNaN(num) || num === 0) {
                        self.fg = self.bg = self.decoration = null;
                    } else if (num === 1) {
                        self.decoration = "bold";
                    } else if (num === 2) {
                        self.decoration = "dim";
                    // Enable code 2 to get string
                    } else if (num == 3) {
                        self.decoration = "italic";
                    } else if (num == 4) {
                        self.decoration = "underline";
                    } else if (num == 5) {
                        self.decoration = "blink";
                    } else if (num === 7) {
                        self.decoration = "reverse";
                    } else if (num === 8) {
                        self.decoration = "hidden";
                    // Enable code 9 to get strikethrough
                    } else if (num === 9) {
                        self.decoration = "strikethrough";
                    } else if (num == 39) {
                        self.fg = null;
                    } else if (num == 49) {
                        self.bg = null;
                    // Foreground color
                    } else if (num >= 30 && num < 38) {
                        self.fg = ANSI_COLORS[0][num % 10][key];
                    // Foreground bright color
                    } else if (num >= 90 && num < 98) {
                        self.fg = ANSI_COLORS[1][num % 10][key];
                    // Background color
                    } else if (num >= 40 && num < 48) {
                        self.bg = ANSI_COLORS[0][num % 10][key];
                    // Background bright color
                    } else if (num >= 100 && num < 108) {
                        self.bg = ANSI_COLORS[1][num % 10][key];
                    } else if (num === 38 || num === 48) {
                        // extend color (38=fg, 48=bg)
                        var is_foreground = num === 38;
                        if (nums.length >= 1) {
                            var mode = nums.shift();
                            if (mode === "5" && nums.length >= 1) {
                                // palette color
                                var palette_index = parseInt(nums.shift());
                                if (palette_index >= 0 && palette_index <= 255) {
                                    if (!use_classes) {
                                        if (!this.PALETTE_COLORS) {
                                            self.setupPalette();
                                        }
                                        if (is_foreground) {
                                            self.fg = this.PALETTE_COLORS[palette_index];
                                        } else {
                                            self.bg = this.PALETTE_COLORS[palette_index];
                                        }
                                    } else {
                                        var klass = palette_index >= 16 ? "ansi-palette-" + palette_index : ANSI_COLORS[palette_index > 7 ? 1 : 0][palette_index % 8]["class"];
                                        if (is_foreground) {
                                            self.fg = klass;
                                        } else {
                                            self.bg = klass;
                                        }
                                    }
                                }
                            } else if (mode === "2" && nums.length >= 3) {
                                // true color
                                var r = parseInt(nums.shift());
                                var g = parseInt(nums.shift());
                                var b = parseInt(nums.shift());
                                if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {
                                    var color = r + ", " + g + ", " + b;
                                    if (!use_classes) {
                                        if (is_foreground) {
                                            self.fg = color;
                                        } else {
                                            self.bg = color;
                                        }
                                    } else {
                                        if (is_foreground) {
                                            self.fg = "ansi-truecolor";
                                            self.fg_truecolor = color;
                                        } else {
                                            self.bg = "ansi-truecolor";
                                            self.bg_truecolor = color;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (self.fg === null && self.bg === null && self.decoration === null) {
                    return result;
                } else {
                    var styles = [];
                    var classes = [];
                    var data = {};
                    result.fg = self.fg;
                    result.bg = self.bg;
                    result.fg_truecolor = self.fg_truecolor;
                    result.bg_truecolor = self.bg_truecolor;
                    result.decoration = self.decoration;
                    result.was_processed = true;
                    return result;
                }
            }
        },
        {
            key: "processChunk",
            value: function processChunk(text, options, markup) {
                var _this2 = this;
                var self = this;
                options = options || {};
                var jsonChunk = this.processChunkJson(text, options, markup);
                if (options.json) {
                    return jsonChunk;
                }
                if (jsonChunk.isEmpty()) {
                    return "";
                }
                if (!jsonChunk.was_processed) {
                    return jsonChunk.content;
                }
                var use_classes = options.use_classes;
                var styles = [];
                var classes = [];
                var data = {};
                var render_data = function render_data(data) {
                    var fragments = [];
                    var key = void 0;
                    for(key in data){
                        if (data.hasOwnProperty(key)) {
                            fragments.push("data-" + key + "=\"" + _this2.escapeForHtml(data[key]) + "\"");
                        }
                    }
                    return fragments.length > 0 ? " " + fragments.join(" ") : "";
                };
                if (jsonChunk.fg) {
                    if (use_classes) {
                        classes.push(jsonChunk.fg + "-fg");
                        if (jsonChunk.fg_truecolor !== null) {
                            data["ansi-truecolor-fg"] = jsonChunk.fg_truecolor;
                            jsonChunk.fg_truecolor = null;
                        }
                    } else {
                        styles.push("color:rgb(" + jsonChunk.fg + ")");
                    }
                }
                if (jsonChunk.bg) {
                    if (use_classes) {
                        classes.push(jsonChunk.bg + "-bg");
                        if (jsonChunk.bg_truecolor !== null) {
                            data["ansi-truecolor-bg"] = jsonChunk.bg_truecolor;
                            jsonChunk.bg_truecolor = null;
                        }
                    } else {
                        styles.push("background-color:rgb(" + jsonChunk.bg + ")");
                    }
                }
                if (jsonChunk.decoration) {
                    if (use_classes) {
                        classes.push("ansi-" + jsonChunk.decoration);
                    } else if (jsonChunk.decoration === "bold") {
                        styles.push("font-weight:bold");
                    } else if (jsonChunk.decoration === "dim") {
                        styles.push("opacity:0.5");
                    } else if (jsonChunk.decoration === "italic") {
                        styles.push("font-style:italic");
                    // underline and blink are treated bellow
                    } else if (jsonChunk.decoration === "reverse") {
                        styles.push("filter:invert(100%)");
                    } else if (jsonChunk.decoration === "hidden") {
                        styles.push("visibility:hidden");
                    } else if (jsonChunk.decoration === "strikethrough") {
                        styles.push("text-decoration:line-through");
                    } else {
                        styles.push("text-decoration:" + jsonChunk.decoration);
                    }
                }
                if (use_classes) {
                    return "<span class=\"" + classes.join(" ") + "\"" + render_data(data) + ">" + jsonChunk.content + "</span>";
                } else {
                    return "<span style=\"" + styles.join(";") + "\"" + render_data(data) + ">" + jsonChunk.content + "</span>";
                }
            }
        }
    ]);
    return Anser;
}();
module.exports = Anser;


}),
"./node_modules/react-native/Libraries/ActionSheetIOS/NativeActionSheetManager.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/ActionSheetIOS/NativeActionSheetManager.js ***!
  \****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeActionSheetManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeActionSheetManager */ "./node_modules/react-native/src/private/specs/modules/NativeActionSheetManager.js"), exports));
var _default = _NativeActionSheetManager.default;


}),
"./node_modules/react-native/Libraries/AppState/NativeAppState.js": 
/*!************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/AppState/NativeAppState.js ***!
  \************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeAppState = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeAppState */ "./node_modules/react-native/src/private/specs/modules/NativeAppState.js"), exports));
var _default = _NativeAppState.default;


}),
"./node_modules/react-native/Libraries/BugReporting/NativeBugReporting.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/BugReporting/NativeBugReporting.js ***!
  \********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeBugReporting = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeBugReporting */ "./node_modules/react-native/src/private/specs/modules/NativeBugReporting.js"), exports));
var _default = _NativeBugReporting.default;


}),
"./node_modules/react-native/Libraries/Components/AccessibilityInfo/NativeAccessibilityInfo.js": 
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/AccessibilityInfo/NativeAccessibilityInfo.js ***!
  \*****************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeAccessibilityInfo = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/modules/NativeAccessibilityInfo */ "./node_modules/react-native/src/private/specs/modules/NativeAccessibilityInfo.js"), exports));
var _default = _NativeAccessibilityInfo.default;


}),
"./node_modules/react-native/Libraries/Components/AccessibilityInfo/NativeAccessibilityManager.js": 
/*!********************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/AccessibilityInfo/NativeAccessibilityManager.js ***!
  \********************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeAccessibilityManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/modules/NativeAccessibilityManager */ "./node_modules/react-native/src/private/specs/modules/NativeAccessibilityManager.js"), exports));
var _default = _NativeAccessibilityManager.default;


}),
"./node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicatorViewNativeComponent.js": 
/*!******************************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicatorViewNativeComponent.js ***!
  \******************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _ActivityIndicatorViewNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/components/ActivityIndicatorViewNativeComponent */ "./node_modules/react-native/src/private/specs/components/ActivityIndicatorViewNativeComponent.js"), exports));
var _default = _ActivityIndicatorViewNativeComponent.default;


}),
"./node_modules/react-native/Libraries/Components/Clipboard/NativeClipboard.js": 
/*!*************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Clipboard/NativeClipboard.js ***!
  \*************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeClipboard = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/modules/NativeClipboard */ "./node_modules/react-native/src/private/specs/modules/NativeClipboard.js"), exports));
var _default = _NativeClipboard.default;


}),
"./node_modules/react-native/Libraries/Components/DrawerAndroid/AndroidDrawerLayoutNativeComponent.js": 
/*!************************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/DrawerAndroid/AndroidDrawerLayoutNativeComponent.js ***!
  \************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _AndroidDrawerLayoutNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/components/AndroidDrawerLayoutNativeComponent */ "./node_modules/react-native/src/private/specs/components/AndroidDrawerLayoutNativeComponent.js"), exports));
var _default = _AndroidDrawerLayoutNativeComponent.default;


}),
"./node_modules/react-native/Libraries/Components/LayoutConformance/LayoutConformanceNativeComponent.js": 
/*!**************************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/LayoutConformance/LayoutConformanceNativeComponent.js ***!
  \**************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../NativeComponent/NativeComponentRegistry */ "./node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js"));
var LayoutConformanceNativeComponent = _NativeComponentRegistry.get('LayoutConformance', ()=>({
        uiViewClassName: 'LayoutConformance',
        validAttributes: {
            mode: true
        }
    }));
var _default = LayoutConformanceNativeComponent;


}),
"./node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroidNativeComponent.js": 
/*!****************************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroidNativeComponent.js ***!
  \****************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _ProgressBarAndroidNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/components/ProgressBarAndroidNativeComponent */ "./node_modules/react-native/src/private/specs/components/ProgressBarAndroidNativeComponent.js"), exports));
var _default = _ProgressBarAndroidNativeComponent.default;


}),
"./node_modules/react-native/Libraries/Components/StatusBar/NativeStatusBarManagerAndroid.js": 
/*!***************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/StatusBar/NativeStatusBarManagerAndroid.js ***!
  \***************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeStatusBarManagerAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/modules/NativeStatusBarManagerAndroid */ "./node_modules/react-native/src/private/specs/modules/NativeStatusBarManagerAndroid.js"), exports));
var _default = _NativeStatusBarManagerAndroid.default;


}),
"./node_modules/react-native/Libraries/Components/StatusBar/NativeStatusBarManagerIOS.js": 
/*!***********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/StatusBar/NativeStatusBarManagerIOS.js ***!
  \***********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeStatusBarManagerIOS = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/modules/NativeStatusBarManagerIOS */ "./node_modules/react-native/src/private/specs/modules/NativeStatusBarManagerIOS.js"), exports));
var _default = _NativeStatusBarManagerIOS.default;


}),
"./node_modules/react-native/Libraries/Components/Switch/AndroidSwitchNativeComponent.js": 
/*!***********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Switch/AndroidSwitchNativeComponent.js ***!
  \***********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _AndroidSwitchNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/components/AndroidSwitchNativeComponent */ "./node_modules/react-native/src/private/specs/components/AndroidSwitchNativeComponent.js"), exports));
var _default = _AndroidSwitchNativeComponent.default;


}),
"./node_modules/react-native/Libraries/Components/Switch/SwitchNativeComponent.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Switch/SwitchNativeComponent.js ***!
  \****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _SwitchNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/components/SwitchNativeComponent */ "./node_modules/react-native/src/private/specs/components/SwitchNativeComponent.js"), exports));
var _default = _SwitchNativeComponent.default;


}),
"./node_modules/react-native/Libraries/Components/TextInput/RCTInputAccessoryViewNativeComponent.js": 
/*!**********************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/TextInput/RCTInputAccessoryViewNativeComponent.js ***!
  \**********************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _RCTInputAccessoryViewNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/components/RCTInputAccessoryViewNativeComponent */ "./node_modules/react-native/src/private/specs/components/RCTInputAccessoryViewNativeComponent.js"), exports));
var _default = _RCTInputAccessoryViewNativeComponent.default;


}),
"./node_modules/react-native/Libraries/Components/TextInput/RCTMultilineTextInputNativeComponent.js": 
/*!**********************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/TextInput/RCTMultilineTextInputNativeComponent.js ***!
  \**********************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../NativeComponent/NativeComponentRegistry */ "./node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js"));
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/codegenNativeCommands */ "./node_modules/react-native/Libraries/Utilities/codegenNativeCommands.js"));
var _RCTTextInputViewConfig = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./RCTTextInputViewConfig */ "./node_modules/react-native/Libraries/Components/TextInput/RCTTextInputViewConfig.js"));
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'focus',
        'blur',
        'setTextAndSelection'
    ]
});
var __INTERNAL_VIEW_CONFIG = _object_spread_props._(_object_spread._({
    uiViewClassName: 'RCTMultilineTextInputView'
}, _RCTTextInputViewConfig.default), {
    validAttributes: _object_spread_props._(_object_spread._({}, _RCTTextInputViewConfig.default.validAttributes), {
        dataDetectorTypes: true
    })
});
var MultilineTextInputNativeComponent = _NativeComponentRegistry.get('RCTMultilineTextInputView', ()=>__INTERNAL_VIEW_CONFIG);
var _default = MultilineTextInputNativeComponent;


}),
"./node_modules/react-native/Libraries/Components/ToastAndroid/NativeToastAndroid.js": 
/*!*******************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/ToastAndroid/NativeToastAndroid.js ***!
  \*******************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeToastAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/modules/NativeToastAndroid */ "./node_modules/react-native/src/private/specs/modules/NativeToastAndroid.js"), exports));
var _default = _NativeToastAndroid.default;


}),
"./node_modules/react-native/Libraries/Modal/NativeModalManager.js": 
/*!*************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Modal/NativeModalManager.js ***!
  \*************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeModalManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeModalManager */ "./node_modules/react-native/src/private/specs/modules/NativeModalManager.js"), exports));
var _default = _NativeModalManager.default;


}),
"./node_modules/react-native/Libraries/Modal/RCTModalHostViewNativeComponent.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Modal/RCTModalHostViewNativeComponent.js ***!
  \**************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _RCTModalHostViewNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/components/RCTModalHostViewNativeComponent */ "./node_modules/react-native/src/private/specs/components/RCTModalHostViewNativeComponent.js"), exports));
var _default = _RCTModalHostViewNativeComponent.default;


}),
"./node_modules/react-native/Libraries/NativeModules/specs/NativeDeviceEventManager.js": 
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/NativeModules/specs/NativeDeviceEventManager.js ***!
  \*********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeDeviceEventManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/modules/NativeDeviceEventManager */ "./node_modules/react-native/src/private/specs/modules/NativeDeviceEventManager.js"), exports));
var _default = _NativeDeviceEventManager.default;


}),
"./node_modules/react-native/Libraries/NativeModules/specs/NativeDialogManagerAndroid.js": 
/*!***********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/NativeModules/specs/NativeDialogManagerAndroid.js ***!
  \***********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeDialogManagerAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/modules/NativeDialogManagerAndroid */ "./node_modules/react-native/src/private/specs/modules/NativeDialogManagerAndroid.js"), exports));
var _default = _NativeDialogManagerAndroid.default;


}),
"./node_modules/react-native/Libraries/NativeModules/specs/NativeRedBox.js": 
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/NativeModules/specs/NativeRedBox.js ***!
  \*********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeRedBox = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/modules/NativeRedBox */ "./node_modules/react-native/src/private/specs/modules/NativeRedBox.js"), exports));
var _default = _NativeRedBox.default;


}),
"./node_modules/react-native/Libraries/PermissionsAndroid/NativePermissionsAndroid.js": 
/*!********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/PermissionsAndroid/NativePermissionsAndroid.js ***!
  \********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativePermissionsAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativePermissionsAndroid */ "./node_modules/react-native/src/private/specs/modules/NativePermissionsAndroid.js"), exports));
var _default = _NativePermissionsAndroid.default;


}),
"./node_modules/react-native/Libraries/PushNotificationIOS/NativePushNotificationManagerIOS.js": 
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/PushNotificationIOS/NativePushNotificationManagerIOS.js ***!
  \*****************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativePushNotificationManagerIOS = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativePushNotificationManagerIOS */ "./node_modules/react-native/src/private/specs/modules/NativePushNotificationManagerIOS.js"), exports));
var _default = _NativePushNotificationManagerIOS.default;


}),
"./node_modules/react-native/Libraries/ReactNative/NativeHeadlessJsTaskSupport.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/ReactNative/NativeHeadlessJsTaskSupport.js ***!
  \****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeHeadlessJsTaskSupport = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeHeadlessJsTaskSupport */ "./node_modules/react-native/src/private/specs/modules/NativeHeadlessJsTaskSupport.js"), exports));
var _default = _NativeHeadlessJsTaskSupport.default;


}),
"./node_modules/react-native/Libraries/Share/NativeShareModule.js": 
/*!************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Share/NativeShareModule.js ***!
  \************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeShareModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeShareModule */ "./node_modules/react-native/src/private/specs/modules/NativeShareModule.js"), exports));
var _default = _NativeShareModule.default;


}),
"./node_modules/react-native/Libraries/Utilities/NativeAppearance.js": 
/*!***************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/NativeAppearance.js ***!
  \***************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeAppearance = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../src/private/specs/modules/NativeAppearance */ "./node_modules/react-native/src/private/specs/modules/NativeAppearance.js"));
var _default = _NativeAppearance.default;


}),
"./node_modules/react-native/Libraries/Vibration/NativeVibration.js": 
/*!**************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Vibration/NativeVibration.js ***!
  \**************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeVibration = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeVibration */ "./node_modules/react-native/src/private/specs/modules/NativeVibration.js"), exports));
var _default = _NativeVibration.default;


}),
"./node_modules/react-native/src/private/specs/components/ActivityIndicatorViewNativeComponent.js": 
/*!********************************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/components/ActivityIndicatorViewNativeComponent.js ***!
  \********************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeComponent */ "./node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js"));
var NativeComponentRegistry = __webpack_require__(/*! react-native/Libraries/NativeComponent/NativeComponentRegistry */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/NativeComponentRegistry/react-native/Libraries/NativeComponent/NativeComponentRegistry");
var nativeComponentName = 'RCTActivityIndicatorView';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTActivityIndicatorView',
    validAttributes: {
        hidesWhenStopped: true,
        animating: true,
        color: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        size: true
    }
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
"./node_modules/react-native/src/private/specs/components/AndroidDrawerLayoutNativeComponent.js": 
/*!******************************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/components/AndroidDrawerLayoutNativeComponent.js ***!
  \******************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeCommands */ "./node_modules/react-native/Libraries/Utilities/codegenNativeCommands.js"));
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeComponent */ "./node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var NativeComponentRegistry = __webpack_require__(/*! react-native/Libraries/NativeComponent/NativeComponentRegistry */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/NativeComponentRegistry/react-native/Libraries/NativeComponent/NativeComponentRegistry");
var ConditionallyIgnoredEventHandlers = (__webpack_require__(/*! react-native/Libraries/NativeComponent/ViewConfigIgnore */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/ViewConfigIgnore/react-native/Libraries/NativeComponent/ViewConfigIgnore")/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(/*! react-native/Libraries/ReactNative/RendererProxy */ "webpack/sharing/consume/default/react-native/Libraries/ReactNative/RendererProxy/react-native/Libraries/ReactNative/RendererProxy")/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'AndroidDrawerLayout';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidDrawerLayout',
    directEventTypes: {
        topDrawerSlide: {
            registrationName: 'onDrawerSlide'
        },
        topDrawerStateChanged: {
            registrationName: 'onDrawerStateChanged'
        },
        topDrawerOpen: {
            registrationName: 'onDrawerOpen'
        },
        topDrawerClose: {
            registrationName: 'onDrawerClose'
        }
    },
    validAttributes: _object_spread._({
        keyboardDismissMode: true,
        drawerBackgroundColor: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        drawerPosition: true,
        drawerWidth: true,
        drawerLockMode: true,
        statusBarBackgroundColor: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        }
    }, ConditionallyIgnoredEventHandlers({
        onDrawerSlide: true,
        onDrawerStateChanged: true,
        onDrawerOpen: true,
        onDrawerClose: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);
var Commands = {
    openDrawer (ref) {
        dispatchCommand(ref, "openDrawer", []);
    },
    closeDrawer (ref) {
        dispatchCommand(ref, "closeDrawer", []);
    }
};


}),
"./node_modules/react-native/src/private/specs/components/AndroidSwitchNativeComponent.js": 
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/components/AndroidSwitchNativeComponent.js ***!
  \************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeCommands */ "./node_modules/react-native/Libraries/Utilities/codegenNativeCommands.js"));
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeComponent */ "./node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var NativeComponentRegistry = __webpack_require__(/*! react-native/Libraries/NativeComponent/NativeComponentRegistry */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/NativeComponentRegistry/react-native/Libraries/NativeComponent/NativeComponentRegistry");
var ConditionallyIgnoredEventHandlers = (__webpack_require__(/*! react-native/Libraries/NativeComponent/ViewConfigIgnore */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/ViewConfigIgnore/react-native/Libraries/NativeComponent/ViewConfigIgnore")/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(/*! react-native/Libraries/ReactNative/RendererProxy */ "webpack/sharing/consume/default/react-native/Libraries/ReactNative/RendererProxy/react-native/Libraries/ReactNative/RendererProxy")/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'AndroidSwitch';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidSwitch',
    bubblingEventTypes: {
        topChange: {
            phasedRegistrationNames: {
                captured: 'onChangeCapture',
                bubbled: 'onChange'
            }
        }
    },
    validAttributes: _object_spread._({
        disabled: true,
        enabled: true,
        thumbColor: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        trackColorForFalse: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        trackColorForTrue: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        value: true,
        on: true,
        thumbTintColor: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        trackTintColor: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        }
    }, ConditionallyIgnoredEventHandlers({
        onChange: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);
var Commands = {
    setNativeValue (ref, value) {
        dispatchCommand(ref, "setNativeValue", [
            value
        ]);
    }
};


}),
"./node_modules/react-native/src/private/specs/components/ProgressBarAndroidNativeComponent.js": 
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/components/ProgressBarAndroidNativeComponent.js ***!
  \*****************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeComponent */ "./node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js"));
var NativeComponentRegistry = __webpack_require__(/*! react-native/Libraries/NativeComponent/NativeComponentRegistry */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/NativeComponentRegistry/react-native/Libraries/NativeComponent/NativeComponentRegistry");
var nativeComponentName = 'AndroidProgressBar';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidProgressBar',
    validAttributes: {
        styleAttr: true,
        typeAttr: true,
        indeterminate: true,
        progress: true,
        animating: true,
        color: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        testID: true
    }
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
"./node_modules/react-native/src/private/specs/components/RCTInputAccessoryViewNativeComponent.js": 
/*!********************************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/components/RCTInputAccessoryViewNativeComponent.js ***!
  \********************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeComponent */ "./node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js"));
var NativeComponentRegistry = __webpack_require__(/*! react-native/Libraries/NativeComponent/NativeComponentRegistry */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/NativeComponentRegistry/react-native/Libraries/NativeComponent/NativeComponentRegistry");
var nativeComponentName = 'RCTInputAccessoryView';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTInputAccessoryView',
    validAttributes: {
        backgroundColor: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        }
    }
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
"./node_modules/react-native/src/private/specs/components/RCTModalHostViewNativeComponent.js": 
/*!***************************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/components/RCTModalHostViewNativeComponent.js ***!
  \***************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeComponent */ "./node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js"));
var NativeComponentRegistry = __webpack_require__(/*! react-native/Libraries/NativeComponent/NativeComponentRegistry */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/NativeComponentRegistry/react-native/Libraries/NativeComponent/NativeComponentRegistry");
var ConditionallyIgnoredEventHandlers = (__webpack_require__(/*! react-native/Libraries/NativeComponent/ViewConfigIgnore */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/ViewConfigIgnore/react-native/Libraries/NativeComponent/ViewConfigIgnore")/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var nativeComponentName = 'RCTModalHostView';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTModalHostView',
    directEventTypes: {
        topRequestClose: {
            registrationName: 'onRequestClose'
        },
        topShow: {
            registrationName: 'onShow'
        },
        topDismiss: {
            registrationName: 'onDismiss'
        },
        topOrientationChange: {
            registrationName: 'onOrientationChange'
        }
    },
    validAttributes: _object_spread._({
        animationType: true,
        presentationStyle: true,
        transparent: true,
        statusBarTranslucent: true,
        navigationBarTranslucent: true,
        hardwareAccelerated: true,
        visible: true,
        animated: true,
        supportedOrientations: true,
        identifier: true
    }, ConditionallyIgnoredEventHandlers({
        onRequestClose: true,
        onShow: true,
        onDismiss: true,
        onOrientationChange: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
"./node_modules/react-native/src/private/specs/components/SwitchNativeComponent.js": 
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/components/SwitchNativeComponent.js ***!
  \*****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeCommands */ "./node_modules/react-native/Libraries/Utilities/codegenNativeCommands.js"));
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeComponent */ "./node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var NativeComponentRegistry = __webpack_require__(/*! react-native/Libraries/NativeComponent/NativeComponentRegistry */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/NativeComponentRegistry/react-native/Libraries/NativeComponent/NativeComponentRegistry");
var ConditionallyIgnoredEventHandlers = (__webpack_require__(/*! react-native/Libraries/NativeComponent/ViewConfigIgnore */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/ViewConfigIgnore/react-native/Libraries/NativeComponent/ViewConfigIgnore")/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(/*! react-native/Libraries/ReactNative/RendererProxy */ "webpack/sharing/consume/default/react-native/Libraries/ReactNative/RendererProxy/react-native/Libraries/ReactNative/RendererProxy")/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'RCTSwitch';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTSwitch',
    bubblingEventTypes: {
        topChange: {
            phasedRegistrationNames: {
                captured: 'onChangeCapture',
                bubbled: 'onChange'
            }
        }
    },
    validAttributes: _object_spread._({
        disabled: true,
        value: true,
        tintColor: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        onTintColor: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        thumbTintColor: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        thumbColor: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        trackColorForFalse: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        trackColorForTrue: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        }
    }, ConditionallyIgnoredEventHandlers({
        onChange: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);
var Commands = {
    setValue (ref, value) {
        dispatchCommand(ref, "setValue", [
            value
        ]);
    }
};


}),
"./node_modules/react-native/src/private/specs/modules/NativeAccessibilityInfo.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeAccessibilityInfo.js ***!
  \****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('AccessibilityInfo');


}),
"./node_modules/react-native/src/private/specs/modules/NativeAccessibilityManager.js": 
/*!*******************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeAccessibilityManager.js ***!
  \*******************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('AccessibilityManager');


}),
"./node_modules/react-native/src/private/specs/modules/NativeActionSheetManager.js": 
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeActionSheetManager.js ***!
  \*****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('ActionSheetManager');


}),
"./node_modules/react-native/src/private/specs/modules/NativeAppState.js": 
/*!*******************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeAppState.js ***!
  \*******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.getEnforcing('AppState');


}),
"./node_modules/react-native/src/private/specs/modules/NativeAppearance.js": 
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeAppearance.js ***!
  \*********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('Appearance');


}),
"./node_modules/react-native/src/private/specs/modules/NativeBugReporting.js": 
/*!***********************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeBugReporting.js ***!
  \***********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('BugReporting');


}),
"./node_modules/react-native/src/private/specs/modules/NativeClipboard.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeClipboard.js ***!
  \********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.getEnforcing('Clipboard');


}),
"./node_modules/react-native/src/private/specs/modules/NativeDevMenu.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeDevMenu.js ***!
  \******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.getEnforcing('DevMenu');


}),
"./node_modules/react-native/src/private/specs/modules/NativeDeviceEventManager.js": 
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeDeviceEventManager.js ***!
  \*****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('DeviceEventManager');


}),
"./node_modules/react-native/src/private/specs/modules/NativeDialogManagerAndroid.js": 
/*!*******************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeDialogManagerAndroid.js ***!
  \*******************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('DialogManagerAndroid');


}),
"./node_modules/react-native/src/private/specs/modules/NativeHeadlessJsTaskSupport.js": 
/*!********************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeHeadlessJsTaskSupport.js ***!
  \********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('HeadlessJsTaskSupport');


}),
"./node_modules/react-native/src/private/specs/modules/NativeModalManager.js": 
/*!***********************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeModalManager.js ***!
  \***********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('ModalManager');


}),
"./node_modules/react-native/src/private/specs/modules/NativePermissionsAndroid.js": 
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativePermissionsAndroid.js ***!
  \*****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('PermissionsAndroid');


}),
"./node_modules/react-native/src/private/specs/modules/NativePushNotificationManagerIOS.js": 
/*!*************************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativePushNotificationManagerIOS.js ***!
  \*************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('PushNotificationManager');


}),
"./node_modules/react-native/src/private/specs/modules/NativeRedBox.js": 
/*!*****************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeRedBox.js ***!
  \*****************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('RedBox');


}),
"./node_modules/react-native/src/private/specs/modules/NativeShareModule.js": 
/*!**********************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeShareModule.js ***!
  \**********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('ShareModule');


}),
"./node_modules/react-native/src/private/specs/modules/NativeStatusBarManagerAndroid.js": 
/*!**********************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeStatusBarManagerAndroid.js ***!
  \**********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var NativeModule = _TurboModuleRegistry.getEnforcing('StatusBarManager');
var constants = null;
var NativeStatusBarManager = {
    getConstants () {
        if (constants == null) {
            constants = NativeModule.getConstants();
        }
        return constants;
    },
    setColor (color, animated) {
        NativeModule.setColor(color, animated);
    },
    setTranslucent (translucent) {
        NativeModule.setTranslucent(translucent);
    },
    setStyle (statusBarStyle) {
        NativeModule.setStyle(statusBarStyle);
    },
    setHidden (hidden) {
        NativeModule.setHidden(hidden);
    }
};
var _default = NativeStatusBarManager;


}),
"./node_modules/react-native/src/private/specs/modules/NativeStatusBarManagerIOS.js": 
/*!******************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeStatusBarManagerIOS.js ***!
  \******************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var NativeModule = _TurboModuleRegistry.getEnforcing('StatusBarManager');
var constants = null;
var NativeStatusBarManager = {
    getConstants () {
        if (constants == null) {
            constants = NativeModule.getConstants();
        }
        return constants;
    },
    getHeight (callback) {
        NativeModule.getHeight(callback);
    },
    setNetworkActivityIndicatorVisible (visible) {
        NativeModule.setNetworkActivityIndicatorVisible(visible);
    },
    addListener (eventType) {
        NativeModule.addListener(eventType);
    },
    removeListeners (count) {
        NativeModule.removeListeners(count);
    },
    setStyle (statusBarStyle, animated) {
        NativeModule.setStyle(statusBarStyle, animated);
    },
    setHidden (hidden, withAnimation) {
        NativeModule.setHidden(hidden, withAnimation);
    }
};
var _default = NativeStatusBarManager;


}),
"./node_modules/react-native/src/private/specs/modules/NativeToastAndroid.js": 
/*!***********************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeToastAndroid.js ***!
  \***********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.getEnforcing('ToastAndroid');


}),
"./node_modules/react-native/src/private/specs/modules/NativeVibration.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeVibration.js ***!
  \********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.getEnforcing('Vibration');


}),
"./node_modules/react-native/Libraries/ActionSheetIOS/ActionSheetIOS.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/ActionSheetIOS/ActionSheetIOS.js ***!
  \******************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _NativeActionSheetManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeActionSheetManager */ "./node_modules/react-native/Libraries/ActionSheetIOS/NativeActionSheetManager.js"));
var processColor = (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"]);
var invariant = __webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js");
/**
 * Display action sheets and share sheets on iOS.
 *
 * See https://reactnative.dev/docs/actionsheetios
 */ var ActionSheetIOS = {
    /**
   * Display an iOS action sheet.
   *
   * The `options` object must contain one or more of:
   *
   * - `options` (array of strings) - a list of button titles (required)
   * - `cancelButtonIndex` (int) - index of cancel button in `options`
   * - `destructiveButtonIndex` (int or array of ints) - index or indices of destructive buttons in `options`
   * - `title` (string) - a title to show above the action sheet
   * - `message` (string) - a message to show below the title
   * - `disabledButtonIndices` (array of numbers) - a list of button indices which should be disabled
   *
   * The 'callback' function takes one parameter, the zero-based index
   * of the selected item.
   *
   * See https://reactnative.dev/docs/actionsheetios#showactionsheetwithoptions
   */ showActionSheetWithOptions (options, callback) {
        invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
        invariant(typeof callback === 'function', 'Must provide a valid callback');
        invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
        var tintColor = options.tintColor, cancelButtonTintColor = options.cancelButtonTintColor, disabledButtonTintColor = options.disabledButtonTintColor, destructiveButtonIndex = options.destructiveButtonIndex, remainingOptions = _object_without_properties._(options, [
            "tintColor",
            "cancelButtonTintColor",
            "disabledButtonTintColor",
            "destructiveButtonIndex"
        ]);
        var destructiveButtonIndices = null;
        if (Array.isArray(destructiveButtonIndex)) {
            destructiveButtonIndices = destructiveButtonIndex;
        } else if (typeof destructiveButtonIndex === 'number') {
            destructiveButtonIndices = [
                destructiveButtonIndex
            ];
        }
        var processedTintColor = processColor(tintColor);
        var processedCancelButtonTintColor = processColor(cancelButtonTintColor);
        var processedDisabledButtonTintColor = processColor(disabledButtonTintColor);
        invariant(processedTintColor == null || typeof processedTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions tintColor');
        invariant(processedCancelButtonTintColor == null || typeof processedCancelButtonTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions cancelButtonTintColor');
        invariant(processedDisabledButtonTintColor == null || typeof processedDisabledButtonTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions disabledButtonTintColor');
        _NativeActionSheetManager.default.showActionSheetWithOptions(_object_spread_props._(_object_spread._({}, remainingOptions), {
            // $FlowFixMe[incompatible-call]
            tintColor: processedTintColor,
            // $FlowFixMe[incompatible-call]
            cancelButtonTintColor: processedCancelButtonTintColor,
            // $FlowFixMe[incompatible-call]
            disabledButtonTintColor: processedDisabledButtonTintColor,
            destructiveButtonIndices
        }), callback);
    },
    /**
   * Display the iOS share sheet. The `options` object should contain
   * one or both of `message` and `url` and can additionally have
   * a `subject` or `excludedActivityTypes`:
   *
   * - `url` (string) - a URL to share
   * - `message` (string) - a message to share
   * - `subject` (string) - a subject for the message
   * - `excludedActivityTypes` (array) - the activities to exclude from
   *   the ActionSheet
   * - `tintColor` (color) - tint color of the buttons
   *
   * The 'failureCallback' function takes one parameter, an error object.
   * The only property defined on this object is an optional `stack` property
   * of type `string`.
   *
   * The 'successCallback' function takes two parameters:
   *
   * - a boolean value signifying success or failure
   * - a string that, in the case of success, indicates the method of sharing
   *
   * See https://reactnative.dev/docs/actionsheetios#showshareactionsheetwithoptions
   */ showShareActionSheetWithOptions (options, failureCallback, successCallback) {
        invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
        invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
        invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
        invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
        _NativeActionSheetManager.default.showShareActionSheetWithOptions(_object_spread_props._(_object_spread._({}, options), {
            tintColor: processColor(options.tintColor)
        }), failureCallback, successCallback);
    },
    /**
   * Dismisses the most upper iOS action sheet presented, if no action sheet is
   * present a warning is displayed.
   */ dismissActionSheet: ()=>{
        invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
        if (typeof _NativeActionSheetManager.default.dismissActionSheet === 'function') {
            _NativeActionSheetManager.default.dismissActionSheet();
        }
    }
};
module.exports = ActionSheetIOS;


}),
"./node_modules/react-native/Libraries/Alert/Alert.js": 
/*!************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Alert/Alert.js ***!
  \************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _RCTAlertManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./RCTAlertManager */ "./node_modules/react-native/Libraries/Alert/RCTAlertManager.android.js"));
/**
 * Launches an alert dialog with the specified title and message.
 *
 * See https://reactnative.dev/docs/alert
 */ var Alert = /*#__PURE__*/ function() {
    "use strict";
    function Alert() {
        _class_call_check._(this, Alert);
    }
    _create_class._(Alert, null, [
        {
            key: "alert",
            value: function alert(title, message, buttons, options) {
                if (_Platform.default.OS === 'ios') {
                    Alert.prompt(title, message, buttons, 'default', undefined, undefined, options);
                } else if (_Platform.default.OS === 'android') {
                    var NativeDialogManagerAndroid = (__webpack_require__(/*! ../NativeModules/specs/NativeDialogManagerAndroid */ "./node_modules/react-native/Libraries/NativeModules/specs/NativeDialogManagerAndroid.js")/* ["default"] */["default"]);
                    if (!NativeDialogManagerAndroid) {
                        return;
                    }
                    var constants = NativeDialogManagerAndroid.getConstants();
                    var config = {
                        title: title || '',
                        message: message || '',
                        cancelable: false
                    };
                    if (options && options.cancelable) {
                        config.cancelable = options.cancelable;
                    }
                    // At most three buttons (neutral, negative, positive). Ignore rest.
                    // The text 'OK' should be probably localized. iOS Alert does that in native.
                    var defaultPositiveText = 'OK';
                    var validButtons = buttons ? buttons.slice(0, 3) : [
                        {
                            text: defaultPositiveText
                        }
                    ];
                    var buttonPositive = validButtons.pop();
                    var buttonNegative = validButtons.pop();
                    var buttonNeutral = validButtons.pop();
                    if (buttonNeutral) {
                        config.buttonNeutral = buttonNeutral.text || '';
                    }
                    if (buttonNegative) {
                        config.buttonNegative = buttonNegative.text || '';
                    }
                    if (buttonPositive) {
                        config.buttonPositive = buttonPositive.text || defaultPositiveText;
                    }
                    /* $FlowFixMe[missing-local-annot] The type annotation(s) required by
       * Flow's LTI update could not be added via codemod */ var onAction = (action, buttonKey)=>{
                        if (action === constants.buttonClicked) {
                            if (buttonKey === constants.buttonNeutral) {
                                // $FlowFixMe[incompatible-type]
                                buttonNeutral.onPress && buttonNeutral.onPress();
                            } else if (buttonKey === constants.buttonNegative) {
                                // $FlowFixMe[incompatible-type]
                                buttonNegative.onPress && buttonNegative.onPress();
                            } else if (buttonKey === constants.buttonPositive) {
                                // $FlowFixMe[incompatible-type]
                                buttonPositive.onPress && buttonPositive.onPress();
                            }
                        } else if (action === constants.dismissed) {
                            options && options.onDismiss && options.onDismiss();
                        }
                    };
                    var onError = (errorMessage)=>console.warn(errorMessage);
                    NativeDialogManagerAndroid.showAlert(config, onError, onAction);
                }
            }
        },
        {
            key: "prompt",
            value: function prompt(title, message, callbackOrButtons, ref, defaultValue, keyboardType, options) {
                var type = ref === void 0 ? 'plain-text' : ref;
                if (_Platform.default.OS === 'ios') {
                    var callbacks = [];
                    var buttons = [];
                    var cancelButtonKey;
                    var destructiveButtonKey;
                    var preferredButtonKey;
                    if (typeof callbackOrButtons === 'function') {
                        callbacks = [
                            callbackOrButtons
                        ];
                    } else if (Array.isArray(callbackOrButtons)) {
                        callbackOrButtons.forEach((btn, index)=>{
                            callbacks[index] = btn.onPress;
                            if (btn.style === 'cancel') {
                                cancelButtonKey = String(index);
                            } else if (btn.style === 'destructive') {
                                destructiveButtonKey = String(index);
                            }
                            if (btn.isPreferred) {
                                preferredButtonKey = String(index);
                            }
                            if (btn.text || index < (callbackOrButtons || []).length - 1) {
                                var btnDef = {};
                                btnDef[index] = btn.text || '';
                                buttons.push(btnDef);
                            }
                        });
                    }
                    _RCTAlertManager.default.alertWithArgs({
                        title: title || '',
                        message: message || undefined,
                        buttons,
                        type: type || undefined,
                        defaultValue,
                        cancelButtonKey,
                        destructiveButtonKey,
                        preferredButtonKey,
                        keyboardType,
                        userInterfaceStyle: (options === null || options === void 0 ? void 0 : options.userInterfaceStyle) || undefined
                    }, (id, value)=>{
                        var cb = callbacks[id];
                        cb && cb(value);
                    });
                }
            }
        }
    ]);
    return Alert;
}();
module.exports = Alert;


}),
"./node_modules/react-native/Libraries/Alert/RCTAlertManager.android.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Alert/RCTAlertManager.android.js ***!
  \******************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeDialogManagerAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../NativeModules/specs/NativeDialogManagerAndroid */ "./node_modules/react-native/Libraries/NativeModules/specs/NativeDialogManagerAndroid.js"));
function emptyCallback() {}
module.exports = {
    alertWithArgs: function(args, callback) {
        // TODO(5998984): Polyfill it correctly with DialogManagerAndroid
        if (!_NativeDialogManagerAndroid.default) {
            return;
        }
        _NativeDialogManagerAndroid.default.showAlert(args, emptyCallback, callback || emptyCallback);
    }
};


}),
"./node_modules/react-native/Libraries/Animated/useAnimatedValue.js": 
/*!**************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/useAnimatedValue.js ***!
  \**************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useAnimatedValue;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _Animated = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./Animated */ "./node_modules/react-native/Libraries/Animated/Animated.js"));
var _react = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
function useAnimatedValue(initialValue, config) {
    var ref = (0, _react.useRef)(null);
    if (ref.current == null) {
        ref.current = new _Animated.default.Value(initialValue, config);
    }
    return ref.current;
}


}),
"./node_modules/react-native/Libraries/AppState/AppState.js": 
/*!******************************************************************!*\
  !*** ./node_modules/react-native/Libraries/AppState/AppState.js ***!
  \******************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../EventEmitter/NativeEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js"));
var _logError = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/logError */ "./node_modules/react-native/Libraries/Utilities/logError.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _NativeAppState = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeAppState */ "./node_modules/react-native/Libraries/AppState/NativeAppState.js"));
/**
 * `AppState` can tell you if the app is in the foreground or background,
 * and notify you when the state changes.
 *
 * See https://reactnative.dev/docs/appstate
 */ var AppState = /*#__PURE__*/ function() {
    "use strict";
    function AppState() {
        _class_call_check._(this, AppState);
        this.currentState = null;
        if (_NativeAppState.default == null) {
            this.isAvailable = false;
        } else {
            this.isAvailable = true;
            var emitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
            // If you want to use the native module on other platforms, please remove this condition and test its behavior
            _Platform.default.OS !== 'ios' ? null : _NativeAppState.default);
            this._emitter = emitter;
            this.currentState = _NativeAppState.default.getConstants().initialAppState;
            var eventUpdated = false;
            // TODO: this is a terrible solution - in order to ensure `currentState`
            // prop is up to date, we have to register an observer that updates it
            // whenever the state changes, even if nobody cares. We should just
            // deprecate the `currentState` property and get rid of this.
            emitter.addListener('appStateDidChange', (appStateData)=>{
                eventUpdated = true;
                this.currentState = appStateData.app_state;
            });
            // TODO: see above - this request just populates the value of `currentState`
            // when the module is first initialized. Would be better to get rid of the
            // prop and expose `getCurrentAppState` method directly.
            // $FlowExpectedError[incompatible-call]
            _NativeAppState.default.getCurrentAppState((appStateData)=>{
                // It's possible that the state will have changed here & listeners need to be notified
                if (!eventUpdated && this.currentState !== appStateData.app_state) {
                    this.currentState = appStateData.app_state;
                    // $FlowFixMe[incompatible-call]
                    emitter.emit('appStateDidChange', appStateData);
                }
            }, _logError.default);
        }
    }
    _create_class._(AppState, [
        {
            /**
   * Add a handler to AppState changes by listening to the `change` event type
   * and providing the handler.
   *
   * See https://reactnative.dev/docs/appstate#addeventlistener
   */ key: "addEventListener",
            value: function addEventListener(type, handler) {
                var emitter = this._emitter;
                if (emitter == null) {
                    throw new Error('Cannot use AppState when `isAvailable` is false.');
                }
                switch(type){
                    case 'change':
                        // $FlowIssue[invalid-tuple-arity] Flow cannot refine handler based on the event type
                        var changeHandler = handler;
                        return emitter.addListener('appStateDidChange', (appStateData)=>{
                            changeHandler(appStateData.app_state);
                        });
                    case 'memoryWarning':
                        // $FlowIssue[invalid-tuple-arity] Flow cannot refine handler based on the event type
                        var memoryWarningHandler = handler;
                        return emitter.addListener('memoryWarning', memoryWarningHandler);
                    case 'blur':
                    case 'focus':
                        // $FlowIssue[invalid-tuple-arity] Flow cannot refine handler based on the event type
                        var focusOrBlurHandler = handler;
                        return emitter.addListener('appStateFocusChange', (hasFocus)=>{
                            if (type === 'blur' && !hasFocus) {
                                focusOrBlurHandler();
                            }
                            if (type === 'focus' && hasFocus) {
                                focusOrBlurHandler();
                            }
                        });
                }
                throw new Error('Trying to subscribe to unknown event: ' + type);
            }
        }
    ]);
    return AppState;
}();
module.exports = new AppState();


}),
"./node_modules/react-native/Libraries/BugReporting/BugReporting.js": 
/*!**************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/BugReporting/BugReporting.js ***!
  \**************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../EventEmitter/RCTDeviceEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js"));
var _NativeRedBox = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../NativeModules/specs/NativeRedBox */ "./node_modules/react-native/Libraries/NativeModules/specs/NativeRedBox.js"));
var _NativeBugReporting = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeBugReporting */ "./node_modules/react-native/Libraries/BugReporting/NativeBugReporting.js"));
function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', ()=>__webpack_require__(/*! ./dumpReactTree */ "./node_modules/react-native/Libraries/BugReporting/dumpReactTree.js")());
}
/**
 * A simple class for collecting bug report data. Components can add sources that will be queried when a bug report
 * is created via `collectExtraData`. For example, a list component might add a source that provides the list of rows
 * that are currently visible on screen. Components should also remember to call `remove()` on the object that is
 * returned by `addSource` when they are unmounted.
 */ var BugReporting = /*#__PURE__*/ function() {
    "use strict";
    function BugReporting() {
        _class_call_check._(this, BugReporting);
    }
    _create_class._(BugReporting, null, [
        {
            key: "_maybeInit",
            value: function _maybeInit() {
                if (!BugReporting._subscription) {
                    BugReporting._subscription = _RCTDeviceEventEmitter.default.addListener('collectBugExtraData', // $FlowFixMe[method-unbinding]
                    BugReporting.collectExtraData, null);
                    defaultExtras();
                }
                if (!BugReporting._redboxSubscription) {
                    BugReporting._redboxSubscription = _RCTDeviceEventEmitter.default.addListener('collectRedBoxExtraData', // $FlowFixMe[method-unbinding]
                    BugReporting.collectExtraData, null);
                }
            }
        },
        {
            key: "addSource",
            value: /**
   * Maps a string key to a simple callback that should return a string payload to be attached
   * to a bug report. Source callbacks are called when `collectExtraData` is called.
   *
   * Returns an object to remove the source when the component unmounts.
   *
   * Conflicts trample with a warning.
   */ function addSource(key, callback) {
                return this._addSource(key, callback, BugReporting._extraSources);
            }
        },
        {
            key: "addFileSource",
            value: /**
   * Maps a string key to a simple callback that should return a string payload to be attached
   * to a bug report. Source callbacks are called when `collectExtraData` is called.
   *
   * Returns an object to remove the source when the component unmounts.
   *
   * Conflicts trample with a warning.
   */ function addFileSource(key, callback) {
                return this._addSource(key, callback, BugReporting._fileSources);
            }
        },
        {
            key: "_addSource",
            value: function _addSource(key, callback, source) {
                BugReporting._maybeInit();
                if (source.has(key)) {
                    console.warn(`BugReporting.add* called multiple times for same key '${key}'`);
                }
                source.set(key, callback);
                return {
                    remove: ()=>{
                        source.delete(key);
                    }
                };
            }
        },
        {
            key: "collectExtraData",
            value: /**
   * This can be called from a native bug reporting flow, or from JS code.
   *
   * If available, this will call `NativeModules.BugReporting.setExtraData(extraData)`
   * after collecting `extraData`.
   */ function collectExtraData() {
                var extraData = {};
                for (var ref of BugReporting._extraSources){
                    var _ref = _sliced_to_array._(ref, 2), key = _ref[0], callback = _ref[1];
                    extraData[key] = callback();
                }
                var fileData = {};
                for (var ref1 of BugReporting._fileSources){
                    var _ref1 = _sliced_to_array._(ref1, 2), key1 = _ref1[0], callback1 = _ref1[1];
                    fileData[key1] = callback1();
                }
                if (_NativeBugReporting.default != null && _NativeBugReporting.default.setExtraData != null) {
                    _NativeBugReporting.default.setExtraData(extraData, fileData);
                }
                if (_NativeRedBox.default != null && _NativeRedBox.default.setExtraData != null) {
                    _NativeRedBox.default.setExtraData(extraData, 'From BugReporting.js');
                }
                return {
                    extras: extraData,
                    files: fileData
                };
            }
        }
    ]);
    return BugReporting;
}();
BugReporting._extraSources = new Map();
BugReporting._fileSources = new Map();
BugReporting._subscription = null;
BugReporting._redboxSubscription = null;
module.exports = BugReporting;


}),
"./node_modules/react-native/Libraries/BugReporting/dumpReactTree.js": 
/*!***************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/BugReporting/dumpReactTree.js ***!
  \***************************************************************************/
(function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
/*
const getReactData = require('getReactData');

const INDENTATION_SIZE = 2;
const MAX_DEPTH = 2;
const MAX_STRING_LENGTH = 50;
*/ /**
 * Dump all React Native root views and their content. This function tries
 * it best to get the content but ultimately relies on implementation details
 * of React and will fail in future versions.
 */ function dumpReactTree() {
    try {
        return getReactTree();
    } catch (e) {
        return 'Failed to dump react tree: ' + e;
    }
}
function getReactTree() {
    // TODO(sema): Reenable tree dumps using the Fiber tree structure. #15945684
    return 'React tree dumps have been temporarily disabled while React is ' + 'upgraded to Fiber.';
/*
  let output = '';
  const rootIds = Object.getOwnPropertyNames(ReactNativeMount._instancesByContainerID);
  for (const rootId of rootIds) {
    const instance = ReactNativeMount._instancesByContainerID[rootId];
    output += `============ Root ID: ${rootId} ============\n`;
    output += dumpNode(instance, 0);
    output += `============ End root ID: ${rootId} ============\n`;
  }
  return output;
*/ }
/*
function dumpNode(node: Object, indentation: number) {
  const data = getReactData(node);
  if (data.nodeType === 'Text') {
    return indent(indentation) + data.text + '\n';
  } else if (data.nodeType === 'Empty') {
    return '';
  }
  let output = indent(indentation) + `<${data.name}`;
  if (data.nodeType === 'Composite') {
    for (const propName of Object.getOwnPropertyNames(data.props || {})) {
      if (isNormalProp(propName)) {
        try {
          const value = convertValue(data.props[propName]);
          if (value) {
            output += ` ${propName}=${value}`;
          }
        } catch (e) {
          const message = `[Failed to get property: ${e}]`;
          output += ` ${propName}=${message}`;
        }
      }
    }
  }
  let childOutput = '';
  for (const child of data.children || []) {
    childOutput += dumpNode(child, indentation + 1);
  }

  if (childOutput) {
    output += '>\n' + childOutput + indent(indentation) + `</${data.name}>\n`;
  } else {
    output += ' />\n';
  }

  return output;
}

function isNormalProp(name: string): boolean {
  switch (name) {
    case 'children':
    case 'key':
    case 'ref':
      return false;
    default:
      return true;
  }
}

function convertObject(object: Object, depth: number) {
  if (depth >= MAX_DEPTH) {
    return '[...omitted]';
  }
  let output = '{';
  let first = true;
  for (const key of Object.getOwnPropertyNames(object)) {
    if (!first) {
      output += ', ';
    }
    output += `${key}: ${convertValue(object[key], depth + 1)}`;
    first = false;
  }
  return output + '}';
}

function convertValue(value, depth = 0): ?string {
  if (!value) {
    return null;
  }

  switch (typeof value) {
    case 'string':
      return JSON.stringify(possiblyEllipsis(value).replace('\n', '\\n'));
    case 'boolean':
    case 'number':
      return JSON.stringify(value);
    case 'function':
      return '[function]';
    case 'object':
      return convertObject(value, depth);
    default:
      return null;
  }
}

function possiblyEllipsis(value: string) {
  if (value.length > MAX_STRING_LENGTH) {
    return value.slice(0, MAX_STRING_LENGTH) + '...';
  } else {
    return value;
  }
}

function indent(size: number) {
  return ' '.repeat(size * INDENTATION_SIZE);
}
*/ module.exports = dumpReactTree;


}),
"./node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.js": 
/*!***********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.js ***!
  \***********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../EventEmitter/RCTDeviceEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js"));
var _RendererProxy = __webpack_require__(/*! ../../ReactNative/RendererProxy */ "./node_modules/react-native/Libraries/ReactNative/RendererProxy.js");
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _legacySendAccessibilityEvent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./legacySendAccessibilityEvent */ "./node_modules/react-native/Libraries/Components/AccessibilityInfo/legacySendAccessibilityEvent.android.js"));
var _NativeAccessibilityInfo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeAccessibilityInfo */ "./node_modules/react-native/Libraries/Components/AccessibilityInfo/NativeAccessibilityInfo.js"));
var _NativeAccessibilityManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeAccessibilityManager */ "./node_modules/react-native/Libraries/Components/AccessibilityInfo/NativeAccessibilityManager.js"));
// Events that are only supported on Android.
// Events that are only supported on iOS.
// Mapping of public event names to platform-specific event names.
var EventNames = _Platform.default.OS === 'android' ? new Map([
    [
        'change',
        'touchExplorationDidChange'
    ],
    [
        'reduceMotionChanged',
        'reduceMotionDidChange'
    ],
    [
        'highTextContrastChanged',
        'highTextContrastDidChange'
    ],
    [
        'screenReaderChanged',
        'touchExplorationDidChange'
    ],
    [
        'accessibilityServiceChanged',
        'accessibilityServiceDidChange'
    ],
    [
        'invertColorsChanged',
        'invertColorDidChange'
    ],
    [
        'grayscaleChanged',
        'grayscaleModeDidChange'
    ]
]) : new Map([
    [
        'announcementFinished',
        'announcementFinished'
    ],
    [
        'boldTextChanged',
        'boldTextChanged'
    ],
    [
        'change',
        'screenReaderChanged'
    ],
    [
        'grayscaleChanged',
        'grayscaleChanged'
    ],
    [
        'invertColorsChanged',
        'invertColorsChanged'
    ],
    [
        'reduceMotionChanged',
        'reduceMotionChanged'
    ],
    [
        'reduceTransparencyChanged',
        'reduceTransparencyChanged'
    ],
    [
        'screenReaderChanged',
        'screenReaderChanged'
    ],
    [
        'darkerSystemColorsChanged',
        'darkerSystemColorsChanged'
    ]
]);
/**
 * Sometimes it's useful to know whether or not the device has a screen reader
 * that is currently active. The `AccessibilityInfo` API is designed for this
 * purpose. You can use it to query the current state of the screen reader as
 * well as to register to be notified when the state of the screen reader
 * changes.
 *
 * See https://reactnative.dev/docs/accessibilityinfo
 */ var AccessibilityInfo = {
    /**
   * Query whether bold text is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when bold text is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isBoldTextEnabled
   */ isBoldTextEnabled () {
        if (_Platform.default.OS === 'android') {
            return Promise.resolve(false);
        } else {
            return new Promise((resolve, reject)=>{
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentBoldTextState(resolve, reject);
                } else {
                    reject(null);
                }
            });
        }
    },
    /**
   * Query whether grayscale is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when grayscale is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isGrayscaleEnabled
   */ isGrayscaleEnabled () {
        if (_Platform.default.OS === 'android') {
            return new Promise((resolve, reject)=>{
                if ((_NativeAccessibilityInfo.default === null || _NativeAccessibilityInfo.default === void 0 ? void 0 : _NativeAccessibilityInfo.default.isGrayscaleEnabled) != null) {
                    _NativeAccessibilityInfo.default.isGrayscaleEnabled(resolve);
                } else {
                    reject(null);
                }
            });
        } else {
            return new Promise((resolve, reject)=>{
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentGrayscaleState(resolve, reject);
                } else {
                    reject(null);
                }
            });
        }
    },
    /**
   * Query whether inverted colors are currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when invert color is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isInvertColorsEnabled
   */ isInvertColorsEnabled () {
        if (_Platform.default.OS === 'android') {
            return new Promise((resolve, reject)=>{
                if ((_NativeAccessibilityInfo.default === null || _NativeAccessibilityInfo.default === void 0 ? void 0 : _NativeAccessibilityInfo.default.isInvertColorsEnabled) != null) {
                    _NativeAccessibilityInfo.default.isInvertColorsEnabled(resolve);
                } else {
                    reject(null);
                }
            });
        } else {
            return new Promise((resolve, reject)=>{
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentInvertColorsState(resolve, reject);
                } else {
                    reject(null);
                }
            });
        }
    },
    /**
   * Query whether reduced motion is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when a reduce motion is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isReduceMotionEnabled
   */ isReduceMotionEnabled () {
        return new Promise((resolve, reject)=>{
            if (_Platform.default.OS === 'android') {
                if (_NativeAccessibilityInfo.default != null) {
                    _NativeAccessibilityInfo.default.isReduceMotionEnabled(resolve);
                } else {
                    reject(null);
                }
            } else {
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentReduceMotionState(resolve, reject);
                } else {
                    reject(null);
                }
            }
        });
    },
    /**
   * Query whether high text contrast is currently enabled. Android only.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when high text contrast is enabled and `false` otherwise.
   */ isHighTextContrastEnabled () {
        return new Promise((resolve, reject)=>{
            if (_Platform.default.OS === 'android') {
                if ((_NativeAccessibilityInfo.default === null || _NativeAccessibilityInfo.default === void 0 ? void 0 : _NativeAccessibilityInfo.default.isHighTextContrastEnabled) != null) {
                    _NativeAccessibilityInfo.default.isHighTextContrastEnabled(resolve);
                } else {
                    reject(null);
                }
            } else {
                return Promise.resolve(false);
            }
        });
    },
    /**
   * Query whether dark system colors is currently enabled. iOS only.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when dark system colors is enabled and `false` otherwise.
   */ isDarkerSystemColorsEnabled () {
        return new Promise((resolve, reject)=>{
            if (_Platform.default.OS === 'android') {
                return Promise.resolve(false);
            } else {
                if ((_NativeAccessibilityManager.default === null || _NativeAccessibilityManager.default === void 0 ? void 0 : _NativeAccessibilityManager.default.getCurrentDarkerSystemColorsState) != null) {
                    _NativeAccessibilityManager.default.getCurrentDarkerSystemColorsState(resolve, reject);
                } else {
                    reject(null);
                }
            }
        });
    },
    /**
   * Query whether reduce motion and prefer cross-fade transitions settings are currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when  prefer cross-fade transitions is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#prefersCrossFadeTransitions
   */ prefersCrossFadeTransitions () {
        return new Promise((resolve, reject)=>{
            if (_Platform.default.OS === 'android') {
                return Promise.resolve(false);
            } else {
                if ((_NativeAccessibilityManager.default === null || _NativeAccessibilityManager.default === void 0 ? void 0 : _NativeAccessibilityManager.default.getCurrentPrefersCrossFadeTransitionsState) != null) {
                    _NativeAccessibilityManager.default.getCurrentPrefersCrossFadeTransitionsState(resolve, reject);
                } else {
                    reject(null);
                }
            }
        });
    },
    /**
   * Query whether reduced transparency is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when a reduce transparency is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isReduceTransparencyEnabled
   */ isReduceTransparencyEnabled () {
        if (_Platform.default.OS === 'android') {
            return Promise.resolve(false);
        } else {
            return new Promise((resolve, reject)=>{
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentReduceTransparencyState(resolve, reject);
                } else {
                    reject(null);
                }
            });
        }
    },
    /**
   * Query whether a screen reader is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when a screen reader is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isScreenReaderEnabled
   */ isScreenReaderEnabled () {
        return new Promise((resolve, reject)=>{
            if (_Platform.default.OS === 'android') {
                if (_NativeAccessibilityInfo.default != null) {
                    _NativeAccessibilityInfo.default.isTouchExplorationEnabled(resolve);
                } else {
                    reject(null);
                }
            } else {
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentVoiceOverState(resolve, reject);
                } else {
                    reject(null);
                }
            }
        });
    },
    /**
   * Query whether Accessibility Service is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when any service is enabled and `false` otherwise.
   *
   * @platform android
   *
   * See https://reactnative.dev/docs/accessibilityinfo/#isaccessibilityserviceenabled-android
   */ isAccessibilityServiceEnabled () {
        return new Promise((resolve, reject)=>{
            if (_Platform.default.OS === 'android') {
                if (_NativeAccessibilityInfo.default != null && _NativeAccessibilityInfo.default.isAccessibilityServiceEnabled != null) {
                    _NativeAccessibilityInfo.default.isAccessibilityServiceEnabled(resolve);
                } else {
                    reject(null);
                }
            } else {
                reject(null);
            }
        });
    },
    /**
   * Add an event handler. Supported events:
   *
   * - `reduceMotionChanged`: Fires when the state of the reduce motion toggle changes.
   *   The argument to the event handler is a boolean. The boolean is `true` when a reduce
   *   motion is enabled (or when "Transition Animation Scale" in "Developer options" is
   *   "Animation off") and `false` otherwise.
   * - `screenReaderChanged`: Fires when the state of the screen reader changes. The argument
   *   to the event handler is a boolean. The boolean is `true` when a screen
   *   reader is enabled and `false` otherwise.
   *
   * These events are only supported on iOS:
   *
   * - `boldTextChanged`: iOS-only event. Fires when the state of the bold text toggle changes.
   *   The argument to the event handler is a boolean. The boolean is `true` when a bold text
   *   is enabled and `false` otherwise.
   * - `grayscaleChanged`: iOS-only event. Fires when the state of the gray scale toggle changes.
   *   The argument to the event handler is a boolean. The boolean is `true` when a gray scale
   *   is enabled and `false` otherwise.
   * - `invertColorsChanged`: iOS-only event. Fires when the state of the invert colors toggle
   *   changes. The argument to the event handler is a boolean. The boolean is `true` when a invert
   *   colors is enabled and `false` otherwise.
   * - `reduceTransparencyChanged`: iOS-only event. Fires when the state of the reduce transparency
   *   toggle changes.  The argument to the event handler is a boolean. The boolean is `true`
   *   when a reduce transparency is enabled and `false` otherwise.
   * - `announcementFinished`: iOS-only event. Fires when the screen reader has
   *   finished making an announcement. The argument to the event handler is a
   *   dictionary with these keys:
   *     - `announcement`: The string announced by the screen reader.
   *     - `success`: A boolean indicating whether the announcement was
   *       successfully made.
   * - `darkerSystemColorsChanged`: iOS-only event. Fires when the state of the dark system colors
   *   toggle changes. The argument to the event handler is a boolean. The boolean is `true` when
   *   dark system colors is enabled and `false` otherwise.
   *
   * These events are only supported on Android:
   *
   * - `highTextContrastChanged`: Android-only event. Fires when the state of the high text contrast
   *   toggle changes. The argument to the event handler is a boolean. The boolean is `true` when
   *   high text contrast is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#addeventlistener
   */ addEventListener (eventName, // $FlowIssue[incompatible-type] - Flow bug with unions and generics (T128099423)
    handler) {
        var deviceEventName = EventNames.get(eventName);
        return deviceEventName == null ? {
            remove () {}
        } : _RCTDeviceEventEmitter.default.addListener(deviceEventName, handler);
    },
    /**
   * Set accessibility focus to a React component.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#setaccessibilityfocus
   */ setAccessibilityFocus (reactTag) {
        (0, _legacySendAccessibilityEvent.default)(reactTag, 'focus');
    },
    /**
   * Send a named accessibility event to a HostComponent.
   */ sendAccessibilityEvent (handle, eventType) {
        // iOS only supports 'focus' event types
        if (_Platform.default.OS === 'ios' && eventType === 'click') {
            return;
        }
        // route through React renderer to distinguish between Fabric and non-Fabric handles
        (0, _RendererProxy.sendAccessibilityEvent)(handle, eventType);
    },
    /**
   * Post a string to be announced by the screen reader.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#announceforaccessibility
   */ announceForAccessibility (announcement) {
        if (_Platform.default.OS === 'android') {
            _NativeAccessibilityInfo.default === null || _NativeAccessibilityInfo.default === void 0 ? void 0 : _NativeAccessibilityInfo.default.announceForAccessibility(announcement);
        } else {
            _NativeAccessibilityManager.default === null || _NativeAccessibilityManager.default === void 0 ? void 0 : _NativeAccessibilityManager.default.announceForAccessibility(announcement);
        }
    },
    /**
   * Post a string to be announced by the screen reader.
   * - `announcement`: The string announced by the screen reader.
   * - `options`: An object that configures the reading options.
   *   - `queue`: The announcement will be queued behind existing announcements. iOS only.
   */ announceForAccessibilityWithOptions (announcement, options) {
        if (_Platform.default.OS === 'android') {
            _NativeAccessibilityInfo.default === null || _NativeAccessibilityInfo.default === void 0 ? void 0 : _NativeAccessibilityInfo.default.announceForAccessibility(announcement);
        } else {
            if (_NativeAccessibilityManager.default === null || _NativeAccessibilityManager.default === void 0 ? void 0 : _NativeAccessibilityManager.default.announceForAccessibilityWithOptions) {
                _NativeAccessibilityManager.default === null || _NativeAccessibilityManager.default === void 0 ? void 0 : _NativeAccessibilityManager.default.announceForAccessibilityWithOptions(announcement, options);
            } else {
                _NativeAccessibilityManager.default === null || _NativeAccessibilityManager.default === void 0 ? void 0 : _NativeAccessibilityManager.default.announceForAccessibility(announcement);
            }
        }
    },
    /**
   * Get the recommended timeout for changes to the UI needed by this user.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#getrecommendedtimeoutmillis
   */ getRecommendedTimeoutMillis (originalTimeout) {
        if (_Platform.default.OS === 'android') {
            return new Promise((resolve, reject)=>{
                if (_NativeAccessibilityInfo.default === null || _NativeAccessibilityInfo.default === void 0 ? void 0 : _NativeAccessibilityInfo.default.getRecommendedTimeoutMillis) {
                    _NativeAccessibilityInfo.default.getRecommendedTimeoutMillis(originalTimeout, resolve);
                } else {
                    resolve(originalTimeout);
                }
            });
        } else {
            return Promise.resolve(originalTimeout);
        }
    }
};
var _default = AccessibilityInfo;


}),
"./node_modules/react-native/Libraries/Components/AccessibilityInfo/legacySendAccessibilityEvent.android.js": 
/*!******************************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/AccessibilityInfo/legacySendAccessibilityEvent.android.js ***!
  \******************************************************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../ReactNative/UIManager */ "./node_modules/react-native/Libraries/ReactNative/UIManager.js"));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! nullthrows */ "./node_modules/nullthrows/nullthrows.js"));
/**
 * This is a function exposed to the React Renderer that can be used by the
 * pre-Fabric renderer to emit accessibility events to pre-Fabric nodes.
 */ function legacySendAccessibilityEvent(reactTag, eventType) {
    if (eventType === 'focus') {
        (0, _nullthrows.default)(_UIManager.default.sendAccessibilityEvent)(reactTag, _UIManager.default.getConstants().AccessibilityEventTypes.typeViewFocused);
    }
    if (eventType === 'click') {
        (0, _nullthrows.default)(_UIManager.default.sendAccessibilityEvent)(reactTag, _UIManager.default.getConstants().AccessibilityEventTypes.typeViewClicked);
    }
}
module.exports = legacySendAccessibilityEvent;


}),
"./node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js": 
/*!***********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js ***!
  \***********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var PlatformActivityIndicator = _Platform.default.OS === 'android' ? __webpack_require__(/*! ../ProgressBarAndroid/ProgressBarAndroid */ "./node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js") : (__webpack_require__(/*! ./ActivityIndicatorViewNativeComponent */ "./node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicatorViewNativeComponent.js")/* ["default"] */["default"]);
var GRAY = '#999999';
var ActivityIndicator = (_param, forwardedRef)=>{
    var _param_animating = _param.animating, animating = _param_animating === void 0 ? true : _param_animating, _param_color = _param.color, color = _param_color === void 0 ? _Platform.default.OS === 'ios' ? GRAY : null : _param_color, _param_hidesWhenStopped = _param.hidesWhenStopped, hidesWhenStopped = _param_hidesWhenStopped === void 0 ? true : _param_hidesWhenStopped, onLayout = _param.onLayout, _param_size = _param.size, size = _param_size === void 0 ? 'small' : _param_size, style = _param.style, restProps = _object_without_properties._(_param, [
        "animating",
        "color",
        "hidesWhenStopped",
        "onLayout",
        "size",
        "style"
    ]);
    var sizeStyle;
    var sizeProp;
    switch(size){
        case 'small':
            sizeStyle = styles.sizeSmall;
            sizeProp = 'small';
            break;
        case 'large':
            sizeStyle = styles.sizeLarge;
            sizeProp = 'large';
            break;
        default:
            sizeStyle = {
                height: size,
                width: size
            };
            break;
    }
    var nativeProps = _object_spread_props._(_object_spread._({
        animating,
        color,
        hidesWhenStopped
    }, restProps), {
        ref: forwardedRef,
        style: sizeStyle,
        size: sizeProp
    });
    var androidProps = {
        styleAttr: 'Normal',
        indeterminate: true
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
        onLayout: onLayout,
        style: _StyleSheet.default.compose(styles.container, style),
        children: _Platform.default.OS === 'android' ? // $FlowFixMe[prop-missing] Flow doesn't know when this is the android component
        /*#__PURE__*/ (0, _jsxruntime.jsx)(PlatformActivityIndicator, _object_spread._({}, nativeProps, androidProps)) : /* $FlowFixMe[prop-missing] (>=0.106.0 site=react_native_android_fb) This comment
         * suppresses an error found when Flow v0.106 was deployed. To see the
         * error, delete this comment and run Flow. */ /*#__PURE__*/ (0, _jsxruntime.jsx)(PlatformActivityIndicator, _object_spread._({}, nativeProps))
    });
};
/**
  Displays a circular loading indicator.

  ```SnackPlayer name=ActivityIndicator%20Example
  import React from 'react';
  import {ActivityIndicator, StyleSheet, View} from 'react-native';

  const App = () => (
    <View style={[styles.container, styles.horizontal]}>
      <ActivityIndicator />
      <ActivityIndicator size="large" />
      <ActivityIndicator size="small" color="#0000ff" />
      <ActivityIndicator size="large" color="#00ff00" />
    </View>
  );

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      justifyContent: 'center',
    },
    horizontal: {
      flexDirection: 'row',
      justifyContent: 'space-around',
      padding: 10,
    },
  });

  export default App;
```
*/ var ActivityIndicatorWithRef = /*#__PURE__*/ _react.forwardRef(ActivityIndicator);
ActivityIndicatorWithRef.displayName = 'ActivityIndicator';
var styles = _StyleSheet.default.create({
    container: {
        alignItems: 'center',
        justifyContent: 'center'
    },
    sizeSmall: {
        width: 20,
        height: 20
    },
    sizeLarge: {
        width: 36,
        height: 36
    }
});
var _default = ActivityIndicatorWithRef;


}),
"./node_modules/react-native/Libraries/Components/Button.js": 
/*!******************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Button.js ***!
  \******************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _TouchableNativeFeedback = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./Touchable/TouchableNativeFeedback */ "./node_modules/react-native/Libraries/Components/Touchable/TouchableNativeFeedback.js"));
var _TouchableOpacity = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./Touchable/TouchableOpacity */ "./node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js"));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
/**
  A basic button component that should render nicely on any platform. Supports a
  minimal level of customization.

  If this button doesn't look right for your app, you can build your own button
  using [TouchableOpacity](touchableopacity) or
  [TouchableWithoutFeedback](touchablewithoutfeedback). For inspiration, look at
  the [source code for this button component][button:source]. Or, take a look at
  the [wide variety of button components built by the community]
  [button:examples].

  [button:source]:
  https://github.com/facebook/react-native/blob/HEAD/Libraries/Components/Button.js

  [button:examples]:
  https://js.coach/?menu%5Bcollections%5D=React%20Native&page=1&query=button

  ```jsx
  <Button
    onPress={onPressLearnMore}
    title="Learn More"
    color="#841584"
    accessibilityLabel="Learn more about this purple button"
  />
  ```

  ```SnackPlayer name=Button%20Example
  import React from 'react';
  import { StyleSheet, Button, View, SafeAreaView, Text, Alert } from 'react-native';

  const Separator = () => (
    <View style={styles.separator} />
  );

  const App = () => (
    <SafeAreaView style={styles.container}>
      <View>
        <Text style={styles.title}>
          The title and onPress handler are required. It is recommended to set accessibilityLabel to help make your app usable by everyone.
        </Text>
        <Button
          title="Press me"
          onPress={() => Alert.alert('Simple Button pressed')}
        />
      </View>
      <Separator />
      <View>
        <Text style={styles.title}>
          Adjust the color in a way that looks standard on each platform. On  iOS, the color prop controls the color of the text. On Android, the color adjusts the background color of the button.
        </Text>
        <Button
          title="Press me"
          color="#f194ff"
          onPress={() => Alert.alert('Button with adjusted color pressed')}
        />
      </View>
      <Separator />
      <View>
        <Text style={styles.title}>
          All interaction for the component are disabled.
        </Text>
        <Button
          title="Press me"
          disabled
          onPress={() => Alert.alert('Cannot press this one')}
        />
      </View>
      <Separator />
      <View>
        <Text style={styles.title}>
          This layout strategy lets the title define the width of the button.
        </Text>
        <View style={styles.fixToText}>
          <Button
            title="Left button"
            onPress={() => Alert.alert('Left button pressed')}
          />
          <Button
            title="Right button"
            onPress={() => Alert.alert('Right button pressed')}
          />
        </View>
      </View>
    </SafeAreaView>
  );

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      justifyContent: 'center',
      marginHorizontal: 16,
    },
    title: {
      textAlign: 'center',
      marginVertical: 8,
    },
    fixToText: {
      flexDirection: 'row',
      justifyContent: 'space-between',
    },
    separator: {
      marginVertical: 8,
      borderBottomColor: '#737373',
      borderBottomWidth: StyleSheet.hairlineWidth,
    },
  });

  export default App;
  ```
 */ var Touchable = _Platform.default.OS === 'android' ? _TouchableNativeFeedback.default : _TouchableOpacity.default;
var Button = /*#__PURE__*/ _react.forwardRef((props, ref)=>{
    var accessibilityLabel = props.accessibilityLabel, accessibilityState = props.accessibilityState, ariaBusy = props['aria-busy'], ariaChecked = props['aria-checked'], ariaDisabled = props['aria-disabled'], ariaExpanded = props['aria-expanded'], ariaLabel = props['aria-label'], ariaSelected = props['aria-selected'], importantForAccessibility = props.importantForAccessibility, color = props.color, onPress = props.onPress, touchSoundDisabled = props.touchSoundDisabled, title = props.title, hasTVPreferredFocus = props.hasTVPreferredFocus, nextFocusDown = props.nextFocusDown, nextFocusForward = props.nextFocusForward, nextFocusLeft = props.nextFocusLeft, nextFocusRight = props.nextFocusRight, nextFocusUp = props.nextFocusUp, testID = props.testID, accessible = props.accessible, accessibilityActions = props.accessibilityActions, accessibilityHint = props.accessibilityHint, accessibilityLanguage = props.accessibilityLanguage, onAccessibilityAction = props.onAccessibilityAction;
    var buttonStyles = [
        styles.button
    ];
    var textStyles = [
        styles.text
    ];
    if (color) {
        if (_Platform.default.OS === 'ios') {
            textStyles.push({
                color: color
            });
        } else {
            buttonStyles.push({
                backgroundColor: color
            });
        }
    }
    var _accessibilityState = {
        busy: ariaBusy ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.busy),
        checked: ariaChecked ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.checked),
        disabled: ariaDisabled ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.disabled),
        expanded: ariaExpanded ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.expanded),
        selected: ariaSelected ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.selected)
    };
    var disabled = props.disabled != null ? props.disabled : _accessibilityState === null || _accessibilityState === void 0 ? void 0 : _accessibilityState.disabled;
    _accessibilityState = disabled !== (_accessibilityState === null || _accessibilityState === void 0 ? void 0 : _accessibilityState.disabled) ? _object_spread_props._(_object_spread._({}, _accessibilityState), {
        disabled
    }) : _accessibilityState;
    if (disabled) {
        buttonStyles.push(styles.buttonDisabled);
        textStyles.push(styles.textDisabled);
    }
    (0, _invariant.default)(typeof title === 'string', 'The title prop of a Button must be a string');
    var formattedTitle = _Platform.default.OS === 'android' ? title.toUpperCase() : title;
    // If `no` is specified for `importantForAccessibility`, it will be changed to `no-hide-descendants` because the text inside should not be focused.
    var _importantForAccessibility = importantForAccessibility === 'no' ? 'no-hide-descendants' : importantForAccessibility;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(Touchable, {
        accessible: accessible,
        accessibilityActions: accessibilityActions,
        onAccessibilityAction: onAccessibilityAction,
        accessibilityLabel: ariaLabel || accessibilityLabel,
        accessibilityHint: accessibilityHint,
        accessibilityLanguage: accessibilityLanguage,
        accessibilityRole: "button",
        accessibilityState: _accessibilityState,
        importantForAccessibility: _importantForAccessibility,
        hasTVPreferredFocus: hasTVPreferredFocus,
        nextFocusDown: nextFocusDown,
        nextFocusForward: nextFocusForward,
        nextFocusLeft: nextFocusLeft,
        nextFocusRight: nextFocusRight,
        nextFocusUp: nextFocusUp,
        testID: testID,
        disabled: disabled,
        onPress: onPress,
        touchSoundDisabled: touchSoundDisabled,
        // $FlowFixMe[incompatible-exact]
        // $FlowFixMe[prop-missing]
        // $FlowFixMe[incompatible-type-arg]
        ref: ref,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
            style: buttonStyles,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                style: textStyles,
                disabled: disabled,
                children: formattedTitle
            })
        })
    });
});
Button.displayName = 'Button';
var styles = _StyleSheet.default.create({
    button: _Platform.default.select({
        ios: {},
        android: {
            elevation: 4,
            // Material design blue from https://material.google.com/style/color.html#color-color-palette
            backgroundColor: '#2196F3',
            borderRadius: 2
        }
    }),
    text: _object_spread._({
        textAlign: 'center',
        margin: 8
    }, _Platform.default.select({
        ios: {
            // iOS blue from https://developer.apple.com/ios/human-interface-guidelines/visual-design/color/
            color: '#007AFF',
            fontSize: 18
        },
        android: {
            color: 'white',
            fontWeight: '500'
        }
    })),
    buttonDisabled: _Platform.default.select({
        ios: {},
        android: {
            elevation: 0,
            backgroundColor: '#dfdfdf'
        }
    }),
    textDisabled: _Platform.default.select({
        ios: {
            color: '#cdcdcd'
        },
        android: {
            color: '#a1a1a1'
        }
    })
});
var _default = Button;


}),
"./node_modules/react-native/Libraries/Components/Clipboard/Clipboard.js": 
/*!*******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Clipboard/Clipboard.js ***!
  \*******************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeClipboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeClipboard */ "./node_modules/react-native/Libraries/Components/Clipboard/NativeClipboard.js"));
/**
 * `Clipboard` gives you an interface for setting and getting content from Clipboard on both iOS and Android
 */ module.exports = {
    /**
   * Get content of string type, this method returns a `Promise`, so you can use following code to get clipboard content
   * ```javascript
   * async _getContent() {
   *   var content = await Clipboard.getString();
   * }
   * ```
   */ getString () {
        return _NativeClipboard.default.getString();
    },
    /**
   * Set content of string type. You can use following code to set clipboard content
   * ```javascript
   * _setContent() {
   *   Clipboard.setString('hello world');
   * }
   * ```
   * @param {string} content the content to be stored in the clipboard.
   */ setString (content) {
        _NativeClipboard.default.setString(content);
    }
};


}),
"./node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js": 
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js ***!
  \*****************************************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _dismissKeyboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/dismissKeyboard */ "./node_modules/react-native/Libraries/Utilities/dismissKeyboard.js"));
var _StatusBar = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../StatusBar/StatusBar */ "./node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js"));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _AndroidDrawerLayoutNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./AndroidDrawerLayoutNativeComponent */ "./node_modules/react-native/Libraries/Components/DrawerAndroid/AndroidDrawerLayoutNativeComponent.js"));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! nullthrows */ "./node_modules/nullthrows/nullthrows.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var DRAWER_STATES = [
    'Idle',
    'Dragging',
    'Settling'
];
/**
 * React component that wraps the platform `DrawerLayout` (Android only). The
 * Drawer (typically used for navigation) is rendered with `renderNavigationView`
 * and direct children are the main view (where your content goes). The navigation
 * view is initially not visible on the screen, but can be pulled in from the
 * side of the window specified by the `drawerPosition` prop and its width can
 * be set by the `drawerWidth` prop.
 *
 * Example:
 *
 * ```
 * render: function() {
 *   var navigationView = (
 *     <View style={{flex: 1, backgroundColor: '#fff'}}>
 *       <Text style={{margin: 10, fontSize: 15, textAlign: 'left'}}>I'm in the Drawer!</Text>
 *     </View>
 *   );
 *   return (
 *     <DrawerLayoutAndroid
 *       drawerWidth={300}
 *       drawerPosition="left"
 *       renderNavigationView={() => navigationView}>
 *       <View style={{flex: 1, alignItems: 'center'}}>
 *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>Hello</Text>
 *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>World!</Text>
 *       </View>
 *     </DrawerLayoutAndroid>
 *   );
 * },
 * ```
 */ var DrawerLayoutAndroid = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(DrawerLayoutAndroid, _React_Component);
    function DrawerLayoutAndroid() {
        _class_call_check._(this, DrawerLayoutAndroid);
        var _this;
        _this = _call_super._(this, DrawerLayoutAndroid, arguments), // $FlowFixMe[missing-local-annot]
        _this._nativeRef = /*#__PURE__*/ _react.createRef(), _this.state = {
            drawerOpened: false
        }, /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
   * LTI update could not be added via codemod */ _this._onDrawerSlide = (event)=>{
            if (_this.props.onDrawerSlide) {
                // $FlowFixMe[unused-promise]
                _this.props.onDrawerSlide(event);
            }
            if (_this.props.keyboardDismissMode === 'on-drag') {
                (0, _dismissKeyboard.default)();
            }
        }, _this._onDrawerOpen = ()=>{
            _this.setState({
                drawerOpened: true
            });
            if (_this.props.onDrawerOpen) {
                _this.props.onDrawerOpen();
            }
        }, _this._onDrawerClose = ()=>{
            _this.setState({
                drawerOpened: false
            });
            if (_this.props.onDrawerClose) {
                _this.props.onDrawerClose();
            }
        }, /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
   * LTI update could not be added via codemod */ _this._onDrawerStateChanged = (event)=>{
            if (_this.props.onDrawerStateChanged) {
                _this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);
            }
        };
        return _this;
    }
    _create_class._(DrawerLayoutAndroid, [
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, _this_props_drawerBackgroundColor = _this_props.drawerBackgroundColor, drawerBackgroundColor = _this_props_drawerBackgroundColor === void 0 ? 'white' : _this_props_drawerBackgroundColor, onDrawerStateChanged = _this_props.onDrawerStateChanged, renderNavigationView = _this_props.renderNavigationView, onDrawerOpen = _this_props.onDrawerOpen, onDrawerClose = _this_props.onDrawerClose, props = _object_without_properties._(_this_props, [
                    "drawerBackgroundColor",
                    "onDrawerStateChanged",
                    "renderNavigationView",
                    "onDrawerOpen",
                    "onDrawerClose"
                ]);
                var drawStatusBar = this.props.statusBarBackgroundColor != null;
                var drawerViewWrapper = /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, {
                    style: [
                        styles.drawerSubview,
                        {
                            width: this.props.drawerWidth,
                            backgroundColor: drawerBackgroundColor
                        }
                    ],
                    pointerEvents: this.state.drawerOpened ? 'auto' : 'none',
                    collapsable: false,
                    children: [
                        renderNavigationView(),
                        drawStatusBar && /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                            style: styles.drawerStatusBar
                        })
                    ]
                });
                var childrenWrapper = /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, {
                    style: styles.mainSubview,
                    collapsable: false,
                    children: [
                        drawStatusBar && /*#__PURE__*/ (0, _jsxruntime.jsx)(_StatusBar.default, {
                            translucent: true,
                            backgroundColor: this.props.statusBarBackgroundColor
                        }),
                        drawStatusBar && /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                            style: [
                                styles.statusBar,
                                {
                                    backgroundColor: this.props.statusBarBackgroundColor
                                }
                            ]
                        }),
                        this.props.children
                    ]
                });
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_AndroidDrawerLayoutNativeComponent.default, _object_spread_props._(_object_spread._({}, props), {
                    ref: this._nativeRef,
                    drawerBackgroundColor: drawerBackgroundColor,
                    drawerWidth: this.props.drawerWidth,
                    drawerPosition: this.props.drawerPosition,
                    drawerLockMode: this.props.drawerLockMode,
                    style: [
                        styles.base,
                        this.props.style
                    ],
                    onDrawerSlide: this._onDrawerSlide,
                    onDrawerOpen: this._onDrawerOpen,
                    onDrawerClose: this._onDrawerClose,
                    onDrawerStateChanged: this._onDrawerStateChanged,
                    children: [
                        childrenWrapper,
                        drawerViewWrapper
                    ]
                }));
            }
        },
        {
            /**
   * Opens the drawer.
   */ key: "openDrawer",
            value: function openDrawer() {
                _AndroidDrawerLayoutNativeComponent.Commands.openDrawer((0, _nullthrows.default)(this._nativeRef.current));
            }
        },
        {
            /**
   * Closes the drawer.
   */ key: "closeDrawer",
            value: function closeDrawer() {
                _AndroidDrawerLayoutNativeComponent.Commands.closeDrawer((0, _nullthrows.default)(this._nativeRef.current));
            }
        },
        {
            /**
   * Closing and opening example
   * Note: To access the drawer you have to give it a ref
   *
   * Class component:
   *
   * render () {
   *   this.openDrawer = () => {
   *     this.refs.DRAWER.openDrawer()
   *   }
   *   this.closeDrawer = () => {
   *     this.refs.DRAWER.closeDrawer()
   *   }
   *   return (
   *     <DrawerLayoutAndroid ref={'DRAWER'}>
   *      {children}
   *     </DrawerLayoutAndroid>
   *   )
   * }
   *
   * Function component:
   *
   * const drawerRef = useRef()
   * const openDrawer = () => {
   *   drawerRef.current.openDrawer()
   * }
   * const closeDrawer = () => {
   *   drawerRef.current.closeDrawer()
   * }
   * return (
   *   <DrawerLayoutAndroid ref={drawerRef}>
   *     {children}
   *   </DrawerLayoutAndroid>
   * )
   */ /**
   * Native methods
   */ key: "blur",
            value: function blur() {
                (0, _nullthrows.default)(this._nativeRef.current).blur();
            }
        },
        {
            key: "focus",
            value: function focus() {
                (0, _nullthrows.default)(this._nativeRef.current).focus();
            }
        },
        {
            key: "measure",
            value: function measure(callback) {
                (0, _nullthrows.default)(this._nativeRef.current).measure(callback);
            }
        },
        {
            key: "measureInWindow",
            value: function measureInWindow(callback) {
                (0, _nullthrows.default)(this._nativeRef.current).measureInWindow(callback);
            }
        },
        {
            key: "measureLayout",
            value: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
                (0, _nullthrows.default)(this._nativeRef.current).measureLayout(relativeToNativeNode, onSuccess, onFail);
            }
        },
        {
            key: "setNativeProps",
            value: function setNativeProps(nativeProps) {
                (0, _nullthrows.default)(this._nativeRef.current).setNativeProps(nativeProps);
            }
        }
    ], [
        {
            key: "positions",
            get: function() {
                console.warn('Setting DrawerLayoutAndroid drawerPosition using `DrawerLayoutAndroid.positions` is deprecated. Instead pass the string value "left" or "right"');
                return {
                    Left: 'left',
                    Right: 'right'
                };
            }
        }
    ]);
    return DrawerLayoutAndroid;
}(_react.Component);
var styles = _StyleSheet.default.create({
    base: {
        flex: 1,
        elevation: 16
    },
    mainSubview: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
    },
    drawerSubview: {
        position: 'absolute',
        top: 0,
        bottom: 0
    },
    statusBar: {
        height: _StatusBar.default.currentHeight
    },
    drawerStatusBar: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        height: _StatusBar.default.currentHeight,
        backgroundColor: 'rgba(0, 0, 0, 0.251)'
    }
});
module.exports = DrawerLayoutAndroid;


}),
"./node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js": 
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js ***!
  \*****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _async_to_generator = __webpack_require__(/*! @swc/helpers/_/_async_to_generator */ "./node_modules/@swc/helpers/cjs/_async_to_generator.cjs");
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _LayoutAnimation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../LayoutAnimation/LayoutAnimation */ "./node_modules/react-native/Libraries/LayoutAnimation/LayoutAnimation.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Dimensions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Dimensions */ "./node_modules/react-native/Libraries/Utilities/Dimensions.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _AccessibilityInfo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../AccessibilityInfo/AccessibilityInfo */ "./node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.js"));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _Keyboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./Keyboard */ "./node_modules/react-native/Libraries/Components/Keyboard/Keyboard.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
/**
 * View that moves out of the way when the keyboard appears by automatically
 * adjusting its height, position, or bottom padding.
 */ var KeyboardAvoidingView = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(KeyboardAvoidingView, _React_Component);
    function KeyboardAvoidingView(props) {
        _class_call_check._(this, KeyboardAvoidingView);
        var _this;
        var _this1;
        _this = _call_super._(this, KeyboardAvoidingView, [
            props
        ]), _this1 = _this, _this1._frame = null, _this1._keyboardEvent = null, _this1._subscriptions = [], _this1._initialFrameHeight = 0, _this1._bottom = 0, _this1._windowWidth = _Dimensions.default.get('window').width, _this1._onKeyboardChange = (event)=>{
            _this1._keyboardEvent = event;
            // $FlowFixMe[unused-promise]
            _this1._updateBottomIfNecessary();
        }, _this1._onLayout = (event)=>_async_to_generator._(function*() {
                event.persist();
                var oldFrame = _this1._frame;
                _this1._frame = event.nativeEvent.layout;
                if (!_this1._initialFrameHeight) {
                    // save the initial frame height, before the keyboard is visible
                    _this1._initialFrameHeight = _this1._frame.height;
                }
                // update bottom height for the first time or when the height is changed
                if (!oldFrame || oldFrame.height !== _this1._frame.height) {
                    yield _this1._updateBottomIfNecessary();
                }
                if (_this1.props.onLayout) {
                    _this1.props.onLayout(event);
                }
            })(), _this1._onDimensionsChange = (ref)=>{
            var window = ref.window;
            _this1._windowWidth = (window === null || window === void 0 ? void 0 : window.width) ?? 0;
        }, // Avoid unnecessary renders if the KeyboardAvoidingView is disabled.
        _this1._setBottom = (value)=>{
            var enabled = _this1.props.enabled ?? true;
            _this1._bottom = value;
            if (enabled) {
                _this1.setState({
                    bottom: value
                });
            }
        }, _this1._updateBottomIfNecessary = ()=>_async_to_generator._(function*() {
                if (_this1._keyboardEvent == null) {
                    _this1._setBottom(0);
                    return;
                }
                if (_Platform.default.OS === 'ios' && _this1._windowWidth !== _this1._keyboardEvent.endCoordinates.width) {
                    // The keyboard is not the standard bottom-of-the-screen keyboard. For example, floating keyboard on iPadOS.
                    _this1._setBottom(0);
                    return;
                }
                var _this__keyboardEvent = _this1._keyboardEvent, duration = _this__keyboardEvent.duration, easing = _this__keyboardEvent.easing, endCoordinates = _this__keyboardEvent.endCoordinates;
                var height = yield _this1._relativeKeyboardHeight(endCoordinates);
                if (_this1._bottom === height) {
                    return;
                }
                _this1._setBottom(height);
                var enabled = _this1.props.enabled ?? true;
                if (enabled && duration && easing) {
                    _LayoutAnimation.default.configureNext({
                        // We have to pass the duration equal to minimal accepted duration defined here: RCTLayoutAnimation.m
                        duration: duration > 10 ? duration : 10,
                        update: {
                            duration: duration > 10 ? duration : 10,
                            type: _LayoutAnimation.default.Types[easing] || 'keyboard'
                        }
                    });
                }
            })();
        _this1.state = {
            bottom: 0
        };
        _this1.viewRef = /*#__PURE__*/ _react.createRef();
        return _this;
    }
    _create_class._(KeyboardAvoidingView, [
        {
            key: "_relativeKeyboardHeight",
            value: function _relativeKeyboardHeight(keyboardFrame) {
                return _async_to_generator._(function*() {
                    var frame = this._frame;
                    if (!frame || !keyboardFrame) {
                        return 0;
                    }
                    // On iOS when Prefer Cross-Fade Transitions is enabled, the keyboard position
                    // & height is reported differently (0 instead of Y position value matching height of frame)
                    if (_Platform.default.OS === 'ios' && keyboardFrame.screenY === 0 && (yield _AccessibilityInfo.default.prefersCrossFadeTransitions())) {
                        return 0;
                    }
                    var keyboardY = keyboardFrame.screenY - (this.props.keyboardVerticalOffset ?? 0);
                    if (this.props.behavior === 'height') {
                        return Math.max(this.state.bottom + frame.y + frame.height - keyboardY, 0);
                    }
                    // Calculate the displacement needed for the view such that it
                    // no longer overlaps with the keyboard
                    return Math.max(frame.y + frame.height - keyboardY, 0);
                }).call(this);
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(_, prevState) {
                var enabled = this.props.enabled ?? true;
                if (enabled && this._bottom !== prevState.bottom) {
                    this.setState({
                        bottom: this._bottom
                    });
                }
            }
        },
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                if (!_Keyboard.default.isVisible()) {
                    this._keyboardEvent = null;
                    this._setBottom(0);
                }
                if (_Platform.default.OS === 'ios') {
                    this._subscriptions = [
                        _Keyboard.default.addListener('keyboardWillChangeFrame', this._onKeyboardChange),
                        _Dimensions.default.addEventListener('change', this._onDimensionsChange)
                    ];
                } else {
                    this._subscriptions = [
                        _Keyboard.default.addListener('keyboardDidHide', this._onKeyboardChange),
                        _Keyboard.default.addListener('keyboardDidShow', this._onKeyboardChange)
                    ];
                }
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this._subscriptions.forEach((subscription)=>{
                    subscription.remove();
                });
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, behavior = _this_props.behavior, children = _this_props.children, contentContainerStyle = _this_props.contentContainerStyle, _this_props_enabled = _this_props.enabled, enabled = _this_props_enabled === void 0 ? true : _this_props_enabled, _this_props_keyboardVerticalOffset = _this_props.// eslint-disable-next-line no-unused-vars
                keyboardVerticalOffset, keyboardVerticalOffset = _this_props_keyboardVerticalOffset === void 0 ? 0 : _this_props_keyboardVerticalOffset, style = _this_props.style, onLayout = _this_props.onLayout, props = _object_without_properties._(_this_props, [
                    "behavior",
                    "children",
                    "contentContainerStyle",
                    "enabled",
                    "keyboardVerticalOffset",
                    "style",
                    "onLayout"
                ]);
                var bottomHeight = enabled === true ? this.state.bottom : 0;
                switch(behavior){
                    case 'height':
                        var heightStyle;
                        if (this._frame != null && this.state.bottom > 0) {
                            // Note that we only apply a height change when there is keyboard present,
                            // i.e. this.state.bottom is greater than 0. If we remove that condition,
                            // this.frame.height will never go back to its original value.
                            // When height changes, we need to disable flex.
                            heightStyle = {
                                height: this._initialFrameHeight - bottomHeight,
                                flex: 0
                            };
                        }
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, _object_spread_props._(_object_spread._({
                            ref: this.viewRef,
                            style: _StyleSheet.default.compose(style, heightStyle),
                            onLayout: this._onLayout
                        }, props), {
                            children: children
                        }));
                    case 'position':
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, _object_spread_props._(_object_spread._({
                            ref: this.viewRef,
                            style: style,
                            onLayout: this._onLayout
                        }, props), {
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                                style: _StyleSheet.default.compose(contentContainerStyle, {
                                    bottom: bottomHeight
                                }),
                                children: children
                            })
                        }));
                    case 'padding':
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, _object_spread_props._(_object_spread._({
                            ref: this.viewRef,
                            style: _StyleSheet.default.compose(style, {
                                paddingBottom: bottomHeight
                            }),
                            onLayout: this._onLayout
                        }, props), {
                            children: children
                        }));
                    default:
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, _object_spread_props._(_object_spread._({
                            ref: this.viewRef,
                            onLayout: this._onLayout,
                            style: style
                        }, props), {
                            children: children
                        }));
                }
            }
        }
    ]);
    return KeyboardAvoidingView;
}(_react.Component);
var _default = KeyboardAvoidingView;


}),
"./node_modules/react-native/Libraries/Components/LayoutConformance/LayoutConformance.js": 
/*!***********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/LayoutConformance/LayoutConformance.js ***!
  \***********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _LayoutConformanceNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LayoutConformanceNativeComponent */ "./node_modules/react-native/Libraries/Components/LayoutConformance/LayoutConformanceNativeComponent.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var _global;
// We want a graceful fallback for apps using legacy arch, but need to know
// ahead of time whether the component is available, so we test for global.
// This does not correctly handle mixed arch apps (which is okay, since we just
// degrade the error experience).
var isFabricUIManagerInstalled = ((_global = __webpack_require__.g) === null || _global === void 0 ? void 0 : _global.nativeFabricUIManager) != null;
function LayoutConformance(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_LayoutConformanceNativeComponent.default, _object_spread_props._(_object_spread._({}, props), {
        style: styles.container
    }));
}
function UnimplementedLayoutConformance(props) {
    if (true) {
        var warnOnce = __webpack_require__(/*! ../../Utilities/warnOnce */ "./node_modules/react-native/Libraries/Utilities/warnOnce.js");
        warnOnce('layoutconformance-unsupported', '"LayoutConformance" is only supported in the New Architecture');
    }
    return props.children;
}
var _default = isFabricUIManagerInstalled ? LayoutConformance : UnimplementedLayoutConformance;
var styles = _StyleSheet.default.create({
    container: {
        display: 'contents'
    }
});


}),
"./node_modules/react-native/Libraries/Components/Pressable/Pressable.js": 
/*!*******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Pressable/Pressable.js ***!
  \*******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _PressabilityDebug = __webpack_require__(/*! ../../Pressability/PressabilityDebug */ "./node_modules/react-native/Libraries/Pressability/PressabilityDebug.js");
var _usePressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Pressability/usePressability */ "./node_modules/react-native/Libraries/Pressability/usePressability.js"));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/useMergeRefs */ "./node_modules/react-native/Libraries/Utilities/useMergeRefs.js"));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _useAndroidRippleForView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./useAndroidRippleForView */ "./node_modules/react-native/Libraries/Components/Pressable/useAndroidRippleForView.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
/**
 * Component used to build display components that should respond to whether the
 * component is currently pressed or not.
 */ function Pressable(props, forwardedRef) {
    var _props_accessibilityValue, _props_accessibilityValue1, _props_accessibilityValue2, _props_accessibilityValue3;
    var accessible = props.accessible, accessibilityState = props.accessibilityState, ariaLive = props['aria-live'], android_disableSound = props.android_disableSound, android_ripple = props.android_ripple, ariaBusy = props['aria-busy'], ariaChecked = props['aria-checked'], ariaDisabled = props['aria-disabled'], ariaExpanded = props['aria-expanded'], ariaLabel = props['aria-label'], ariaSelected = props['aria-selected'], cancelable = props.cancelable, children = props.children, delayHoverIn = props.delayHoverIn, delayHoverOut = props.delayHoverOut, delayLongPress = props.delayLongPress, disabled = props.disabled, focusable = props.focusable, hitSlop = props.hitSlop, onHoverIn = props.onHoverIn, onHoverOut = props.onHoverOut, onLongPress = props.onLongPress, onPress = props.onPress, onPressIn = props.onPressIn, onPressOut = props.onPressOut, pressRetentionOffset = props.pressRetentionOffset, style = props.style, testOnly_pressed = props.testOnly_pressed, unstable_pressDelay = props.unstable_pressDelay, restProps = _object_without_properties._(props, [
        "accessible",
        "accessibilityState",
        'aria-live',
        "android_disableSound",
        "android_ripple",
        'aria-busy',
        'aria-checked',
        'aria-disabled',
        'aria-expanded',
        'aria-label',
        'aria-selected',
        "cancelable",
        "children",
        "delayHoverIn",
        "delayHoverOut",
        "delayLongPress",
        "disabled",
        "focusable",
        "hitSlop",
        "onHoverIn",
        "onHoverOut",
        "onLongPress",
        "onPress",
        "onPressIn",
        "onPressOut",
        "pressRetentionOffset",
        "style",
        "testOnly_pressed",
        "unstable_pressDelay"
    ]);
    var viewRef = (0, _react.useRef)(null);
    var mergedRef = (0, _useMergeRefs.default)(forwardedRef, viewRef);
    var android_rippleConfig = (0, _useAndroidRippleForView.default)(android_ripple, viewRef);
    var _usePressState = _sliced_to_array._(usePressState(testOnly_pressed === true), 2), pressed = _usePressState[0], setPressed = _usePressState[1];
    var shouldUpdatePressed = typeof children === 'function' || typeof style === 'function';
    var _accessibilityState = {
        busy: ariaBusy ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.busy),
        checked: ariaChecked ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.checked),
        disabled: ariaDisabled ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.disabled),
        expanded: ariaExpanded ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.expanded),
        selected: ariaSelected ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.selected)
    };
    _accessibilityState = disabled != null ? _object_spread_props._(_object_spread._({}, _accessibilityState), {
        disabled
    }) : _accessibilityState;
    var accessibilityValue = {
        max: props['aria-valuemax'] ?? ((_props_accessibilityValue = props.accessibilityValue) === null || _props_accessibilityValue === void 0 ? void 0 : _props_accessibilityValue.max),
        min: props['aria-valuemin'] ?? ((_props_accessibilityValue1 = props.accessibilityValue) === null || _props_accessibilityValue1 === void 0 ? void 0 : _props_accessibilityValue1.min),
        now: props['aria-valuenow'] ?? ((_props_accessibilityValue2 = props.accessibilityValue) === null || _props_accessibilityValue2 === void 0 ? void 0 : _props_accessibilityValue2.now),
        text: props['aria-valuetext'] ?? ((_props_accessibilityValue3 = props.accessibilityValue) === null || _props_accessibilityValue3 === void 0 ? void 0 : _props_accessibilityValue3.text)
    };
    var accessibilityLiveRegion = ariaLive === 'off' ? 'none' : ariaLive ?? props.accessibilityLiveRegion;
    var accessibilityLabel = ariaLabel ?? props.accessibilityLabel;
    var restPropsWithDefaults = _object_spread_props._(_object_spread._({}, restProps, android_rippleConfig === null || android_rippleConfig === void 0 ? void 0 : android_rippleConfig.viewProps), {
        accessible: accessible !== false,
        accessibilityViewIsModal: restProps['aria-modal'] ?? restProps.accessibilityViewIsModal,
        accessibilityLiveRegion,
        accessibilityLabel,
        accessibilityState: _accessibilityState,
        focusable: focusable !== false,
        accessibilityValue,
        hitSlop
    });
    var config = (0, _react.useMemo)(()=>({
            cancelable,
            disabled,
            hitSlop,
            pressRectOffset: pressRetentionOffset,
            android_disableSound,
            delayHoverIn,
            delayHoverOut,
            delayLongPress,
            delayPressIn: unstable_pressDelay,
            onHoverIn,
            onHoverOut,
            onLongPress,
            onPress,
            onPressIn (event) {
                if (android_rippleConfig != null) {
                    android_rippleConfig.onPressIn(event);
                }
                shouldUpdatePressed && setPressed(true);
                if (onPressIn != null) {
                    onPressIn(event);
                }
            },
            onPressMove: android_rippleConfig === null || android_rippleConfig === void 0 ? void 0 : android_rippleConfig.onPressMove,
            onPressOut (event) {
                if (android_rippleConfig != null) {
                    android_rippleConfig.onPressOut(event);
                }
                shouldUpdatePressed && setPressed(false);
                if (onPressOut != null) {
                    onPressOut(event);
                }
            }
        }), [
        android_disableSound,
        android_rippleConfig,
        cancelable,
        delayHoverIn,
        delayHoverOut,
        delayLongPress,
        disabled,
        hitSlop,
        onHoverIn,
        onHoverOut,
        onLongPress,
        onPress,
        onPressIn,
        onPressOut,
        pressRetentionOffset,
        setPressed,
        shouldUpdatePressed,
        unstable_pressDelay
    ]);
    var eventHandlers = (0, _usePressability.default)(config);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, _object_spread_props._(_object_spread._({}, restPropsWithDefaults, eventHandlers), {
        ref: mergedRef,
        style: typeof style === 'function' ? style({
            pressed
        }) : style,
        collapsable: false,
        children: [
            typeof children === 'function' ? children({
                pressed
            }) : children,
             true ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_PressabilityDebug.PressabilityDebugView, {
                color: "red",
                hitSlop: hitSlop
            }) : 0
        ]
    }));
}
function usePressState(forcePressed) {
    var _useState = _sliced_to_array._((0, _react.useState)(false), 2), pressed = _useState[0], setPressed = _useState[1];
    return [
        pressed || forcePressed,
        setPressed
    ];
}
var MemoedPressable = /*#__PURE__*/ _react.memo(/*#__PURE__*/ _react.forwardRef(Pressable));
MemoedPressable.displayName = 'Pressable';
var _default = MemoedPressable;


}),
"./node_modules/react-native/Libraries/Components/Pressable/useAndroidRippleForView.js": 
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Pressable/useAndroidRippleForView.js ***!
  \*********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useAndroidRippleForView;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _ViewNativeComponent = __webpack_require__(/*! ../View/ViewNativeComponent */ "./node_modules/react-native/Libraries/Components/View/ViewNativeComponent.js");
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function useAndroidRippleForView(rippleConfig, viewRef) {
    var _ref = rippleConfig ?? {}, color = _ref.color, borderless = _ref.borderless, radius = _ref.radius, foreground = _ref.foreground;
    return (0, _react.useMemo)(()=>{
        if (_Platform.default.OS === 'android' && (color != null || borderless != null || radius != null)) {
            var processedColor = (0, _processColor.default)(color);
            (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
            var nativeRippleValue = {
                type: 'RippleAndroid',
                color: processedColor,
                borderless: borderless === true,
                rippleRadius: radius
            };
            return {
                viewProps: foreground === true ? {
                    nativeForegroundAndroid: nativeRippleValue
                } : {
                    nativeBackgroundAndroid: nativeRippleValue
                },
                onPressIn (event) {
                    var view = viewRef.current;
                    if (view != null) {
                        _ViewNativeComponent.Commands.hotspotUpdate(view, event.nativeEvent.locationX ?? 0, event.nativeEvent.locationY ?? 0);
                        _ViewNativeComponent.Commands.setPressed(view, true);
                    }
                },
                onPressMove (event) {
                    var view = viewRef.current;
                    if (view != null) {
                        _ViewNativeComponent.Commands.hotspotUpdate(view, event.nativeEvent.locationX ?? 0, event.nativeEvent.locationY ?? 0);
                    }
                },
                onPressOut (event) {
                    var view = viewRef.current;
                    if (view != null) {
                        _ViewNativeComponent.Commands.setPressed(view, false);
                    }
                }
            };
        }
        return null;
    }, [
        borderless,
        color,
        foreground,
        radius,
        viewRef
    ]);
}


}),
"./node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js": 
/*!*********************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js ***!
  \*********************************************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _ProgressBarAndroidNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./ProgressBarAndroidNativeComponent */ "./node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroidNativeComponent.js"));
var React = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
/**
 * React component that wraps the Android-only `ProgressBar`. This component is
 * used to indicate that the app is loading or there is activity in the app.
 *
 * Example:
 *
 * ```
 * render: function() {
 *   var progressBar =
 *     <View style={styles.container}>
 *       <ProgressBar styleAttr="Inverse" />
 *     </View>;

 *   return (
 *     <MyLoadingComponent
 *       componentView={componentView}
 *       loadingView={progressBar}
 *       style={styles.loadingComponent}
 *     />
 *   );
 * },
 * ```
 */ var ProgressBarAndroidWithForwardedRef = React.forwardRef(function ProgressBarAndroid(_param, forwardedRef) {
    var _param_styleAttr = _param.// $FlowFixMe[incompatible-type]
    styleAttr, styleAttr = _param_styleAttr === void 0 ? 'Normal' : _param_styleAttr, _param_indeterminate = _param.indeterminate, indeterminate = _param_indeterminate === void 0 ? true : _param_indeterminate, _param_animating = _param.animating, animating = _param_animating === void 0 ? true : _param_animating, restProps = _object_without_properties._(_param, [
        "styleAttr",
        "indeterminate",
        "animating"
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressBarAndroidNativeComponent.default, _object_spread_props._(_object_spread._({
        styleAttr: styleAttr,
        indeterminate: indeterminate,
        animating: animating
    }, restProps), {
        ref: forwardedRef
    }));
});
module.exports = /* $FlowFixMe(>=0.89.0 site=react_native_android_fb) This comment suppresses an
   * error found when Flow v0.89 was deployed. To see the error, delete this
   * comment and run Flow. */ ProgressBarAndroidWithForwardedRef;


}),
"./node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js": 
/*!*******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js ***!
  \*******************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _NativeStatusBarManagerAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeStatusBarManagerAndroid */ "./node_modules/react-native/Libraries/Components/StatusBar/NativeStatusBarManagerAndroid.js"));
var _NativeStatusBarManagerIOS = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeStatusBarManagerIOS */ "./node_modules/react-native/Libraries/Components/StatusBar/NativeStatusBarManagerIOS.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
/**
 * Status bar style
 */ /**
 * Status bar animation
 */ /**
 * Merges the prop stack with the default values.
 */ function mergePropsStack(propsStack, defaultValues) {
    return propsStack.reduce((prev, cur)=>{
        for(var prop in cur){
            if (cur[prop] != null) {
                prev[prop] = cur[prop];
            }
        }
        return prev;
    }, _object_spread._({}, defaultValues));
}
/**
 * Returns an object to insert in the props stack from the props
 * and the transition/animation info.
 */ function createStackEntry(props) {
    var animated = props.animated ?? false;
    var showHideTransition = props.showHideTransition ?? 'fade';
    return {
        backgroundColor: props.backgroundColor != null ? {
            value: props.backgroundColor,
            animated
        } : null,
        barStyle: props.barStyle != null ? {
            value: props.barStyle,
            animated
        } : null,
        translucent: props.translucent,
        hidden: props.hidden != null ? {
            value: props.hidden,
            animated,
            transition: showHideTransition
        } : null,
        networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
    };
}
/**
 * Component to control the app status bar.
 *
 * It is possible to have multiple `StatusBar` components mounted at the same
 * time. The props will be merged in the order the `StatusBar` components were
 * mounted.
 *
 * ### Imperative API
 *
 * For cases where using a component is not ideal, there are static methods
 * to manipulate the `StatusBar` display stack. These methods have the same
 * behavior as mounting and unmounting a `StatusBar` component.
 *
 * For example, you can call `StatusBar.pushStackEntry` to update the status bar
 * before launching a third-party native UI component, and then call
 * `StatusBar.popStackEntry` when completed.
 *
 * ```
 * const openThirdPartyBugReporter = async () => {
 *   // The bug reporter has a dark background, so we push a new status bar style.
 *   const stackEntry = StatusBar.pushStackEntry({barStyle: 'light-content'});
 *
 *   // `open` returns a promise that resolves when the UI is dismissed.
 *   await BugReporter.open();
 *
 *   // Don't forget to call `popStackEntry` when you're done.
 *   StatusBar.popStackEntry(stackEntry);
 * };
 * ```
 *
 * There is a legacy imperative API that enables you to manually update the
 * status bar styles. However, the legacy API does not update the internal
 * `StatusBar` display stack, which means that any changes will be overridden
 * whenever a `StatusBar` component is mounted or unmounted.
 *
 * It is strongly advised that you use `pushStackEntry`, `popStackEntry`, or
 * `replaceStackEntry` instead of the static methods beginning with `set`.
 *
 * ### Constants
 *
 * `currentHeight` (Android only) The height of the status bar.
 */ var StatusBar = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(StatusBar, _React_Component);
    function StatusBar() {
        _class_call_check._(this, StatusBar);
        var _this;
        _this = _call_super._(this, StatusBar, arguments), // $FlowFixMe[missing-local-annot]
        _this._stackEntry = null;
        return _this;
    }
    _create_class._(StatusBar, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                // Every time a StatusBar component is mounted, we push it's prop to a stack
                // and always update the native status bar with the props from the top of then
                // stack. This allows having multiple StatusBar components and the one that is
                // added last or is deeper in the view hierarchy will have priority.
                this._stackEntry = StatusBar.pushStackEntry(this.props);
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                // When a StatusBar is unmounted, remove itself from the stack and update
                // the native bar with the next props.
                StatusBar.popStackEntry(this._stackEntry);
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate() {
                this._stackEntry = StatusBar.replaceStackEntry(this._stackEntry, this.props);
            }
        },
        {
            key: "render",
            value: function render() {
                return null;
            }
        }
    ], [
        {
            key: "setHidden",
            value: // Provide an imperative API as static functions of the component.
            // See the corresponding prop for more detail.
            /**
   * Show or hide the status bar
   * @param hidden Hide the status bar.
   * @param animation Optional animation when
   *    changing the status bar hidden property.
   */ function setHidden(hidden, animation) {
                animation = animation || 'none';
                StatusBar._defaultProps.hidden.value = hidden;
                if (_Platform.default.OS === 'ios') {
                    _NativeStatusBarManagerIOS.default.setHidden(hidden, animation);
                } else if (_Platform.default.OS === 'android') {
                    _NativeStatusBarManagerAndroid.default.setHidden(hidden);
                }
            }
        },
        {
            key: "setBarStyle",
            value: /**
   * Set the status bar style
   * @param style Status bar style to set
   * @param animated Animate the style change.
   */ function setBarStyle(style, animated) {
                animated = animated || false;
                StatusBar._defaultProps.barStyle.value = style;
                if (_Platform.default.OS === 'ios') {
                    _NativeStatusBarManagerIOS.default.setStyle(style, animated);
                } else if (_Platform.default.OS === 'android') {
                    _NativeStatusBarManagerAndroid.default.setStyle(style);
                }
            }
        },
        {
            key: "setNetworkActivityIndicatorVisible",
            value: /**
   * DEPRECATED - The status bar network activity indicator is not supported in iOS 13 and later. This will be removed in a future release.
   * @param visible Show the indicator.
   *
   * @deprecated
   */ function setNetworkActivityIndicatorVisible(visible) {
                if (_Platform.default.OS !== 'ios') {
                    console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
                    return;
                }
                StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
                _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(visible);
            }
        },
        {
            key: "setBackgroundColor",
            value: /**
   * Set the background color for the status bar
   * @param color Background color.
   * @param animated Animate the style change.
   */ function setBackgroundColor(color, animated) {
                if (_Platform.default.OS !== 'android') {
                    console.warn('`setBackgroundColor` is only available on Android');
                    return;
                }
                animated = animated || false;
                StatusBar._defaultProps.backgroundColor.value = color;
                var processedColor = (0, _processColor.default)(color);
                if (processedColor == null) {
                    console.warn(`\`StatusBar.setBackgroundColor\`: Color ${color} parsed to null or undefined`);
                    return;
                }
                (0, _invariant.default)(typeof processedColor === 'number', 'Unexpected color given for StatusBar.setBackgroundColor');
                _NativeStatusBarManagerAndroid.default.setColor(processedColor, animated);
            }
        },
        {
            key: "setTranslucent",
            value: /**
   * Control the translucency of the status bar
   * @param translucent Set as translucent.
   */ function setTranslucent(translucent) {
                if (_Platform.default.OS !== 'android') {
                    console.warn('`setTranslucent` is only available on Android');
                    return;
                }
                StatusBar._defaultProps.translucent = translucent;
                _NativeStatusBarManagerAndroid.default.setTranslucent(translucent);
            }
        },
        {
            key: "pushStackEntry",
            value: /**
   * Push a StatusBar entry onto the stack.
   * The return value should be passed to `popStackEntry` when complete.
   *
   * @param props Object containing the StatusBar props to use in the stack entry.
   */ function pushStackEntry(props) {
                var entry = createStackEntry(props);
                StatusBar._propsStack.push(entry);
                StatusBar._updatePropsStack();
                return entry;
            }
        },
        {
            key: "popStackEntry",
            value: /**
   * Pop a StatusBar entry from the stack.
   *
   * @param entry Entry returned from `pushStackEntry`.
   */ function popStackEntry(entry) {
                var index = StatusBar._propsStack.indexOf(entry);
                if (index !== -1) {
                    StatusBar._propsStack.splice(index, 1);
                }
                StatusBar._updatePropsStack();
            }
        },
        {
            key: "replaceStackEntry",
            value: /**
   * Replace an existing StatusBar stack entry with new props.
   *
   * @param entry Entry returned from `pushStackEntry` to replace.
   * @param props Object containing the StatusBar props to use in the replacement stack entry.
   */ function replaceStackEntry(entry, props) {
                var newEntry = createStackEntry(props);
                var index = StatusBar._propsStack.indexOf(entry);
                if (index !== -1) {
                    StatusBar._propsStack[index] = newEntry;
                }
                StatusBar._updatePropsStack();
                return newEntry;
            }
        }
    ]);
    return StatusBar;
}(_react.Component);
StatusBar._propsStack = [];
StatusBar._defaultProps = createStackEntry({
    backgroundColor: _Platform.default.OS === 'android' ? _NativeStatusBarManagerAndroid.default.getConstants().DEFAULT_BACKGROUND_COLOR ?? 'black' : 'black',
    barStyle: 'default',
    translucent: false,
    hidden: false,
    networkActivityIndicatorVisible: false
});
// Timer for updating the native module values at the end of the frame.
// $FlowFixMe[missing-local-annot]
StatusBar._updateImmediate = null;
// The current merged values from the props stack.
// $FlowFixMe[missing-local-annot]
StatusBar._currentValues = null;
// TODO(janic): Provide a real API to deal with status bar height. See the
// discussion in #6195.
/**
   * The current height of the status bar on the device.
   *
   * @platform android
   */ StatusBar.currentHeight = _Platform.default.OS === 'android' ? _NativeStatusBarManagerAndroid.default.getConstants().HEIGHT : null;
/**
   * Updates the native status bar with the props from the stack.
   */ StatusBar._updatePropsStack = ()=>{
    // Send the update to the native module only once at the end of the frame.
    clearImmediate(StatusBar._updateImmediate);
    StatusBar._updateImmediate = setImmediate(()=>{
        var oldProps = StatusBar._currentValues;
        var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);
        // Update the props that have changed using the merged values from the props stack.
        if (_Platform.default.OS === 'ios') {
            if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
                _NativeStatusBarManagerIOS.default.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated || false);
            }
            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
                _NativeStatusBarManagerIOS.default.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
            }
            if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
                _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
            }
        } else if (_Platform.default.OS === 'android') {
            //todo(T60684787): Add back optimization to only update bar style and
            //background color if the new value is different from the old value.
            _NativeStatusBarManagerAndroid.default.setStyle(mergedProps.barStyle.value);
            var processedColor = (0, _processColor.default)(mergedProps.backgroundColor.value);
            if (processedColor == null) {
                console.warn(`\`StatusBar._updatePropsStack\`: Color ${mergedProps.backgroundColor.value} parsed to null or undefined`);
            } else {
                (0, _invariant.default)(typeof processedColor === 'number', 'Unexpected color given in StatusBar._updatePropsStack');
                _NativeStatusBarManagerAndroid.default.setColor(processedColor, mergedProps.backgroundColor.animated);
            }
            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
                _NativeStatusBarManagerAndroid.default.setHidden(mergedProps.hidden.value);
            }
            // Activities are not translucent by default, so always set if true.
            if (!oldProps || oldProps.translucent !== mergedProps.translucent || mergedProps.translucent) {
                _NativeStatusBarManagerAndroid.default.setTranslucent(mergedProps.translucent);
            }
        }
        // Update the current prop values.
        StatusBar._currentValues = mergedProps;
    });
};
module.exports = StatusBar;


}),
"./node_modules/react-native/Libraries/Components/Switch/Switch.js": 
/*!*************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Switch/Switch.js ***!
  \*************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/useMergeRefs */ "./node_modules/react-native/Libraries/Utilities/useMergeRefs.js"));
var _AndroidSwitchNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./AndroidSwitchNativeComponent */ "./node_modules/react-native/Libraries/Components/Switch/AndroidSwitchNativeComponent.js"));
var _SwitchNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./SwitchNativeComponent */ "./node_modules/react-native/Libraries/Components/Switch/SwitchNativeComponent.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var returnsFalse = ()=>false;
var returnsTrue = ()=>true;
/**
  Renders a boolean input.

  This is a controlled component that requires an `onValueChange`
  callback that updates the `value` prop in order for the component to
  reflect user actions. If the `value` prop is not updated, the
  component will continue to render the supplied `value` prop instead of
  the expected result of any user actions.

  ```SnackPlayer name=Switch
  import React, { useState } from "react";
  import { View, Switch, StyleSheet } from "react-native";

  const App = () => {
    const [isEnabled, setIsEnabled] = useState(false);
    const toggleSwitch = () => setIsEnabled(previousState => !previousState);

    return (
      <View style={styles.container}>
        <Switch
          trackColor={{ false: "#767577", true: "#81b0ff" }}
          thumbColor={isEnabled ? "#f5dd4b" : "#f4f3f4"}
          ios_backgroundColor="#3e3e3e"
          onValueChange={toggleSwitch}
          value={isEnabled}
        />
      </View>
    );
  }

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      alignItems: "center",
      justifyContent: "center"
    }
  });

  export default App;
  ```
 */ var SwitchWithForwardedRef = /*#__PURE__*/ _react.forwardRef(function Switch(props, forwardedRef) {
    var disabled = props.disabled, ios_backgroundColor = props.ios_backgroundColor, onChange = props.onChange, onValueChange = props.onValueChange, style = props.style, thumbColor = props.thumbColor, trackColor = props.trackColor, value = props.value, restProps = _object_without_properties._(props, [
        "disabled",
        "ios_backgroundColor",
        "onChange",
        "onValueChange",
        "style",
        "thumbColor",
        "trackColor",
        "value"
    ]);
    var trackColorForFalse = trackColor === null || trackColor === void 0 ? void 0 : trackColor.false;
    var trackColorForTrue = trackColor === null || trackColor === void 0 ? void 0 : trackColor.true;
    var nativeSwitchRef = _react.useRef(null);
    var ref = (0, _useMergeRefs.default)(nativeSwitchRef, forwardedRef);
    var _React_useState = _sliced_to_array._(_react.useState({
        value: null
    }), 2), native = _React_useState[0], setNative = _React_useState[1];
    var handleChange = (event)=>{
        // $FlowFixMe[unused-promise]
        onChange === null || onChange === void 0 ? void 0 : onChange(event);
        // $FlowFixMe[unused-promise]
        onValueChange === null || onValueChange === void 0 ? void 0 : onValueChange(event.nativeEvent.value);
        setNative({
            value: event.nativeEvent.value
        });
    };
    _react.useLayoutEffect(()=>{
        var _nativeSwitchRef_current;
        // This is necessary in case native updates the switch and JS decides
        // that the update should be ignored and we should stick with the value
        // that we have in JS.
        var jsValue = value === true;
        var shouldUpdateNativeSwitch = native.value != null && native.value !== jsValue;
        if (shouldUpdateNativeSwitch && ((_nativeSwitchRef_current = nativeSwitchRef.current) === null || _nativeSwitchRef_current === void 0 ? void 0 : _nativeSwitchRef_current.setNativeProps) != null) {
            if (_Platform.default.OS === 'android') {
                _AndroidSwitchNativeComponent.Commands.setNativeValue(nativeSwitchRef.current, jsValue);
            } else {
                _SwitchNativeComponent.Commands.setValue(nativeSwitchRef.current, jsValue);
            }
        }
    }, [
        value,
        native
    ]);
    if (_Platform.default.OS === 'android') {
        var accessibilityState = restProps.accessibilityState;
        var _disabled = disabled != null ? disabled : accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.disabled;
        var _accessibilityState = _disabled !== (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.disabled) ? _object_spread_props._(_object_spread._({}, accessibilityState), {
            disabled: _disabled
        }) : accessibilityState;
        var platformProps = {
            accessibilityState: _accessibilityState,
            enabled: _disabled !== true,
            on: value === true,
            style,
            thumbTintColor: thumbColor,
            trackColorForFalse: trackColorForFalse,
            trackColorForTrue: trackColorForTrue,
            trackTintColor: value === true ? trackColorForTrue : trackColorForFalse
        };
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_AndroidSwitchNativeComponent.default, _object_spread_props._(_object_spread._({}, restProps, platformProps), {
            accessibilityRole: props.accessibilityRole ?? 'switch',
            onChange: handleChange,
            onResponderTerminationRequest: returnsFalse,
            onStartShouldSetResponder: returnsTrue,
            ref: ref
        }));
    } else {
        var platformProps1 = {
            disabled,
            onTintColor: trackColorForTrue,
            style: _StyleSheet.default.compose({
                height: 31,
                width: 51
            }, _StyleSheet.default.compose(style, ios_backgroundColor == null ? null : {
                backgroundColor: ios_backgroundColor,
                borderRadius: 16
            })),
            thumbTintColor: thumbColor,
            tintColor: trackColorForFalse,
            value: value === true
        };
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_SwitchNativeComponent.default, _object_spread_props._(_object_spread._({}, restProps, platformProps1), {
            accessibilityRole: props.accessibilityRole ?? 'switch',
            onChange: handleChange,
            onResponderTerminationRequest: returnsFalse,
            onStartShouldSetResponder: returnsTrue,
            ref: ref
        }));
    }
});
var _default = SwitchWithForwardedRef;


}),
"./node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js ***!
  \****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _SafeAreaView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/SafeAreaView/SafeAreaView */ "./node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _useWindowDimensions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/useWindowDimensions */ "./node_modules/react-native/Libraries/Utilities/useWindowDimensions.js"));
var _RCTInputAccessoryViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./RCTInputAccessoryViewNativeComponent */ "./node_modules/react-native/Libraries/Components/TextInput/RCTInputAccessoryViewNativeComponent.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
/**
 * Note: iOS only
 *
 * A component which enables customization of the keyboard input accessory view.
 * The input accessory view is displayed above the keyboard whenever a TextInput
 * has focus. This component can be used to create custom toolbars.
 *
 * To use this component wrap your custom toolbar with the
 * InputAccessoryView component, and set a nativeID. Then, pass that nativeID
 * as the inputAccessoryViewID of whatever TextInput you desire. A simple
 * example:
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react';
 * import { AppRegistry, TextInput, InputAccessoryView, Button } from 'react-native';
 *
 * export default class UselessTextInput extends Component {
 *   constructor(props) {
 *     super(props);
 *     this.state = {text: 'Placeholder Text'};
 *   }
 *
 *   render() {
 *     const inputAccessoryViewID = "uniqueID";
 *     return (
 *       <View>
 *         <ScrollView keyboardDismissMode="interactive">
 *           <TextInput
 *             style={{
 *               padding: 10,
 *               paddingTop: 50,
 *             }}
 *             inputAccessoryViewID=inputAccessoryViewID
 *             onChangeText={text => this.setState({text})}
 *             value={this.state.text}
 *           />
 *         </ScrollView>
 *         <InputAccessoryView nativeID=inputAccessoryViewID>
 *           <Button
 *             onPress={() => this.setState({text: 'Placeholder Text'})}
 *             title="Reset Text"
 *           />
 *         </InputAccessoryView>
 *       </View>
 *     );
 *   }
 * }
 *
 * // skip this line if using Create React Native App
 * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);
 * ```
 *
 * This component can also be used to create sticky text inputs (text inputs
 * which are anchored to the top of the keyboard). To do this, wrap a
 * TextInput with the InputAccessoryView component, and don't set a nativeID.
 * For an example, look at InputAccessoryViewExample.js in RNTester.
 */ var InputAccessoryView = (props)=>{
    var width = (0, _useWindowDimensions.default)().width;
    if (_Platform.default.OS === 'ios') {
        if (_react.Children.count(props.children) === 0) {
            return null;
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_RCTInputAccessoryViewNativeComponent.default, {
            style: [
                props.style,
                styles.container
            ],
            nativeID: props.nativeID,
            backgroundColor: props.backgroundColor,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_SafeAreaView.default, {
                style: [
                    styles.safeAreaView,
                    {
                        width
                    }
                ],
                children: props.children
            })
        });
    } else {
        console.warn('<InputAccessoryView> is only supported on iOS.');
        return null;
    }
};
var styles = _StyleSheet.default.create({
    container: {
        position: 'absolute'
    },
    safeAreaView: {
        flex: 1
    }
});
var _default = InputAccessoryView;


}),
"./node_modules/react-native/Libraries/Components/TextInput/TextInput.js": 
/*!*******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/TextInput/TextInput.js ***!
  \*******************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../src/private/featureflags/ReactNativeFeatureFlags */ "./node_modules/react-native/src/private/featureflags/ReactNativeFeatureFlags.js"));
var _usePressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Pressability/usePressability */ "./node_modules/react-native/Libraries/Pressability/usePressability.js"));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/flattenStyle */ "./node_modules/react-native/Libraries/StyleSheet/flattenStyle.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _TextAncestor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/TextAncestor */ "./node_modules/react-native/Libraries/Text/TextAncestor.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/useMergeRefs */ "./node_modules/react-native/Libraries/Utilities/useMergeRefs.js"));
var _TextInputState = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./TextInputState */ "./node_modules/react-native/Libraries/Components/TextInput/TextInputState.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! nullthrows */ "./node_modules/nullthrows/nullthrows.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var AndroidTextInput;
var AndroidTextInputCommands;
var RCTSinglelineTextInputView;
var RCTSinglelineTextInputNativeCommands;
var RCTMultilineTextInputView;
var RCTMultilineTextInputNativeCommands;
if (_Platform.default.OS === 'android') {
    AndroidTextInput = (__webpack_require__(/*! ./AndroidTextInputNativeComponent */ "./node_modules/react-native/Libraries/Components/TextInput/AndroidTextInputNativeComponent.js")/* ["default"] */["default"]);
    AndroidTextInputCommands = (__webpack_require__(/*! ./AndroidTextInputNativeComponent */ "./node_modules/react-native/Libraries/Components/TextInput/AndroidTextInputNativeComponent.js")/* .Commands */.Commands);
} else if (_Platform.default.OS === 'ios') {
    RCTSinglelineTextInputView = (__webpack_require__(/*! ./RCTSingelineTextInputNativeComponent */ "./node_modules/react-native/Libraries/Components/TextInput/RCTSingelineTextInputNativeComponent.js")/* ["default"] */["default"]);
    RCTSinglelineTextInputNativeCommands = (__webpack_require__(/*! ./RCTSingelineTextInputNativeComponent */ "./node_modules/react-native/Libraries/Components/TextInput/RCTSingelineTextInputNativeComponent.js")/* .Commands */.Commands);
    RCTMultilineTextInputView = (__webpack_require__(/*! ./RCTMultilineTextInputNativeComponent */ "./node_modules/react-native/Libraries/Components/TextInput/RCTMultilineTextInputNativeComponent.js")/* ["default"] */["default"]);
    RCTMultilineTextInputNativeCommands = (__webpack_require__(/*! ./RCTMultilineTextInputNativeComponent */ "./node_modules/react-native/Libraries/Components/TextInput/RCTMultilineTextInputNativeComponent.js")/* .Commands */.Commands);
}
var emptyFunctionThatReturnsTrue = ()=>true;
/**
 * This hook handles the synchronization between the state of the text input
 * in native and in JavaScript. This is necessary due to the asynchronous nature
 * of text input events.
 */ function useTextInputStateSynchronization_STATE(ref) {
    var props = ref.props, mostRecentEventCount = ref.mostRecentEventCount, selection = ref.selection, inputRef = ref.inputRef, text = ref.text, viewCommands = ref.viewCommands;
    var _useState = _sliced_to_array._((0, _react.useState)(props.value), 2), lastNativeText = _useState[0], setLastNativeText = _useState[1];
    var _useState1 = _sliced_to_array._((0, _react.useState)({
        selection: {
            start: -1,
            end: -1
        },
        mostRecentEventCount: mostRecentEventCount
    }), 2), lastNativeSelectionState = _useState1[0], setLastNativeSelection = _useState1[1];
    var lastNativeSelection = lastNativeSelectionState.selection;
    // This is necessary in case native updates the text and JS decides
    // that the update should be ignored and we should stick with the value
    // that we have in JS.
    (0, _react.useLayoutEffect)(()=>{
        var nativeUpdate = {};
        if (lastNativeText !== props.value && typeof props.value === 'string') {
            nativeUpdate.text = props.value;
            setLastNativeText(props.value);
        }
        if (selection && lastNativeSelection && (lastNativeSelection.start !== selection.start || lastNativeSelection.end !== selection.end)) {
            nativeUpdate.selection = selection;
            setLastNativeSelection({
                selection,
                mostRecentEventCount
            });
        }
        if (Object.keys(nativeUpdate).length === 0) {
            return;
        }
        if (inputRef.current != null) {
            viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, text, (selection === null || selection === void 0 ? void 0 : selection.start) ?? -1, (selection === null || selection === void 0 ? void 0 : selection.end) ?? -1);
        }
    }, [
        mostRecentEventCount,
        inputRef,
        props.value,
        props.defaultValue,
        lastNativeText,
        selection,
        lastNativeSelection,
        text,
        viewCommands
    ]);
    return {
        setLastNativeText,
        setLastNativeSelection
    };
}
/**
 * This hook handles the synchronization between the state of the text input
 * in native and in JavaScript. This is necessary due to the asynchronous nature
 * of text input events.
 */ function useTextInputStateSynchronization_REFS(ref) {
    var props = ref.props, mostRecentEventCount = ref.mostRecentEventCount, selection = ref.selection, inputRef = ref.inputRef, text = ref.text, viewCommands = ref.viewCommands;
    var lastNativeTextRef = (0, _react.useRef)(props.value);
    var lastNativeSelectionRef = (0, _react.useRef)({
        selection: {
            start: -1,
            end: -1
        },
        mostRecentEventCount: mostRecentEventCount
    });
    // This is necessary in case native updates the text and JS decides
    // that the update should be ignored and we should stick with the value
    // that we have in JS.
    (0, _react.useLayoutEffect)(()=>{
        var nativeUpdate = {};
        var lastNativeSelection = lastNativeSelectionRef.current.selection;
        if (lastNativeTextRef.current !== props.value && typeof props.value === 'string') {
            nativeUpdate.text = props.value;
            lastNativeTextRef.current = props.value;
        }
        if (selection && lastNativeSelection && (lastNativeSelection.start !== selection.start || lastNativeSelection.end !== selection.end)) {
            nativeUpdate.selection = selection;
            lastNativeSelectionRef.current = {
                selection,
                mostRecentEventCount
            };
        }
        if (Object.keys(nativeUpdate).length === 0) {
            return;
        }
        if (inputRef.current != null) {
            viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, text, (selection === null || selection === void 0 ? void 0 : selection.start) ?? -1, (selection === null || selection === void 0 ? void 0 : selection.end) ?? -1);
        }
    }, [
        mostRecentEventCount,
        inputRef,
        props.value,
        props.defaultValue,
        selection,
        text,
        viewCommands
    ]);
    return {
        setLastNativeText: (lastNativeText)=>{
            lastNativeTextRef.current = lastNativeText;
        },
        setLastNativeSelection: (lastNativeSelection)=>{
            lastNativeSelectionRef.current = lastNativeSelection;
        }
    };
}
/**
 * A foundational component for inputting text into the app via a
 * keyboard. Props provide configurability for several features, such as
 * auto-correction, auto-capitalization, placeholder text, and different keyboard
 * types, such as a numeric keypad.
 *
 * The simplest use case is to plop down a `TextInput` and subscribe to the
 * `onChangeText` events to read the user input. There are also other events,
 * such as `onSubmitEditing` and `onFocus` that can be subscribed to. A simple
 * example:
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react';
 * import { AppRegistry, TextInput } from 'react-native';
 *
 * export default class UselessTextInput extends Component {
 *   constructor(props) {
 *     super(props);
 *     this.state = { text: 'Useless Placeholder' };
 *   }
 *
 *   render() {
 *     return (
 *       <TextInput
 *         style={{height: 40, borderColor: 'gray', borderWidth: 1}}
 *         onChangeText={(text) => this.setState({text})}
 *         value={this.state.text}
 *       />
 *     );
 *   }
 * }
 *
 * // skip this line if using Create React Native App
 * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);
 * ```
 *
 * Two methods exposed via the native element are .focus() and .blur() that
 * will focus or blur the TextInput programmatically.
 *
 * Note that some props are only available with `multiline={true/false}`.
 * Additionally, border styles that apply to only one side of the element
 * (e.g., `borderBottomColor`, `borderLeftWidth`, etc.) will not be applied if
 * `multiline=false`. To achieve the same effect, you can wrap your `TextInput`
 * in a `View`:
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react';
 * import { AppRegistry, View, TextInput } from 'react-native';
 *
 * class UselessTextInput extends Component {
 *   render() {
 *     return (
 *       <TextInput
 *         {...this.props} // Inherit any props passed to it; e.g., multiline, numberOfLines below
 *         editable={true}
 *         maxLength={40}
 *       />
 *     );
 *   }
 * }
 *
 * export default class UselessTextInputMultiline extends Component {
 *   constructor(props) {
 *     super(props);
 *     this.state = {
 *       text: 'Useless Multiline Placeholder',
 *     };
 *   }
 *
 *   // If you type something in the text box that is a color, the background will change to that
 *   // color.
 *   render() {
 *     return (
 *      <View style={{
 *        backgroundColor: this.state.text,
 *        borderBottomColor: '#000000',
 *        borderBottomWidth: 1 }}
 *      >
 *        <UselessTextInput
 *          multiline={true}
 *          numberOfLines={4}
 *          onChangeText={(text) => this.setState({text})}
 *          value={this.state.text}
 *        />
 *      </View>
 *     );
 *   }
 * }
 *
 * // skip these lines if using Create React Native App
 * AppRegistry.registerComponent(
 *  'AwesomeProject',
 *  () => UselessTextInputMultiline
 * );
 * ```
 *
 * `TextInput` has by default a border at the bottom of its view. This border
 * has its padding set by the background image provided by the system, and it
 * cannot be changed. Solutions to avoid this is to either not set height
 * explicitly, case in which the system will take care of displaying the border
 * in the correct position, or to not display the border by setting
 * `underlineColorAndroid` to transparent.
 *
 * Note that on Android performing text selection in input can change
 * app's activity `windowSoftInputMode` param to `adjustResize`.
 * This may cause issues with components that have position: 'absolute'
 * while keyboard is active. To avoid this behavior either specify `windowSoftInputMode`
 * in AndroidManifest.xml ( https://developer.android.com/guide/topics/manifest/activity-element.html )
 * or control this param programmatically with native code.
 *
 */ function InternalTextInput(props) {
    var ariaBusy = props['aria-busy'], ariaChecked = props['aria-checked'], ariaDisabled = props['aria-disabled'], ariaExpanded = props['aria-expanded'], ariaSelected = props['aria-selected'], accessibilityState = props.accessibilityState, id = props.id, tabIndex = props.tabIndex, propsSelection = props.selection, selectionColor = props.selectionColor, selectionHandleColor = props.selectionHandleColor, cursorColor = props.cursorColor, otherProps = _object_without_properties._(props, [
        'aria-busy',
        'aria-checked',
        'aria-disabled',
        'aria-expanded',
        'aria-selected',
        "accessibilityState",
        "id",
        "tabIndex",
        "selection",
        "selectionColor",
        "selectionHandleColor",
        "cursorColor"
    ]);
    var inputRef = (0, _react.useRef)(null);
    var selection = propsSelection == null ? null : {
        start: propsSelection.start,
        end: propsSelection.end ?? propsSelection.start
    };
    var text = typeof props.value === 'string' ? props.value : typeof props.defaultValue === 'string' ? props.defaultValue : '';
    var viewCommands = AndroidTextInputCommands || (props.multiline === true ? RCTMultilineTextInputNativeCommands : RCTSinglelineTextInputNativeCommands);
    var _useState = _sliced_to_array._((0, _react.useState)(0), 2), mostRecentEventCount = _useState[0], setMostRecentEventCount = _useState[1];
    var useTextInputStateSynchronization = _ReactNativeFeatureFlags.useRefsForTextInputState() ? useTextInputStateSynchronization_REFS : useTextInputStateSynchronization_STATE;
    var _useTextInputStateSynchronization = useTextInputStateSynchronization({
        props,
        inputRef,
        mostRecentEventCount,
        selection,
        text,
        viewCommands
    }), setLastNativeText = _useTextInputStateSynchronization.setLastNativeText, setLastNativeSelection = _useTextInputStateSynchronization.setLastNativeSelection;
    (0, _react.useLayoutEffect)(()=>{
        var inputRefValue = inputRef.current;
        if (inputRefValue != null) {
            _TextInputState.default.registerInput(inputRefValue);
            return ()=>{
                _TextInputState.default.unregisterInput(inputRefValue);
                if (_TextInputState.default.currentlyFocusedInput() === inputRefValue) {
                    (0, _nullthrows.default)(inputRefValue).blur();
                }
            };
        }
    }, []);
    var setLocalRef = (0, _react.useCallback)((instance)=>{
        inputRef.current = instance;
        /*
      Hi reader from the future. I'm sorry for this.

      This is a hack. Ideally we would forwardRef to the underlying
      host component. However, since TextInput has it's own methods that can be
      called as well, if we used the standard forwardRef then these
      methods wouldn't be accessible and thus be a breaking change.

      We have a couple of options of how to handle this:
      - Return a new ref with everything we methods from both. This is problematic
        because we need React to also know it is a host component which requires
        internals of the class implementation of the ref.
      - Break the API and have some other way to call one set of the methods or
        the other. This is our long term approach as we want to eventually
        get the methods on host components off the ref. So instead of calling
        ref.measure() you might call ReactNative.measure(ref). This would hopefully
        let the ref for TextInput then have the methods like `.clear`. Or we do it
        the other way and make it TextInput.clear(textInputRef) which would be fine
        too. Either way though is a breaking change that is longer term.
      - Mutate this ref. :( Gross, but accomplishes what we need in the meantime
        before we can get to the long term breaking change.
      */ if (instance != null) {
            // $FlowFixMe[incompatible-use] - See the explanation above.
            Object.assign(instance, {
                clear () {
                    if (inputRef.current != null) {
                        viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, '', 0, 0);
                    }
                },
                // TODO: Fix this returning true on null === null, when no input is focused
                isFocused () {
                    return _TextInputState.default.currentlyFocusedInput() === inputRef.current;
                },
                getNativeRef () {
                    return inputRef.current;
                },
                setSelection (start, end) {
                    if (inputRef.current != null) {
                        viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, null, start, end);
                    }
                }
            });
        }
    }, [
        mostRecentEventCount,
        viewCommands
    ]);
    var ref = (0, _useMergeRefs.default)(setLocalRef, props.forwardedRef);
    var _onChange = (event)=>{
        var currentText = event.nativeEvent.text;
        props.onChange && props.onChange(event);
        props.onChangeText && props.onChangeText(currentText);
        if (inputRef.current == null) {
            // calling `props.onChange` or `props.onChangeText`
            // may clean up the input itself. Exits here.
            return;
        }
        setLastNativeText(currentText);
        // This must happen last, after we call setLastNativeText.
        // Different ordering can cause bugs when editing AndroidTextInputs
        // with multiple Fragments.
        // We must update this so that controlled input updates work.
        setMostRecentEventCount(event.nativeEvent.eventCount);
    };
    var _onSelectionChange = (event)=>{
        props.onSelectionChange && props.onSelectionChange(event);
        if (inputRef.current == null) {
            // calling `props.onSelectionChange`
            // may clean up the input itself. Exits here.
            return;
        }
        setLastNativeSelection({
            selection: event.nativeEvent.selection,
            mostRecentEventCount
        });
    };
    var _onFocus = (event)=>{
        _TextInputState.default.focusInput(inputRef.current);
        if (props.onFocus) {
            props.onFocus(event);
        }
    };
    var _onBlur = (event)=>{
        _TextInputState.default.blurInput(inputRef.current);
        if (props.onBlur) {
            props.onBlur(event);
        }
    };
    var _onScroll = (event)=>{
        props.onScroll && props.onScroll(event);
    };
    var textInput = null;
    var multiline = props.multiline ?? false;
    var submitBehavior;
    if (props.submitBehavior != null) {
        // `submitBehavior` is set explicitly
        if (!multiline && props.submitBehavior === 'newline') {
            // For single line text inputs, `'newline'` is not a valid option
            submitBehavior = 'blurAndSubmit';
        } else {
            submitBehavior = props.submitBehavior;
        }
    } else if (multiline) {
        if (props.blurOnSubmit === true) {
            submitBehavior = 'blurAndSubmit';
        } else {
            submitBehavior = 'newline';
        }
    } else {
        // Single line
        if (props.blurOnSubmit !== false) {
            submitBehavior = 'blurAndSubmit';
        } else {
            submitBehavior = 'submit';
        }
    }
    var accessible = props.accessible !== false;
    var focusable = props.focusable !== false;
    var editable = props.editable, hitSlop = props.hitSlop, onPress = props.onPress, onPressIn = props.onPressIn, onPressOut = props.onPressOut, rejectResponderTermination = props.rejectResponderTermination;
    var config = _react.useMemo(()=>({
            hitSlop,
            onPress: (event)=>{
                onPress === null || onPress === void 0 ? void 0 : onPress(event);
                if (editable !== false) {
                    if (inputRef.current != null) {
                        inputRef.current.focus();
                    }
                }
            },
            onPressIn: onPressIn,
            onPressOut: onPressOut,
            cancelable: _Platform.default.OS === 'ios' ? !rejectResponderTermination : null
        }), [
        editable,
        hitSlop,
        onPress,
        onPressIn,
        onPressOut,
        rejectResponderTermination
    ]);
    // Hide caret during test runs due to a flashing caret
    // makes screenshot tests flakey
    var caretHidden = props.caretHidden;
    if (_Platform.default.isTesting) {
        caretHidden = true;
    }
    // TextInput handles onBlur and onFocus events
    // so omitting onBlur and onFocus pressability handlers here.
    var _usePressability1 = (0, _usePressability.default)(config), onBlur = _usePressability1.onBlur, onFocus = _usePressability1.onFocus, eventHandlers = _object_without_properties._(_usePressability1, [
        "onBlur",
        "onFocus"
    ]);
    var _accessibilityState;
    if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
        _accessibilityState = {
            busy: ariaBusy ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.busy),
            checked: ariaChecked ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.checked),
            disabled: ariaDisabled ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.disabled),
            expanded: ariaExpanded ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.expanded),
            selected: ariaSelected ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.selected)
        };
    }
    // Keep the original (potentially nested) style when possible, as React can diff these more efficiently
    var _style = props.style;
    var flattenedStyle = (0, _flattenStyle.default)(props.style);
    if (flattenedStyle != null) {
        var overrides = null;
        if (typeof (flattenedStyle === null || flattenedStyle === void 0 ? void 0 : flattenedStyle.fontWeight) === 'number') {
            overrides = overrides || {};
            overrides.fontWeight = // $FlowFixMe[incompatible-cast]
            flattenedStyle.fontWeight.toString();
        }
        if (flattenedStyle.verticalAlign != null) {
            overrides = overrides || {};
            overrides.textAlignVertical = verticalAlignToTextAlignVerticalMap[flattenedStyle.verticalAlign];
            overrides.verticalAlign = undefined;
        }
        if (overrides != null) {
            // $FlowFixMe[incompatible-type]
            _style = [
                _style,
                overrides
            ];
        }
    }
    if (_Platform.default.OS === 'ios') {
        var RCTTextInputView = props.multiline === true ? RCTMultilineTextInputView : RCTSinglelineTextInputView;
        var useMultilineDefaultStyle = props.multiline === true && (flattenedStyle == null || flattenedStyle.padding == null && flattenedStyle.paddingVertical == null && flattenedStyle.paddingTop == null);
        textInput = /*#__PURE__*/ (0, _jsxruntime.jsx)(RCTTextInputView, _object_spread_props._(_object_spread._({
            // $FlowFixMe[incompatible-type] - Figure out imperative + forward refs.
            ref: ref
        }, otherProps, eventHandlers), {
            accessibilityState: _accessibilityState,
            accessible: accessible,
            submitBehavior: submitBehavior,
            caretHidden: caretHidden,
            dataDetectorTypes: props.dataDetectorTypes,
            focusable: tabIndex !== undefined ? !tabIndex : focusable,
            mostRecentEventCount: mostRecentEventCount,
            nativeID: id ?? props.nativeID,
            onBlur: _onBlur,
            onChange: _onChange,
            onContentSizeChange: props.onContentSizeChange,
            onFocus: _onFocus,
            onScroll: _onScroll,
            onSelectionChange: _onSelectionChange,
            onSelectionChangeShouldSetResponder: emptyFunctionThatReturnsTrue,
            selection: selection,
            selectionColor: selectionColor,
            style: _StyleSheet.default.compose(useMultilineDefaultStyle ? styles.multilineDefault : null, _style),
            text: text
        }));
    } else if (_Platform.default.OS === 'android') {
        var autoCapitalize = props.autoCapitalize || 'sentences';
        var _accessibilityLabelledBy = (props === null || props === void 0 ? void 0 : props['aria-labelledby']) ?? (props === null || props === void 0 ? void 0 : props.accessibilityLabelledBy);
        var placeholder = props.placeholder ?? '';
        var children = props.children;
        var childCount = _react.Children.count(children);
        (0, _invariant.default)(!(props.value != null && childCount), 'Cannot specify both value and children.');
        if (childCount > 1) {
            children = /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                children: children
            });
        }
        // For consistency with iOS set cursor/selectionHandle color as selectionColor
        var colorProps = {
            selectionColor,
            selectionHandleColor: selectionHandleColor === undefined ? selectionColor : selectionHandleColor,
            cursorColor: cursorColor === undefined ? selectionColor : cursorColor
        };
        textInput = /* $FlowFixMe[prop-missing] the types for AndroidTextInput don't match up
       * exactly with the props for TextInput. This will need to get fixed */ /* $FlowFixMe[incompatible-type] the types for AndroidTextInput don't
       * match up exactly with the props for TextInput. This will need to get
       * fixed */ /* $FlowFixMe[incompatible-type-arg] the types for AndroidTextInput don't
       * match up exactly with the props for TextInput. This will need to get
       * fixed */ /*#__PURE__*/ (0, _jsxruntime.jsx)(AndroidTextInput, _object_spread_props._(_object_spread._({
            // $FlowFixMe[incompatible-type] - Figure out imperative + forward refs.
            ref: ref
        }, otherProps, colorProps, eventHandlers), {
            accessibilityState: _accessibilityState,
            accessibilityLabelledBy: _accessibilityLabelledBy,
            accessible: accessible,
            autoCapitalize: autoCapitalize,
            submitBehavior: submitBehavior,
            caretHidden: caretHidden,
            children: children,
            disableFullscreenUI: props.disableFullscreenUI,
            focusable: tabIndex !== undefined ? !tabIndex : focusable,
            mostRecentEventCount: mostRecentEventCount,
            nativeID: id ?? props.nativeID,
            numberOfLines: props.rows ?? props.numberOfLines,
            onBlur: _onBlur,
            onChange: _onChange,
            onFocus: _onFocus,
            /* $FlowFixMe[prop-missing] the types for AndroidTextInput don't match
         * up exactly with the props for TextInput. This will need to get fixed
         */ /* $FlowFixMe[incompatible-type-arg] the types for AndroidTextInput
         * don't match up exactly with the props for TextInput. This will need
         * to get fixed */ onScroll: _onScroll,
            onSelectionChange: _onSelectionChange,
            placeholder: placeholder,
            style: _style,
            text: text,
            textBreakStrategy: props.textBreakStrategy
        }));
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextAncestor.default.Provider, {
        value: true,
        children: textInput
    });
}
var enterKeyHintToReturnTypeMap = {
    enter: 'default',
    done: 'done',
    go: 'go',
    next: 'next',
    previous: 'previous',
    search: 'search',
    send: 'send'
};
var inputModeToKeyboardTypeMap = {
    none: 'default',
    text: 'default',
    decimal: 'decimal-pad',
    numeric: 'number-pad',
    tel: 'phone-pad',
    search: _Platform.default.OS === 'ios' ? 'web-search' : 'default',
    email: 'email-address',
    url: 'url'
};
// Map HTML autocomplete values to Android autoComplete values
var autoCompleteWebToAutoCompleteAndroidMap = {
    'address-line1': 'postal-address-region',
    'address-line2': 'postal-address-locality',
    bday: 'birthdate-full',
    'bday-day': 'birthdate-day',
    'bday-month': 'birthdate-month',
    'bday-year': 'birthdate-year',
    'cc-csc': 'cc-csc',
    'cc-exp': 'cc-exp',
    'cc-exp-month': 'cc-exp-month',
    'cc-exp-year': 'cc-exp-year',
    'cc-number': 'cc-number',
    country: 'postal-address-country',
    'current-password': 'password',
    email: 'email',
    'honorific-prefix': 'name-prefix',
    'honorific-suffix': 'name-suffix',
    name: 'name',
    'additional-name': 'name-middle',
    'family-name': 'name-family',
    'given-name': 'name-given',
    'new-password': 'password-new',
    off: 'off',
    'one-time-code': 'sms-otp',
    'postal-code': 'postal-code',
    sex: 'gender',
    'street-address': 'street-address',
    tel: 'tel',
    'tel-country-code': 'tel-country-code',
    'tel-national': 'tel-national',
    username: 'username'
};
// Map HTML autocomplete values to iOS textContentType values
var autoCompleteWebToTextContentTypeMap = {
    'address-line1': 'streetAddressLine1',
    'address-line2': 'streetAddressLine2',
    bday: 'birthdate',
    'bday-day': 'birthdateDay',
    'bday-month': 'birthdateMonth',
    'bday-year': 'birthdateYear',
    'cc-csc': 'creditCardSecurityCode',
    'cc-exp-month': 'creditCardExpirationMonth',
    'cc-exp-year': 'creditCardExpirationYear',
    'cc-exp': 'creditCardExpiration',
    'cc-given-name': 'creditCardGivenName',
    'cc-additional-name': 'creditCardMiddleName',
    'cc-family-name': 'creditCardFamilyName',
    'cc-name': 'creditCardName',
    'cc-number': 'creditCardNumber',
    'cc-type': 'creditCardType',
    'current-password': 'password',
    country: 'countryName',
    email: 'emailAddress',
    name: 'name',
    'additional-name': 'middleName',
    'family-name': 'familyName',
    'given-name': 'givenName',
    nickname: 'nickname',
    'honorific-prefix': 'namePrefix',
    'honorific-suffix': 'nameSuffix',
    'new-password': 'newPassword',
    off: 'none',
    'one-time-code': 'oneTimeCode',
    organization: 'organizationName',
    'organization-title': 'jobTitle',
    'postal-code': 'postalCode',
    'street-address': 'fullStreetAddress',
    tel: 'telephoneNumber',
    url: 'URL',
    username: 'username'
};
var ExportedForwardRef = /*#__PURE__*/ _react.forwardRef(function TextInput(_param, forwardedRef) {
    var _param_allowFontScaling = _param.allowFontScaling, allowFontScaling = _param_allowFontScaling === void 0 ? true : _param_allowFontScaling, _param_rejectResponderTermination = _param.rejectResponderTermination, rejectResponderTermination = _param_rejectResponderTermination === void 0 ? true : _param_rejectResponderTermination, _param_underlineColorAndroid = _param.underlineColorAndroid, underlineColorAndroid = _param_underlineColorAndroid === void 0 ? 'transparent' : _param_underlineColorAndroid, autoComplete = _param.autoComplete, textContentType = _param.textContentType, readOnly = _param.readOnly, editable = _param.editable, enterKeyHint = _param.enterKeyHint, returnKeyType = _param.returnKeyType, inputMode = _param.inputMode, showSoftInputOnFocus = _param.showSoftInputOnFocus, keyboardType = _param.keyboardType, restProps = _object_without_properties._(_param, [
        "allowFontScaling",
        "rejectResponderTermination",
        "underlineColorAndroid",
        "autoComplete",
        "textContentType",
        "readOnly",
        "editable",
        "enterKeyHint",
        "returnKeyType",
        "inputMode",
        "showSoftInputOnFocus",
        "keyboardType"
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(InternalTextInput, _object_spread_props._(_object_spread._({
        allowFontScaling: allowFontScaling,
        rejectResponderTermination: rejectResponderTermination,
        underlineColorAndroid: underlineColorAndroid,
        editable: readOnly !== undefined ? !readOnly : editable,
        returnKeyType: enterKeyHint ? enterKeyHintToReturnTypeMap[enterKeyHint] : returnKeyType,
        keyboardType: inputMode ? inputModeToKeyboardTypeMap[inputMode] : keyboardType,
        showSoftInputOnFocus: inputMode == null ? showSoftInputOnFocus : inputMode !== 'none',
        autoComplete: _Platform.default.OS === 'android' ? // $FlowFixMe[prop-missing]
        autoCompleteWebToAutoCompleteAndroidMap[autoComplete] ?? autoComplete : undefined,
        textContentType: textContentType != null ? textContentType : _Platform.default.OS === 'ios' && autoComplete && autoComplete in autoCompleteWebToTextContentTypeMap ? // $FlowFixMe[prop-missing]
        autoCompleteWebToTextContentTypeMap[autoComplete] : textContentType
    }, restProps), {
        forwardedRef: forwardedRef
    }));
});
ExportedForwardRef.displayName = 'TextInput';
// $FlowFixMe[prop-missing]
ExportedForwardRef.State = {
    currentlyFocusedInput: _TextInputState.default.currentlyFocusedInput,
    currentlyFocusedField: _TextInputState.default.currentlyFocusedField,
    focusTextInput: _TextInputState.default.focusTextInput,
    blurTextInput: _TextInputState.default.blurTextInput
};
var styles = _StyleSheet.default.create({
    multilineDefault: {
        // This default top inset makes RCTMultilineTextInputView seem as close as possible
        // to single-line RCTSinglelineTextInputView defaults, using the system defaults
        // of font size 17 and a height of 31 points.
        paddingTop: 5
    }
});
var verticalAlignToTextAlignVerticalMap = {
    auto: 'auto',
    top: 'top',
    bottom: 'bottom',
    middle: 'center'
};
// $FlowFixMe[unclear-type] Unclear type. Using `any` type is not safe.
module.exports = ExportedForwardRef;


}),
"./node_modules/react-native/Libraries/Components/ToastAndroid/ToastAndroid.android.js": 
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/ToastAndroid/ToastAndroid.android.js ***!
  \*********************************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeToastAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeToastAndroid */ "./node_modules/react-native/Libraries/Components/ToastAndroid/NativeToastAndroid.js"));
/**
 * This exposes the native ToastAndroid module as a JS module. This has a function 'show'
 * which takes the following parameters:
 *
 * 1. String message: A string with the text to toast
 * 2. int duration: The duration of the toast. May be ToastAndroid.SHORT or ToastAndroid.LONG
 *
 * There is also a function `showWithGravity` to specify the layout gravity. May be
 * ToastAndroid.TOP, ToastAndroid.BOTTOM, ToastAndroid.CENTER.
 *
 * The 'showWithGravityAndOffset' function adds on the ability to specify offset
 * These offset values will translate to pixels.
 *
 * Basic usage:
 * ```javascript
 * ToastAndroid.show('A pikachu appeared nearby !', ToastAndroid.SHORT);
 * ToastAndroid.showWithGravity('All Your Base Are Belong To Us', ToastAndroid.SHORT, ToastAndroid.CENTER);
 * ToastAndroid.showWithGravityAndOffset('A wild toast appeared!', ToastAndroid.LONG, ToastAndroid.BOTTOM, 25, 50);
 * ```
 */ var ToastAndroidConstants = _NativeToastAndroid.default.getConstants();
var ToastAndroid = {
    // Toast duration constants
    SHORT: ToastAndroidConstants.SHORT,
    LONG: ToastAndroidConstants.LONG,
    // Toast gravity constants
    TOP: ToastAndroidConstants.TOP,
    BOTTOM: ToastAndroidConstants.BOTTOM,
    CENTER: ToastAndroidConstants.CENTER,
    show: function(message, duration) {
        _NativeToastAndroid.default.show(message, duration);
    },
    showWithGravity: function(message, duration, gravity) {
        _NativeToastAndroid.default.showWithGravity(message, duration, gravity);
    },
    showWithGravityAndOffset: function(message, duration, gravity, xOffset, yOffset) {
        _NativeToastAndroid.default.showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset);
    }
};
module.exports = ToastAndroid;


}),
"./node_modules/react-native/Libraries/Components/Touchable/BoundingDimensions.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Touchable/BoundingDimensions.js ***!
  \****************************************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _PooledClass = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./PooledClass */ "./node_modules/react-native/Libraries/Components/Touchable/PooledClass.js"));
var twoArgumentPooler = _PooledClass.default.twoArgumentPooler;
/**
 * PooledClass representing the bounding rectangle of a region.
 *
 * @param {number} width Width of bounding rectangle.
 * @param {number} height Height of bounding rectangle.
 * @constructor BoundingDimensions
 */ // $FlowFixMe[missing-this-annot]
function BoundingDimensions(width, height) {
    this.width = width;
    this.height = height;
}
// $FlowFixMe[prop-missing]
// $FlowFixMe[missing-this-annot]
BoundingDimensions.prototype.destructor = function() {
    this.width = null;
    this.height = null;
};
/**
 * @param {HTMLElement} element Element to return `BoundingDimensions` for.
 * @return {BoundingDimensions} Bounding dimensions of `element`.
 */ BoundingDimensions.getPooledFromElement = function(element) {
    // $FlowFixMe[prop-missing]
    return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
};
_PooledClass.default.addPoolingTo(BoundingDimensions, twoArgumentPooler);
module.exports = BoundingDimensions;


}),
"./node_modules/react-native/Libraries/Components/Touchable/PooledClass.js": 
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Touchable/PooledClass.js ***!
  \*********************************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
 * Flow's LTI update could not be added via codemod */ var oneArgumentPooler = function(copyFieldsFrom) {
    var Klass = this; // eslint-disable-line consistent-this
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, copyFieldsFrom);
        return instance;
    } else {
        return new Klass(copyFieldsFrom);
    }
};
/* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
 * Flow's LTI update could not be added via codemod */ var twoArgumentPooler = function(a1, a2) {
    var Klass = this; // eslint-disable-line consistent-this
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, a1, a2);
        return instance;
    } else {
        return new Klass(a1, a2);
    }
};
/* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
 * Flow's LTI update could not be added via codemod */ var threeArgumentPooler = function(a1, a2, a3) {
    var Klass = this; // eslint-disable-line consistent-this
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, a1, a2, a3);
        return instance;
    } else {
        return new Klass(a1, a2, a3);
    }
};
/* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
 * Flow's LTI update could not be added via codemod */ var fourArgumentPooler = function(a1, a2, a3, a4) {
    var Klass = this; // eslint-disable-line consistent-this
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, a1, a2, a3, a4);
        return instance;
    } else {
        return new Klass(a1, a2, a3, a4);
    }
};
/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
 * LTI update could not be added via codemod */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
 * Flow's LTI update could not be added via codemod */ var standardReleaser = function(instance) {
    var Klass = this; // eslint-disable-line consistent-this
    (0, _invariant.default)(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
    instance.destructor();
    if (Klass.instancePool.length < Klass.poolSize) {
        Klass.instancePool.push(instance);
    }
};
var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;
/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */ var addPoolingTo = function(CopyConstructor, pooler) {
    // Casting as any so that flow ignores the actual implementation and trusts
    // it to match the type we declared
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;
    if (!NewKlass.poolSize) {
        NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }
    NewKlass.release = standardReleaser;
    return NewKlass;
};
var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
};
module.exports = PooledClass;


}),
"./node_modules/react-native/Libraries/Components/Touchable/Position.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Touchable/Position.js ***!
  \******************************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _PooledClass = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./PooledClass */ "./node_modules/react-native/Libraries/Components/Touchable/PooledClass.js"));
var twoArgumentPooler = _PooledClass.default.twoArgumentPooler;
/**
 * Position does not expose methods for construction via an `HTMLDOMElement`,
 * because it isn't meaningful to construct such a thing without first defining
 * a frame of reference.
 *
 * @param {number} windowStartKey Key that window starts at.
 * @param {number} windowEndKey Key that window ends at.
 */ // $FlowFixMe[missing-this-annot]
function Position(left, top) {
    this.left = left;
    this.top = top;
}
// $FlowFixMe[prop-missing]
// $FlowFixMe[missing-this-annot]
Position.prototype.destructor = function() {
    this.left = null;
    this.top = null;
};
_PooledClass.default.addPoolingTo(Position, twoArgumentPooler);
module.exports = Position;


}),
"./node_modules/react-native/Libraries/Components/Touchable/Touchable.js": 
/*!*******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Touchable/Touchable.js ***!
  \*******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _PressabilityDebug = __webpack_require__(/*! ../../Pressability/PressabilityDebug */ "./node_modules/react-native/Libraries/Pressability/PressabilityDebug.js");
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../ReactNative/UIManager */ "./node_modules/react-native/Libraries/ReactNative/UIManager.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _SoundManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Sound/SoundManager */ "./node_modules/react-native/Libraries/Components/Sound/SoundManager.js"));
var _BoundingDimensions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./BoundingDimensions */ "./node_modules/react-native/Libraries/Components/Touchable/BoundingDimensions.js"));
var _Position = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./Position */ "./node_modules/react-native/Libraries/Components/Touchable/Position.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var extractSingleTouch = (nativeEvent)=>{
    var touches = nativeEvent.touches;
    var changedTouches = nativeEvent.changedTouches;
    var hasTouches = touches && touches.length > 0;
    var hasChangedTouches = changedTouches && changedTouches.length > 0;
    return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
};
/**
 * `Touchable`: Taps done right.
 *
 * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`
 * will measure time/geometry and tells you when to give feedback to the user.
 *
 * ====================== Touchable Tutorial ===============================
 * The `Touchable` mixin helps you handle the "press" interaction. It analyzes
 * the geometry of elements, and observes when another responder (scroll view
 * etc) has stolen the touch lock. It notifies your component when it should
 * give feedback to the user. (bouncing/highlighting/unhighlighting).
 *
 * - When a touch was activated (typically you highlight)
 * - When a touch was deactivated (typically you unhighlight)
 * - When a touch was "pressed" - a touch ended while still within the geometry
 *   of the element, and no other element (like scroller) has "stolen" touch
 *   lock ("responder") (Typically you bounce the element).
 *
 * A good tap interaction isn't as simple as you might think. There should be a
 * slight delay before showing a highlight when starting a touch. If a
 * subsequent touch move exceeds the boundary of the element, it should
 * unhighlight, but if that same touch is brought back within the boundary, it
 * should rehighlight again. A touch can move in and out of that boundary
 * several times, each time toggling highlighting, but a "press" is only
 * triggered if that touch ends while within the element's boundary and no
 * scroller (or anything else) has stolen the lock on touches.
 *
 * To create a new type of component that handles interaction using the
 * `Touchable` mixin, do the following:
 *
 * - Initialize the `Touchable` state.
 *
 *   getInitialState: function() {
 *     return merge(this.touchableGetInitialState(), yourComponentState);
 *   }
 *
 * - Choose the rendered component who's touches should start the interactive
 *   sequence. On that rendered node, forward all `Touchable` responder
 *   handlers. You can choose any rendered node you like. Choose a node whose
 *   hit target you'd like to instigate the interaction sequence:
 *
 *   // In render function:
 *   return (
 *     <View
 *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}
 *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}
 *       onResponderGrant={this.touchableHandleResponderGrant}
 *       onResponderMove={this.touchableHandleResponderMove}
 *       onResponderRelease={this.touchableHandleResponderRelease}
 *       onResponderTerminate={this.touchableHandleResponderTerminate}>
 *       <View>
 *         Even though the hit detection/interactions are triggered by the
 *         wrapping (typically larger) node, we usually end up implementing
 *         custom logic that highlights this inner one.
 *       </View>
 *     </View>
 *   );
 *
 * - You may set up your own handlers for each of these events, so long as you
 *   also invoke the `touchable*` handlers inside of your custom handler.
 *
 * - Implement the handlers on your component class in order to provide
 *   feedback to the user. See documentation for each of these class methods
 *   that you should implement.
 *
 *   touchableHandlePress: function() {
 *      this.performBounceAnimation();  // or whatever you want to do.
 *   },
 *   touchableHandleActivePressIn: function() {
 *     this.beginHighlighting(...);  // Whatever you like to convey activation
 *   },
 *   touchableHandleActivePressOut: function() {
 *     this.endHighlighting(...);  // Whatever you like to convey deactivation
 *   },
 *
 * - There are more advanced methods you can implement (see documentation below):
 *   touchableGetHighlightDelayMS: function() {
 *     return 20;
 *   }
 *   // In practice, *always* use a predeclared constant (conserve memory).
 *   touchableGetPressRectOffset: function() {
 *     return {top: 20, left: 20, right: 20, bottom: 100};
 *   }
 */ /**
 * Touchable states.
 */ var States = {
    NOT_RESPONDER: 'NOT_RESPONDER',
    RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',
    RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',
    RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',
    RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',
    RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
    RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
    ERROR: 'ERROR'
};
/*
 * Quick lookup map for states that are considered to be "active"
 */ var baseStatesConditions = {
    NOT_RESPONDER: false,
    RESPONDER_INACTIVE_PRESS_IN: false,
    RESPONDER_INACTIVE_PRESS_OUT: false,
    RESPONDER_ACTIVE_PRESS_IN: false,
    RESPONDER_ACTIVE_PRESS_OUT: false,
    RESPONDER_ACTIVE_LONG_PRESS_IN: false,
    RESPONDER_ACTIVE_LONG_PRESS_OUT: false,
    ERROR: false
};
var IsActive = _object_spread_props._(_object_spread._({}, baseStatesConditions), {
    RESPONDER_ACTIVE_PRESS_OUT: true,
    RESPONDER_ACTIVE_PRESS_IN: true
});
/**
 * Quick lookup for states that are considered to be "pressing" and are
 * therefore eligible to result in a "selection" if the press stops.
 */ var IsPressingIn = _object_spread_props._(_object_spread._({}, baseStatesConditions), {
    RESPONDER_INACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
});
var IsLongPressingIn = _object_spread_props._(_object_spread._({}, baseStatesConditions), {
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
});
/**
 * Inputs to the state machine.
 */ var Signals = {
    DELAY: 'DELAY',
    RESPONDER_GRANT: 'RESPONDER_GRANT',
    RESPONDER_RELEASE: 'RESPONDER_RELEASE',
    RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',
    ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',
    LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',
    LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'
};
/**
 * Mapping from States x Signals => States
 */ var Transitions = {
    NOT_RESPONDER: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
        RESPONDER_RELEASE: States.ERROR,
        RESPONDER_TERMINATED: States.ERROR,
        ENTER_PRESS_RECT: States.ERROR,
        LEAVE_PRESS_RECT: States.ERROR,
        LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_IN: {
        DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
        LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
        DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
        LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_PRESS_IN: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
        LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
        LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
        LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
        LONG_PRESS_DETECTED: States.ERROR
    },
    error: {
        DELAY: States.NOT_RESPONDER,
        RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.NOT_RESPONDER,
        LEAVE_PRESS_RECT: States.NOT_RESPONDER,
        LONG_PRESS_DETECTED: States.NOT_RESPONDER
    }
};
// ==== Typical Constants for integrating into UI components ====
// var HIT_EXPAND_PX = 20;
// var HIT_VERT_OFFSET_PX = 10;
var HIGHLIGHT_DELAY_MS = 130;
var PRESS_EXPAND_PX = 20;
var LONG_PRESS_THRESHOLD = 500;
var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;
var LONG_PRESS_ALLOWED_MOVEMENT = 10;
// Default amount "active" region protrudes beyond box
/**
 * By convention, methods prefixed with underscores are meant to be @private,
 * and not @protected. Mixers shouldn't access them - not even to provide them
 * as callback handlers.
 *
 *
 * ========== Geometry =========
 * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`
 * is an abstract box that is extended beyond the `HitRect`.
 *
 *  +--------------------------+
 *  |                          | - "Start" events in `HitRect` cause `HitRect`
 *  |  +--------------------+  |   to become the responder.
 *  |  |  +--------------+  |  | - `HitRect` is typically expanded around
 *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.
 *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,
 *  |  |  |              |  |  |   and before letting up, the Visual React
 *  |  |  +--------------+  |  |   will become "active". This makes it eligible
 *  |  |     HitRect        |  |   for being highlighted (so long as the
 *  |  +--------------------+  |   press remains in the `PressRect`).
 *  |        PressRect     o   |
 *  +----------------------|---+
 *           Out Region    |
 *                         +-----+ This gap between the `HitRect` and
 *                                 `PressRect` allows a touch to move far away
 *                                 from the original hit rect, and remain
 *                                 highlighted, and eligible for a "Press".
 *                                 Customize this via
 *                                 `touchableGetPressRectOffset()`.
 *
 *
 *
 * ======= State Machine =======
 *
 * +-------------+ <---+ RESPONDER_RELEASE
 * |NOT_RESPONDER|
 * +-------------+ <---+ RESPONDER_TERMINATED
 *     +
 *     | RESPONDER_GRANT (HitRect)
 *     v
 * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+
 * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|
 * +---------------------------+          +-------------------------+                +------------------------------+
 *     +            ^                         +           ^                                 +           ^
 *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_
 *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT
 *     |            |                         |           |                                 |           |
 *     v            +                         v           +                                 v           +
 * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+
 * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|
 * +----------------------------+         +--------------------------+               +-------------------------------+
 *
 * T + DELAY => LONG_PRESS_DELAY_MS + DELAY
 *
 * Not drawn are the side effects of each transition. The most important side
 * effect is the `touchableHandlePress` abstract method invocation that occurs
 * when a responder is released while in either of the "Press" states.
 *
 * The other important side effects are the highlight abstract method
 * invocations (internal callbacks) to be implemented by the mixer.
 *
 *
 * @lends Touchable.prototype
 */ var TouchableMixin = {
    componentDidMount: function() {
        if (!_Platform.default.isTV) {
            return;
        }
    },
    /**
   * Clear all timeouts on unmount
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ componentWillUnmount: function() {
        this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
        this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
        this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    },
    /**
   * It's prefer that mixins determine state in this way, having the class
   * explicitly mix the state in the one and only `getInitialState` method.
   *
   * @return {object} State object to be placed inside of
   * `this.state.touchable`.
   */ touchableGetInitialState: function() {
        return {
            touchable: {
                touchState: undefined,
                responderID: null
            }
        };
    },
    // ==== Hooks to Gesture Responder system ====
    /**
   * Must return true if embedded in a native platform scroll view.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleResponderTerminationRequest: function() {
        return !this.props.rejectResponderTermination;
    },
    /**
   * Must return true to start the process of `Touchable`.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleStartShouldSetResponder: function() {
        return !this.props.disabled;
    },
    /**
   * Return true to cancel press on long press.
   */ touchableLongPressCancelsPress: function() {
        return true;
    },
    /**
   * Place as callback for a DOM element's `onResponderGrant` event.
   * @param {SyntheticEvent} e Synthetic event from event system.
   *
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleResponderGrant: function(e) {
        var dispatchID = e.currentTarget;
        // Since e is used in a callback invoked on another event loop
        // (as in setTimeout etc), we need to call e.persist() on the
        // event to make sure it doesn't get reused in the event object pool.
        e.persist();
        this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
        this.pressOutDelayTimeout = null;
        this.state.touchable.touchState = States.NOT_RESPONDER;
        this.state.touchable.responderID = dispatchID;
        this._receiveSignal(Signals.RESPONDER_GRANT, e);
        var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
        delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;
        if (delayMS !== 0) {
            this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
        } else {
            this._handleDelay(e);
        }
        var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
        longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
        this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
    },
    /**
   * Place as callback for a DOM element's `onResponderRelease` event.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleResponderRelease: function(e) {
        this.pressInLocation = null;
        this._receiveSignal(Signals.RESPONDER_RELEASE, e);
    },
    /**
   * Place as callback for a DOM element's `onResponderTerminate` event.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleResponderTerminate: function(e) {
        this.pressInLocation = null;
        this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
    },
    /**
   * Place as callback for a DOM element's `onResponderMove` event.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleResponderMove: function(e) {
        // Measurement may not have returned yet.
        if (!this.state.touchable.positionOnActivate) {
            return;
        }
        var positionOnActivate = this.state.touchable.positionOnActivate;
        var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
        var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
            left: PRESS_EXPAND_PX,
            right: PRESS_EXPAND_PX,
            top: PRESS_EXPAND_PX,
            bottom: PRESS_EXPAND_PX
        };
        var pressExpandLeft = pressRectOffset.left;
        var pressExpandTop = pressRectOffset.top;
        var pressExpandRight = pressRectOffset.right;
        var pressExpandBottom = pressRectOffset.bottom;
        var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;
        if (hitSlop) {
            pressExpandLeft += hitSlop.left || 0;
            pressExpandTop += hitSlop.top || 0;
            pressExpandRight += hitSlop.right || 0;
            pressExpandBottom += hitSlop.bottom || 0;
        }
        var touch = extractSingleTouch(e.nativeEvent);
        var pageX = touch && touch.pageX;
        var pageY = touch && touch.pageY;
        if (this.pressInLocation) {
            var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);
            if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
                this._cancelLongPressDelayTimeout();
            }
        }
        var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;
        if (isTouchWithinActive) {
            var prevState = this.state.touchable.touchState;
            this._receiveSignal(Signals.ENTER_PRESS_RECT, e);
            var curState = this.state.touchable.touchState;
            if (curState === States.RESPONDER_INACTIVE_PRESS_IN && prevState !== States.RESPONDER_INACTIVE_PRESS_IN) {
                // fix for t7967420
                this._cancelLongPressDelayTimeout();
            }
        } else {
            this._cancelLongPressDelayTimeout();
            this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
        }
    },
    /**
   * Invoked when the item receives focus. Mixers might override this to
   * visually distinguish the `VisualRect` so that the user knows that it
   * currently has the focus. Most platforms only support a single element being
   * focused at a time, in which case there may have been a previously focused
   * element that was blurred just prior to this. This can be overridden when
   * using `Touchable.Mixin.withoutDefaultFocusAndBlur`.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleFocus: function(e) {
        this.props.onFocus && this.props.onFocus(e);
    },
    /**
   * Invoked when the item loses focus. Mixers might override this to
   * visually distinguish the `VisualRect` so that the user knows that it
   * no longer has focus. Most platforms only support a single element being
   * focused at a time, in which case the focus may have moved to another.
   * This can be overridden when using
   * `Touchable.Mixin.withoutDefaultFocusAndBlur`.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleBlur: function(e) {
        this.props.onBlur && this.props.onBlur(e);
    },
    // ==== Abstract Application Callbacks ====
    /**
   * Invoked when the item should be highlighted. Mixers should implement this
   * to visually distinguish the `VisualRect` so that the user knows that
   * releasing a touch will result in a "selection" (analog to click).
   *
   * @abstract
   * touchableHandleActivePressIn: function,
   */ /**
   * Invoked when the item is "active" (in that it is still eligible to become
   * a "select") but the touch has left the `PressRect`. Usually the mixer will
   * want to unhighlight the `VisualRect`. If the user (while pressing) moves
   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked
   * again and the mixer should probably highlight the `VisualRect` again. This
   * event will not fire on an `touchEnd/mouseUp` event, only move events while
   * the user is depressing the mouse/touch.
   *
   * @abstract
   * touchableHandleActivePressOut: function
   */ /**
   * Invoked when the item is "selected" - meaning the interaction ended by
   * letting up while the item was either in the state
   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.
   *
   * @abstract
   * touchableHandlePress: function
   */ /**
   * Invoked when the item is long pressed - meaning the interaction ended by
   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If
   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will
   * be called as it normally is. If `touchableHandleLongPress` is provided, by
   * default any `touchableHandlePress` callback will not be invoked. To
   * override this default behavior, override `touchableLongPressCancelsPress`
   * to return false. As a result, `touchableHandlePress` will be called when
   * lifting up, even if `touchableHandleLongPress` has also been called.
   *
   * @abstract
   * touchableHandleLongPress: function
   */ /**
   * Returns the number of millis to wait before triggering a highlight.
   *
   * @abstract
   * touchableGetHighlightDelayMS: function
   */ /**
   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive
   * numbers mean the size expands outwards.
   *
   * @abstract
   * touchableGetPressRectOffset: function
   */ // ==== Internal Logic ====
    /**
   * Measures the `HitRect` node on activation. The Bounding rectangle is with
   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`
   * should result in points that are in the same coordinate system as an
   * event's `globalX/globalY` data values.
   *
   * - Consider caching this for the lifetime of the component, or possibly
   *   being able to share this cache between any `ScrollMap` view.
   *
   * @sideeffects
   * @private
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _remeasureMetricsOnActivation: function() {
        var responderID = this.state.touchable.responderID;
        if (responderID == null) {
            return;
        }
        if (typeof responderID === 'number') {
            _UIManager.default.measure(responderID, this._handleQueryLayout);
        } else {
            responderID.measure(this._handleQueryLayout);
        }
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _handleQueryLayout: function(l, t, w, h, globalX, globalY) {
        //don't do anything UIManager failed to measure node
        if (!l && !t && !w && !h && !globalX && !globalY) {
            return;
        }
        this.state.touchable.positionOnActivate && // $FlowFixMe[prop-missing]
        _Position.default.release(this.state.touchable.positionOnActivate);
        this.state.touchable.dimensionsOnActivate && // $FlowFixMe[prop-missing]
        _BoundingDimensions.default.release(this.state.touchable.dimensionsOnActivate);
        // $FlowFixMe[prop-missing]
        this.state.touchable.positionOnActivate = _Position.default.getPooled(globalX, globalY);
        // $FlowFixMe[prop-missing]
        this.state.touchable.dimensionsOnActivate = _BoundingDimensions.default.getPooled(w, h);
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _handleDelay: function(e) {
        this.touchableDelayTimeout = null;
        this._receiveSignal(Signals.DELAY, e);
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _handleLongDelay: function(e) {
        this.longPressDelayTimeout = null;
        var curState = this.state.touchable.touchState;
        if (curState === States.RESPONDER_ACTIVE_PRESS_IN || curState === States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
            this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
        }
    },
    /**
   * Receives a state machine signal, performs side effects of the transition
   * and stores the new state. Validates the transition as well.
   *
   * @param {Signals} signal State machine signal.
   * @throws Error if invalid state transition or unrecognized signal.
   * @sideeffects
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _receiveSignal: function(signal, e) {
        var responderID = this.state.touchable.responderID;
        var curState = this.state.touchable.touchState;
        var nextState = Transitions[curState] && Transitions[curState][signal];
        if (!responderID && signal === Signals.RESPONDER_RELEASE) {
            return;
        }
        if (!nextState) {
            throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : 'host component' + '`');
        }
        if (nextState === States.ERROR) {
            throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : '<<host component>>' + '`');
        }
        if (curState !== nextState) {
            this._performSideEffectsForTransition(curState, nextState, signal, e);
            this.state.touchable.touchState = nextState;
        }
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _cancelLongPressDelayTimeout: function() {
        this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
        this.longPressDelayTimeout = null;
    },
    _isHighlight: function(state) {
        return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _savePressInLocation: function(e) {
        var touch = extractSingleTouch(e.nativeEvent);
        var pageX = touch && touch.pageX;
        var pageY = touch && touch.pageY;
        var locationX = touch && touch.locationX;
        var locationY = touch && touch.locationY;
        this.pressInLocation = {
            pageX,
            pageY,
            locationX,
            locationY
        };
    },
    _getDistanceBetweenPoints: function(aX, aY, bX, bY) {
        var deltaX = aX - bX;
        var deltaY = aY - bY;
        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    },
    /**
   * Will perform a transition between touchable states, and identify any
   * highlighting or unhighlighting that must be performed for this particular
   * transition.
   *
   * @param {States} curState Current Touchable state.
   * @param {States} nextState Next Touchable state.
   * @param {Signal} signal Signal that triggered the transition.
   * @param {Event} e Native event.
   * @sideeffects
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _performSideEffectsForTransition: function(curState, nextState, signal, e) {
        var curIsHighlight = this._isHighlight(curState);
        var newIsHighlight = this._isHighlight(nextState);
        var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;
        if (isFinalSignal) {
            this._cancelLongPressDelayTimeout();
        }
        var isInitialTransition = curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;
        var isActiveTransition = !IsActive[curState] && IsActive[nextState];
        if (isInitialTransition || isActiveTransition) {
            this._remeasureMetricsOnActivation();
        }
        if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
            this.touchableHandleLongPress && this.touchableHandleLongPress(e);
        }
        if (newIsHighlight && !curIsHighlight) {
            this._startHighlight(e);
        } else if (!newIsHighlight && curIsHighlight) {
            this._endHighlight(e);
        }
        if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
            var hasLongPressHandler = !!this.props.onLongPress;
            var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && // We *are* long pressing.. // But either has no long handler
            (!hasLongPressHandler || !this.touchableLongPressCancelsPress()); // or we're told to ignore it.
            var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;
            if (shouldInvokePress && this.touchableHandlePress) {
                if (!newIsHighlight && !curIsHighlight) {
                    // we never highlighted because of delay, but we should highlight now
                    this._startHighlight(e);
                    this._endHighlight(e);
                }
                if (_Platform.default.OS === 'android' && !this.props.touchSoundDisabled) {
                    _SoundManager.default.playTouchSound();
                }
                this.touchableHandlePress(e);
            }
        }
        this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
        this.touchableDelayTimeout = null;
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _startHighlight: function(e) {
        this._savePressInLocation(e);
        this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _endHighlight: function(e) {
        if (this.touchableHandleActivePressOut) {
            if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
                this.pressOutDelayTimeout = setTimeout(()=>{
                    this.touchableHandleActivePressOut(e);
                }, this.touchableGetPressOutDelayMS());
            } else {
                this.touchableHandleActivePressOut(e);
            }
        }
    },
    withoutDefaultFocusAndBlur: {}
};
/**
 * Provide an optional version of the mixin where `touchableHandleFocus` and
 * `touchableHandleBlur` can be overridden. This allows appropriate defaults to
 * be set on TV platforms, without breaking existing implementations of
 * `Touchable`.
 */ var touchableHandleFocus = TouchableMixin.touchableHandleFocus, touchableHandleBlur = TouchableMixin.touchableHandleBlur, TouchableMixinWithoutDefaultFocusAndBlur = _object_without_properties._(TouchableMixin, [
    "touchableHandleFocus",
    "touchableHandleBlur"
]);
TouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;
var Touchable = {
    Mixin: TouchableMixin,
    /**
   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).
   */ renderDebugView: (ref)=>{
        var color = ref.color, hitSlop = ref.hitSlop;
        if (true) {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_PressabilityDebug.PressabilityDebugView, {
                color: color,
                hitSlop: hitSlop
            });
        }
        return null;
    }
};
var _default = Touchable;


}),
"./node_modules/react-native/Libraries/Components/Touchable/TouchableNativeFeedback.js": 
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Touchable/TouchableNativeFeedback.js ***!
  \*********************************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _Pressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Pressability/Pressability */ "./node_modules/react-native/Libraries/Pressability/Pressability.js"));
var _PressabilityDebug = __webpack_require__(/*! ../../Pressability/PressabilityDebug */ "./node_modules/react-native/Libraries/Pressability/PressabilityDebug.js");
var _RendererProxy = __webpack_require__(/*! ../../ReactNative/RendererProxy */ "./node_modules/react-native/Libraries/ReactNative/RendererProxy.js");
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _ViewNativeComponent = __webpack_require__(/*! ../View/ViewNativeComponent */ "./node_modules/react-native/Libraries/Components/View/ViewNativeComponent.js");
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var TouchableNativeFeedback = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(TouchableNativeFeedback, _React_Component);
    function TouchableNativeFeedback() {
        _class_call_check._(this, TouchableNativeFeedback);
        var _this;
        _this = _call_super._(this, TouchableNativeFeedback, arguments), _this.state = {
            pressability: new _Pressability.default(_this._createPressabilityConfig())
        };
        return _this;
    }
    _create_class._(TouchableNativeFeedback, [
        {
            key: "_createPressabilityConfig",
            value: function _createPressabilityConfig() {
                var _this_props_accessibilityState;
                var accessibilityStateDisabled = this.props['aria-disabled'] ?? ((_this_props_accessibilityState = this.props.accessibilityState) === null || _this_props_accessibilityState === void 0 ? void 0 : _this_props_accessibilityState.disabled);
                return {
                    cancelable: !this.props.rejectResponderTermination,
                    disabled: this.props.disabled != null ? this.props.disabled : accessibilityStateDisabled,
                    hitSlop: this.props.hitSlop,
                    delayLongPress: this.props.delayLongPress,
                    delayPressIn: this.props.delayPressIn,
                    delayPressOut: this.props.delayPressOut,
                    minPressDuration: 0,
                    pressRectOffset: this.props.pressRetentionOffset,
                    android_disableSound: this.props.touchSoundDisabled,
                    onLongPress: this.props.onLongPress,
                    onPress: this.props.onPress,
                    onPressIn: (event)=>{
                        if (_Platform.default.OS === 'android') {
                            this._dispatchHotspotUpdate(event);
                            this._dispatchPressedStateChange(true);
                        }
                        if (this.props.onPressIn != null) {
                            this.props.onPressIn(event);
                        }
                    },
                    onPressMove: (event)=>{
                        if (_Platform.default.OS === 'android') {
                            this._dispatchHotspotUpdate(event);
                        }
                    },
                    onPressOut: (event)=>{
                        if (_Platform.default.OS === 'android') {
                            this._dispatchPressedStateChange(false);
                        }
                        if (this.props.onPressOut != null) {
                            this.props.onPressOut(event);
                        }
                    }
                };
            }
        },
        {
            key: "_dispatchPressedStateChange",
            value: function _dispatchPressedStateChange(pressed) {
                if (_Platform.default.OS === 'android') {
                    var hostComponentRef = (0, _RendererProxy.findHostInstance_DEPRECATED)(this);
                    if (hostComponentRef == null) {
                        console.warn('Touchable: Unable to find HostComponent instance. ' + 'Has your Touchable component been unmounted?');
                    } else {
                        _ViewNativeComponent.Commands.setPressed(hostComponentRef, pressed);
                    }
                }
            }
        },
        {
            key: "_dispatchHotspotUpdate",
            value: function _dispatchHotspotUpdate(event) {
                if (_Platform.default.OS === 'android') {
                    var _event_nativeEvent = event.nativeEvent, locationX = _event_nativeEvent.locationX, locationY = _event_nativeEvent.locationY;
                    var hostComponentRef = (0, _RendererProxy.findHostInstance_DEPRECATED)(this);
                    if (hostComponentRef == null) {
                        console.warn('Touchable: Unable to find HostComponent instance. ' + 'Has your Touchable component been unmounted?');
                    } else {
                        _ViewNativeComponent.Commands.hotspotUpdate(hostComponentRef, locationX ?? 0, locationY ?? 0);
                    }
                }
            }
        },
        {
            key: "render",
            value: function render() {
                var /*#__PURE__*/ _React;
                var _this_props_accessibilityState, _this_props_accessibilityState1, _this_props_accessibilityState2, _this_props_accessibilityState3, _this_props_accessibilityState4, _this_props_accessibilityValue, _this_props_accessibilityValue1, _this_props_accessibilityValue2, _this_props_accessibilityValue3;
                var element = _react.Children.only(this.props.children);
                var children = [
                    element.props.children
                ];
                if (true) {
                    if (element.type === _View.default) {
                        children.push(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PressabilityDebug.PressabilityDebugView, {
                            color: "brown",
                            hitSlop: this.props.hitSlop
                        }));
                    }
                }
                // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before
                // adopting `Pressability`, so preserve that behavior.
                var _this_state_pressability_getEventHandlers = this.state.pressability.getEventHandlers(), onBlur = _this_state_pressability_getEventHandlers.onBlur, onFocus = _this_state_pressability_getEventHandlers.onFocus, eventHandlersWithoutBlurAndFocus = _object_without_properties._(_this_state_pressability_getEventHandlers, [
                    "onBlur",
                    "onFocus"
                ]);
                var _accessibilityState = {
                    busy: this.props['aria-busy'] ?? ((_this_props_accessibilityState = this.props.accessibilityState) === null || _this_props_accessibilityState === void 0 ? void 0 : _this_props_accessibilityState.busy),
                    checked: this.props['aria-checked'] ?? ((_this_props_accessibilityState1 = this.props.accessibilityState) === null || _this_props_accessibilityState1 === void 0 ? void 0 : _this_props_accessibilityState1.checked),
                    disabled: this.props['aria-disabled'] ?? ((_this_props_accessibilityState2 = this.props.accessibilityState) === null || _this_props_accessibilityState2 === void 0 ? void 0 : _this_props_accessibilityState2.disabled),
                    expanded: this.props['aria-expanded'] ?? ((_this_props_accessibilityState3 = this.props.accessibilityState) === null || _this_props_accessibilityState3 === void 0 ? void 0 : _this_props_accessibilityState3.expanded),
                    selected: this.props['aria-selected'] ?? ((_this_props_accessibilityState4 = this.props.accessibilityState) === null || _this_props_accessibilityState4 === void 0 ? void 0 : _this_props_accessibilityState4.selected)
                };
                _accessibilityState = this.props.disabled != null ? _object_spread_props._(_object_spread._({}, _accessibilityState), {
                    disabled: this.props.disabled
                }) : _accessibilityState;
                var accessibilityValue = {
                    max: this.props['aria-valuemax'] ?? ((_this_props_accessibilityValue = this.props.accessibilityValue) === null || _this_props_accessibilityValue === void 0 ? void 0 : _this_props_accessibilityValue.max),
                    min: this.props['aria-valuemin'] ?? ((_this_props_accessibilityValue1 = this.props.accessibilityValue) === null || _this_props_accessibilityValue1 === void 0 ? void 0 : _this_props_accessibilityValue1.min),
                    now: this.props['aria-valuenow'] ?? ((_this_props_accessibilityValue2 = this.props.accessibilityValue) === null || _this_props_accessibilityValue2 === void 0 ? void 0 : _this_props_accessibilityValue2.now),
                    text: this.props['aria-valuetext'] ?? ((_this_props_accessibilityValue3 = this.props.accessibilityValue) === null || _this_props_accessibilityValue3 === void 0 ? void 0 : _this_props_accessibilityValue3.text)
                };
                var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : this.props['aria-live'] ?? this.props.accessibilityLiveRegion;
                var accessibilityLabel = this.props['aria-label'] ?? this.props.accessibilityLabel;
                return (_React = _react).cloneElement.apply(_React, [
                    element,
                    _object_spread_props._(_object_spread._({}, eventHandlersWithoutBlurAndFocus, getBackgroundProp(this.props.background === undefined ? TouchableNativeFeedback.SelectableBackground() : this.props.background, this.props.useForeground === true)), {
                        accessible: this.props.accessible !== false,
                        accessibilityHint: this.props.accessibilityHint,
                        accessibilityLanguage: this.props.accessibilityLanguage,
                        accessibilityLabel: accessibilityLabel,
                        accessibilityRole: this.props.accessibilityRole,
                        accessibilityState: _accessibilityState,
                        accessibilityActions: this.props.accessibilityActions,
                        onAccessibilityAction: this.props.onAccessibilityAction,
                        accessibilityValue: accessibilityValue,
                        importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
                        accessibilityViewIsModal: this.props['aria-modal'] ?? this.props.accessibilityViewIsModal,
                        accessibilityLiveRegion: accessibilityLiveRegion,
                        accessibilityElementsHidden: this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden,
                        hasTVPreferredFocus: this.props.hasTVPreferredFocus,
                        hitSlop: this.props.hitSlop,
                        focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,
                        nativeID: this.props.id ?? this.props.nativeID,
                        nextFocusDown: this.props.nextFocusDown,
                        nextFocusForward: this.props.nextFocusForward,
                        nextFocusLeft: this.props.nextFocusLeft,
                        nextFocusRight: this.props.nextFocusRight,
                        nextFocusUp: this.props.nextFocusUp,
                        onLayout: this.props.onLayout,
                        testID: this.props.testID
                    })
                ].concat(_to_consumable_array._(children)));
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps, prevState) {
                this.state.pressability.configure(this._createPressabilityConfig());
            }
        },
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                this.state.pressability.configure(this._createPressabilityConfig());
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this.state.pressability.reset();
            }
        }
    ]);
    return TouchableNativeFeedback;
}(_react.Component);
/**
   * Creates a value for the `background` prop that uses the Android theme's
   * default background for selectable elements.
   */ TouchableNativeFeedback.SelectableBackground = (rippleRadius)=>({
        type: 'ThemeAttrAndroid',
        attribute: 'selectableItemBackground',
        rippleRadius
    });
/**
   * Creates a value for the `background` prop that uses the Android theme's
   * default background for borderless selectable elements. Requires API 21+.
   */ TouchableNativeFeedback.SelectableBackgroundBorderless = (rippleRadius)=>({
        type: 'ThemeAttrAndroid',
        attribute: 'selectableItemBackgroundBorderless',
        rippleRadius
    });
/**
   * Creates a value for the `background` prop that uses the Android ripple with
   * the supplied color. If `borderless` is true, the ripple will render outside
   * of the view bounds. Requires API 21+.
   */ TouchableNativeFeedback.Ripple = (color, borderless, rippleRadius)=>{
    var processedColor = (0, _processColor.default)(color);
    (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
    return {
        type: 'RippleAndroid',
        // $FlowFixMe[incompatible-type]
        color: processedColor,
        borderless,
        rippleRadius
    };
};
/**
   * Whether `useForeground` is supported.
   */ TouchableNativeFeedback.canUseNativeForeground = ()=>_Platform.default.OS === 'android';
var getBackgroundProp = _Platform.default.OS === 'android' ? /* $FlowFixMe[missing-local-annot] The type annotation(s) required by
       * Flow's LTI update could not be added via codemod */ (background, useForeground)=>useForeground && TouchableNativeFeedback.canUseNativeForeground() ? {
        nativeForegroundAndroid: background
    } : {
        nativeBackgroundAndroid: background
    } : /* $FlowFixMe[missing-local-annot] The type annotation(s) required by
       * Flow's LTI update could not be added via codemod */ (background, useForeground)=>null;
TouchableNativeFeedback.displayName = 'TouchableNativeFeedback';
module.exports = TouchableNativeFeedback;


}),
"./node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js ***!
  \**************************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _Animated = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Animated/Animated */ "./node_modules/react-native/Libraries/Animated/Animated.js"));
var _Easing = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Animated/Easing */ "./node_modules/react-native/Libraries/Animated/Easing.js"));
var _Pressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Pressability/Pressability */ "./node_modules/react-native/Libraries/Pressability/Pressability.js"));
var _PressabilityDebug = __webpack_require__(/*! ../../Pressability/PressabilityDebug */ "./node_modules/react-native/Libraries/Pressability/PressabilityDebug.js");
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/flattenStyle */ "./node_modules/react-native/Libraries/StyleSheet/flattenStyle.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
/**
 * A wrapper for making views respond properly to touches.
 * On press down, the opacity of the wrapped view is decreased, dimming it.
 *
 * Opacity is controlled by wrapping the children in an Animated.View, which is
 * added to the view hierarchy.  Be aware that this can affect layout.
 *
 * Example:
 *
 * ```
 * renderButton: function() {
 *   return (
 *     <TouchableOpacity onPress={this._onPressButton}>
 *       <Image
 *         style={styles.button}
 *         source={require('./myButton.png')}
 *       />
 *     </TouchableOpacity>
 *   );
 * },
 * ```
 * ### Example
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react'
 * import {
 *   AppRegistry,
 *   StyleSheet,
 *   TouchableOpacity,
 *   Text,
 *   View,
 * } from 'react-native'
 *
 * class App extends Component {
 *   state = { count: 0 }
 *
 *   onPress = () => {
 *     this.setState(state => ({
 *       count: state.count + 1
 *     }));
 *   };
 *
 *  render() {
 *    return (
 *      <View style={styles.container}>
 *        <TouchableOpacity
 *          style={styles.button}
 *          onPress={this.onPress}>
 *          <Text> Touch Here </Text>
 *        </TouchableOpacity>
 *        <View style={[styles.countContainer]}>
 *          <Text style={[styles.countText]}>
 *             { this.state.count !== 0 ? this.state.count: null}
 *           </Text>
 *         </View>
 *       </View>
 *     )
 *   }
 * }
 *
 * const styles = StyleSheet.create({
 *   container: {
 *     flex: 1,
 *     justifyContent: 'center',
 *     paddingHorizontal: 10
 *   },
 *   button: {
 *     alignItems: 'center',
 *     backgroundColor: '#DDDDDD',
 *     padding: 10
 *   },
 *   countContainer: {
 *     alignItems: 'center',
 *     padding: 10
 *   },
 *   countText: {
 *     color: '#FF00FF'
 *   }
 * })
 *
 * AppRegistry.registerComponent('App', () => App)
 * ```
 *
 */ var TouchableOpacity = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(TouchableOpacity, _React_Component);
    function TouchableOpacity() {
        _class_call_check._(this, TouchableOpacity);
        var _this;
        _this = _call_super._(this, TouchableOpacity, arguments), _this.state = {
            anim: new _Animated.default.Value(_this._getChildStyleOpacityWithDefault()),
            pressability: new _Pressability.default(_this._createPressabilityConfig())
        };
        return _this;
    }
    _create_class._(TouchableOpacity, [
        {
            key: "_createPressabilityConfig",
            value: function _createPressabilityConfig() {
                var _this_props_accessibilityState;
                return {
                    cancelable: !this.props.rejectResponderTermination,
                    disabled: this.props.disabled ?? this.props['aria-disabled'] ?? ((_this_props_accessibilityState = this.props.accessibilityState) === null || _this_props_accessibilityState === void 0 ? void 0 : _this_props_accessibilityState.disabled),
                    hitSlop: this.props.hitSlop,
                    delayLongPress: this.props.delayLongPress,
                    delayPressIn: this.props.delayPressIn,
                    delayPressOut: this.props.delayPressOut,
                    minPressDuration: 0,
                    pressRectOffset: this.props.pressRetentionOffset,
                    onBlur: (event)=>{
                        if (_Platform.default.isTV) {
                            this._opacityInactive(250);
                        }
                        if (this.props.onBlur != null) {
                            this.props.onBlur(event);
                        }
                    },
                    onFocus: (event)=>{
                        if (_Platform.default.isTV) {
                            this._opacityActive(150);
                        }
                        if (this.props.onFocus != null) {
                            this.props.onFocus(event);
                        }
                    },
                    onLongPress: this.props.onLongPress,
                    onPress: this.props.onPress,
                    onPressIn: (event)=>{
                        this._opacityActive(event.dispatchConfig.registrationName === 'onResponderGrant' ? 0 : 150);
                        if (this.props.onPressIn != null) {
                            this.props.onPressIn(event);
                        }
                    },
                    onPressOut: (event)=>{
                        this._opacityInactive(250);
                        if (this.props.onPressOut != null) {
                            this.props.onPressOut(event);
                        }
                    }
                };
            }
        },
        {
            /**
   * Animate the touchable to a new opacity.
   */ key: "_setOpacityTo",
            value: function _setOpacityTo(toValue, duration) {
                _Animated.default.timing(this.state.anim, {
                    toValue,
                    duration,
                    easing: _Easing.default.inOut(_Easing.default.quad),
                    useNativeDriver: true
                }).start();
            }
        },
        {
            key: "_opacityActive",
            value: function _opacityActive(duration) {
                this._setOpacityTo(this.props.activeOpacity ?? 0.2, duration);
            }
        },
        {
            key: "_opacityInactive",
            value: function _opacityInactive(duration) {
                this._setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
            }
        },
        {
            key: "_getChildStyleOpacityWithDefault",
            value: function _getChildStyleOpacityWithDefault() {
                var _flattenStyle1;
                // $FlowFixMe[underconstrained-implicit-instantiation]
                // $FlowFixMe[prop-missing]
                var opacity = (_flattenStyle1 = (0, _flattenStyle.default)(this.props.style)) === null || _flattenStyle1 === void 0 ? void 0 : _flattenStyle1.opacity;
                return typeof opacity === 'number' ? opacity : 1;
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props_accessibilityState, _this_props_accessibilityState1, _this_props_accessibilityState2, _this_props_accessibilityState3, _this_props_accessibilityState4, _this_props_accessibilityValue, _this_props_accessibilityValue1, _this_props_accessibilityValue2, _this_props_accessibilityValue3;
                // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before
                // adopting `Pressability`, so preserve that behavior.
                var _this_state_pressability_getEventHandlers = this.state.pressability.getEventHandlers(), onBlur = _this_state_pressability_getEventHandlers.onBlur, onFocus = _this_state_pressability_getEventHandlers.onFocus, eventHandlersWithoutBlurAndFocus = _object_without_properties._(_this_state_pressability_getEventHandlers, [
                    "onBlur",
                    "onFocus"
                ]);
                var _accessibilityState = {
                    busy: this.props['aria-busy'] ?? ((_this_props_accessibilityState = this.props.accessibilityState) === null || _this_props_accessibilityState === void 0 ? void 0 : _this_props_accessibilityState.busy),
                    checked: this.props['aria-checked'] ?? ((_this_props_accessibilityState1 = this.props.accessibilityState) === null || _this_props_accessibilityState1 === void 0 ? void 0 : _this_props_accessibilityState1.checked),
                    disabled: this.props['aria-disabled'] ?? ((_this_props_accessibilityState2 = this.props.accessibilityState) === null || _this_props_accessibilityState2 === void 0 ? void 0 : _this_props_accessibilityState2.disabled),
                    expanded: this.props['aria-expanded'] ?? ((_this_props_accessibilityState3 = this.props.accessibilityState) === null || _this_props_accessibilityState3 === void 0 ? void 0 : _this_props_accessibilityState3.expanded),
                    selected: this.props['aria-selected'] ?? ((_this_props_accessibilityState4 = this.props.accessibilityState) === null || _this_props_accessibilityState4 === void 0 ? void 0 : _this_props_accessibilityState4.selected)
                };
                _accessibilityState = this.props.disabled != null ? _object_spread_props._(_object_spread._({}, _accessibilityState), {
                    disabled: this.props.disabled
                }) : _accessibilityState;
                var accessibilityValue = {
                    max: this.props['aria-valuemax'] ?? ((_this_props_accessibilityValue = this.props.accessibilityValue) === null || _this_props_accessibilityValue === void 0 ? void 0 : _this_props_accessibilityValue.max),
                    min: this.props['aria-valuemin'] ?? ((_this_props_accessibilityValue1 = this.props.accessibilityValue) === null || _this_props_accessibilityValue1 === void 0 ? void 0 : _this_props_accessibilityValue1.min),
                    now: this.props['aria-valuenow'] ?? ((_this_props_accessibilityValue2 = this.props.accessibilityValue) === null || _this_props_accessibilityValue2 === void 0 ? void 0 : _this_props_accessibilityValue2.now),
                    text: this.props['aria-valuetext'] ?? ((_this_props_accessibilityValue3 = this.props.accessibilityValue) === null || _this_props_accessibilityValue3 === void 0 ? void 0 : _this_props_accessibilityValue3.text)
                };
                var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : this.props['aria-live'] ?? this.props.accessibilityLiveRegion;
                var accessibilityLabel = this.props['aria-label'] ?? this.props.accessibilityLabel;
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Animated.default.View, _object_spread_props._(_object_spread._({
                    accessible: this.props.accessible !== false,
                    accessibilityLabel: accessibilityLabel,
                    accessibilityHint: this.props.accessibilityHint,
                    accessibilityLanguage: this.props.accessibilityLanguage,
                    accessibilityRole: this.props.accessibilityRole,
                    accessibilityState: _accessibilityState,
                    accessibilityActions: this.props.accessibilityActions,
                    onAccessibilityAction: this.props.onAccessibilityAction,
                    accessibilityValue: accessibilityValue,
                    importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
                    accessibilityViewIsModal: this.props['aria-modal'] ?? this.props.accessibilityViewIsModal,
                    accessibilityLiveRegion: accessibilityLiveRegion,
                    accessibilityElementsHidden: this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden,
                    style: [
                        this.props.style,
                        {
                            opacity: this.state.anim
                        }
                    ],
                    nativeID: this.props.id ?? this.props.nativeID,
                    testID: this.props.testID,
                    onLayout: this.props.onLayout,
                    nextFocusDown: this.props.nextFocusDown,
                    nextFocusForward: this.props.nextFocusForward,
                    nextFocusLeft: this.props.nextFocusLeft,
                    nextFocusRight: this.props.nextFocusRight,
                    nextFocusUp: this.props.nextFocusUp,
                    hasTVPreferredFocus: this.props.hasTVPreferredFocus,
                    hitSlop: this.props.hitSlop,
                    focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,
                    // $FlowFixMe[prop-missing]
                    ref: this.props.hostRef
                }, eventHandlersWithoutBlurAndFocus), {
                    children: [
                        this.props.children,
                         true ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_PressabilityDebug.PressabilityDebugView, {
                            color: "cyan",
                            hitSlop: this.props.hitSlop
                        }) : 0
                    ]
                }));
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps, prevState) {
                var // $FlowFixMe[underconstrained-implicit-instantiation]
                // $FlowFixMe[prop-missing]
                _flattenStyle1, // $FlowFixMe[underconstrained-implicit-instantiation]
                // $FlowFixMe[prop-missing]
                _flattenStyle2;
                this.state.pressability.configure(this._createPressabilityConfig());
                if (this.props.disabled !== prevProps.disabled || ((_flattenStyle1 = (0, _flattenStyle.default)(prevProps.style)) === null || _flattenStyle1 === void 0 ? void 0 : _flattenStyle1.opacity) !== ((_flattenStyle2 = (0, _flattenStyle.default)(this.props.style)) === null || _flattenStyle2 === void 0 ? void 0 : _flattenStyle2.opacity)) {
                    this._opacityInactive(250);
                }
            }
        },
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                this.state.pressability.configure(this._createPressabilityConfig());
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this.state.pressability.reset();
                this.state.anim.resetAnimation();
            }
        }
    ]);
    return TouchableOpacity;
}(_react.Component);
var Touchable = /*#__PURE__*/ _react.forwardRef((props, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(TouchableOpacity, _object_spread_props._(_object_spread._({}, props), {
        hostRef: ref
    })));
Touchable.displayName = 'TouchableOpacity';
module.exports = Touchable;


}),
"./node_modules/react-native/Libraries/Core/Devtools/openFileInEditor.js": 
/*!*******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Core/Devtools/openFileInEditor.js ***!
  \*******************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
var getDevServer = __webpack_require__(/*! ./getDevServer */ "./node_modules/react-native/Libraries/Core/Devtools/getDevServer.js");
function openFileInEditor(file, lineNumber) {
    // $FlowFixMe[unused-promise]
    fetch(getDevServer().url + 'open-stack-frame', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            file,
            lineNumber
        })
    });
}
module.exports = openFileInEditor;


}),
"./node_modules/react-native/Libraries/Core/registerCallableModule.js": 
/*!****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Core/registerCallableModule.js ***!
  \****************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var registerCallableModule = function() {
    if (__webpack_require__.g.RN$Bridgeless === true) {
        return (name, moduleOrFactory)=>{
            if (typeof moduleOrFactory === 'function') {
                __webpack_require__.g.RN$registerCallableModule(name, moduleOrFactory);
                return;
            }
            __webpack_require__.g.RN$registerCallableModule(name, ()=>moduleOrFactory);
        };
    }
    var BatchedBridge = __webpack_require__(/*! ../BatchedBridge/BatchedBridge */ "./node_modules/react-native/Libraries/BatchedBridge/BatchedBridge.js");
    return (name, moduleOrFactory)=>{
        if (typeof moduleOrFactory === 'function') {
            BatchedBridge.registerLazyCallableModule(name, moduleOrFactory);
            return;
        }
        BatchedBridge.registerCallableModule(name, moduleOrFactory);
    };
}();
var _default = registerCallableModule;


}),
"./node_modules/react-native/Libraries/EventEmitter/RCTNativeAppEventEmitter.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/EventEmitter/RCTNativeAppEventEmitter.js ***!
  \**************************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./RCTDeviceEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js"));
/**
 * Deprecated - subclass NativeEventEmitter to create granular event modules instead of
 * adding all event listeners directly to RCTNativeAppEventEmitter.
 */ var RCTNativeAppEventEmitter = _RCTDeviceEventEmitter.default;
module.exports = RCTNativeAppEventEmitter;


}),
"./node_modules/react-native/Libraries/Image/ImageBackground.js": 
/*!**********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Image/ImageBackground.js ***!
  \**********************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../StyleSheet/flattenStyle */ "./node_modules/react-native/Libraries/StyleSheet/flattenStyle.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Image = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./Image */ "./node_modules/react-native/Libraries/Image/Image.android.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
/**
 * Very simple drop-in replacement for <Image> which supports nesting views.
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react';
 * import { AppRegistry, View, ImageBackground, Text } from 'react-native';
 *
 * class DisplayAnImageBackground extends Component {
 *   render() {
 *     return (
 *       <ImageBackground
 *         style={{width: 50, height: 50}}
 *         source={{uri: 'https://reactnative.dev/img/opengraph.png'}}
 *       >
 *         <Text>React</Text>
 *       </ImageBackground>
 *     );
 *   }
 * }
 *
 * // App registration and rendering
 * AppRegistry.registerComponent('DisplayAnImageBackground', () => DisplayAnImageBackground);
 * ```
 */ var ImageBackground = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(ImageBackground, _React_Component);
    function ImageBackground() {
        _class_call_check._(this, ImageBackground);
        var _this;
        _this = _call_super._(this, ImageBackground, arguments), _this._viewRef = null, _this._captureRef = (ref)=>{
            _this._viewRef = ref;
        };
        return _this;
    }
    _create_class._(ImageBackground, [
        {
            key: "setNativeProps",
            value: function setNativeProps(props) {
                // Work-around flow
                var viewRef = this._viewRef;
                if (viewRef) {
                    viewRef.setNativeProps(props);
                }
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, children = _this_props.children, style = _this_props.style, imageStyle = _this_props.imageStyle, imageRef = _this_props.imageRef, importantForAccessibility = _this_props.importantForAccessibility, props = _object_without_properties._(_this_props, [
                    "children",
                    "style",
                    "imageStyle",
                    "imageRef",
                    "importantForAccessibility"
                ]);
                // $FlowFixMe[underconstrained-implicit-instantiation]
                var flattenedStyle = (0, _flattenStyle.default)(style);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, {
                    accessibilityIgnoresInvertColors: true,
                    importantForAccessibility: importantForAccessibility,
                    style: style,
                    ref: this._captureRef,
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_Image.default, _object_spread_props._(_object_spread._({}, props), {
                            importantForAccessibility: importantForAccessibility,
                            style: [
                                _StyleSheet.default.absoluteFill,
                                {
                                    // Temporary Workaround:
                                    // Current (imperfect yet) implementation of <Image> overwrites width and height styles
                                    // (which is not quite correct), and these styles conflict with explicitly set styles
                                    // of <ImageBackground> and with our internal layout model here.
                                    // So, we have to proxy/reapply these styles explicitly for actual <Image> component.
                                    // This workaround should be removed after implementing proper support of
                                    // intrinsic content size of the <Image>.
                                    // $FlowFixMe[prop-missing]
                                    width: flattenedStyle === null || flattenedStyle === void 0 ? void 0 : flattenedStyle.width,
                                    // $FlowFixMe[prop-missing]
                                    height: flattenedStyle === null || flattenedStyle === void 0 ? void 0 : flattenedStyle.height
                                },
                                imageStyle
                            ],
                            ref: imageRef
                        })),
                        children
                    ]
                });
            }
        }
    ]);
    return ImageBackground;
}(_react.Component);
module.exports = ImageBackground;


}),
"./node_modules/react-native/Libraries/Interaction/PanResponder.js": 
/*!*************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Interaction/PanResponder.js ***!
  \*************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var InteractionManager = __webpack_require__(/*! ./InteractionManager */ "./node_modules/react-native/Libraries/Interaction/InteractionManager.js");
var TouchHistoryMath = __webpack_require__(/*! ./TouchHistoryMath */ "./node_modules/react-native/Libraries/Interaction/TouchHistoryMath.js");
var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
var currentCentroidX = TouchHistoryMath.currentCentroidX;
var currentCentroidY = TouchHistoryMath.currentCentroidY;
/**
 * `PanResponder` reconciles several touches into a single gesture. It makes
 * single-touch gestures resilient to extra touches, and can be used to
 * recognize simple multi-touch gestures.
 *
 * By default, `PanResponder` holds an `InteractionManager` handle to block
 * long-running JS events from interrupting active gestures.
 *
 * It provides a predictable wrapper of the responder handlers provided by the
 * [gesture responder system](docs/gesture-responder-system.html).
 * For each handler, it provides a new `gestureState` object alongside the
 * native event object:
 *
 * ```
 * onPanResponderMove: (event, gestureState) => {}
 * ```
 *
 * A native event is a synthetic touch event with the following form:
 *
 *  - `nativeEvent`
 *      + `changedTouches` - Array of all touch events that have changed since the last event
 *      + `identifier` - The ID of the touch
 *      + `locationX` - The X position of the touch, relative to the element
 *      + `locationY` - The Y position of the touch, relative to the element
 *      + `pageX` - The X position of the touch, relative to the root element
 *      + `pageY` - The Y position of the touch, relative to the root element
 *      + `target` - The node id of the element receiving the touch event
 *      + `timestamp` - A time identifier for the touch, useful for velocity calculation
 *      + `touches` - Array of all current touches on the screen
 *
 * A `gestureState` object has the following:
 *
 *  - `stateID` - ID of the gestureState- persisted as long as there at least
 *     one touch on screen
 *  - `moveX` - the latest screen coordinates of the recently-moved touch
 *  - `moveY` - the latest screen coordinates of the recently-moved touch
 *  - `x0` - the screen coordinates of the responder grant
 *  - `y0` - the screen coordinates of the responder grant
 *  - `dx` - accumulated distance of the gesture since the touch started
 *  - `dy` - accumulated distance of the gesture since the touch started
 *  - `vx` - current velocity of the gesture
 *  - `vy` - current velocity of the gesture
 *  - `numberActiveTouches` - Number of touches currently on screen
 *
 * ### Basic Usage
 *
 * ```
 *   componentWillMount: function() {
 *     this._panResponder = PanResponder.create({
 *       // Ask to be the responder:
 *       onStartShouldSetPanResponder: (evt, gestureState) => true,
 *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,
 *       onMoveShouldSetPanResponder: (evt, gestureState) => true,
 *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,
 *
 *       onPanResponderGrant: (evt, gestureState) => {
 *         // The gesture has started. Show visual feedback so the user knows
 *         // what is happening!
 *
 *         // gestureState.d{x,y} will be set to zero now
 *       },
 *       onPanResponderMove: (evt, gestureState) => {
 *         // The most recent move distance is gestureState.move{X,Y}
 *
 *         // The accumulated gesture distance since becoming responder is
 *         // gestureState.d{x,y}
 *       },
 *       onPanResponderTerminationRequest: (evt, gestureState) => true,
 *       onPanResponderRelease: (evt, gestureState) => {
 *         // The user has released all touches while this view is the
 *         // responder. This typically means a gesture has succeeded
 *       },
 *       onPanResponderTerminate: (evt, gestureState) => {
 *         // Another component has become the responder, so this gesture
 *         // should be cancelled
 *       },
 *       onShouldBlockNativeResponder: (evt, gestureState) => {
 *         // Returns whether this component should block native components from becoming the JS
 *         // responder. Returns true by default. Is currently only supported on android.
 *         return true;
 *       },
 *     });
 *   },
 *
 *   render: function() {
 *     return (
 *       <View {...this._panResponder.panHandlers} />
 *     );
 *   },
 *
 * ```
 *
 * ### Working Example
 *
 * To see it in action, try the
 * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/HEAD/packages/rn-tester/js/examples/PanResponder/PanResponderExample.js)
 */ var PanResponder = {
    /**
   *
   * A graphical explanation of the touch data flow:
   *
   * +----------------------------+             +--------------------------------+
   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |
   * +----------------------------+             +----------+---------------------+
   * |Global store of touchHistory|             |Allocation-less math util       |
   * |including activeness, start |             |on touch history (centroids     |
   * |position, prev/cur position.|             |and multitouch movement etc)    |
   * |                            |             |                                |
   * +----^-----------------------+             +----^---------------------------+
   *      |                                          |
   *      | (records relevant history                |
   *      |  of touches relevant for                 |
   *      |  implementing higher level               |
   *      |  gestures)                               |
   *      |                                          |
   * +----+-----------------------+             +----|---------------------------+
   * | ResponderEventPlugin       |             |    |   Your App/Component      |
   * +----------------------------+             +----|---------------------------+
   * |Negotiates which view gets  | Low level   |    |             High level    |
   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |
   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |
   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|
   * +----------------------------+ attached to |  |         |     distance and  |
   *                                 each event |  +---------+     velocity.     |
   *                                            |                                |
   *                                            |                                |
   *                                            +--------------------------------+
   *
   *
   *
   * Gesture that calculates cumulative movement over time in a way that just
   * "does the right thing" for multiple touches. The "right thing" is very
   * nuanced. When moving two touches in opposite directions, the cumulative
   * distance is zero in each dimension. When two touches move in parallel five
   * pixels in the same direction, the cumulative distance is five, not ten. If
   * two touches start, one moves five in a direction, then stops and the other
   * touch moves fives in the same direction, the cumulative distance is ten.
   *
   * This logic requires a kind of processing of time "clusters" of touch events
   * so that two touch moves that essentially occur in parallel but move every
   * other frame respectively, are considered part of the same movement.
   *
   * Explanation of some of the non-obvious fields:
   *
   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is
   *   invalid. If a move event has been observed, `(moveX, moveY)` is the
   *   centroid of the most recently moved "cluster" of active touches.
   *   (Currently all move have the same timeStamp, but later we should add some
   *   threshold for what is considered to be "moving"). If a palm is
   *   accidentally counted as a touch, but a finger is moving greatly, the palm
   *   will move slightly, but we only want to count the single moving touch.
   * - x0/y0: Centroid location (non-cumulative) at the time of becoming
   *   responder.
   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch
   *   distance. Accounts for touch moves that are clustered together in time,
   *   moving the same direction. Only valid when currently responder (otherwise,
   *   it only represents the drag distance below the threshold).
   * - vx/vy: Velocity.
   */ _initializeGestureState (gestureState) {
        gestureState.moveX = 0;
        gestureState.moveY = 0;
        gestureState.x0 = 0;
        gestureState.y0 = 0;
        gestureState.dx = 0;
        gestureState.dy = 0;
        gestureState.vx = 0;
        gestureState.vy = 0;
        gestureState.numberActiveTouches = 0;
        // All `gestureState` accounts for timeStamps up until:
        gestureState._accountsForMovesUpTo = 0;
    },
    /**
   * This is nuanced and is necessary. It is incorrect to continuously take all
   * active *and* recently moved touches, find the centroid, and track how that
   * result changes over time. Instead, we must take all recently moved
   * touches, and calculate how the centroid has changed just for those
   * recently moved touches, and append that change to an accumulator. This is
   * to (at least) handle the case where the user is moving three fingers, and
   * then one of the fingers stops but the other two continue.
   *
   * This is very different than taking all of the recently moved touches and
   * storing their centroid as `dx/dy`. For correctness, we must *accumulate
   * changes* in the centroid of recently moved touches.
   *
   * There is also some nuance with how we handle multiple moved touches in a
   * single event. With the way `ReactNativeEventEmitter` dispatches touches as
   * individual events, multiple touches generate two 'move' events, each of
   * them triggering `onResponderMove`. But with the way `PanResponder` works,
   * all of the gesture inference is performed on the first dispatch, since it
   * looks at all of the touches (even the ones for which there hasn't been a
   * native dispatch yet). Therefore, `PanResponder` does not call
   * `onResponderMove` passed the first dispatch. This diverges from the
   * typical responder callback pattern (without using `PanResponder`), but
   * avoids more dispatches than necessary.
   */ _updateGestureStateOnMove (gestureState, touchHistory) {
        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
        gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
        gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
        var movedAfter = gestureState._accountsForMovesUpTo;
        var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
        var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
        var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
        var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
        var nextDX = gestureState.dx + (x - prevX);
        var nextDY = gestureState.dy + (y - prevY);
        // TODO: This must be filtered intelligently.
        var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
        gestureState.vx = (nextDX - gestureState.dx) / dt;
        gestureState.vy = (nextDY - gestureState.dy) / dt;
        gestureState.dx = nextDX;
        gestureState.dy = nextDY;
        gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
    },
    /**
   * @param {object} config Enhanced versions of all of the responder callbacks
   * that provide not only the typical `ResponderSyntheticEvent`, but also the
   * `PanResponder` gesture state.  Simply replace the word `Responder` with
   * `PanResponder` in each of the typical `onResponder*` callbacks. For
   * example, the `config` object would look like:
   *
   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`
   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`
   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`
   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`
   *  - `onPanResponderReject: (e, gestureState) => {...}`
   *  - `onPanResponderGrant: (e, gestureState) => {...}`
   *  - `onPanResponderStart: (e, gestureState) => {...}`
   *  - `onPanResponderEnd: (e, gestureState) => {...}`
   *  - `onPanResponderRelease: (e, gestureState) => {...}`
   *  - `onPanResponderMove: (e, gestureState) => {...}`
   *  - `onPanResponderTerminate: (e, gestureState) => {...}`
   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`
   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`
   *
   *  In general, for events that have capture equivalents, we update the
   *  gestureState once in the capture phase and can use it in the bubble phase
   *  as well.
   *
   *  Be careful with onStartShould* callbacks. They only reflect updated
   *  `gestureState` for start/end events that bubble/capture to the Node.
   *  Once the node is the responder, you can rely on every start/end event
   *  being processed by the gesture and `gestureState` being updated
   *  accordingly. (numberActiveTouches) may not be totally accurate unless you
   *  are the responder.
   */ create (config) {
        var interactionState = {
            handle: null
        };
        var gestureState = {
            // Useful for debugging
            stateID: Math.random(),
            moveX: 0,
            moveY: 0,
            x0: 0,
            y0: 0,
            dx: 0,
            dy: 0,
            vx: 0,
            vy: 0,
            numberActiveTouches: 0,
            _accountsForMovesUpTo: 0
        };
        var panHandlers = {
            onStartShouldSetResponder (event) {
                return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);
            },
            onMoveShouldSetResponder (event) {
                return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);
            },
            onStartShouldSetResponderCapture (event) {
                // TODO: Actually, we should reinitialize the state any time
                // touches.length increases from 0 active to > 0 active.
                if (event.nativeEvent.touches.length === 1) {
                    PanResponder._initializeGestureState(gestureState);
                }
                gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;
                return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;
            },
            onMoveShouldSetResponderCapture (event) {
                var touchHistory = event.touchHistory;
                // Responder system incorrectly dispatches should* to current responder
                // Filter out any touch moves past the first one - we would have
                // already processed multi-touch geometry during the first event.
                if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
                    return false;
                }
                PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
                return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;
            },
            onResponderGrant (event) {
                if (!interactionState.handle) {
                    interactionState.handle = InteractionManager.createInteractionHandle();
                }
                gestureState.x0 = currentCentroidX(event.touchHistory);
                gestureState.y0 = currentCentroidY(event.touchHistory);
                gestureState.dx = 0;
                gestureState.dy = 0;
                if (config.onPanResponderGrant) {
                    config.onPanResponderGrant(event, gestureState);
                }
                // TODO: t7467124 investigate if this can be removed
                return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);
            },
            onResponderReject (event) {
                clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);
            },
            onResponderRelease (event) {
                clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);
                PanResponder._initializeGestureState(gestureState);
            },
            onResponderStart (event) {
                var touchHistory = event.touchHistory;
                gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
                if (config.onPanResponderStart) {
                    config.onPanResponderStart(event, gestureState);
                }
            },
            onResponderMove (event) {
                var touchHistory = event.touchHistory;
                // Guard against the dispatch of two touch moves when there are two
                // simultaneously changed touches.
                if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
                    return;
                }
                // Filter out any touch moves past the first one - we would have
                // already processed multi-touch geometry during the first event.
                PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
                if (config.onPanResponderMove) {
                    config.onPanResponderMove(event, gestureState);
                }
            },
            onResponderEnd (event) {
                var touchHistory = event.touchHistory;
                gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
                clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);
            },
            onResponderTerminate (event) {
                clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);
                PanResponder._initializeGestureState(gestureState);
            },
            onResponderTerminationRequest (event) {
                return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);
            }
        };
        return {
            panHandlers,
            getInteractionHandle () {
                return interactionState.handle;
            }
        };
    }
};
function clearInteractionHandle(interactionState, callback, event, gestureState) {
    if (interactionState.handle) {
        InteractionManager.clearInteractionHandle(interactionState.handle);
        interactionState.handle = null;
    }
    if (callback) {
        callback(event, gestureState);
    }
}
var _default = PanResponder;


}),
"./node_modules/react-native/Libraries/Interaction/TouchHistoryMath.js": 
/*!*****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Interaction/TouchHistoryMath.js ***!
  \*****************************************************************************/
(function (module) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // $FlowFixMe[definition-cycle]
// $FlowFixMe[recursive-definition]
var TouchHistoryMath = {
    /**
   * This code is optimized and not intended to look beautiful. This allows
   * computing of touch centroids that have moved after `touchesChangedAfter`
   * timeStamp. You can compute the current centroid involving all touches
   * moves after `touchesChangedAfter`, or you can compute the previous
   * centroid of all touches that were moved after `touchesChangedAfter`.
   *
   * @param {TouchHistoryMath} touchHistory Standard Responder touch track
   * data.
   * @param {number} touchesChangedAfter timeStamp after which moved touches
   * are considered "actively moving" - not just "active".
   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.
   * @param {boolean} ofCurrent Compute current centroid for actively moving
   * touches vs. previous centroid of now actively moving touches.
   * @return {number} value of centroid in specified dimension.
   */ centroidDimension: function(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
        var touchBank = touchHistory.touchBank;
        var total = 0;
        var count = 0;
        var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
        if (oneTouchData !== null) {
            if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
                total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
                count = 1;
            }
        } else {
            for(var i = 0; i < touchBank.length; i++){
                var touchTrack = touchBank[i];
                if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                    var toAdd = void 0; // Yuck, program temporarily in invalid state.
                    if (ofCurrent && isXAxis) {
                        toAdd = touchTrack.currentPageX;
                    } else if (ofCurrent && !isXAxis) {
                        toAdd = touchTrack.currentPageY;
                    } else if (!ofCurrent && isXAxis) {
                        toAdd = touchTrack.previousPageX;
                    } else {
                        toAdd = touchTrack.previousPageY;
                    }
                    total += toAdd;
                    count++;
                }
            }
        }
        return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
    },
    currentCentroidYOfTouchesChangedAfter: function(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
    },
    previousCentroidXOfTouchesChangedAfter: function(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
    },
    previousCentroidYOfTouchesChangedAfter: function(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
    },
    currentCentroidX: function(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
    },
    currentCentroidY: function(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
    },
    noCentroid: -1
};
module.exports = TouchHistoryMath;


}),
"./node_modules/react-native/Libraries/Lists/VirtualizedList.js": 
/*!**********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Lists/VirtualizedList.js ***!
  \**********************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
var VirtualizedList = (__webpack_require__(/*! @react-native/virtualized-lists */ "webpack/sharing/consume/default/@react-native/virtualized-lists/@react-native/virtualized-lists")/* .VirtualizedList */.VirtualizedList);
module.exports = VirtualizedList;


}),
"./node_modules/react-native/Libraries/Lists/VirtualizedSectionList.js": 
/*!*****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Lists/VirtualizedSectionList.js ***!
  \*****************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
var VirtualizedSectionList = (__webpack_require__(/*! @react-native/virtualized-lists */ "webpack/sharing/consume/default/@react-native/virtualized-lists/@react-native/virtualized-lists")/* .VirtualizedSectionList */.VirtualizedSectionList);
module.exports = VirtualizedSectionList;


}),
"./node_modules/react-native/Libraries/LogBox/LogBoxInspectorContainer.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/LogBoxInspectorContainer.js ***!
  \********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get _LogBoxInspectorContainer () {
        return _LogBoxInspectorContainer;
    },
    get default () {
        return _default;
    }
});
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _LogBoxData = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./Data/LogBoxData */ "./node_modules/react-native/Libraries/LogBox/Data/LogBoxData.js"));
var _LogBoxInspector = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./UI/LogBoxInspector */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var _LogBoxInspectorContainer = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(_LogBoxInspectorContainer, _React_Component);
    function _LogBoxInspectorContainer() {
        _class_call_check._(this, _LogBoxInspectorContainer);
        var _this;
        _this = _call_super._(this, _LogBoxInspectorContainer, arguments), _this._handleDismiss = ()=>{
            // Here we handle the cases when the log is dismissed and it
            // was either the last log, or when the current index
            // is now outside the bounds of the log array.
            var _this_props = _this.props, selectedLogIndex = _this_props.selectedLogIndex, logs = _this_props.logs;
            var logsArray = Array.from(logs);
            if (selectedLogIndex != null) {
                if (logsArray.length - 1 <= 0) {
                    _LogBoxData.setSelectedLog(-1);
                } else if (selectedLogIndex >= logsArray.length - 1) {
                    _LogBoxData.setSelectedLog(selectedLogIndex - 1);
                }
                _LogBoxData.dismiss(logsArray[selectedLogIndex]);
            }
        }, _this._handleMinimize = ()=>{
            _LogBoxData.setSelectedLog(-1);
        }, _this._handleSetSelectedLog = (index)=>{
            _LogBoxData.setSelectedLog(index);
        };
        return _this;
    }
    _create_class._(_LogBoxInspectorContainer, [
        {
            key: "render",
            value: function render() {
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                    style: _StyleSheet.default.absoluteFill,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspector.default, {
                        onDismiss: this._handleDismiss,
                        onMinimize: this._handleMinimize,
                        onChangeSelectedIndex: this._handleSetSelectedLog,
                        logs: this.props.logs,
                        selectedIndex: this.props.selectedLogIndex
                    })
                });
            }
        }
    ]);
    return _LogBoxInspectorContainer;
}(_react.Component);
var _default = _LogBoxData.withSubscription(_LogBoxInspectorContainer);


}),
"./node_modules/react-native/Libraries/LogBox/UI/AnsiHighlight.js": 
/*!************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/AnsiHighlight.js ***!
  \************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return Ansi;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _anser = __webpack_require__(/*! anser */ "./node_modules/anser/lib/index.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
// Afterglow theme from https://iterm2colorschemes.com/
var COLORS = {
    'ansi-black': 'rgb(27, 27, 27)',
    'ansi-red': 'rgb(187, 86, 83)',
    'ansi-green': 'rgb(144, 157, 98)',
    'ansi-yellow': 'rgb(234, 193, 121)',
    'ansi-blue': 'rgb(125, 169, 199)',
    'ansi-magenta': 'rgb(176, 101, 151)',
    'ansi-cyan': 'rgb(140, 220, 216)',
    // Instead of white, use the default color provided to the component
    // 'ansi-white': 'rgb(216, 216, 216)',
    'ansi-bright-black': 'rgb(98, 98, 98)',
    'ansi-bright-red': 'rgb(187, 86, 83)',
    'ansi-bright-green': 'rgb(144, 157, 98)',
    'ansi-bright-yellow': 'rgb(234, 193, 121)',
    'ansi-bright-blue': 'rgb(125, 169, 199)',
    'ansi-bright-magenta': 'rgb(176, 101, 151)',
    'ansi-bright-cyan': 'rgb(140, 220, 216)',
    'ansi-bright-white': 'rgb(247, 247, 247)'
};
var LRM = '\u200E'; // Left-to-Right Mark
function Ansi(ref) {
    var text = ref.text, style = ref.style;
    var commonWhitespaceLength = Infinity;
    var parsedLines = text.split(/\n/).map((line)=>(0, _anser.ansiToJson)(line, {
            json: true,
            remove_empty: true,
            use_classes: true
        }));
    parsedLines.map((lines)=>{
        var _lines__content, _lines_, _match_;
        // The third item on each line includes the whitespace of the source code.
        // We are looking for the least amount of common whitespace to trim all lines.
        // Example: Array [" ", " 96 |", "     text", ...]
        var match = lines[2] && ((_lines_ = lines[2]) === null || _lines_ === void 0 ? void 0 : (_lines__content = _lines_.content) === null || _lines__content === void 0 ? void 0 : _lines__content.match(/^ +/));
        var whitespaceLength = match && ((_match_ = match[0]) === null || _match_ === void 0 ? void 0 : _match_.length) || 0;
        if (whitespaceLength < commonWhitespaceLength) {
            commonWhitespaceLength = whitespaceLength;
        }
    });
    /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
   * LTI update could not be added via codemod */ var getText = (content, key)=>{
        if (key === 1) {
            // Remove the vertical bar after line numbers
            return content.replace(/\| $/, ' ');
        } else if (key === 2 && commonWhitespaceLength < Infinity) {
            // Remove common whitespace at the beginning of the line
            return content.slice(commonWhitespaceLength);
        } else {
            return content;
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
        style: styles.container,
        children: parsedLines.map((items, i)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                style: styles.line,
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Text.default, {
                    children: [
                        LRM,
                        items.map((bundle, key)=>{
                            var textStyle = bundle.fg && COLORS[bundle.fg] ? {
                                backgroundColor: bundle.bg && COLORS[bundle.bg],
                                color: bundle.fg && COLORS[bundle.fg]
                            } : {
                                backgroundColor: bundle.bg && COLORS[bundle.bg]
                            };
                            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                                style: [
                                    style,
                                    textStyle
                                ],
                                children: getText(bundle.content, key)
                            }, key);
                        })
                    ]
                })
            }, i))
    });
}
var styles = _StyleSheet.default.create({
    container: {
        minWidth: '100%',
        direction: 'ltr'
    },
    line: {
        flexDirection: 'row'
    }
});


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js": 
/*!**************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js ***!
  \**************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return LogBoxInspector;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _Keyboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/Keyboard/Keyboard */ "./node_modules/react-native/Libraries/Components/Keyboard/Keyboard.js"));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _LogBoxData = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../Data/LogBoxData */ "./node_modules/react-native/Libraries/LogBox/Data/LogBoxData.js"));
var _LogBoxLog = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Data/LogBoxLog */ "./node_modules/react-native/Libraries/LogBox/Data/LogBoxLog.js"));
var _LogBoxInspectorBody = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxInspectorBody */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorBody.js"));
var _LogBoxInspectorFooter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxInspectorFooter */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorFooter.js"));
var _LogBoxInspectorHeader = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxInspectorHeader */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorHeader.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function LogBoxInspector(props) {
    var logs = props.logs, selectedIndex = props.selectedIndex;
    var log = logs[selectedIndex];
    (0, _react.useEffect)(()=>{
        if (log) {
            _LogBoxData.symbolicateLogNow(log);
        }
    }, [
        log
    ]);
    (0, _react.useEffect)(()=>{
        // Optimistically symbolicate the last and next logs.
        if (logs.length > 1) {
            var selected = selectedIndex;
            var lastIndex = logs.length - 1;
            var prevIndex = selected - 1 < 0 ? lastIndex : selected - 1;
            var nextIndex = selected + 1 > lastIndex ? 0 : selected + 1;
            _LogBoxData.symbolicateLogLazy(logs[prevIndex]);
            _LogBoxData.symbolicateLogLazy(logs[nextIndex]);
        }
    }, [
        logs,
        selectedIndex
    ]);
    (0, _react.useEffect)(()=>{
        _Keyboard.default.dismiss();
    }, []);
    function _handleRetry() {
        _LogBoxData.retrySymbolicateLogNow(log);
    }
    if (log == null) {
        return null;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, {
        style: styles.root,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorHeader.default, {
                onSelectIndex: props.onChangeSelectedIndex,
                selectedIndex: selectedIndex,
                total: logs.length,
                level: log.level
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorBody.default, {
                log: log,
                onRetry: _handleRetry
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorFooter.default, {
                onDismiss: props.onDismiss,
                onMinimize: props.onMinimize,
                level: log.level
            })
        ]
    });
}
var styles = _StyleSheet.default.create({
    root: {
        flex: 1,
        backgroundColor: _LogBoxStyle.getTextColor()
    }
});


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorBody.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorBody.js ***!
  \******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return LogBoxInspectorBody;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _ScrollView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/ScrollView/ScrollView */ "./node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _LogBoxLog = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Data/LogBoxLog */ "./node_modules/react-native/Libraries/LogBox/Data/LogBoxLog.js"));
var _LogBoxInspectorCodeFrame = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxInspectorCodeFrame */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorCodeFrame.js"));
var _LogBoxInspectorMessageHeader = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxInspectorMessageHeader */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorMessageHeader.js"));
var _LogBoxInspectorReactFrames = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxInspectorReactFrames */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorReactFrames.js"));
var _LogBoxInspectorStackFrames = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxInspectorStackFrames */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrames.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var headerTitleMap = {
    warn: 'Console Warning',
    error: 'Console Error',
    fatal: 'Uncaught Error',
    syntax: 'Syntax Error',
    component: 'Render Error'
};
function LogBoxInspectorBody(props) {
    var _useState = _sliced_to_array._((0, _react.useState)(true), 2), collapsed = _useState[0], setCollapsed = _useState[1];
    (0, _react.useEffect)(()=>{
        setCollapsed(true);
    }, [
        props.log
    ]);
    var headerTitle = props.log.type ?? headerTitleMap[props.log.isComponentError ? 'component' : props.log.level];
    if (collapsed) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorMessageHeader.default, {
                    collapsed: collapsed,
                    onPress: ()=>setCollapsed(!collapsed),
                    message: props.log.message,
                    level: props.log.level,
                    title: headerTitle
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_ScrollView.default, {
                    style: styles.scrollBody,
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorCodeFrame.default, {
                            codeFrame: props.log.codeFrame
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorReactFrames.default, {
                            log: props.log
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorStackFrames.default, {
                            log: props.log,
                            onRetry: props.onRetry
                        })
                    ]
                })
            ]
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_ScrollView.default, {
        style: styles.scrollBody,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorMessageHeader.default, {
                collapsed: collapsed,
                onPress: ()=>setCollapsed(!collapsed),
                message: props.log.message,
                level: props.log.level,
                title: headerTitle
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorCodeFrame.default, {
                codeFrame: props.log.codeFrame
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorReactFrames.default, {
                log: props.log
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorStackFrames.default, {
                log: props.log,
                onRetry: props.onRetry
            })
        ]
    });
}
var styles = _StyleSheet.default.create({
    root: {
        flex: 1,
        backgroundColor: _LogBoxStyle.getTextColor()
    },
    scrollBody: {
        backgroundColor: _LogBoxStyle.getBackgroundColor(0.9),
        flex: 1
    }
});


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorCodeFrame.js": 
/*!***********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorCodeFrame.js ***!
  \***********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _ScrollView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/ScrollView/ScrollView */ "./node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js"));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _openFileInEditor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Core/Devtools/openFileInEditor */ "./node_modules/react-native/Libraries/Core/Devtools/openFileInEditor.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _LogBoxData = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../Data/LogBoxData */ "./node_modules/react-native/Libraries/LogBox/Data/LogBoxData.js"));
var _AnsiHighlight = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnsiHighlight */ "./node_modules/react-native/Libraries/LogBox/UI/AnsiHighlight.js"));
var _LogBoxButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxButton */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js"));
var _LogBoxInspectorSection = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxInspectorSection */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSection.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function LogBoxInspectorCodeFrame(props) {
    var codeFrame = props.codeFrame;
    if (codeFrame == null) {
        return null;
    }
    function getFileName() {
        // $FlowFixMe[incompatible-use]
        var matches = /[^/]*$/.exec(codeFrame.fileName);
        if (matches && matches.length > 0) {
            return matches[0];
        }
        // $FlowFixMe[incompatible-use]
        return codeFrame.fileName;
    }
    function getLocation() {
        // $FlowFixMe[incompatible-use]
        var location = codeFrame.location;
        if (location != null) {
            return ` (${location.row}:${location.column + 1 /* Code frame columns are zero indexed */ })`;
        }
        return null;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorSection.default, {
        heading: "Source",
        action: /*#__PURE__*/ (0, _jsxruntime.jsx)(AppInfo, {}),
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, {
            style: styles.box,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                    style: styles.frame,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScrollView.default, {
                        horizontal: true,
                        contentContainerStyle: styles.contentContainer,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AnsiHighlight.default, {
                            style: styles.content,
                            text: codeFrame.content
                        })
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxButton.default, {
                    backgroundColor: {
                        default: 'transparent',
                        pressed: _LogBoxStyle.getBackgroundDarkColor(1)
                    },
                    style: styles.button,
                    onPress: ()=>{
                        var _codeFrame_location;
                        (0, _openFileInEditor.default)(codeFrame.fileName, ((_codeFrame_location = codeFrame.location) === null || _codeFrame_location === void 0 ? void 0 : _codeFrame_location.row) ?? 0);
                    },
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Text.default, {
                        style: styles.fileText,
                        children: [
                            getFileName(),
                            getLocation()
                        ]
                    })
                })
            ]
        })
    });
}
function AppInfo() {
    var appInfo = _LogBoxData.getAppInfo();
    if (appInfo == null) {
        return null;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxButton.default, {
        backgroundColor: {
            default: 'transparent',
            pressed: appInfo.onPress ? _LogBoxStyle.getBackgroundColor(1) : 'transparent'
        },
        style: appInfoStyles.buildButton,
        onPress: appInfo.onPress,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Text.default, {
            style: appInfoStyles.text,
            children: [
                appInfo.appVersion,
                " (",
                appInfo.engine,
                ")"
            ]
        })
    });
}
var appInfoStyles = _StyleSheet.default.create({
    text: {
        color: _LogBoxStyle.getTextColor(0.4),
        fontSize: 12,
        lineHeight: 12
    },
    buildButton: {
        flex: 0,
        flexGrow: 0,
        paddingVertical: 4,
        paddingHorizontal: 5,
        borderRadius: 5,
        marginRight: -8
    }
});
var styles = _StyleSheet.default.create({
    box: {
        backgroundColor: _LogBoxStyle.getBackgroundColor(),
        marginLeft: 10,
        marginRight: 10,
        marginTop: 5,
        borderRadius: 3
    },
    frame: {
        padding: 10,
        borderBottomColor: _LogBoxStyle.getTextColor(0.1),
        borderBottomWidth: 1
    },
    button: {
        paddingTop: 10,
        paddingBottom: 10
    },
    contentContainer: {
        minWidth: '100%'
    },
    content: {
        color: _LogBoxStyle.getTextColor(1),
        fontSize: 12,
        includeFontPadding: false,
        lineHeight: 20,
        fontFamily: _Platform.default.select({
            android: 'monospace',
            ios: 'Menlo'
        })
    },
    fileText: {
        color: _LogBoxStyle.getTextColor(0.5),
        textAlign: 'center',
        flex: 1,
        fontSize: 12,
        includeFontPadding: false,
        lineHeight: 16,
        fontFamily: _Platform.default.select({
            android: 'monospace',
            ios: 'Menlo'
        })
    }
});
var _default = LogBoxInspectorCodeFrame;


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorFooter.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorFooter.js ***!
  \********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return LogBoxInspectorFooter;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _LogBoxInspectorFooterButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxInspectorFooterButton */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorFooterButton.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function LogBoxInspectorFooter(props) {
    if (props.level === 'syntax') {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
            style: styles.root,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                style: styles.button,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                    style: styles.syntaxErrorText,
                    children: "This error cannot be dismissed."
                })
            })
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, {
        style: styles.root,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorFooterButton.default, {
                text: "Dismiss",
                onPress: props.onDismiss
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorFooterButton.default, {
                text: "Minimize",
                onPress: props.onMinimize
            })
        ]
    });
}
var styles = _StyleSheet.default.create({
    root: {
        backgroundColor: _LogBoxStyle.getBackgroundColor(1),
        shadowColor: '#000',
        shadowOffset: {
            width: 0,
            height: -2
        },
        shadowRadius: 2,
        shadowOpacity: 0.5,
        flexDirection: 'row'
    },
    button: {
        flex: 1
    },
    syntaxErrorText: {
        textAlign: 'center',
        width: '100%',
        height: 48,
        fontSize: 14,
        lineHeight: 20,
        paddingTop: 20,
        paddingBottom: 50,
        fontStyle: 'italic',
        color: _LogBoxStyle.getTextColor(0.6)
    }
});


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorFooterButton.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorFooterButton.js ***!
  \**************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return LogBoxInspectorFooterButton;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _SafeAreaView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/SafeAreaView/SafeAreaView */ "./node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js"));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _LogBoxButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxButton */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function LogBoxInspectorFooterButton(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_SafeAreaView.default, {
        style: styles.button,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxButton.default, {
            backgroundColor: {
                default: 'transparent',
                pressed: _LogBoxStyle.getBackgroundDarkColor()
            },
            onPress: props.onPress,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                style: styles.buttonContent,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                    style: styles.buttonLabel,
                    children: props.text
                })
            })
        })
    });
}
var styles = _StyleSheet.default.create({
    button: {
        flex: 1
    },
    buttonContent: {
        alignItems: 'center',
        height: 48,
        justifyContent: 'center'
    },
    buttonLabel: {
        color: _LogBoxStyle.getTextColor(1),
        fontSize: 14,
        includeFontPadding: false,
        lineHeight: 20
    }
});


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorHeader.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorHeader.js ***!
  \********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return LogBoxInspectorHeader;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _SafeAreaView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/SafeAreaView/SafeAreaView */ "./node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js"));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _LogBoxInspectorHeaderButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxInspectorHeaderButton */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorHeaderButton.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var LogBoxInspectorHeaderSafeArea = _Platform.default.OS === 'android' ? _View.default : _SafeAreaView.default;
function LogBoxInspectorHeader(props) {
    if (props.level === 'syntax') {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(LogBoxInspectorHeaderSafeArea, {
            style: styles[props.level],
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                style: styles.header,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                    style: styles.title,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                        style: styles.titleText,
                        children: "Failed to compile"
                    })
                })
            })
        });
    }
    var prevIndex = props.selectedIndex - 1 < 0 ? props.total - 1 : props.selectedIndex - 1;
    var nextIndex = props.selectedIndex + 1 > props.total - 1 ? 0 : props.selectedIndex + 1;
    var titleText = `Log ${props.selectedIndex + 1} of ${props.total}`;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(LogBoxInspectorHeaderSafeArea, {
        style: styles[props.level],
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, {
            style: styles.header,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorHeaderButton.default, {
                    disabled: props.total <= 1,
                    level: props.level,
                    image: __webpack_require__(/*! ./LogBoxImages/chevron-left.png */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/chevron-left.png"),
                    onPress: ()=>props.onSelectIndex(prevIndex)
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                    style: styles.title,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                        style: styles.titleText,
                        children: titleText
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorHeaderButton.default, {
                    disabled: props.total <= 1,
                    level: props.level,
                    image: __webpack_require__(/*! ./LogBoxImages/chevron-right.png */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/chevron-right.png"),
                    onPress: ()=>props.onSelectIndex(nextIndex)
                })
            ]
        })
    });
}
var styles = _StyleSheet.default.create({
    syntax: {
        backgroundColor: _LogBoxStyle.getFatalColor()
    },
    fatal: {
        backgroundColor: _LogBoxStyle.getFatalColor()
    },
    warn: {
        backgroundColor: _LogBoxStyle.getWarningColor()
    },
    error: {
        backgroundColor: _LogBoxStyle.getErrorColor()
    },
    header: {
        flexDirection: 'row',
        height: _Platform.default.select({
            android: 48,
            ios: 44
        })
    },
    title: {
        alignItems: 'center',
        flex: 1,
        justifyContent: 'center'
    },
    titleText: {
        color: _LogBoxStyle.getTextColor(),
        fontSize: 16,
        fontWeight: '600',
        includeFontPadding: false,
        lineHeight: 20
    }
});


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorHeaderButton.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorHeaderButton.js ***!
  \**************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return LogBoxInspectorHeaderButton;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _Image = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Image/Image */ "./node_modules/react-native/Libraries/Image/Image.android.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _LogBoxButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxButton */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var backgroundForLevel = (level)=>({
        warn: {
            default: 'transparent',
            pressed: _LogBoxStyle.getWarningDarkColor()
        },
        error: {
            default: 'transparent',
            pressed: _LogBoxStyle.getErrorDarkColor()
        },
        fatal: {
            default: 'transparent',
            pressed: _LogBoxStyle.getFatalDarkColor()
        },
        syntax: {
            default: 'transparent',
            pressed: _LogBoxStyle.getFatalDarkColor()
        }
    })[level];
function LogBoxInspectorHeaderButton(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxButton.default, {
        backgroundColor: backgroundForLevel(props.level),
        onPress: props.disabled ? null : props.onPress,
        style: styles.button,
        children: props.disabled ? null : /*#__PURE__*/ (0, _jsxruntime.jsx)(_Image.default, {
            source: props.image,
            style: styles.buttonImage
        })
    });
}
var styles = _StyleSheet.default.create({
    button: {
        alignItems: 'center',
        aspectRatio: 1,
        justifyContent: 'center',
        marginTop: 5,
        marginRight: 6,
        marginLeft: 6,
        marginBottom: -8,
        borderRadius: 3
    },
    buttonImage: {
        height: 14,
        width: 8,
        tintColor: _LogBoxStyle.getTextColor()
    }
});


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorMessageHeader.js": 
/*!***************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorMessageHeader.js ***!
  \***************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _LogBoxMessage = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxMessage */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxMessage.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var SHOW_MORE_MESSAGE_LENGTH = 300;
function LogBoxInspectorMessageHeader(props) {
    function renderShowMore() {
        if (props.message.content.length < SHOW_MORE_MESSAGE_LENGTH || !props.collapsed) {
            return null;
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
            style: messageStyles.collapse,
            onPress: ()=>props.onPress(),
            children: "... See More"
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, {
        style: messageStyles.body,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                style: messageStyles.heading,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                    style: [
                        messageStyles.headingText,
                        messageStyles[props.level]
                    ],
                    children: props.title
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Text.default, {
                style: messageStyles.bodyText,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxMessage.default, {
                        maxLength: props.collapsed ? SHOW_MORE_MESSAGE_LENGTH : Infinity,
                        message: props.message,
                        style: messageStyles.messageText
                    }),
                    renderShowMore()
                ]
            })
        ]
    });
}
var messageStyles = _StyleSheet.default.create({
    body: {
        backgroundColor: _LogBoxStyle.getBackgroundColor(1),
        shadowColor: '#000',
        shadowOffset: {
            width: 0,
            height: 2
        },
        shadowRadius: 2,
        shadowOpacity: 0.5,
        flex: 0
    },
    bodyText: {
        color: _LogBoxStyle.getTextColor(1),
        fontSize: 14,
        includeFontPadding: false,
        lineHeight: 20,
        fontWeight: '500',
        paddingHorizontal: 12,
        paddingBottom: 10
    },
    heading: {
        alignItems: 'center',
        flexDirection: 'row',
        paddingHorizontal: 12,
        marginTop: 10,
        marginBottom: 5
    },
    headingText: {
        flex: 1,
        fontSize: 20,
        fontWeight: '600',
        includeFontPadding: false,
        lineHeight: 28
    },
    warn: {
        color: _LogBoxStyle.getWarningColor(1)
    },
    error: {
        color: _LogBoxStyle.getErrorColor(1)
    },
    fatal: {
        color: _LogBoxStyle.getFatalColor(1)
    },
    syntax: {
        color: _LogBoxStyle.getFatalColor(1)
    },
    messageText: {
        color: _LogBoxStyle.getTextColor(0.6)
    },
    collapse: {
        color: _LogBoxStyle.getTextColor(0.7),
        fontSize: 14,
        fontWeight: '300',
        lineHeight: 12
    },
    button: {
        paddingVertical: 5,
        paddingHorizontal: 10,
        borderRadius: 3
    }
});
var _default = LogBoxInspectorMessageHeader;


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorReactFrames.js": 
/*!*************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorReactFrames.js ***!
  \*************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _openFileInEditor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Core/Devtools/openFileInEditor */ "./node_modules/react-native/Libraries/Core/Devtools/openFileInEditor.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _LogBoxButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxButton */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js"));
var _LogBoxInspectorSection = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxInspectorSection */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSection.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var BEFORE_SLASH_RE = /^(.*)[\\/]/;
// Taken from React https://github.com/facebook/react/blob/206d61f72214e8ae5b935f0bf8628491cb7f0797/packages/react-devtools-shared/src/backend/describeComponentFrame.js#L27-L41
function getPrettyFileName(path) {
    var fileName = path.replace(BEFORE_SLASH_RE, '');
    // In DEV, include code for a common special case:
    // prefer "folder/index.js" instead of just "index.js".
    if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);
        if (match) {
            var pathBeforeSlash = match[1];
            if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                // Note the below string contains a zero width space after the "/" character.
                // This is to prevent browsers like Chrome from formatting the file name as a link.
                // (Since this is a source link, it would not work to open the source file anyway.)
                fileName = folderName + "/\u200B" + fileName;
            }
        }
    }
    return fileName;
}
function LogBoxInspectorReactFrames(props) {
    var _React_useState = _sliced_to_array._(_react.useState(true), 2), collapsed = _React_useState[0], setCollapsed = _React_useState[1];
    if (props.log.getAvailableComponentStack() == null || props.log.getAvailableComponentStack().length < 1) {
        return null;
    }
    function getStackList() {
        if (collapsed) {
            return props.log.getAvailableComponentStack().slice(0, 3);
        } else {
            return props.log.getAvailableComponentStack();
        }
    }
    function getCollapseMessage() {
        if (props.log.getAvailableComponentStack().length <= 3) {
            return;
        }
        var count = props.log.getAvailableComponentStack().length - 3;
        if (collapsed) {
            return `See ${count} more components`;
        } else {
            return `Collapse ${count} components`;
        }
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_LogBoxInspectorSection.default, {
        heading: "Component Stack",
        children: [
            getStackList().map((frame, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                    style: componentStyles.frameContainer,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_LogBoxButton.default, {
                        backgroundColor: {
                            default: 'transparent',
                            pressed: _LogBoxStyle.getBackgroundColor(1)
                        },
                        onPress: // Older versions of DevTools do not provide full path.
                        // This will not work on Windows, remove check once the
                        // DevTools return the full file path.
                        frame.fileName.startsWith('/') ? ()=>{
                            var _frame_location;
                            return (0, _openFileInEditor.default)(frame.fileName, ((_frame_location = frame.location) === null || _frame_location === void 0 ? void 0 : _frame_location.row) ?? 1);
                        } : null,
                        style: componentStyles.frame,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                                style: componentStyles.component,
                                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Text.default, {
                                    style: componentStyles.frameName,
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                                            style: componentStyles.bracket,
                                            children: '<'
                                        }),
                                        frame.content,
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                                            style: componentStyles.bracket,
                                            children: ' />'
                                        })
                                    ]
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Text.default, {
                                style: componentStyles.frameLocation,
                                children: [
                                    getPrettyFileName(frame.fileName),
                                    frame.location ? `:${frame.location.row}` : ''
                                ]
                            })
                        ]
                    })
                }, index)),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                style: componentStyles.collapseContainer,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxButton.default, {
                    backgroundColor: {
                        default: 'transparent',
                        pressed: _LogBoxStyle.getBackgroundColor(1)
                    },
                    onPress: ()=>setCollapsed(!collapsed),
                    style: componentStyles.collapseButton,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                        style: componentStyles.collapse,
                        children: getCollapseMessage()
                    })
                })
            })
        ]
    });
}
var componentStyles = _StyleSheet.default.create({
    collapseContainer: {
        marginLeft: 15,
        flexDirection: 'row'
    },
    collapseButton: {
        borderRadius: 5
    },
    collapse: {
        color: _LogBoxStyle.getTextColor(0.7),
        fontSize: 12,
        fontWeight: '300',
        lineHeight: 20,
        marginTop: 0,
        paddingVertical: 5,
        paddingHorizontal: 10
    },
    frameContainer: {
        flexDirection: 'row',
        paddingHorizontal: 15
    },
    frame: {
        flex: 1,
        paddingVertical: 4,
        paddingHorizontal: 10,
        borderRadius: 5
    },
    component: {
        flexDirection: 'row',
        paddingRight: 10
    },
    frameName: {
        fontFamily: _Platform.default.select({
            android: 'monospace',
            ios: 'Menlo'
        }),
        color: _LogBoxStyle.getTextColor(1),
        fontSize: 14,
        includeFontPadding: false,
        lineHeight: 18
    },
    bracket: {
        fontFamily: _Platform.default.select({
            android: 'monospace',
            ios: 'Menlo'
        }),
        color: _LogBoxStyle.getTextColor(0.4),
        fontSize: 14,
        fontWeight: '500',
        includeFontPadding: false,
        lineHeight: 18
    },
    frameLocation: {
        color: _LogBoxStyle.getTextColor(0.7),
        fontSize: 12,
        fontWeight: '300',
        includeFontPadding: false,
        lineHeight: 16,
        paddingLeft: 10
    }
});
var _default = LogBoxInspectorReactFrames;


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSection.js": 
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSection.js ***!
  \*********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function LogBoxInspectorSection(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, {
        style: styles.section,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, {
                style: styles.heading,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                        style: styles.headingText,
                        children: props.heading
                    }),
                    props.action
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                style: styles.body,
                children: props.children
            })
        ]
    });
}
var styles = _StyleSheet.default.create({
    section: {
        marginTop: 15
    },
    heading: {
        alignItems: 'center',
        flexDirection: 'row',
        paddingHorizontal: 12,
        marginBottom: 10
    },
    headingText: {
        color: _LogBoxStyle.getTextColor(1),
        flex: 1,
        fontSize: 18,
        fontWeight: '600',
        includeFontPadding: false,
        lineHeight: 20
    },
    body: {
        paddingBottom: 10
    }
});
var _default = LogBoxInspectorSection;


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSourceMapStatus.js": 
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSourceMapStatus.js ***!
  \*****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _Animated = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Animated/Animated */ "./node_modules/react-native/Libraries/Animated/Animated.js"));
var _Easing = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Animated/Easing */ "./node_modules/react-native/Libraries/Animated/Easing.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _LogBoxButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxButton */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function LogBoxInspectorSourceMapStatus(props) {
    var _React_useState = _sliced_to_array._(_react.useState({
        animation: null,
        rotate: null
    }), 2), state = _React_useState[0], setState = _React_useState[1];
    _react.useEffect(()=>{
        if (props.status === 'PENDING') {
            if (state.animation == null) {
                var animated = new _Animated.default.Value(0);
                var animation = _Animated.default.loop(_Animated.default.timing(animated, {
                    duration: 2000,
                    easing: _Easing.default.linear,
                    toValue: 1,
                    useNativeDriver: true
                }));
                // $FlowFixMe[incompatible-call]
                setState({
                    animation,
                    rotate: animated.interpolate({
                        inputRange: [
                            0,
                            1
                        ],
                        outputRange: [
                            '0deg',
                            '360deg'
                        ]
                    })
                });
                animation.start();
            }
        } else {
            if (state.animation != null) {
                state.animation.stop();
                setState({
                    animation: null,
                    rotate: null
                });
            }
        }
        return ()=>{
            if (state.animation != null) {
                state.animation.stop();
            }
        };
    }, [
        props.status,
        state.animation
    ]);
    var image;
    var color;
    switch(props.status){
        case 'FAILED':
            image = __webpack_require__(/*! ./LogBoxImages/alert-triangle.png */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/alert-triangle.png");
            color = _LogBoxStyle.getErrorColor(1);
            break;
        case 'PENDING':
            image = __webpack_require__(/*! ./LogBoxImages/loader.png */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/loader.png");
            color = _LogBoxStyle.getWarningColor(1);
            break;
    }
    if (props.status === 'COMPLETE' || image == null) {
        return null;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_LogBoxButton.default, {
        backgroundColor: {
            default: 'transparent',
            pressed: _LogBoxStyle.getBackgroundColor(1)
        },
        hitSlop: {
            bottom: 8,
            left: 8,
            right: 8,
            top: 8
        },
        onPress: props.onPress,
        style: styles.root,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_Animated.default.Image, {
                source: image,
                style: [
                    styles.image,
                    {
                        tintColor: color
                    },
                    state.rotate == null || props.status !== 'PENDING' ? null : {
                        transform: [
                            {
                                rotate: state.rotate
                            }
                        ]
                    }
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                style: [
                    styles.text,
                    {
                        color
                    }
                ],
                children: "Source Map"
            })
        ]
    });
}
var styles = _StyleSheet.default.create({
    root: {
        alignItems: 'center',
        borderRadius: 12,
        flexDirection: 'row',
        height: 24,
        paddingHorizontal: 8
    },
    image: {
        height: 14,
        width: 16,
        marginEnd: 4,
        tintColor: _LogBoxStyle.getTextColor(0.4)
    },
    text: {
        fontSize: 12,
        includeFontPadding: false,
        lineHeight: 16
    }
});
var _default = LogBoxInspectorSourceMapStatus;


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrame.js": 
/*!************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrame.js ***!
  \************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _LogBoxButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxButton */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function LogBoxInspectorStackFrame(props) {
    var frame = props.frame, onPress = props.onPress;
    var column = frame.column != null && parseInt(frame.column, 10);
    var location = getFileName(frame.file) + (frame.lineNumber != null ? ':' + frame.lineNumber + (column && !isNaN(column) ? ':' + (column + 1) : '') : '');
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
        style: styles.frameContainer,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_LogBoxButton.default, {
            backgroundColor: {
                default: 'transparent',
                pressed: onPress ? _LogBoxStyle.getBackgroundColor(1) : 'transparent'
            },
            onPress: onPress,
            style: styles.frame,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                    style: [
                        styles.name,
                        frame.collapse === true && styles.dim
                    ],
                    children: frame.methodName
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                    ellipsizeMode: "middle",
                    numberOfLines: 1,
                    style: [
                        styles.location,
                        frame.collapse === true && styles.dim
                    ],
                    children: location
                })
            ]
        })
    });
}
function getFileName(file) {
    if (file == null) {
        return '<unknown>';
    }
    var queryIndex = file.indexOf('?');
    return file.substring(file.lastIndexOf('/') + 1, queryIndex === -1 ? file.length : queryIndex);
}
var styles = _StyleSheet.default.create({
    frameContainer: {
        flexDirection: 'row',
        paddingHorizontal: 15
    },
    frame: {
        flex: 1,
        paddingVertical: 4,
        paddingHorizontal: 10,
        borderRadius: 5
    },
    lineLocation: {
        flexDirection: 'row'
    },
    name: {
        color: _LogBoxStyle.getTextColor(1),
        fontSize: 14,
        includeFontPadding: false,
        lineHeight: 18,
        fontWeight: '400',
        fontFamily: _Platform.default.select({
            android: 'monospace',
            ios: 'Menlo'
        })
    },
    location: {
        color: _LogBoxStyle.getTextColor(0.8),
        fontSize: 12,
        fontWeight: '300',
        includeFontPadding: false,
        lineHeight: 16,
        paddingLeft: 10
    },
    dim: {
        color: _LogBoxStyle.getTextColor(0.4),
        fontWeight: '300'
    },
    line: {
        color: _LogBoxStyle.getTextColor(0.8),
        fontSize: 12,
        fontWeight: '300',
        includeFontPadding: false,
        lineHeight: 16
    }
});
var _default = LogBoxInspectorStackFrame;


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrames.js": 
/*!*************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrames.js ***!
  \*************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get getCollapseMessage () {
        return getCollapseMessage;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _openFileInEditor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Core/Devtools/openFileInEditor */ "./node_modules/react-native/Libraries/Core/Devtools/openFileInEditor.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _LogBoxButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxButton */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js"));
var _LogBoxInspectorSection = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxInspectorSection */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSection.js"));
var _LogBoxInspectorSourceMapStatus = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxInspectorSourceMapStatus */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSourceMapStatus.js"));
var _LogBoxInspectorStackFrame = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxInspectorStackFrame */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrame.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function getCollapseMessage(stackFrames, collapsed) {
    if (stackFrames.length === 0) {
        return 'No frames to show';
    }
    var collapsedCount = stackFrames.reduce((count, ref)=>{
        var collapse = ref.collapse;
        if (collapse === true) {
            return count + 1;
        }
        return count;
    }, 0);
    if (collapsedCount === 0) {
        return 'Showing all frames';
    }
    var framePlural = `frame${collapsedCount > 1 ? 's' : ''}`;
    if (collapsedCount === stackFrames.length) {
        return collapsed ? `See${collapsedCount > 1 ? ' all ' : ' '}${collapsedCount} collapsed ${framePlural}` : `Collapse${collapsedCount > 1 ? ' all ' : ' '}${collapsedCount} ${framePlural}`;
    } else {
        return collapsed ? `See ${collapsedCount} more ${framePlural}` : `Collapse ${collapsedCount} ${framePlural}`;
    }
}
function LogBoxInspectorStackFrames(props) {
    var _React_useState = _sliced_to_array._(_react.useState(()=>{
        // Only collapse frames initially if some frames are not collapsed.
        return props.log.getAvailableStack().some((ref)=>{
            var collapse = ref.collapse;
            return !collapse;
        });
    }), 2), collapsed = _React_useState[0], setCollapsed = _React_useState[1];
    function getStackList() {
        if (collapsed === true) {
            return props.log.getAvailableStack().filter((ref)=>{
                var collapse = ref.collapse;
                return !collapse;
            });
        } else {
            return props.log.getAvailableStack();
        }
    }
    if (props.log.getAvailableStack().length === 0) {
        return null;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_LogBoxInspectorSection.default, {
        heading: "Call Stack",
        action: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorSourceMapStatus.default, {
            onPress: props.log.symbolicated.status === 'FAILED' ? props.onRetry : null,
            status: props.log.symbolicated.status
        }),
        children: [
            props.log.symbolicated.status !== 'COMPLETE' && /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                style: stackStyles.hintBox,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                    style: stackStyles.hintText,
                    children: "This call stack is not symbolicated. Some features are unavailable such as viewing the function name or tapping to open files."
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(StackFrameList, {
                list: getStackList(),
                status: props.log.symbolicated.status
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(StackFrameFooter, {
                onPress: ()=>setCollapsed(!collapsed),
                message: getCollapseMessage(props.log.getAvailableStack(), collapsed)
            })
        ]
    });
}
function StackFrameList(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: props.list.map((frame, index)=>{
            var file = frame.file, lineNumber = frame.lineNumber;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxInspectorStackFrame.default, {
                frame: frame,
                onPress: props.status === 'COMPLETE' && file != null && lineNumber != null ? ()=>(0, _openFileInEditor.default)(file, lineNumber) : null
            }, index);
        })
    });
}
function StackFrameFooter(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
        style: stackStyles.collapseContainer,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxButton.default, {
            backgroundColor: {
                default: 'transparent',
                pressed: _LogBoxStyle.getBackgroundColor(1)
            },
            onPress: props.onPress,
            style: stackStyles.collapseButton,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                style: stackStyles.collapse,
                children: props.message
            })
        })
    });
}
var stackStyles = _StyleSheet.default.create({
    section: {
        marginTop: 15
    },
    heading: {
        alignItems: 'center',
        flexDirection: 'row',
        paddingHorizontal: 12,
        marginBottom: 10
    },
    headingText: {
        color: _LogBoxStyle.getTextColor(1),
        flex: 1,
        fontSize: 20,
        fontWeight: '600',
        includeFontPadding: false,
        lineHeight: 20
    },
    body: {
        paddingBottom: 10
    },
    bodyText: {
        color: _LogBoxStyle.getTextColor(1),
        fontSize: 14,
        includeFontPadding: false,
        lineHeight: 18,
        fontWeight: '500',
        paddingHorizontal: 27
    },
    hintText: {
        color: _LogBoxStyle.getTextColor(0.7),
        fontSize: 13,
        includeFontPadding: false,
        lineHeight: 18,
        fontWeight: '400',
        marginHorizontal: 10
    },
    hintBox: {
        backgroundColor: _LogBoxStyle.getBackgroundColor(),
        marginHorizontal: 10,
        paddingHorizontal: 5,
        paddingVertical: 10,
        borderRadius: 5,
        marginBottom: 5
    },
    collapseContainer: {
        marginLeft: 15,
        flexDirection: 'row'
    },
    collapseButton: {
        borderRadius: 5
    },
    collapse: {
        color: _LogBoxStyle.getTextColor(0.7),
        fontSize: 12,
        fontWeight: '300',
        lineHeight: 20,
        marginTop: 0,
        paddingHorizontal: 10,
        paddingVertical: 5
    }
});
var _default = LogBoxInspectorStackFrames;


}),
"./node_modules/react-native/Libraries/Modal/Modal.js": 
/*!************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Modal/Modal.js ***!
  \************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../EventEmitter/NativeEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js"));
var _ModalInjection = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./ModalInjection */ "./node_modules/react-native/Libraries/Modal/ModalInjection.js"));
var _NativeModalManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeModalManager */ "./node_modules/react-native/Libraries/Modal/NativeModalManager.js"));
var _RCTModalHostViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./RCTModalHostViewNativeComponent */ "./node_modules/react-native/Libraries/Modal/RCTModalHostViewNativeComponent.js"));
var _virtualizedlists = __webpack_require__(/*! @react-native/virtualized-lists */ "webpack/sharing/consume/default/@react-native/virtualized-lists/@react-native/virtualized-lists");
var ScrollView = __webpack_require__(/*! ../Components/ScrollView/ScrollView */ "./node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js");
var View = __webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js");
var AppContainer = __webpack_require__(/*! ../ReactNative/AppContainer */ "./node_modules/react-native/Libraries/ReactNative/AppContainer.js");
var I18nManager = __webpack_require__(/*! ../ReactNative/I18nManager */ "./node_modules/react-native/Libraries/ReactNative/I18nManager.js");
var RootTagContext = (__webpack_require__(/*! ../ReactNative/RootTag */ "./node_modules/react-native/Libraries/ReactNative/RootTag.js")/* .RootTagContext */.RootTagContext);
var StyleSheet = __webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js");
var Platform = __webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js");
var React = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
var ModalEventEmitter = Platform.OS === 'ios' && _NativeModalManager.default != null ? new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
// If you want to use the native module on other platforms, please remove this condition and test its behavior
Platform.OS !== 'ios' ? null : _NativeModalManager.default) : null;
/**
 * The Modal component is a simple way to present content above an enclosing view.
 *
 * See https://reactnative.dev/docs/modal
 */ // In order to route onDismiss callbacks, we need to uniquely identifier each
// <Modal> on screen. There can be different ones, either nested or as siblings.
// We cannot pass the onDismiss callback to native as the view will be
// destroyed before the callback is fired.
var uniqueModalIdentifier = 0;
function confirmProps(props) {
    if (true) {
        if (props.presentationStyle && props.presentationStyle !== 'overFullScreen' && props.transparent === true) {
            console.warn(`Modal with '${props.presentationStyle}' presentation style and 'transparent' value is not supported.`);
        }
        if (props.navigationBarTranslucent === true && props.statusBarTranslucent !== true) {
            console.warn('Modal with translucent navigation bar and without translucent status bar is not supported.');
        }
    }
}
// Create a state to track whether the Modal is rendering or not.
// This is the only prop that controls whether the modal is rendered or not.
var Modal = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(Modal, _React_Component);
    function Modal(props) {
        _class_call_check._(this, Modal);
        var _this;
        _this = _call_super._(this, Modal, [
            props
        ]);
        if (true) {
            confirmProps(props);
        }
        _this._identifier = uniqueModalIdentifier++;
        _this.state = {
            isRendered: props.visible === true
        };
        return _this;
    }
    _create_class._(Modal, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                // 'modalDismissed' is for the old renderer in iOS only
                if (ModalEventEmitter) {
                    this._eventSubscription = ModalEventEmitter.addListener('modalDismissed', (event)=>{
                        this.setState({
                            isRendered: false
                        }, ()=>{
                            if (event.modalID === this._identifier && this.props.onDismiss) {
                                this.props.onDismiss();
                            }
                        });
                    });
                }
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                if (Platform.OS === 'ios') {
                    this.setState({
                        isRendered: false
                    });
                }
                if (this._eventSubscription) {
                    this._eventSubscription.remove();
                }
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                if (prevProps.visible === false && this.props.visible === true) {
                    this.setState({
                        isRendered: true
                    });
                }
                if (true) {
                    confirmProps(this.props);
                }
            }
        },
        {
            // Helper function to encapsulate platform specific logic to show or not the Modal.
            key: "_shouldShowModal",
            value: function _shouldShowModal() {
                if (Platform.OS === 'ios') {
                    return this.props.visible === true || this.state.isRendered === true;
                }
                return this.props.visible === true;
            }
        },
        {
            key: "render",
            value: function render() {
                if (!this._shouldShowModal()) {
                    return null;
                }
                var containerStyles = {
                    backgroundColor: this.props.transparent === true ? 'transparent' : this.props.backdropColor ?? 'white'
                };
                var animationType = this.props.animationType || 'none';
                var presentationStyle = this.props.presentationStyle;
                if (!presentationStyle) {
                    presentationStyle = 'fullScreen';
                    if (this.props.transparent === true) {
                        presentationStyle = 'overFullScreen';
                    }
                }
                var innerChildren =  true ? /*#__PURE__*/ (0, _jsxruntime.jsx)(AppContainer, {
                    rootTag: this.context,
                    children: this.props.children
                }) : 0;
                var onDismiss = ()=>{
                    // OnDismiss is implemented on iOS only.
                    if (Platform.OS === 'ios') {
                        this.setState({
                            isRendered: false
                        }, ()=>{
                            if (this.props.onDismiss) {
                                this.props.onDismiss();
                            }
                        });
                    }
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_RCTModalHostViewNativeComponent.default, {
                    animationType: animationType,
                    presentationStyle: presentationStyle,
                    transparent: this.props.transparent,
                    hardwareAccelerated: this.props.hardwareAccelerated,
                    onRequestClose: this.props.onRequestClose,
                    onShow: this.props.onShow,
                    onDismiss: onDismiss,
                    visible: this.props.visible,
                    statusBarTranslucent: this.props.statusBarTranslucent,
                    navigationBarTranslucent: this.props.navigationBarTranslucent,
                    identifier: this._identifier,
                    style: styles.modal,
                    // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                    onStartShouldSetResponder: this._shouldSetResponder,
                    supportedOrientations: this.props.supportedOrientations,
                    onOrientationChange: this.props.onOrientationChange,
                    testID: this.props.testID,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_virtualizedlists.VirtualizedListContextResetter, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ScrollView.Context.Provider, {
                            value: null,
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                                // $FlowFixMe[incompatible-type]
                                style: [
                                    styles.container,
                                    containerStyles
                                ],
                                collapsable: false,
                                children: innerChildren
                            })
                        })
                    })
                });
            }
        },
        {
            // We don't want any responder events bubbling out of the modal.
            key: "_shouldSetResponder",
            value: function _shouldSetResponder() {
                return true;
            }
        }
    ]);
    return Modal;
}(React.Component);
Modal.defaultProps = {
    visible: true,
    hardwareAccelerated: false
};
Modal.contextType = RootTagContext;
var side = I18nManager.getConstants().isRTL ? 'right' : 'left';
var styles = StyleSheet.create({
    modal: {
        position: 'absolute'
    },
    container: {
        /* $FlowFixMe[invalid-computed-prop] (>=0.111.0 site=react_native_fb) This
     * comment suppresses an error found when Flow v0.111 was deployed. To see
     * the error, delete this comment and run Flow. */ // $FlowFixMe[incompatible-call]
        [side]: 0,
        top: 0,
        flex: 1
    }
});
var ExportedModal = _ModalInjection.default.unstable_Modal ?? Modal;
module.exports = ExportedModal;


}),
"./node_modules/react-native/Libraries/Modal/ModalInjection.js": 
/*!*********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Modal/ModalInjection.js ***!
  \*********************************************************************/
(function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _default = {
    unstable_Modal: null
};


}),
"./node_modules/react-native/Libraries/PermissionsAndroid/PermissionsAndroid.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/PermissionsAndroid/PermissionsAndroid.js ***!
  \**************************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _async_to_generator = __webpack_require__(/*! @swc/helpers/_/_async_to_generator */ "./node_modules/@swc/helpers/cjs/_async_to_generator.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _NativeDialogManagerAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../NativeModules/specs/NativeDialogManagerAndroid */ "./node_modules/react-native/Libraries/NativeModules/specs/NativeDialogManagerAndroid.js"));
var _NativePermissionsAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativePermissionsAndroid */ "./node_modules/react-native/Libraries/PermissionsAndroid/NativePermissionsAndroid.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var Platform = __webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js");
var PERMISSION_REQUEST_RESULT = Object.freeze({
    GRANTED: 'granted',
    DENIED: 'denied',
    NEVER_ASK_AGAIN: 'never_ask_again'
});
var PERMISSIONS = Object.freeze({
    READ_CALENDAR: 'android.permission.READ_CALENDAR',
    WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
    CAMERA: 'android.permission.CAMERA',
    READ_CONTACTS: 'android.permission.READ_CONTACTS',
    WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
    GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
    ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
    ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
    ACCESS_BACKGROUND_LOCATION: 'android.permission.ACCESS_BACKGROUND_LOCATION',
    RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
    READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
    CALL_PHONE: 'android.permission.CALL_PHONE',
    READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
    WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
    ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
    READ_VOICEMAIL: 'com.android.voicemail.permission.READ_VOICEMAIL',
    WRITE_VOICEMAIL: 'com.android.voicemail.permission.WRITE_VOICEMAIL',
    USE_SIP: 'android.permission.USE_SIP',
    PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
    BODY_SENSORS: 'android.permission.BODY_SENSORS',
    BODY_SENSORS_BACKGROUND: 'android.permission.BODY_SENSORS_BACKGROUND',
    SEND_SMS: 'android.permission.SEND_SMS',
    RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
    READ_SMS: 'android.permission.READ_SMS',
    RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
    RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
    READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
    READ_MEDIA_IMAGES: 'android.permission.READ_MEDIA_IMAGES',
    READ_MEDIA_VIDEO: 'android.permission.READ_MEDIA_VIDEO',
    READ_MEDIA_AUDIO: 'android.permission.READ_MEDIA_AUDIO',
    READ_MEDIA_VISUAL_USER_SELECTED: 'android.permission.READ_MEDIA_VISUAL_USER_SELECTED',
    WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE',
    BLUETOOTH_CONNECT: 'android.permission.BLUETOOTH_CONNECT',
    BLUETOOTH_SCAN: 'android.permission.BLUETOOTH_SCAN',
    BLUETOOTH_ADVERTISE: 'android.permission.BLUETOOTH_ADVERTISE',
    ACCESS_MEDIA_LOCATION: 'android.permission.ACCESS_MEDIA_LOCATION',
    ACCEPT_HANDOVER: 'android.permission.ACCEPT_HANDOVER',
    ACTIVITY_RECOGNITION: 'android.permission.ACTIVITY_RECOGNITION',
    ANSWER_PHONE_CALLS: 'android.permission.ANSWER_PHONE_CALLS',
    READ_PHONE_NUMBERS: 'android.permission.READ_PHONE_NUMBERS',
    UWB_RANGING: 'android.permission.UWB_RANGING',
    POST_NOTIFICATIONS: 'android.permission.POST_NOTIFICATIONS',
    NEARBY_WIFI_DEVICES: 'android.permission.NEARBY_WIFI_DEVICES'
});
/**
 * `PermissionsAndroid` provides access to Android M's new permissions model.
 *
 * See https://reactnative.dev/docs/permissionsandroid
 */ var PermissionsAndroid = /*#__PURE__*/ function() {
    "use strict";
    function PermissionsAndroid() {
        _class_call_check._(this, PermissionsAndroid);
        this.PERMISSIONS = PERMISSIONS;
        this.RESULTS = PERMISSION_REQUEST_RESULT;
    }
    _create_class._(PermissionsAndroid, [
        {
            /**
   * DEPRECATED - use check
   *
   * Returns a promise resolving to a boolean value as to whether the specified
   * permissions has been granted
   *
   * @deprecated
   */ key: "checkPermission",
            value: function checkPermission(permission) {
                console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
                if (Platform.OS !== 'android') {
                    console.warn('"PermissionsAndroid" module works only for Android platform.');
                    return Promise.resolve(false);
                }
                (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
                return _NativePermissionsAndroid.default.checkPermission(permission);
            }
        },
        {
            /**
   * Returns a promise resolving to a boolean value as to whether the specified
   * permissions has been granted
   *
   * See https://reactnative.dev/docs/permissionsandroid#check
   */ key: "check",
            value: function check(permission) {
                if (Platform.OS !== 'android') {
                    console.warn('"PermissionsAndroid" module works only for Android platform.');
                    return Promise.resolve(false);
                }
                (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
                return _NativePermissionsAndroid.default.checkPermission(permission);
            }
        },
        {
            key: "requestPermission",
            value: /**
   * DEPRECATED - use request
   *
   * Prompts the user to enable a permission and returns a promise resolving to a
   * boolean value indicating whether the user allowed or denied the request
   *
   * If the optional rationale argument is included (which is an object with a
   * `title` and `message`), this function checks with the OS whether it is
   * necessary to show a dialog explaining why the permission is needed
   * (https://developer.android.com/training/permissions/requesting#explain)
   * and then shows the system permission dialog
   *
   * @deprecated
   */ function requestPermission(permission, rationale) {
                return _async_to_generator._(function*() {
                    console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
                    if (Platform.OS !== 'android') {
                        console.warn('"PermissionsAndroid" module works only for Android platform.');
                        return Promise.resolve(false);
                    }
                    var response = yield this.request(permission, rationale);
                    return response === this.RESULTS.GRANTED;
                }).call(this);
            }
        },
        {
            key: "request",
            value: /**
   * Prompts the user to enable a permission and returns a promise resolving to a
   * string value indicating whether the user allowed or denied the request
   *
   * See https://reactnative.dev/docs/permissionsandroid#request
   */ function request(permission, rationale) {
                return _async_to_generator._(function*() {
                    if (Platform.OS !== 'android') {
                        console.warn('"PermissionsAndroid" module works only for Android platform.');
                        return Promise.resolve(this.RESULTS.DENIED);
                    }
                    (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
                    if (rationale) {
                        var shouldShowRationale = yield _NativePermissionsAndroid.default.shouldShowRequestPermissionRationale(permission);
                        if (shouldShowRationale && !!_NativeDialogManagerAndroid.default) {
                            return new Promise((resolve, reject)=>{
                                var options = _object_spread._({}, rationale);
                                _NativeDialogManagerAndroid.default.showAlert(/* $FlowFixMe[incompatible-exact] (>=0.111.0 site=react_native_fb)
             * This comment suppresses an error found when Flow v0.111 was
             * deployed. To see the error, delete this comment and run Flow.
             */ options, ()=>reject(new Error('Error showing rationale')), ()=>resolve(_NativePermissionsAndroid.default.requestPermission(permission)));
                            });
                        }
                    }
                    return _NativePermissionsAndroid.default.requestPermission(permission);
                }).call(this);
            }
        },
        {
            /**
   * Prompts the user to enable multiple permissions in the same dialog and
   * returns an object with the permissions as keys and strings as values
   * indicating whether the user allowed or denied the request
   *
   * See https://reactnative.dev/docs/permissionsandroid#requestmultiple
   */ key: "requestMultiple",
            value: function requestMultiple(permissions) {
                if (Platform.OS !== 'android') {
                    console.warn('"PermissionsAndroid" module works only for Android platform.');
                    return Promise.resolve({});
                }
                (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
                return _NativePermissionsAndroid.default.requestMultiplePermissions(permissions);
            }
        }
    ]);
    return PermissionsAndroid;
}();
var PermissionsAndroidInstance = new PermissionsAndroid();
module.exports = PermissionsAndroidInstance;


}),
"./node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js ***!
  \****************************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../EventEmitter/NativeEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _NativePushNotificationManagerIOS = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativePushNotificationManagerIOS */ "./node_modules/react-native/Libraries/PushNotificationIOS/NativePushNotificationManagerIOS.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var PushNotificationEmitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
// If you want to use the native module on other platforms, please remove this condition and test its behavior
_Platform.default.OS !== 'ios' ? null : _NativePushNotificationManagerIOS.default);
var _notifHandlers = new Map();
var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';
/**
 * An event emitted by PushNotificationIOS.
 */ /**
 *
 * Handle notifications for your app, including scheduling and permissions.
 *
 * See https://reactnative.dev/docs/pushnotificationios
 */ var PushNotificationIOS = /*#__PURE__*/ function() {
    "use strict";
    function PushNotificationIOS(nativeNotif) {
        _class_call_check._(this, PushNotificationIOS);
        this._data = {};
        this._remoteNotificationCompleteCallbackCalled = false;
        this._isRemote = nativeNotif.remote;
        if (this._isRemote) {
            this._notificationId = nativeNotif.notificationId;
        }
        if (nativeNotif.remote) {
            // Extract data from Apple's `aps` dict as defined:
            // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService
            Object.keys(nativeNotif).forEach((notifKey)=>{
                var notifVal = nativeNotif[notifKey];
                if (notifKey === 'aps') {
                    this._alert = notifVal.alert;
                    this._sound = notifVal.sound;
                    this._badgeCount = notifVal.badge;
                    this._category = notifVal.category;
                    this._contentAvailable = notifVal['content-available'];
                    this._threadID = notifVal['thread-id'];
                } else {
                    this._data[notifKey] = notifVal;
                }
            });
        } else {
            // Local notifications aren't being sent down with `aps` dict.
            this._badgeCount = nativeNotif.applicationIconBadgeNumber;
            this._sound = nativeNotif.soundName;
            this._alert = nativeNotif.alertBody;
            this._data = nativeNotif.userInfo;
            this._category = nativeNotif.category;
        }
    }
    _create_class._(PushNotificationIOS, [
        {
            /**
   * This method is available for remote notifications that have been received via:
   * `application:didReceiveRemoteNotification:fetchCompletionHandler:`. See docs
   * for more information.
   *
   * See https://reactnative.dev/docs/pushnotificationios#finish
   */ key: "finish",
            value: function finish(fetchResult) {
                if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
                    return;
                }
                this._remoteNotificationCompleteCallbackCalled = true;
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.onFinishRemoteNotification(this._notificationId, fetchResult);
            }
        },
        {
            /**
   * An alias for `getAlert` to get the notification's main message string.
   */ key: "getMessage",
            value: function getMessage() {
                // alias because "alert" is an ambiguous name
                return this._alert;
            }
        },
        {
            /**
   * Gets the sound string from the `aps` object. This will be `null` for local
   * notifications.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getsound
   */ key: "getSound",
            value: function getSound() {
                return this._sound;
            }
        },
        {
            /**
   * Gets the category string from the `aps` object.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getcategory
   */ key: "getCategory",
            value: function getCategory() {
                return this._category;
            }
        },
        {
            /**
   * Gets the notification's main message from the `aps` object. Also see the
   * alias: `getMessage()`.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getalert
   */ key: "getAlert",
            value: function getAlert() {
                return this._alert;
            }
        },
        {
            /**
   * Gets the content-available number from the `aps` object.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getcontentavailable
   */ key: "getContentAvailable",
            value: function getContentAvailable() {
                return this._contentAvailable;
            }
        },
        {
            /**
   * Gets the badge count number from the `aps` object.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getbadgecount
   */ key: "getBadgeCount",
            value: function getBadgeCount() {
                return this._badgeCount;
            }
        },
        {
            /**
   * Gets the data object on the notification.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getdata
   */ key: "getData",
            value: function getData() {
                return this._data;
            }
        },
        {
            /**
   * Gets the thread ID on the notification.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getthreadid
   */ key: "getThreadID",
            value: function getThreadID() {
                return this._threadID;
            }
        }
    ], [
        {
            key: "presentLocalNotification",
            value: /**
   * Schedules a local notification for immediate presentation.
   *
   * See https://reactnative.dev/docs/pushnotificationios#presentlocalnotification
   */ function presentLocalNotification(details) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.presentLocalNotification(details);
            }
        },
        {
            key: "scheduleLocalNotification",
            value: /**
   * Schedules a local notification for future presentation.
   *
   * See https://reactnative.dev/docs/pushnotificationios#schedulelocalnotification
   */ function scheduleLocalNotification(details) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.scheduleLocalNotification(details);
            }
        },
        {
            key: "cancelAllLocalNotifications",
            value: /**
   * Cancels all scheduled local notifications.
   *
   * See https://reactnative.dev/docs/pushnotificationios#cancelalllocalnotifications
   */ function cancelAllLocalNotifications() {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.cancelAllLocalNotifications();
            }
        },
        {
            key: "removeAllDeliveredNotifications",
            value: /**
   * Removes all delivered notifications from Notification Center.
   *
   * See https://reactnative.dev/docs/pushnotificationios#removealldeliverednotifications
   */ function removeAllDeliveredNotifications() {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.removeAllDeliveredNotifications();
            }
        },
        {
            key: "getDeliveredNotifications",
            value: /**
   * Provides a list of the app’s notifications that are currently displayed
   * in Notification Center.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getdeliverednotifications
   */ function getDeliveredNotifications(callback) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.getDeliveredNotifications(callback);
            }
        },
        {
            key: "removeDeliveredNotifications",
            value: /**
   * Removes the specified notifications from Notification Center.
   *
   * See https://reactnative.dev/docs/pushnotificationios#removedeliverednotifications
   */ function removeDeliveredNotifications(identifiers) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.removeDeliveredNotifications(identifiers);
            }
        },
        {
            key: "setApplicationIconBadgeNumber",
            value: /**
   * Sets the badge number for the app icon on the Home Screen.
   *
   * See https://reactnative.dev/docs/pushnotificationios#setapplicationiconbadgenumber
   */ function setApplicationIconBadgeNumber(number) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.setApplicationIconBadgeNumber(number);
            }
        },
        {
            key: "getApplicationIconBadgeNumber",
            value: /**
   * Gets the current badge number for the app icon on the Home Screen.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getapplicationiconbadgenumber
   */ function getApplicationIconBadgeNumber(callback) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.getApplicationIconBadgeNumber(callback);
            }
        },
        {
            key: "cancelLocalNotifications",
            value: /**
   * Cancels any scheduled local notifications which match the fields in the
   * provided `userInfo`.
   *
   * See https://reactnative.dev/docs/pushnotificationios#cancellocalnotification
   */ function cancelLocalNotifications(userInfo) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.cancelLocalNotifications(userInfo);
            }
        },
        {
            key: "getScheduledLocalNotifications",
            value: /**
   * Gets the list of local notifications that are currently scheduled.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getscheduledlocalnotifications
   */ function getScheduledLocalNotifications(callback) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.getScheduledLocalNotifications(callback);
            }
        },
        {
            key: "addEventListener",
            value: /**
   * Attaches a listener to notification events including local notifications,
   * remote notifications, and notification registration results.
   *
   * See https://reactnative.dev/docs/pushnotificationios#addeventlistener
   */ function addEventListener(type, handler) {
                (0, _invariant.default)(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
                var listener;
                if (type === 'notification') {
                    listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, (notifData)=>{
                        handler(new PushNotificationIOS(notifData));
                    });
                } else if (type === 'localNotification') {
                    listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, (notifData)=>{
                        handler(new PushNotificationIOS(notifData));
                    });
                } else if (type === 'register') {
                    listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, (registrationInfo)=>{
                        handler(registrationInfo.deviceToken);
                    });
                } else if (type === 'registrationError') {
                    listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, (errorInfo)=>{
                        handler(errorInfo);
                    });
                }
                _notifHandlers.set(type, listener);
            }
        },
        {
            key: "removeEventListener",
            value: /**
   * Removes the event listener. Do this in `componentWillUnmount` to prevent
   * memory leaks.
   *
   * See https://reactnative.dev/docs/pushnotificationios#removeeventlistener
   */ function removeEventListener(type) {
                (0, _invariant.default)(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
                var listener = _notifHandlers.get(type);
                if (!listener) {
                    return;
                }
                listener.remove();
                _notifHandlers.delete(type);
            }
        },
        {
            key: "requestPermissions",
            value: /**
   * Requests notification permissions from iOS, prompting the user with a
   * dialog box. By default, it will request all notification permissions, but
   * you can optionally specify which permissions to request.
   *
   * See https://reactnative.dev/docs/pushnotificationios#requestpermissions
   */ function requestPermissions(permissions) {
                var requestedPermissions = {
                    alert: true,
                    badge: true,
                    sound: true
                };
                if (permissions) {
                    requestedPermissions = {
                        alert: !!permissions.alert,
                        badge: !!permissions.badge,
                        sound: !!permissions.sound
                    };
                }
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                return _NativePushNotificationManagerIOS.default.requestPermissions(requestedPermissions);
            }
        },
        {
            key: "abandonPermissions",
            value: /**
   * Unregister for all remote notifications received via Apple Push Notification
   * service. This should be called in rare circumstances only.
   *
   * See https://reactnative.dev/docs/pushnotificationios#abandonpermissions
   */ function abandonPermissions() {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.abandonPermissions();
            }
        },
        {
            key: "checkPermissions",
            value: /**
   * Check which push permissions are currently enabled. `callback` will be
   * invoked with a `Permissions` object.
   *
   * See https://reactnative.dev/docs/pushnotificationios#checkpermissions
   */ function checkPermissions(callback) {
                (0, _invariant.default)(typeof callback === 'function', 'Must provide a valid callback');
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.checkPermissions(callback);
            }
        },
        {
            key: "getInitialNotification",
            value: /**
   * This method returns a promise that resolves to either the notification
   * object if the app was launched by a push notification, or `null` otherwise.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getinitialnotification
   */ function getInitialNotification() {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                return _NativePushNotificationManagerIOS.default.getInitialNotification().then((notification)=>{
                    return notification && new PushNotificationIOS(notification);
                });
            }
        },
        {
            key: "getAuthorizationStatus",
            value: /**
   * This method returns a promise that resolves to the current notification
   * authorization status. See UNAuthorizationStatus for possible values.
   */ function getAuthorizationStatus(callback) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.getAuthorizationStatus(callback);
            }
        }
    ]);
    return PushNotificationIOS;
}();
PushNotificationIOS.FetchResult = {
    NewData: 'UIBackgroundFetchResultNewData',
    NoData: 'UIBackgroundFetchResultNoData',
    ResultFailed: 'UIBackgroundFetchResultFailed'
};
module.exports = PushNotificationIOS;


}),
"./node_modules/react-native/Libraries/ReactNative/AppRegistry.js": 
/*!************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/ReactNative/AppRegistry.js ***!
  \************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _BugReporting = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../BugReporting/BugReporting */ "./node_modules/react-native/Libraries/BugReporting/BugReporting.js"));
var _registerCallableModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Core/registerCallableModule */ "./node_modules/react-native/Libraries/Core/registerCallableModule.js"));
var _createPerformanceLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/createPerformanceLogger */ "./node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js"));
var _infoLog = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/infoLog */ "./node_modules/react-native/Libraries/Utilities/infoLog.js"));
var _SceneTracker = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/SceneTracker */ "./node_modules/react-native/Libraries/Utilities/SceneTracker.js"));
var _DisplayMode = __webpack_require__(/*! ./DisplayMode */ "./node_modules/react-native/Libraries/ReactNative/DisplayMode.js");
var _HeadlessJsTaskError = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./HeadlessJsTaskError */ "./node_modules/react-native/Libraries/ReactNative/HeadlessJsTaskError.js"));
var _NativeHeadlessJsTaskSupport = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeHeadlessJsTaskSupport */ "./node_modules/react-native/Libraries/ReactNative/NativeHeadlessJsTaskSupport.js"));
var _renderApplication = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./renderApplication */ "./node_modules/react-native/Libraries/ReactNative/renderApplication.js"));
var _RendererProxy = __webpack_require__(/*! ./RendererProxy */ "./node_modules/react-native/Libraries/ReactNative/RendererProxy.js");
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var runnables = {};
var runCount = 1;
var sections = {};
var taskProviders = new Map();
var taskCancelProviders = new Map();
var componentProviderInstrumentationHook = (component)=>component();
var wrapperComponentProvider;
var rootViewStyleProvider;
/**
 * `AppRegistry` is the JavaScript entry point to running all React Native apps.
 *
 * See https://reactnative.dev/docs/appregistry
 */ var AppRegistry = {
    setWrapperComponentProvider (provider) {
        wrapperComponentProvider = provider;
    },
    setRootViewStyleProvider (provider) {
        rootViewStyleProvider = provider;
    },
    registerConfig (config) {
        config.forEach((appConfig)=>{
            if (appConfig.run) {
                AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
            } else {
                (0, _invariant.default)(appConfig.component != null, 'AppRegistry.registerConfig(...): Every config is expected to set ' + 'either `run` or `component`, but `%s` has neither.', appConfig.appKey);
                AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
            }
        });
    },
    /**
   * Registers an app's root component.
   *
   * See https://reactnative.dev/docs/appregistry#registercomponent
   */ registerComponent (appKey, componentProvider, section) {
        var scopedPerformanceLogger = (0, _createPerformanceLogger.default)();
        runnables[appKey] = (appParameters, displayMode)=>{
            (0, _renderApplication.default)(componentProviderInstrumentationHook(componentProvider, scopedPerformanceLogger), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters), rootViewStyleProvider && rootViewStyleProvider(appParameters), appParameters.fabric, scopedPerformanceLogger, appKey === 'LogBox', appKey, displayMode);
        };
        if (section) {
            sections[appKey] = runnables[appKey];
        }
        return appKey;
    },
    registerRunnable (appKey, run) {
        runnables[appKey] = run;
        return appKey;
    },
    registerSection (appKey, component) {
        AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys () {
        return Object.keys(runnables);
    },
    getSectionKeys () {
        return Object.keys(sections);
    },
    getSections () {
        return _object_spread._({}, sections);
    },
    getRunnable (appKey) {
        return runnables[appKey];
    },
    getRegistry () {
        return {
            sections: AppRegistry.getSectionKeys(),
            runnables: _object_spread._({}, runnables)
        };
    },
    setComponentProviderInstrumentationHook (hook) {
        componentProviderInstrumentationHook = hook;
    },
    /**
   * Loads the JavaScript bundle and runs the app.
   *
   * See https://reactnative.dev/docs/appregistry#runapplication
   */ runApplication (appKey, appParameters, displayMode) {
        if (appKey !== 'LogBox') {
            var logParams =  true ? ` with ${JSON.stringify(appParameters)}` : 0;
            var msg = `Running "${appKey}"${logParams}`;
            (0, _infoLog.default)(msg);
            _BugReporting.default.addSource('AppRegistry.runApplication' + runCount++, ()=>msg);
        }
        (0, _invariant.default)(runnables[appKey], `"${appKey}" has not been registered. This can happen if:\n` + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
        _SceneTracker.default.setActiveScene({
            name: appKey
        });
        runnables[appKey](appParameters, (0, _DisplayMode.coerceDisplayMode)(displayMode));
    },
    /**
   * Update initial props for a surface that's already rendered
   */ setSurfaceProps (appKey, appParameters, displayMode) {
        if (appKey !== 'LogBox') {
            var msg = 'Updating props for Surface "' + appKey + '" with ' + JSON.stringify(appParameters);
            (0, _infoLog.default)(msg);
            _BugReporting.default.addSource('AppRegistry.setSurfaceProps' + runCount++, ()=>msg);
        }
        (0, _invariant.default)(runnables[appKey], `"${appKey}" has not been registered. This can happen if:\n` + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
        runnables[appKey](appParameters, (0, _DisplayMode.coerceDisplayMode)(displayMode));
    },
    /**
   * Stops an application when a view should be destroyed.
   *
   * See https://reactnative.dev/docs/appregistry#unmountapplicationcomponentatroottag
   */ unmountApplicationComponentAtRootTag (rootTag) {
        (0, _RendererProxy.unmountComponentAtNodeAndRemoveContainer)(rootTag);
    },
    /**
   * Register a headless task. A headless task is a bit of code that runs without a UI.
   *
   * See https://reactnative.dev/docs/appregistry#registerheadlesstask
   */ registerHeadlessTask (taskKey, taskProvider) {
        // $FlowFixMe[object-this-reference]
        this.registerCancellableHeadlessTask(taskKey, taskProvider, ()=>()=>{
            /* Cancel is no-op */ });
    },
    /**
   * Register a cancellable headless task. A headless task is a bit of code that runs without a UI.
   *
   * See https://reactnative.dev/docs/appregistry#registercancellableheadlesstask
   */ registerCancellableHeadlessTask (taskKey, taskProvider, taskCancelProvider) {
        if (taskProviders.has(taskKey)) {
            console.warn(`registerHeadlessTask or registerCancellableHeadlessTask called multiple times for same key '${taskKey}'`);
        }
        taskProviders.set(taskKey, taskProvider);
        taskCancelProviders.set(taskKey, taskCancelProvider);
    },
    /**
   * Only called from native code. Starts a headless task.
   *
   * See https://reactnative.dev/docs/appregistry#startheadlesstask
   */ startHeadlessTask (taskId, taskKey, data) {
        var taskProvider = taskProviders.get(taskKey);
        if (!taskProvider) {
            console.warn(`No task registered for key ${taskKey}`);
            if (_NativeHeadlessJsTaskSupport.default) {
                _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
            }
            return;
        }
        taskProvider()(data).then(()=>{
            if (_NativeHeadlessJsTaskSupport.default) {
                _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
            }
        }).catch((reason)=>{
            console.error(reason);
            if (_NativeHeadlessJsTaskSupport.default && reason instanceof _HeadlessJsTaskError.default) {
                // $FlowFixMe[unused-promise]
                _NativeHeadlessJsTaskSupport.default.notifyTaskRetry(taskId).then((retryPosted)=>{
                    if (!retryPosted) {
                        _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
                    }
                });
            }
        });
    },
    /**
   * Only called from native code. Cancels a headless task.
   *
   * See https://reactnative.dev/docs/appregistry#cancelheadlesstask
   */ cancelHeadlessTask (taskId, taskKey) {
        var taskCancelProvider = taskCancelProviders.get(taskKey);
        if (!taskCancelProvider) {
            throw new Error(`No task canceller registered for key '${taskKey}'`);
        }
        taskCancelProvider()();
    }
};
// Register LogBox as a default surface
AppRegistry.registerComponent('LogBox', ()=>{
    if ( true && typeof jest === 'undefined') {
        return (__webpack_require__(/*! ../LogBox/LogBoxInspectorContainer */ "./node_modules/react-native/Libraries/LogBox/LogBoxInspectorContainer.js")/* ["default"] */["default"]);
    } else {
        return function NoOp() {
            return null;
        };
    }
});
__webpack_require__.g.RN$AppRegistry = AppRegistry;
// Backwards compat with SurfaceRegistry, remove me later
__webpack_require__.g.RN$SurfaceRegistry = {
    renderSurface: AppRegistry.runApplication,
    setSurfaceProps: AppRegistry.setSurfaceProps
};
(0, _registerCallableModule.default)('AppRegistry', AppRegistry);
module.exports = AppRegistry;


}),
"./node_modules/react-native/Libraries/ReactNative/DisplayMode.js": 
/*!************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/ReactNative/DisplayMode.js ***!
  \************************************************************************/
(function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ /** DisplayMode should be in sync with the method displayModeToInt from
 * react/renderer/uimanager/primitives.h. */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get coerceDisplayMode () {
        return coerceDisplayMode;
    },
    get default () {
        return _default;
    }
});
var DisplayMode = Object.freeze({
    VISIBLE: 1,
    SUSPENDED: 2,
    HIDDEN: 3
});
function coerceDisplayMode(value) {
    switch(value){
        case DisplayMode.SUSPENDED:
            return DisplayMode.SUSPENDED;
        case DisplayMode.HIDDEN:
            return DisplayMode.HIDDEN;
        default:
            return DisplayMode.VISIBLE;
    }
}
var _default = DisplayMode;


}),
"./node_modules/react-native/Libraries/ReactNative/HeadlessJsTaskError.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/ReactNative/HeadlessJsTaskError.js ***!
  \********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return HeadlessJsTaskError;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _wrap_native_super = __webpack_require__(/*! @swc/helpers/_/_wrap_native_super */ "./node_modules/@swc/helpers/cjs/_wrap_native_super.cjs");
var HeadlessJsTaskError = /*#__PURE__*/ function(Error1) {
    "use strict";
    _inherits._(HeadlessJsTaskError, Error1);
    function HeadlessJsTaskError() {
        _class_call_check._(this, HeadlessJsTaskError);
        return _call_super._(this, HeadlessJsTaskError, arguments);
    }
    return HeadlessJsTaskError;
}(_wrap_native_super._(Error));


}),
"./node_modules/react-native/Libraries/ReactNative/getCachedComponentWithDebugName.js": 
/*!********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/ReactNative/getCachedComponentWithDebugName.js ***!
  \********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return getCachedComponentWithDisplayName;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var cache = new Map();
function getCachedComponentWithDisplayName(displayName) {
    var ComponentWithDisplayName = cache.get(displayName);
    if (!ComponentWithDisplayName) {
        ComponentWithDisplayName = (ref)=>{
            var children = ref.children;
            return children;
        };
        // $FlowFixMe[prop-missing]
        ComponentWithDisplayName.displayName = displayName;
        cache.set(displayName, ComponentWithDisplayName);
    }
    return ComponentWithDisplayName;
}


}),
"./node_modules/react-native/Libraries/ReactNative/renderApplication.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/ReactNative/renderApplication.js ***!
  \******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return renderApplication;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _GlobalPerformanceLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/GlobalPerformanceLogger */ "./node_modules/react-native/Libraries/Utilities/GlobalPerformanceLogger.js"));
var _PerformanceLoggerContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/PerformanceLoggerContext */ "./node_modules/react-native/Libraries/Utilities/PerformanceLoggerContext.js"));
var _AppContainer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AppContainer */ "./node_modules/react-native/Libraries/ReactNative/AppContainer.js"));
var _DisplayMode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./DisplayMode */ "./node_modules/react-native/Libraries/ReactNative/DisplayMode.js"));
var _getCachedComponentWithDebugName = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./getCachedComponentWithDebugName */ "./node_modules/react-native/Libraries/ReactNative/getCachedComponentWithDebugName.js"));
var _RendererProxy = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./RendererProxy */ "./node_modules/react-native/Libraries/ReactNative/RendererProxy.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
__webpack_require__(/*! ../Utilities/BackHandler */ "./node_modules/react-native/Libraries/Utilities/BackHandler.android.js");
function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, rootViewStyle, fabric, scopedPerformanceLogger, isLogBox, debugName, displayMode, useOffscreen) {
    (0, _invariant.default)(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
    var performanceLogger = scopedPerformanceLogger ?? _GlobalPerformanceLogger.default;
    var renderable = /*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceLoggerContext.default.Provider, {
        value: performanceLogger,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AppContainer.default, {
            rootTag: rootTag,
            fabric: fabric,
            WrapperComponent: WrapperComponent,
            rootViewStyle: rootViewStyle,
            initialProps: initialProps ?? Object.freeze({}),
            internal_excludeLogBox: isLogBox,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(RootComponent, _object_spread_props._(_object_spread._({}, initialProps), {
                rootTag: rootTag
            }))
        })
    });
    if ( true && debugName) {
        var RootComponentWithMeaningfulName = (0, _getCachedComponentWithDebugName.default)(`${debugName}(RootComponent)`);
        renderable = /*#__PURE__*/ (0, _jsxruntime.jsx)(RootComponentWithMeaningfulName, {
            children: renderable
        });
    }
    if (useOffscreen && displayMode != null) {
        // $FlowFixMe[incompatible-type]
        // $FlowFixMe[prop-missing]
        var Activity = _react.unstable_Activity;
        renderable = /*#__PURE__*/ (0, _jsxruntime.jsx)(Activity, {
            mode: displayMode === _DisplayMode.default.VISIBLE ? 'visible' : 'hidden',
            children: renderable
        });
    }
    // We want to have concurrentRoot always enabled when you're on Fabric.
    var useConcurrentRoot = Boolean(fabric);
    performanceLogger.startTimespan('renderApplication_React_render');
    performanceLogger.setExtra('usedReactConcurrentRoot', useConcurrentRoot ? '1' : '0');
    performanceLogger.setExtra('usedReactFabric', fabric ? '1' : '0');
    performanceLogger.setExtra('usedReactProfiler', _RendererProxy.isProfilingRenderer());
    _RendererProxy.renderElement({
        element: renderable,
        rootTag,
        useFabric: Boolean(fabric),
        useConcurrentRoot
    });
    performanceLogger.stopTimespan('renderApplication_React_render');
}


}),
"./node_modules/react-native/Libraries/Settings/Settings.js": 
/*!******************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Settings/Settings.js ***!
  \******************************************************************/
(function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
var Settings = {
    get (key) {
        console.warn('Settings is not yet supported on this platform.');
        return null;
    },
    set (settings) {
        console.warn('Settings is not yet supported on this platform.');
    },
    watchKeys (keys, callback) {
        console.warn('Settings is not yet supported on this platform.');
        return -1;
    },
    clearWatch (watchId) {
        console.warn('Settings is not yet supported on this platform.');
    }
};
module.exports = Settings;


}),
"./node_modules/react-native/Libraries/Share/Share.js": 
/*!************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Share/Share.js ***!
  \************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _NativeActionSheetManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../ActionSheetIOS/NativeActionSheetManager */ "./node_modules/react-native/Libraries/ActionSheetIOS/NativeActionSheetManager.js"));
var _NativeShareModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeShareModule */ "./node_modules/react-native/Libraries/Share/NativeShareModule.js"));
var processColor = (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"]);
var Platform = __webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js");
var invariant = __webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js");
var Share = /*#__PURE__*/ function() {
    "use strict";
    function Share() {
        _class_call_check._(this, Share);
    }
    _create_class._(Share, null, [
        {
            key: "share",
            value: /**
   * Open a dialog to share text content.
   *
   * In iOS, Returns a Promise which will be invoked an object containing `action`, `activityType`.
   * If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction`
   * and all the other keys being undefined.
   *
   * In Android, Returns a Promise which always resolves with action being `Share.sharedAction`.
   *
   * ### Content
   *
   * #### iOS
   *
   *  - `url` - a URL to share
   *  - `message` - a message to share
   *
   * At least one of `URL` or `message` is required.
   *
   * #### Android
   *
   * - `title` - title of the message (optional)
   * - `message` - a message to share (often will include a URL).
   *
   * ### Options
   *
   * #### iOS
   *
   *  - `subject` - a subject to share via email
   *  - `excludedActivityTypes`
   *  - `tintColor`
   *
   * #### Android
   *
   *  - `dialogTitle`
   *
   */ function share(content, ref) {
                var options = ref === void 0 ? {} : ref;
                invariant(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
                invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL or message is required');
                invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
                if (Platform.OS === 'android') {
                    invariant(_NativeShareModule.default, 'ShareModule should be registered on Android.');
                    invariant(content.title == null || typeof content.title === 'string', 'Invalid title: title should be a string.');
                    var newContent = {
                        title: content.title,
                        message: typeof content.message === 'string' ? content.message : undefined
                    };
                    return _NativeShareModule.default.share(newContent, options.dialogTitle).then((result)=>_object_spread._({
                            activityType: null
                        }, result));
                } else if (Platform.OS === 'ios') {
                    return new Promise((resolve, reject)=>{
                        var tintColor = processColor(options.tintColor);
                        invariant(tintColor == null || typeof tintColor === 'number', 'Unexpected color given for options.tintColor');
                        invariant(_NativeActionSheetManager.default, 'NativeActionSheetManager is not registered on iOS, but it should be.');
                        _NativeActionSheetManager.default.showShareActionSheetWithOptions({
                            message: typeof content.message === 'string' ? content.message : undefined,
                            url: typeof content.url === 'string' ? content.url : undefined,
                            subject: options.subject,
                            tintColor: typeof tintColor === 'number' ? tintColor : undefined,
                            anchor: typeof options.anchor === 'number' ? options.anchor : undefined,
                            excludedActivityTypes: options.excludedActivityTypes
                        }, (error)=>reject(error), (success, activityType)=>{
                            if (success) {
                                resolve({
                                    action: 'sharedAction',
                                    activityType: activityType
                                });
                            } else {
                                resolve({
                                    action: 'dismissedAction',
                                    activityType: null
                                });
                            }
                        });
                    });
                } else {
                    return Promise.reject(new Error('Unsupported platform'));
                }
            }
        }
    ]);
    return Share;
}();
/**
   * The content was successfully shared.
   */ Share.sharedAction = 'sharedAction';
/**
   * The dialog has been dismissed.
   * @platform ios
   */ Share.dismissedAction = 'dismissedAction';
module.exports = Share;


}),
"./node_modules/react-native/Libraries/StyleSheet/PlatformColorValueTypesIOS.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/StyleSheet/PlatformColorValueTypesIOS.js ***!
  \**************************************************************************************/
(function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "DynamicColorIOS", ({
    enumerable: true,
    get: function() {
        return DynamicColorIOS;
    }
}));
var DynamicColorIOS = (tuple)=>{
    throw new Error('DynamicColorIOS is not available on this platform.');
};


}),
"./node_modules/react-native/Libraries/Utilities/Appearance.js": 
/*!*********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/Appearance.js ***!
  \*********************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get addChangeListener () {
        return addChangeListener;
    },
    get getColorScheme () {
        return getColorScheme;
    },
    get setColorScheme () {
        return setColorScheme;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../EventEmitter/NativeEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js"));
var _EventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../vendor/emitter/EventEmitter */ "./node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js"));
var _DebugEnvironment = __webpack_require__(/*! ./DebugEnvironment */ "./node_modules/react-native/Libraries/Utilities/DebugEnvironment.js");
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var lazyState;
/**
 * Ensures that all state and listeners are lazily initialized correctly.
 */ function getState() {
    if (lazyState != null) {
        return lazyState;
    }
    var eventEmitter = new _EventEmitter.default();
    // NOTE: Avoid initializing `NativeAppearance` until it is actually used.
    var NativeAppearance = (__webpack_require__(/*! ./NativeAppearance */ "./node_modules/react-native/Libraries/Utilities/NativeAppearance.js")/* ["default"] */["default"]);
    if (NativeAppearance == null) {
        // Assign `null` to avoid re-initializing on subsequent invocations.
        lazyState = {
            NativeAppearance: null,
            appearance: null,
            eventEmitter
        };
    } else {
        var state = {
            NativeAppearance,
            appearance: null,
            eventEmitter
        };
        new _NativeEventEmitter.default(NativeAppearance).addListener('appearanceChanged', (newAppearance)=>{
            state.appearance = {
                colorScheme: toColorScheme(newAppearance.colorScheme)
            };
            eventEmitter.emit('change', state.appearance);
        });
        lazyState = state;
    }
    return lazyState;
}
function getColorScheme() {
    if (true) {
        if (_DebugEnvironment.isAsyncDebugging) {
            // Hard code light theme when using the async debugger as
            // sync calls aren't supported
            return 'light';
        }
    }
    var colorScheme = null;
    var state = getState();
    var NativeAppearance = state.NativeAppearance;
    if (NativeAppearance != null) {
        if (state.appearance == null) {
            // Lazily initialize `state.appearance`. This should only
            // happen once because we never reassign a null value to it.
            state.appearance = {
                colorScheme: toColorScheme(NativeAppearance.getColorScheme())
            };
        }
        colorScheme = state.appearance.colorScheme;
    }
    return colorScheme;
}
function setColorScheme(colorScheme) {
    var state = getState();
    var NativeAppearance = state.NativeAppearance;
    if (NativeAppearance != null) {
        NativeAppearance.setColorScheme(colorScheme ?? 'unspecified');
        state.appearance = {
            colorScheme: toColorScheme(NativeAppearance.getColorScheme())
        };
    }
}
function addChangeListener(listener) {
    var eventEmitter = getState().eventEmitter;
    return eventEmitter.addListener('change', listener);
}
/**
 * TODO: (hramos) T52919652 Use ?ColorSchemeName once codegen supports union
 */ function toColorScheme(colorScheme) {
    (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, "Unrecognized color scheme. Did you mean 'dark', 'light' or null?");
    return colorScheme;
}


}),
"./node_modules/react-native/Libraries/Utilities/BackHandler.android.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/BackHandler.android.js ***!
  \******************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeDeviceEventManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Libraries/NativeModules/specs/NativeDeviceEventManager */ "./node_modules/react-native/Libraries/NativeModules/specs/NativeDeviceEventManager.js"));
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../EventEmitter/RCTDeviceEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js"));
var DEVICE_BACK_EVENT = 'hardwareBackPress';
var _backPressSubscriptions = [];
_RCTDeviceEventEmitter.default.addListener(DEVICE_BACK_EVENT, function() {
    for(var i = _backPressSubscriptions.length - 1; i >= 0; i--){
        var _backPressSubscriptions_i;
        if ((_backPressSubscriptions_i = _backPressSubscriptions[i]) === null || _backPressSubscriptions_i === void 0 ? void 0 : _backPressSubscriptions_i.call(_backPressSubscriptions)) {
            return;
        }
    }
    BackHandler.exitApp();
});
/**
 * Detect hardware button presses for back navigation.
 *
 * Android: Detect hardware back button presses, and programmatically invoke the default back button
 * functionality to exit the app if there are no listeners or if none of the listeners return true.
 *
 * iOS: Not applicable.
 *
 * The event subscriptions are called in reverse order (i.e. last registered subscription first),
 * and if one subscription returns true then subscriptions registered earlier will not be called.
 *
 * Example:
 *
 * ```javascript
 * BackHandler.addEventListener('hardwareBackPress', function() {
 *  // this.onMainScreen and this.goBack are just examples, you need to use your own implementation here
 *  // Typically you would use the navigator here to go to the last state.
 *
 *  if (!this.onMainScreen()) {
 *    this.goBack();
 *    return true;
 *  }
 *  return false;
 * });
 * ```
 */ var BackHandler = {
    exitApp: function() {
        if (!_NativeDeviceEventManager.default) {
            return;
        }
        _NativeDeviceEventManager.default.invokeDefaultBackPressHandler();
    },
    /**
   * Adds an event handler. Supported events:
   *
   * - `hardwareBackPress`: Fires when the Android hardware back button is pressed.
   */ addEventListener: function(eventName, handler) {
        if (_backPressSubscriptions.indexOf(handler) === -1) {
            _backPressSubscriptions.push(handler);
        }
        return {
            remove: ()=>{
                var index = _backPressSubscriptions.indexOf(handler);
                if (index !== -1) {
                    _backPressSubscriptions.splice(index, 1);
                }
            }
        };
    }
};
module.exports = BackHandler;


}),
"./node_modules/react-native/Libraries/Utilities/DebugEnvironment.js": 
/*!***************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/DebugEnvironment.js ***!
  \***************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "isAsyncDebugging", ({
    enumerable: true,
    get: function() {
        return isAsyncDebugging;
    }
}));
var isAsyncDebugging = false;
if (true) {
    // These native interfaces don't exist in asynchronous debugging environments.
    isAsyncDebugging = !__webpack_require__.g.nativeCallSyncHook && !__webpack_require__.g.RN$Bridgeless;
}


}),
"./node_modules/react-native/Libraries/Utilities/DevSettings.js": 
/*!**********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/DevSettings.js ***!
  \**********************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../EventEmitter/NativeEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js"));
var _NativeDevSettings = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../NativeModules/specs/NativeDevSettings */ "./node_modules/react-native/Libraries/NativeModules/specs/NativeDevSettings.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var DevSettings = {
    addMenuItem (title, handler) {},
    reload (reason) {},
    onFastRefresh () {}
};
if (true) {
    var emitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
    // If you want to use the native module on other platforms, please remove this condition and test its behavior
    _Platform.default.OS !== 'ios' ? null : _NativeDevSettings.default);
    var subscriptions = new Map();
    DevSettings = {
        addMenuItem (title, handler) {
            // Make sure items are not added multiple times. This can
            // happen when hot reloading the module that registers the
            // menu items. The title is used as the id which means we
            // don't support multiple items with the same name.
            var subscription = subscriptions.get(title);
            if (subscription != null) {
                subscription.remove();
            } else {
                _NativeDevSettings.default.addMenuItem(title);
            }
            subscription = emitter.addListener('didPressMenuItem', (event)=>{
                if (event.title === title) {
                    handler();
                }
            });
            subscriptions.set(title, subscription);
        },
        reload (reason) {
            if (_NativeDevSettings.default.reloadWithReason != null) {
                _NativeDevSettings.default.reloadWithReason(reason ?? 'Uncategorized from JS');
            } else {
                _NativeDevSettings.default.reload();
            }
        },
        onFastRefresh () {
            var _NativeDevSettings_onFastRefresh;
            (_NativeDevSettings_onFastRefresh = _NativeDevSettings.default.onFastRefresh) === null || _NativeDevSettings_onFastRefresh === void 0 ? void 0 : _NativeDevSettings_onFastRefresh.call(_NativeDevSettings.default);
        }
    };
}
module.exports = DevSettings;


}),
"./node_modules/react-native/Libraries/Utilities/DeviceInfo.js": 
/*!*********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/DeviceInfo.js ***!
  \*********************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeDeviceInfo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeDeviceInfo */ "./node_modules/react-native/Libraries/Utilities/NativeDeviceInfo.js"));
module.exports = _NativeDeviceInfo.default;


}),
"./node_modules/react-native/Libraries/Utilities/PerformanceLoggerContext.js": 
/*!***********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/PerformanceLoggerContext.js ***!
  \***********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get usePerformanceLogger () {
        return usePerformanceLogger;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _GlobalPerformanceLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./GlobalPerformanceLogger */ "./node_modules/react-native/Libraries/Utilities/GlobalPerformanceLogger.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
/**
 * This is a React Context that provides a scoped instance of IPerformanceLogger.
 * We wrap every <AppContainer /> with a Provider for this context so the logger
 * should be available in every component.
 * See React docs about using Context: https://react.dev/docs/context.html
 */ var PerformanceLoggerContext = /*#__PURE__*/ _react.createContext(_GlobalPerformanceLogger.default);
if (true) {
    PerformanceLoggerContext.displayName = 'PerformanceLoggerContext';
}
function usePerformanceLogger() {
    return (0, _react.useContext)(PerformanceLoggerContext);
}
var _default = PerformanceLoggerContext;


}),
"./node_modules/react-native/Libraries/Utilities/SceneTracker.js": 
/*!***********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/SceneTracker.js ***!
  \***********************************************************************/
(function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
var _listeners = [];
var _activeScene = {
    name: 'default'
};
var SceneTracker = {
    setActiveScene (scene) {
        _activeScene = scene;
        _listeners.forEach((listener)=>listener(_activeScene));
    },
    getActiveScene () {
        return _activeScene;
    },
    addActiveSceneChangedListener (callback) {
        _listeners.push(callback);
        return {
            remove: ()=>{
                _listeners = _listeners.filter((listener)=>callback !== listener);
            }
        };
    }
};
module.exports = SceneTracker;


}),
"./node_modules/react-native/Libraries/Utilities/logError.js": 
/*!*******************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/logError.js ***!
  \*******************************************************************/
(function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
/**
 * Small utility that can be used as an error handler. You cannot just pass
 * `console.error` as a failure callback - it's not properly bound.  If passes an
 * `Error` object, it will print the message and stack.
 */ var logError = function(...args) {
    if (args.length === 1 && args[0] instanceof Error) {
        var err = args[0];
        console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
    } else {
        console.error.apply(console, args);
    }
};
module.exports = logError;


}),
"./node_modules/react-native/Libraries/Utilities/useColorScheme.js": 
/*!*************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/useColorScheme.js ***!
  \*************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useColorScheme;
    }
}));
var _Appearance = __webpack_require__(/*! ./Appearance */ "./node_modules/react-native/Libraries/Utilities/Appearance.js");
var _react = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
var subscribe = (onStoreChange)=>{
    var appearanceSubscription = (0, _Appearance.addChangeListener)(onStoreChange);
    return ()=>appearanceSubscription.remove();
};
function useColorScheme() {
    return (0, _react.useSyncExternalStore)(subscribe, _Appearance.getColorScheme);
}


}),
"./node_modules/react-native/Libraries/Utilities/useWindowDimensions.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/useWindowDimensions.js ***!
  \******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useWindowDimensions;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _Dimensions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./Dimensions */ "./node_modules/react-native/Libraries/Utilities/Dimensions.js"));
var _react = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
function useWindowDimensions() {
    var _useState = _sliced_to_array._((0, _react.useState)(()=>_Dimensions.default.get('window')), 2), dimensions = _useState[0], setDimensions = _useState[1];
    (0, _react.useEffect)(()=>{
        function handleChange(ref) {
            var window = ref.window;
            if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {
                setDimensions(window);
            }
        }
        var subscription = _Dimensions.default.addEventListener('change', handleChange);
        // We might have missed an update between calling `get` in render and
        // `addEventListener` in this handler, so we set it here. If there was
        // no change, React will filter out this update as a no-op.
        handleChange({
            window: _Dimensions.default.get('window')
        });
        return ()=>{
            subscription.remove();
        };
    }, [
        dimensions
    ]);
    return dimensions;
}


}),
"./node_modules/react-native/Libraries/Vibration/Vibration.js": 
/*!********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Vibration/Vibration.js ***!
  \********************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 * @jsdoc
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeVibration = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeVibration */ "./node_modules/react-native/Libraries/Vibration/NativeVibration.js"));
var Platform = __webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js");
/**
 * Vibration API
 *
 * See https://reactnative.dev/docs/vibration
 */ var _vibrating = false;
var _id = 0; // _id is necessary to prevent race condition.
var _default_vibration_length = 400;
function vibrateByPattern(pattern, ref) {
    var repeat = ref === void 0 ? false : ref;
    if (_vibrating) {
        return;
    }
    _vibrating = true;
    if (pattern[0] === 0) {
        _NativeVibration.default.vibrate(_default_vibration_length);
        // $FlowFixMe[reassign-const]
        pattern = pattern.slice(1);
    }
    if (pattern.length === 0) {
        _vibrating = false;
        return;
    }
    setTimeout(()=>vibrateScheduler(++_id, pattern, repeat, 1), pattern[0]);
}
function vibrateScheduler(id, pattern, repeat, nextIndex) {
    if (!_vibrating || id !== _id) {
        return;
    }
    _NativeVibration.default.vibrate(_default_vibration_length);
    if (nextIndex >= pattern.length) {
        if (repeat) {
            // $FlowFixMe[reassign-const]
            nextIndex = 0;
        } else {
            _vibrating = false;
            return;
        }
    }
    setTimeout(()=>vibrateScheduler(id, pattern, repeat, nextIndex + 1), pattern[nextIndex]);
}
var Vibration = {
    /**
   * Trigger a vibration with specified `pattern`.
   *
   * See https://reactnative.dev/docs/vibration#vibrate
   */ vibrate: function(ref, ref1) {
        var pattern = ref === void 0 ? _default_vibration_length : ref, repeat = ref1 === void 0 ? false : ref1;
        if (Platform.OS === 'android') {
            if (typeof pattern === 'number') {
                _NativeVibration.default.vibrate(pattern);
            } else if (Array.isArray(pattern)) {
                _NativeVibration.default.vibrateByPattern(pattern, repeat ? 0 : -1);
            } else {
                throw new Error('Vibration pattern should be a number or array');
            }
        } else {
            if (_vibrating) {
                return;
            }
            if (typeof pattern === 'number') {
                _NativeVibration.default.vibrate(pattern);
            } else if (Array.isArray(pattern)) {
                vibrateByPattern(pattern, repeat);
            } else {
                throw new Error('Vibration pattern should be a number or array');
            }
        }
    },
    /**
   * Stop vibration
   *
   * See https://reactnative.dev/docs/vibration#cancel
   */ cancel: function() {
        if (Platform.OS === 'ios') {
            _vibrating = false;
        } else {
            _NativeVibration.default.cancel();
        }
    }
};
module.exports = Vibration;


}),
"./node_modules/react-native/Libraries/YellowBox/YellowBoxDeprecated.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/YellowBox/YellowBoxDeprecated.js ***!
  \******************************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var LogBox = (__webpack_require__(/*! ../LogBox/LogBox */ "./node_modules/react-native/Libraries/LogBox/LogBox.js")/* ["default"] */["default"]);
var React = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
var YellowBox;
if (true) {
    YellowBox = /*#__PURE__*/ function(_React_Component) {
        _inherits._(YellowBox, _React_Component);
        function YellowBox() {
            _class_call_check._(this, YellowBox);
            return _call_super._(this, YellowBox, arguments);
        }
        _create_class._(YellowBox, [
            {
                key: "render",
                value: function render() {
                    return null;
                }
            }
        ], [
            {
                key: "ignoreWarnings",
                value: function ignoreWarnings(patterns) {
                    console.warn('YellowBox has been replaced with LogBox. Please call LogBox.ignoreLogs() instead.');
                    LogBox.ignoreLogs(patterns);
                }
            },
            {
                key: "install",
                value: function install() {
                    console.warn('YellowBox has been replaced with LogBox. Please call LogBox.install() instead.');
                    LogBox.install();
                }
            },
            {
                key: "uninstall",
                value: function uninstall() {
                    console.warn('YellowBox has been replaced with LogBox. Please call LogBox.uninstall() instead.');
                    LogBox.uninstall();
                }
            }
        ]);
        return YellowBox;
    }(React.Component);
} else {}
// $FlowFixMe[method-unbinding]
module.exports = YellowBox;


}),
"./node_modules/react-native/index.js": 
/*!********************************************!*\
  !*** ./node_modules/react-native/index.js ***!
  \********************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
'use client';
// APIs
// Components
// $FlowFixMe[invalid-exported-annotation]
// Plugins
var warnOnce = __webpack_require__(/*! ./Libraries/Utilities/warnOnce */ "./node_modules/react-native/Libraries/Utilities/warnOnce.js");
var invariant = __webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js");
module.exports = {
    get registerCallableModule () {
        return (__webpack_require__(/*! ./Libraries/Core/registerCallableModule */ "./node_modules/react-native/Libraries/Core/registerCallableModule.js")/* ["default"] */["default"]);
    },
    // Components
    get AccessibilityInfo () {
        return (__webpack_require__(/*! ./Libraries/Components/AccessibilityInfo/AccessibilityInfo */ "./node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.js")/* ["default"] */["default"]);
    },
    get ActivityIndicator () {
        return (__webpack_require__(/*! ./Libraries/Components/ActivityIndicator/ActivityIndicator */ "./node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js")/* ["default"] */["default"]);
    },
    get Button () {
        return (__webpack_require__(/*! ./Libraries/Components/Button */ "./node_modules/react-native/Libraries/Components/Button.js")/* ["default"] */["default"]);
    },
    // $FlowFixMe[value-as-type]
    get DrawerLayoutAndroid () {
        return __webpack_require__(/*! ./Libraries/Components/DrawerAndroid/DrawerLayoutAndroid */ "./node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js");
    },
    get FlatList () {
        return __webpack_require__(/*! ./Libraries/Lists/FlatList */ "./node_modules/react-native/Libraries/Lists/FlatList.js");
    },
    get Image () {
        return __webpack_require__(/*! ./Libraries/Image/Image */ "./node_modules/react-native/Libraries/Image/Image.android.js");
    },
    get ImageBackground () {
        return __webpack_require__(/*! ./Libraries/Image/ImageBackground */ "./node_modules/react-native/Libraries/Image/ImageBackground.js");
    },
    get InputAccessoryView () {
        return (__webpack_require__(/*! ./Libraries/Components/TextInput/InputAccessoryView */ "./node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js")/* ["default"] */["default"]);
    },
    get experimental_LayoutConformance () {
        return (__webpack_require__(/*! ./Libraries/Components/LayoutConformance/LayoutConformance */ "./node_modules/react-native/Libraries/Components/LayoutConformance/LayoutConformance.js")/* ["default"] */["default"]);
    },
    get KeyboardAvoidingView () {
        return (__webpack_require__(/*! ./Libraries/Components/Keyboard/KeyboardAvoidingView */ "./node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js")/* ["default"] */["default"]);
    },
    get Modal () {
        return __webpack_require__(/*! ./Libraries/Modal/Modal */ "./node_modules/react-native/Libraries/Modal/Modal.js");
    },
    get Pressable () {
        return (__webpack_require__(/*! ./Libraries/Components/Pressable/Pressable */ "./node_modules/react-native/Libraries/Components/Pressable/Pressable.js")/* ["default"] */["default"]);
    },
    // $FlowFixMe[value-as-type]
    get ProgressBarAndroid () {
        warnOnce('progress-bar-android-moved', 'ProgressBarAndroid has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/progress-bar-android' instead of 'react-native'. " + 'See https://github.com/react-native-progress-view/progress-bar-android');
        return __webpack_require__(/*! ./Libraries/Components/ProgressBarAndroid/ProgressBarAndroid */ "./node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js");
    },
    get RefreshControl () {
        return __webpack_require__(/*! ./Libraries/Components/RefreshControl/RefreshControl */ "./node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js");
    },
    get SafeAreaView () {
        return (__webpack_require__(/*! ./Libraries/Components/SafeAreaView/SafeAreaView */ "./node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js")/* ["default"] */["default"]);
    },
    get ScrollView () {
        return __webpack_require__(/*! ./Libraries/Components/ScrollView/ScrollView */ "./node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js");
    },
    get SectionList () {
        return (__webpack_require__(/*! ./Libraries/Lists/SectionList */ "./node_modules/react-native/Libraries/Lists/SectionList.js")/* ["default"] */["default"]);
    },
    get StatusBar () {
        return __webpack_require__(/*! ./Libraries/Components/StatusBar/StatusBar */ "./node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js");
    },
    get Switch () {
        return (__webpack_require__(/*! ./Libraries/Components/Switch/Switch */ "./node_modules/react-native/Libraries/Components/Switch/Switch.js")/* ["default"] */["default"]);
    },
    get Text () {
        return __webpack_require__(/*! ./Libraries/Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js");
    },
    get TextInput () {
        return __webpack_require__(/*! ./Libraries/Components/TextInput/TextInput */ "./node_modules/react-native/Libraries/Components/TextInput/TextInput.js");
    },
    get Touchable () {
        return (__webpack_require__(/*! ./Libraries/Components/Touchable/Touchable */ "./node_modules/react-native/Libraries/Components/Touchable/Touchable.js")/* ["default"] */["default"]);
    },
    get TouchableHighlight () {
        return __webpack_require__(/*! ./Libraries/Components/Touchable/TouchableHighlight */ "./node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js");
    },
    get TouchableNativeFeedback () {
        return __webpack_require__(/*! ./Libraries/Components/Touchable/TouchableNativeFeedback */ "./node_modules/react-native/Libraries/Components/Touchable/TouchableNativeFeedback.js");
    },
    get TouchableOpacity () {
        return __webpack_require__(/*! ./Libraries/Components/Touchable/TouchableOpacity */ "./node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js");
    },
    get TouchableWithoutFeedback () {
        return __webpack_require__(/*! ./Libraries/Components/Touchable/TouchableWithoutFeedback */ "./node_modules/react-native/Libraries/Components/Touchable/TouchableWithoutFeedback.js");
    },
    get View () {
        return __webpack_require__(/*! ./Libraries/Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js");
    },
    get VirtualizedList () {
        return __webpack_require__(/*! ./Libraries/Lists/VirtualizedList */ "./node_modules/react-native/Libraries/Lists/VirtualizedList.js");
    },
    get VirtualizedSectionList () {
        return __webpack_require__(/*! ./Libraries/Lists/VirtualizedSectionList */ "./node_modules/react-native/Libraries/Lists/VirtualizedSectionList.js");
    },
    // APIs
    get ActionSheetIOS () {
        return __webpack_require__(/*! ./Libraries/ActionSheetIOS/ActionSheetIOS */ "./node_modules/react-native/Libraries/ActionSheetIOS/ActionSheetIOS.js");
    },
    get Alert () {
        return __webpack_require__(/*! ./Libraries/Alert/Alert */ "./node_modules/react-native/Libraries/Alert/Alert.js");
    },
    // Include any types exported in the Animated module together with its default export, so
    // you can references types such as Animated.Numeric
    get Animated () {
        // $FlowExpectedError[prop-missing]: we only return the default export, all other exports are types
        return (__webpack_require__(/*! ./Libraries/Animated/Animated */ "./node_modules/react-native/Libraries/Animated/Animated.js")/* ["default"] */["default"]);
    },
    get Appearance () {
        return __webpack_require__(/*! ./Libraries/Utilities/Appearance */ "./node_modules/react-native/Libraries/Utilities/Appearance.js");
    },
    get AppRegistry () {
        return __webpack_require__(/*! ./Libraries/ReactNative/AppRegistry */ "./node_modules/react-native/Libraries/ReactNative/AppRegistry.js");
    },
    get AppState () {
        return __webpack_require__(/*! ./Libraries/AppState/AppState */ "./node_modules/react-native/Libraries/AppState/AppState.js");
    },
    get BackHandler () {
        return __webpack_require__(/*! ./Libraries/Utilities/BackHandler */ "./node_modules/react-native/Libraries/Utilities/BackHandler.android.js");
    },
    get Clipboard () {
        warnOnce('clipboard-moved', 'Clipboard has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-clipboard/clipboard' instead of 'react-native'. " + 'See https://github.com/react-native-clipboard/clipboard');
        return __webpack_require__(/*! ./Libraries/Components/Clipboard/Clipboard */ "./node_modules/react-native/Libraries/Components/Clipboard/Clipboard.js");
    },
    get DeviceInfo () {
        return __webpack_require__(/*! ./Libraries/Utilities/DeviceInfo */ "./node_modules/react-native/Libraries/Utilities/DeviceInfo.js");
    },
    get DevMenu () {
        return __webpack_require__(/*! ./src/private/devmenu/DevMenu */ "./node_modules/react-native/src/private/devmenu/DevMenu.js");
    },
    get DevSettings () {
        return __webpack_require__(/*! ./Libraries/Utilities/DevSettings */ "./node_modules/react-native/Libraries/Utilities/DevSettings.js");
    },
    get Dimensions () {
        return (__webpack_require__(/*! ./Libraries/Utilities/Dimensions */ "./node_modules/react-native/Libraries/Utilities/Dimensions.js")/* ["default"] */["default"]);
    },
    get Easing () {
        return (__webpack_require__(/*! ./Libraries/Animated/Easing */ "./node_modules/react-native/Libraries/Animated/Easing.js")/* ["default"] */["default"]);
    },
    get findNodeHandle () {
        return (__webpack_require__(/*! ./Libraries/ReactNative/RendererProxy */ "./node_modules/react-native/Libraries/ReactNative/RendererProxy.js")/* .findNodeHandle */.findNodeHandle);
    },
    get I18nManager () {
        return __webpack_require__(/*! ./Libraries/ReactNative/I18nManager */ "./node_modules/react-native/Libraries/ReactNative/I18nManager.js");
    },
    get InteractionManager () {
        return __webpack_require__(/*! ./Libraries/Interaction/InteractionManager */ "./node_modules/react-native/Libraries/Interaction/InteractionManager.js");
    },
    get Keyboard () {
        return __webpack_require__(/*! ./Libraries/Components/Keyboard/Keyboard */ "./node_modules/react-native/Libraries/Components/Keyboard/Keyboard.js");
    },
    get LayoutAnimation () {
        return __webpack_require__(/*! ./Libraries/LayoutAnimation/LayoutAnimation */ "./node_modules/react-native/Libraries/LayoutAnimation/LayoutAnimation.js");
    },
    get Linking () {
        return __webpack_require__(/*! ./Libraries/Linking/Linking */ "./node_modules/react-native/Libraries/Linking/Linking.js");
    },
    get LogBox () {
        return (__webpack_require__(/*! ./Libraries/LogBox/LogBox */ "./node_modules/react-native/Libraries/LogBox/LogBox.js")/* ["default"] */["default"]);
    },
    get NativeDialogManagerAndroid () {
        return (__webpack_require__(/*! ./Libraries/NativeModules/specs/NativeDialogManagerAndroid */ "./node_modules/react-native/Libraries/NativeModules/specs/NativeDialogManagerAndroid.js")/* ["default"] */["default"]);
    },
    get NativeEventEmitter () {
        return (__webpack_require__(/*! ./Libraries/EventEmitter/NativeEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js")/* ["default"] */["default"]);
    },
    get Networking () {
        return (__webpack_require__(/*! ./Libraries/Network/RCTNetworking */ "./node_modules/react-native/Libraries/Network/RCTNetworking.android.js")/* ["default"] */["default"]);
    },
    get PanResponder () {
        return (__webpack_require__(/*! ./Libraries/Interaction/PanResponder */ "./node_modules/react-native/Libraries/Interaction/PanResponder.js")/* ["default"] */["default"]);
    },
    get PermissionsAndroid () {
        return __webpack_require__(/*! ./Libraries/PermissionsAndroid/PermissionsAndroid */ "./node_modules/react-native/Libraries/PermissionsAndroid/PermissionsAndroid.js");
    },
    get PixelRatio () {
        return (__webpack_require__(/*! ./Libraries/Utilities/PixelRatio */ "./node_modules/react-native/Libraries/Utilities/PixelRatio.js")/* ["default"] */["default"]);
    },
    get PushNotificationIOS () {
        warnOnce('pushNotificationIOS-moved', 'PushNotificationIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/push-notification-ios' instead of 'react-native'. " + 'See https://github.com/react-native-push-notification/ios');
        return __webpack_require__(/*! ./Libraries/PushNotificationIOS/PushNotificationIOS */ "./node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js");
    },
    get Settings () {
        return __webpack_require__(/*! ./Libraries/Settings/Settings */ "./node_modules/react-native/Libraries/Settings/Settings.js");
    },
    get Share () {
        return __webpack_require__(/*! ./Libraries/Share/Share */ "./node_modules/react-native/Libraries/Share/Share.js");
    },
    get StyleSheet () {
        return __webpack_require__(/*! ./Libraries/StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js");
    },
    get Systrace () {
        return __webpack_require__(/*! ./Libraries/Performance/Systrace */ "./node_modules/react-native/Libraries/Performance/Systrace.js");
    },
    // $FlowFixMe[value-as-type]
    get ToastAndroid () {
        return __webpack_require__(/*! ./Libraries/Components/ToastAndroid/ToastAndroid */ "./node_modules/react-native/Libraries/Components/ToastAndroid/ToastAndroid.android.js");
    },
    get TurboModuleRegistry () {
        return __webpack_require__(/*! ./Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js");
    },
    get UIManager () {
        return __webpack_require__(/*! ./Libraries/ReactNative/UIManager */ "./node_modules/react-native/Libraries/ReactNative/UIManager.js");
    },
    get unstable_batchedUpdates () {
        return (__webpack_require__(/*! ./Libraries/ReactNative/RendererProxy */ "./node_modules/react-native/Libraries/ReactNative/RendererProxy.js")/* .unstable_batchedUpdates */.unstable_batchedUpdates);
    },
    get useAnimatedValue () {
        return (__webpack_require__(/*! ./Libraries/Animated/useAnimatedValue */ "./node_modules/react-native/Libraries/Animated/useAnimatedValue.js")/* ["default"] */["default"]);
    },
    get useColorScheme () {
        return (__webpack_require__(/*! ./Libraries/Utilities/useColorScheme */ "./node_modules/react-native/Libraries/Utilities/useColorScheme.js")/* ["default"] */["default"]);
    },
    get useWindowDimensions () {
        return (__webpack_require__(/*! ./Libraries/Utilities/useWindowDimensions */ "./node_modules/react-native/Libraries/Utilities/useWindowDimensions.js")/* ["default"] */["default"]);
    },
    get UTFSequence () {
        return (__webpack_require__(/*! ./Libraries/UTFSequence */ "./node_modules/react-native/Libraries/UTFSequence.js")/* ["default"] */["default"]);
    },
    get Vibration () {
        return __webpack_require__(/*! ./Libraries/Vibration/Vibration */ "./node_modules/react-native/Libraries/Vibration/Vibration.js");
    },
    get YellowBox () {
        return __webpack_require__(/*! ./Libraries/YellowBox/YellowBoxDeprecated */ "./node_modules/react-native/Libraries/YellowBox/YellowBoxDeprecated.js");
    },
    // Plugins
    get DeviceEventEmitter () {
        return (__webpack_require__(/*! ./Libraries/EventEmitter/RCTDeviceEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js")/* ["default"] */["default"]);
    },
    get DynamicColorIOS () {
        return (__webpack_require__(/*! ./Libraries/StyleSheet/PlatformColorValueTypesIOS */ "./node_modules/react-native/Libraries/StyleSheet/PlatformColorValueTypesIOS.js")/* .DynamicColorIOS */.DynamicColorIOS);
    },
    get NativeAppEventEmitter () {
        return __webpack_require__(/*! ./Libraries/EventEmitter/RCTNativeAppEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/RCTNativeAppEventEmitter.js");
    },
    get NativeModules () {
        return __webpack_require__(/*! ./Libraries/BatchedBridge/NativeModules */ "./node_modules/react-native/Libraries/BatchedBridge/NativeModules.js");
    },
    get Platform () {
        return __webpack_require__(/*! ./Libraries/Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js");
    },
    get PlatformColor () {
        return (__webpack_require__(/*! ./Libraries/StyleSheet/PlatformColorValueTypes */ "./node_modules/react-native/Libraries/StyleSheet/PlatformColorValueTypes.android.js")/* .PlatformColor */.PlatformColor);
    },
    get processColor () {
        return (__webpack_require__(/*! ./Libraries/StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"]);
    },
    get requireNativeComponent () {
        return (__webpack_require__(/*! ./Libraries/ReactNative/requireNativeComponent */ "./node_modules/react-native/Libraries/ReactNative/requireNativeComponent.js")/* ["default"] */["default"]);
    },
    get RootTagContext () {
        return (__webpack_require__(/*! ./Libraries/ReactNative/RootTag */ "./node_modules/react-native/Libraries/ReactNative/RootTag.js")/* .RootTagContext */.RootTagContext);
    },
    get unstable_enableLogBox () {
        return ()=>console.warn('LogBox is enabled by default so there is no need to call unstable_enableLogBox() anymore. This is a no op and will be removed in the next version.');
    }
};
if (true) {
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access ART. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access ART. */ Object.defineProperty(module.exports, "ART", ({
        configurable: true,
        get () {
            invariant(false, 'ART has been removed from React Native. ' + "Please upgrade to use either 'react-native-svg' or a similar package. " + "If you cannot upgrade to a different library, please install the deprecated '@react-native-community/art' package. " + 'See https://github.com/react-native-art/art');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access ListView. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access ListView. */ Object.defineProperty(module.exports, "ListView", ({
        configurable: true,
        get () {
            invariant(false, 'ListView has been removed from React Native. ' + 'See https://fb.me/nolistview for more information or use ' + '`deprecated-react-native-listview`.');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access SwipeableListView. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access SwipeableListView. */ Object.defineProperty(module.exports, "SwipeableListView", ({
        configurable: true,
        get () {
            invariant(false, 'SwipeableListView has been removed from React Native. ' + 'See https://fb.me/nolistview for more information or use ' + '`deprecated-react-native-swipeable-listview`.');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access WebView. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access WebView. */ Object.defineProperty(module.exports, "WebView", ({
        configurable: true,
        get () {
            invariant(false, 'WebView has been removed from React Native. ' + "It can now be installed and imported from 'react-native-webview' instead of 'react-native'. " + 'See https://github.com/react-native-webview/react-native-webview');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access NetInfo. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access NetInfo. */ Object.defineProperty(module.exports, "NetInfo", ({
        configurable: true,
        get () {
            invariant(false, 'NetInfo has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/netinfo' instead of 'react-native'. " + 'See https://github.com/react-native-netinfo/react-native-netinfo');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access CameraRoll. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access CameraRoll. */ Object.defineProperty(module.exports, "CameraRoll", ({
        configurable: true,
        get () {
            invariant(false, 'CameraRoll has been removed from React Native. ' + "It can now be installed and imported from '@react-native-camera-roll/camera-roll' instead of 'react-native'. " + 'See https://github.com/react-native-cameraroll/react-native-cameraroll');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access ImageStore. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access ImageStore. */ Object.defineProperty(module.exports, "ImageStore", ({
        configurable: true,
        get () {
            invariant(false, 'ImageStore has been removed from React Native. ' + 'To get a base64-encoded string from a local image use either of the following third-party libraries:' + "* expo-file-system: `readAsStringAsync(filepath, 'base64')`" + "* react-native-fs: `readFile(filepath, 'base64')`");
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access ImageEditor. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access ImageEditor. */ Object.defineProperty(module.exports, "ImageEditor", ({
        configurable: true,
        get () {
            invariant(false, 'ImageEditor has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/image-editor' instead of 'react-native'. " + 'See https://github.com/callstack/react-native-image-editor');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access TimePickerAndroid. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access TimePickerAndroid. */ Object.defineProperty(module.exports, "TimePickerAndroid", ({
        configurable: true,
        get () {
            invariant(false, 'TimePickerAndroid has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " + 'See https://github.com/react-native-datetimepicker/datetimepicker');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access ToolbarAndroid. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access ToolbarAndroid. */ Object.defineProperty(module.exports, "ToolbarAndroid", ({
        configurable: true,
        get () {
            invariant(false, 'ToolbarAndroid has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/toolbar-android' instead of 'react-native'. " + 'See https://github.com/react-native-toolbar-android/toolbar-android');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access ViewPagerAndroid. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access ViewPagerAndroid. */ Object.defineProperty(module.exports, "ViewPagerAndroid", ({
        configurable: true,
        get () {
            invariant(false, 'ViewPagerAndroid has been removed from React Native. ' + "It can now be installed and imported from 'react-native-pager-view' instead of 'react-native'. " + 'See https://github.com/callstack/react-native-pager-view');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access CheckBox. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access CheckBox. */ Object.defineProperty(module.exports, "CheckBox", ({
        configurable: true,
        get () {
            invariant(false, 'CheckBox has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/checkbox' instead of 'react-native'. " + 'See https://github.com/react-native-checkbox/react-native-checkbox');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access SegmentedControlIOS. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access SegmentedControlIOS. */ Object.defineProperty(module.exports, "SegmentedControlIOS", ({
        configurable: true,
        get () {
            invariant(false, 'SegmentedControlIOS has been removed from React Native. ' + "It can now be installed and imported from '@react-native-segmented-control/segmented-control' instead of 'react-native'." + 'See https://github.com/react-native-segmented-control/segmented-control');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access StatusBarIOS. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access StatusBarIOS. */ Object.defineProperty(module.exports, "StatusBarIOS", ({
        configurable: true,
        get () {
            invariant(false, 'StatusBarIOS has been removed from React Native. ' + 'Has been merged with StatusBar. ' + 'See https://reactnative.dev/docs/statusbar');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access PickerIOS. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access PickerIOS. */ Object.defineProperty(module.exports, "PickerIOS", ({
        configurable: true,
        get () {
            invariant(false, 'PickerIOS has been removed from React Native. ' + "It can now be installed and imported from '@react-native-picker/picker' instead of 'react-native'. " + 'See https://github.com/react-native-picker/picker');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access Picker. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access Picker. */ Object.defineProperty(module.exports, "Picker", ({
        configurable: true,
        get () {
            invariant(false, 'Picker has been removed from React Native. ' + "It can now be installed and imported from '@react-native-picker/picker' instead of 'react-native'. " + 'See https://github.com/react-native-picker/picker');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access DatePickerAndroid. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access DatePickerAndroid. */ Object.defineProperty(module.exports, "DatePickerAndroid", ({
        configurable: true,
        get () {
            invariant(false, 'DatePickerAndroid has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " + 'See https://github.com/react-native-datetimepicker/datetimepicker');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access MaskedViewIOS. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access MaskedViewIOS. */ Object.defineProperty(module.exports, "MaskedViewIOS", ({
        configurable: true,
        get () {
            invariant(false, 'MaskedViewIOS has been removed from React Native. ' + "It can now be installed and imported from '@react-native-masked-view/masked-view' instead of 'react-native'. " + 'See https://github.com/react-native-masked-view/masked-view');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access AsyncStorage. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access AsyncStorage. */ Object.defineProperty(module.exports, "AsyncStorage", ({
        configurable: true,
        get () {
            invariant(false, 'AsyncStorage has been removed from react-native core. ' + "It can now be installed and imported from '@react-native-async-storage/async-storage' instead of 'react-native'. " + 'See https://github.com/react-native-async-storage/async-storage');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access ImagePickerIOS. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access ImagePickerIOS. */ Object.defineProperty(module.exports, "ImagePickerIOS", ({
        configurable: true,
        get () {
            invariant(false, 'ImagePickerIOS has been removed from React Native. ' + "Please upgrade to use either 'react-native-image-picker' or 'expo-image-picker'. " + "If you cannot upgrade to a different library, please install the deprecated '@react-native-community/image-picker-ios' package. " + 'See https://github.com/rnc-archive/react-native-image-picker-ios');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access ProgressViewIOS. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access ProgressViewIOS. */ Object.defineProperty(module.exports, "ProgressViewIOS", ({
        configurable: true,
        get () {
            invariant(false, 'ProgressViewIOS has been removed from react-native core. ' + "It can now be installed and imported from '@react-native-community/progress-view' instead of 'react-native'. " + 'See https://github.com/react-native-progress-view/progress-view');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access DatePickerIOS. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access DatePickerIOS. */ Object.defineProperty(module.exports, "DatePickerIOS", ({
        configurable: true,
        get () {
            invariant(false, 'DatePickerIOS has been removed from react-native core. ' + "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " + 'See https://github.com/react-native-datetimepicker/datetimepicker');
        }
    }));
    /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
   * attempting to access Slider. */ /* $FlowFixMe[invalid-export] This is intentional: Flow will error when
   * attempting to access Slider. */ Object.defineProperty(module.exports, "Slider", ({
        configurable: true,
        get () {
            invariant(false, 'Slider has been removed from react-native core. ' + "It can now be installed and imported from '@react-native-community/slider' instead of 'react-native'. " + 'See https://github.com/callstack/react-native-slider');
        }
    }));
}


}),
"./node_modules/react-native/src/private/devmenu/DevMenu.js": 
/*!******************************************************************!*\
  !*** ./node_modules/react-native/src/private/devmenu/DevMenu.js ***!
  \******************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeDevMenu = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../specs/modules/NativeDevMenu */ "./node_modules/react-native/src/private/specs/modules/NativeDevMenu.js"));
/**
 * The DevMenu module exposes methods for interacting with the Dev Menu in development.
 */ var DevMenu = {
    show () {
        if (true) {
            var _NativeDevMenu_show;
            (_NativeDevMenu_show = _NativeDevMenu.default.show) === null || _NativeDevMenu_show === void 0 ? void 0 : _NativeDevMenu_show.call(_NativeDevMenu.default);
        }
    }
};
module.exports = DevMenu;


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/alert-triangle.png": 
/*!***************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/alert-triangle.png ***!
  \***************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
var AssetRegistry = __webpack_require__(/*! react-native/Libraries/Image/AssetRegistry */ "webpack/sharing/consume/default/react-native/Libraries/Image/AssetRegistry/react-native/Libraries/Image/AssetRegistry");
module.exports = AssetRegistry.registerAsset({
  __packager_asset: true,
  scales: [1],
  name: "alert-triangle",
  type: "png",
  hash: "4f355ba1efca4b9c0e7a6271af047f61",
  httpServerLocation: "assets/node_modules/react-native/Libraries/LogBox/UI/LogBoxImages",
  
  height: 42,
  width: 48,
});

}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/chevron-left.png": 
/*!*************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/chevron-left.png ***!
  \*************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
var AssetRegistry = __webpack_require__(/*! react-native/Libraries/Image/AssetRegistry */ "webpack/sharing/consume/default/react-native/Libraries/Image/AssetRegistry/react-native/Libraries/Image/AssetRegistry");
module.exports = AssetRegistry.registerAsset({
  __packager_asset: true,
  scales: [1],
  name: "chevron-left",
  type: "png",
  hash: "5b50965d3dfbc518fe50ce36c314a6ec",
  httpServerLocation: "assets/node_modules/react-native/Libraries/LogBox/UI/LogBoxImages",
  
  height: 28,
  width: 16,
});

}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/chevron-right.png": 
/*!**************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/chevron-right.png ***!
  \**************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
var AssetRegistry = __webpack_require__(/*! react-native/Libraries/Image/AssetRegistry */ "webpack/sharing/consume/default/react-native/Libraries/Image/AssetRegistry/react-native/Libraries/Image/AssetRegistry");
module.exports = AssetRegistry.registerAsset({
  __packager_asset: true,
  scales: [1],
  name: "chevron-right",
  type: "png",
  hash: "e62addcde857ebdb7342e6b9f1095e97",
  httpServerLocation: "assets/node_modules/react-native/Libraries/LogBox/UI/LogBoxImages",
  
  height: 28,
  width: 16,
});

}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/loader.png": 
/*!*******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/loader.png ***!
  \*******************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
var AssetRegistry = __webpack_require__(/*! react-native/Libraries/Image/AssetRegistry */ "webpack/sharing/consume/default/react-native/Libraries/Image/AssetRegistry/react-native/Libraries/Image/AssetRegistry");
module.exports = AssetRegistry.registerAsset({
  __packager_asset: true,
  scales: [1],
  name: "loader",
  type: "png",
  hash: "817aca47ff3cea63020753d336e628a4",
  httpServerLocation: "assets/node_modules/react-native/Libraries/LogBox/UI/LogBoxImages",
  
  height: 44,
  width: 44,
});

}),

}]);//# sourceMappingURL=vendors-node_modules_react-native_index_js.chunk.bundle.map?platform=android