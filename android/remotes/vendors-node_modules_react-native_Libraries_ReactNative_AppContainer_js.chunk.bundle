(self["webpackChunksataccommodation"] = self["webpackChunksataccommodation"] || []).push([["vendors-node_modules_react-native_Libraries_ReactNative_AppContainer_js"], {
"./node_modules/event-target-shim/dist/event-target-shim.js": 
/*!******************************************************************!*\
  !*** ./node_modules/event-target-shim/dist/event-target-shim.js ***!
  \******************************************************************/
(function (module, exports) {
"use strict";
/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * @copyright 2015 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
/**
 * @typedef {object} PrivateData
 * @property {EventTarget} eventTarget The event target.
 * @property {{type:string}} event The original event object.
 * @property {number} eventPhase The current event phase.
 * @property {EventTarget|null} currentTarget The current event target.
 * @property {boolean} canceled The flag to prevent default.
 * @property {boolean} stopped The flag to stop propagation.
 * @property {boolean} immediateStopped The flag to stop propagation immediately.
 * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.
 * @property {number} timeStamp The unix time.
 * @private
 */ /**
 * Private data for event wrappers.
 * @type {WeakMap<Event, PrivateData>}
 * @private
 */ var privateData = new WeakMap();
/**
 * Cache for wrapper classes.
 * @type {WeakMap<Object, Function>}
 * @private
 */ var wrappers = new WeakMap();
/**
 * Get private data.
 * @param {Event} event The event object to get private data.
 * @returns {PrivateData} The private data of the event.
 * @private
 */ function pd(event) {
    var retv = privateData.get(event);
    console.assert(retv != null, "'this' is expected an Event object, but got", event);
    return retv;
}
/**
 * https://dom.spec.whatwg.org/#set-the-canceled-flag
 * @param data {PrivateData} private data.
 */ function setCancelFlag(data) {
    if (data.passiveListener != null) {
        if (typeof console !== "undefined" && typeof console.error === "function") {
            console.error("Unable to preventDefault inside passive event listener invocation.", data.passiveListener);
        }
        return;
    }
    if (!data.event.cancelable) {
        return;
    }
    data.canceled = true;
    if (typeof data.event.preventDefault === "function") {
        data.event.preventDefault();
    }
}
/**
 * @see https://dom.spec.whatwg.org/#interface-event
 * @private
 */ /**
 * The event wrapper.
 * @constructor
 * @param {EventTarget} eventTarget The event target of this dispatching.
 * @param {Event|{type:string}} event The original event to wrap.
 */ function Event(eventTarget, event) {
    privateData.set(this, {
        eventTarget,
        event,
        eventPhase: 2,
        currentTarget: eventTarget,
        canceled: false,
        stopped: false,
        immediateStopped: false,
        passiveListener: null,
        timeStamp: event.timeStamp || Date.now()
    });
    // https://heycam.github.io/webidl/#Unforgeable
    Object.defineProperty(this, "isTrusted", {
        value: false,
        enumerable: true
    });
    // Define accessors
    var keys = Object.keys(event);
    for(var i = 0; i < keys.length; ++i){
        var key = keys[i];
        if (!(key in this)) {
            Object.defineProperty(this, key, defineRedirectDescriptor(key));
        }
    }
}
// Should be enumerable, but class methods are not enumerable.
Event.prototype = {
    /**
     * The type of this event.
     * @type {string}
     */ get type () {
        return pd(this).event.type;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     */ get target () {
        return pd(this).eventTarget;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     */ get currentTarget () {
        return pd(this).currentTarget;
    },
    /**
     * @returns {EventTarget[]} The composed path of this event.
     */ composedPath () {
        var currentTarget = pd(this).currentTarget;
        if (currentTarget == null) {
            return [];
        }
        return [
            currentTarget
        ];
    },
    /**
     * Constant of NONE.
     * @type {number}
     */ get NONE () {
        return 0;
    },
    /**
     * Constant of CAPTURING_PHASE.
     * @type {number}
     */ get CAPTURING_PHASE () {
        return 1;
    },
    /**
     * Constant of AT_TARGET.
     * @type {number}
     */ get AT_TARGET () {
        return 2;
    },
    /**
     * Constant of BUBBLING_PHASE.
     * @type {number}
     */ get BUBBLING_PHASE () {
        return 3;
    },
    /**
     * The target of this event.
     * @type {number}
     */ get eventPhase () {
        return pd(this).eventPhase;
    },
    /**
     * Stop event bubbling.
     * @returns {void}
     */ stopPropagation () {
        var data = pd(this);
        data.stopped = true;
        if (typeof data.event.stopPropagation === "function") {
            data.event.stopPropagation();
        }
    },
    /**
     * Stop event bubbling.
     * @returns {void}
     */ stopImmediatePropagation () {
        var data = pd(this);
        data.stopped = true;
        data.immediateStopped = true;
        if (typeof data.event.stopImmediatePropagation === "function") {
            data.event.stopImmediatePropagation();
        }
    },
    /**
     * The flag to be bubbling.
     * @type {boolean}
     */ get bubbles () {
        return Boolean(pd(this).event.bubbles);
    },
    /**
     * The flag to be cancelable.
     * @type {boolean}
     */ get cancelable () {
        return Boolean(pd(this).event.cancelable);
    },
    /**
     * Cancel this event.
     * @returns {void}
     */ preventDefault () {
        setCancelFlag(pd(this));
    },
    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     */ get defaultPrevented () {
        return pd(this).canceled;
    },
    /**
     * The flag to be composed.
     * @type {boolean}
     */ get composed () {
        return Boolean(pd(this).event.composed);
    },
    /**
     * The unix time of this event.
     * @type {number}
     */ get timeStamp () {
        return pd(this).timeStamp;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     * @deprecated
     */ get srcElement () {
        return pd(this).eventTarget;
    },
    /**
     * The flag to stop event bubbling.
     * @type {boolean}
     * @deprecated
     */ get cancelBubble () {
        return pd(this).stopped;
    },
    set cancelBubble (value){
        if (!value) {
            return;
        }
        var data = pd(this);
        data.stopped = true;
        if (typeof data.event.cancelBubble === "boolean") {
            data.event.cancelBubble = true;
        }
    },
    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     * @deprecated
     */ get returnValue () {
        return !pd(this).canceled;
    },
    set returnValue (value){
        if (!value) {
            setCancelFlag(pd(this));
        }
    },
    /**
     * Initialize this event object. But do nothing under event dispatching.
     * @param {string} type The event type.
     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.
     * @param {boolean} [cancelable=false] The flag to be possible to cancel.
     * @deprecated
     */ initEvent () {
    // Do nothing.
    }
};
// `constructor` is not enumerable.
Object.defineProperty(Event.prototype, "constructor", {
    value: Event,
    configurable: true,
    writable: true
});
// Ensure `event instanceof window.Event` is `true`.
if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
    Object.setPrototypeOf(Event.prototype, window.Event.prototype);
    // Make association for wrappers.
    wrappers.set(window.Event.prototype, Event);
}
/**
 * Get the property descriptor to redirect a given property.
 * @param {string} key Property name to define property descriptor.
 * @returns {PropertyDescriptor} The property descriptor to redirect the property.
 * @private
 */ function defineRedirectDescriptor(key) {
    return {
        get () {
            return pd(this).event[key];
        },
        set (value1) {
            pd(this).event[key] = value1;
        },
        configurable: true,
        enumerable: true
    };
}
/**
 * Get the property descriptor to call a given method property.
 * @param {string} key Property name to define property descriptor.
 * @returns {PropertyDescriptor} The property descriptor to call the method property.
 * @private
 */ function defineCallDescriptor(key) {
    return {
        value () {
            var event = pd(this).event;
            return event[key].apply(event, arguments);
        },
        configurable: true,
        enumerable: true
    };
}
/**
 * Define new wrapper class.
 * @param {Function} BaseEvent The base wrapper class.
 * @param {Object} proto The prototype of the original event.
 * @returns {Function} The defined wrapper class.
 * @private
 */ function defineWrapper(BaseEvent, proto) {
    var keys = Object.keys(proto);
    if (keys.length === 0) {
        return BaseEvent;
    }
    /** CustomEvent */ function CustomEvent(eventTarget, event) {
        BaseEvent.call(this, eventTarget, event);
    }
    CustomEvent.prototype = Object.create(BaseEvent.prototype, {
        constructor: {
            value: CustomEvent,
            configurable: true,
            writable: true
        }
    });
    // Define accessors.
    for(var i = 0; i < keys.length; ++i){
        var key = keys[i];
        if (!(key in BaseEvent.prototype)) {
            var descriptor = Object.getOwnPropertyDescriptor(proto, key);
            var isFunc = typeof descriptor.value === "function";
            Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));
        }
    }
    return CustomEvent;
}
/**
 * Get the wrapper class of a given prototype.
 * @param {Object} proto The prototype of the original event to get its wrapper.
 * @returns {Function} The wrapper class.
 * @private
 */ function getWrapper(proto) {
    if (proto == null || proto === Object.prototype) {
        return Event;
    }
    var wrapper = wrappers.get(proto);
    if (wrapper == null) {
        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
        wrappers.set(proto, wrapper);
    }
    return wrapper;
}
/**
 * Wrap a given event to management a dispatching.
 * @param {EventTarget} eventTarget The event target of this dispatching.
 * @param {Object} event The event to wrap.
 * @returns {Event} The wrapper instance.
 * @private
 */ function wrapEvent(eventTarget, event) {
    var Wrapper = getWrapper(Object.getPrototypeOf(event));
    return new Wrapper(eventTarget, event);
}
/**
 * Get the immediateStopped flag of a given event.
 * @param {Event} event The event to get.
 * @returns {boolean} The flag to stop propagation immediately.
 * @private
 */ function isStopped(event) {
    return pd(event).immediateStopped;
}
/**
 * Set the current event phase of a given event.
 * @param {Event} event The event to set current target.
 * @param {number} eventPhase New event phase.
 * @returns {void}
 * @private
 */ function setEventPhase(event, eventPhase) {
    pd(event).eventPhase = eventPhase;
}
/**
 * Set the current target of a given event.
 * @param {Event} event The event to set current target.
 * @param {EventTarget|null} currentTarget New current target.
 * @returns {void}
 * @private
 */ function setCurrentTarget(event, currentTarget) {
    pd(event).currentTarget = currentTarget;
}
/**
 * Set a passive listener of a given event.
 * @param {Event} event The event to set current target.
 * @param {Function|null} passiveListener New passive listener.
 * @returns {void}
 * @private
 */ function setPassiveListener(event, passiveListener) {
    pd(event).passiveListener = passiveListener;
}
/**
 * @typedef {object} ListenerNode
 * @property {Function} listener
 * @property {1|2|3} listenerType
 * @property {boolean} passive
 * @property {boolean} once
 * @property {ListenerNode|null} next
 * @private
 */ /**
 * @type {WeakMap<object, Map<string, ListenerNode>>}
 * @private
 */ var listenersMap = new WeakMap();
// Listener types
var CAPTURE = 1;
var BUBBLE = 2;
var ATTRIBUTE = 3;
/**
 * Check whether a given value is an object or not.
 * @param {any} x The value to check.
 * @returns {boolean} `true` if the value is an object.
 */ function isObject(x) {
    return x !== null && typeof x === "object" //eslint-disable-line no-restricted-syntax
    ;
}
/**
 * Get listeners.
 * @param {EventTarget} eventTarget The event target to get.
 * @returns {Map<string, ListenerNode>} The listeners.
 * @private
 */ function getListeners(eventTarget) {
    var listeners = listenersMap.get(eventTarget);
    if (listeners == null) {
        throw new TypeError("'this' is expected an EventTarget object, but got another value.");
    }
    return listeners;
}
/**
 * Get the property descriptor for the event attribute of a given event.
 * @param {string} eventName The event name to get property descriptor.
 * @returns {PropertyDescriptor} The property descriptor.
 * @private
 */ function defineEventAttributeDescriptor(eventName) {
    return {
        get () {
            var listeners = getListeners(this);
            var node = listeners.get(eventName);
            while(node != null){
                if (node.listenerType === ATTRIBUTE) {
                    return node.listener;
                }
                node = node.next;
            }
            return null;
        },
        set (listener) {
            if (typeof listener !== "function" && !isObject(listener)) {
                listener = null; // eslint-disable-line no-param-reassign
            }
            var listeners = getListeners(this);
            // Traverse to the tail while removing old value.
            var prev = null;
            var node = listeners.get(eventName);
            while(node != null){
                if (node.listenerType === ATTRIBUTE) {
                    // Remove old value.
                    if (prev !== null) {
                        prev.next = node.next;
                    } else if (node.next !== null) {
                        listeners.set(eventName, node.next);
                    } else {
                        listeners.delete(eventName);
                    }
                } else {
                    prev = node;
                }
                node = node.next;
            }
            // Add new value.
            if (listener !== null) {
                var newNode = {
                    listener,
                    listenerType: ATTRIBUTE,
                    passive: false,
                    once: false,
                    next: null
                };
                if (prev === null) {
                    listeners.set(eventName, newNode);
                } else {
                    prev.next = newNode;
                }
            }
        },
        configurable: true,
        enumerable: true
    };
}
/**
 * Define an event attribute (e.g. `eventTarget.onclick`).
 * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.
 * @param {string} eventName The event name to define.
 * @returns {void}
 */ function defineEventAttribute(eventTargetPrototype, eventName) {
    Object.defineProperty(eventTargetPrototype, `on${eventName}`, defineEventAttributeDescriptor(eventName));
}
/**
 * Define a custom EventTarget with event attributes.
 * @param {string[]} eventNames Event names for event attributes.
 * @returns {EventTarget} The custom EventTarget.
 * @private
 */ function defineCustomEventTarget(eventNames) {
    /** CustomEventTarget */ function CustomEventTarget() {
        EventTarget.call(this);
    }
    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
        constructor: {
            value: CustomEventTarget,
            configurable: true,
            writable: true
        }
    });
    for(var i = 0; i < eventNames.length; ++i){
        defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
    }
    return CustomEventTarget;
}
/**
 * EventTarget.
 *
 * - This is constructor if no arguments.
 * - This is a function which returns a CustomEventTarget constructor if there are arguments.
 *
 * For example:
 *
 *     class A extends EventTarget {}
 *     class B extends EventTarget("message") {}
 *     class C extends EventTarget("message", "error") {}
 *     class D extends EventTarget(["message", "error"]) {}
 */ function EventTarget() {
    /*eslint-disable consistent-return */ if (this instanceof EventTarget) {
        listenersMap.set(this, new Map());
        return;
    }
    if (arguments.length === 1 && Array.isArray(arguments[0])) {
        return defineCustomEventTarget(arguments[0]);
    }
    if (arguments.length > 0) {
        var types = new Array(arguments.length);
        for(var i = 0; i < arguments.length; ++i){
            types[i] = arguments[i];
        }
        return defineCustomEventTarget(types);
    }
    throw new TypeError("Cannot call a class as a function");
/*eslint-enable consistent-return */ }
// Should be enumerable, but class methods are not enumerable.
EventTarget.prototype = {
    /**
     * Add a given listener to this event target.
     * @param {string} eventName The event name to add.
     * @param {Function} listener The listener to add.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */ addEventListener (eventName, listener, options) {
        if (listener == null) {
            return;
        }
        if (typeof listener !== "function" && !isObject(listener)) {
            throw new TypeError("'listener' should be a function or an object.");
        }
        var listeners = getListeners(this);
        var optionsIsObj = isObject(options);
        var capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
        var listenerType = capture ? CAPTURE : BUBBLE;
        var newNode = {
            listener,
            listenerType,
            passive: optionsIsObj && Boolean(options.passive),
            once: optionsIsObj && Boolean(options.once),
            next: null
        };
        // Set it as the first node if the first node is null.
        var node = listeners.get(eventName);
        if (node === undefined) {
            listeners.set(eventName, newNode);
            return;
        }
        // Traverse to the tail while checking duplication..
        var prev = null;
        while(node != null){
            if (node.listener === listener && node.listenerType === listenerType) {
                // Should ignore duplication.
                return;
            }
            prev = node;
            node = node.next;
        }
        // Add it.
        prev.next = newNode;
    },
    /**
     * Remove a given listener from this event target.
     * @param {string} eventName The event name to remove.
     * @param {Function} listener The listener to remove.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */ removeEventListener (eventName, listener, options) {
        if (listener == null) {
            return;
        }
        var listeners = getListeners(this);
        var capture = isObject(options) ? Boolean(options.capture) : Boolean(options);
        var listenerType = capture ? CAPTURE : BUBBLE;
        var prev = null;
        var node = listeners.get(eventName);
        while(node != null){
            if (node.listener === listener && node.listenerType === listenerType) {
                if (prev !== null) {
                    prev.next = node.next;
                } else if (node.next !== null) {
                    listeners.set(eventName, node.next);
                } else {
                    listeners.delete(eventName);
                }
                return;
            }
            prev = node;
            node = node.next;
        }
    },
    /**
     * Dispatch a given event.
     * @param {Event|{type:string}} event The event to dispatch.
     * @returns {boolean} `false` if canceled.
     */ dispatchEvent (event) {
        if (event == null || typeof event.type !== "string") {
            throw new TypeError('"event.type" should be a string.');
        }
        // If listeners aren't registered, terminate.
        var listeners = getListeners(this);
        var eventName = event.type;
        var node = listeners.get(eventName);
        if (node == null) {
            return true;
        }
        // Since we cannot rewrite several properties, so wrap object.
        var wrappedEvent = wrapEvent(this, event);
        // This doesn't process capturing phase and bubbling phase.
        // This isn't participating in a tree.
        var prev = null;
        while(node != null){
            // Remove this listener if it's once
            if (node.once) {
                if (prev !== null) {
                    prev.next = node.next;
                } else if (node.next !== null) {
                    listeners.set(eventName, node.next);
                } else {
                    listeners.delete(eventName);
                }
            } else {
                prev = node;
            }
            // Call this listener
            setPassiveListener(wrappedEvent, node.passive ? node.listener : null);
            if (typeof node.listener === "function") {
                try {
                    node.listener.call(this, wrappedEvent);
                } catch (err) {
                    if (typeof console !== "undefined" && typeof console.error === "function") {
                        console.error(err);
                    }
                }
            } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
                node.listener.handleEvent(wrappedEvent);
            }
            // Break if `event.stopImmediatePropagation` was called.
            if (isStopped(wrappedEvent)) {
                break;
            }
            node = node.next;
        }
        setPassiveListener(wrappedEvent, null);
        setEventPhase(wrappedEvent, 0);
        setCurrentTarget(wrappedEvent, null);
        return !wrappedEvent.defaultPrevented;
    }
};
// `constructor` is not enumerable.
Object.defineProperty(EventTarget.prototype, "constructor", {
    value: EventTarget,
    configurable: true,
    writable: true
});
// Ensure `eventTarget instanceof window.EventTarget` is `true`.
if (typeof window !== "undefined" && typeof window.EventTarget !== "undefined") {
    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
}
exports.defineEventAttribute = defineEventAttribute;
exports.EventTarget = EventTarget;
exports["default"] = EventTarget;
module.exports = EventTarget;
module.exports.EventTarget = module.exports["default"] = EventTarget;
module.exports.defineEventAttribute = defineEventAttribute; //# sourceMappingURL=event-target-shim.js.map


}),
"./node_modules/react-native/Libraries/Animated/NativeAnimatedAllowlist.js": 
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/NativeAnimatedAllowlist.js ***!
  \*********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get allowInterpolationParam () {
        return allowInterpolationParam;
    },
    get allowStyleProp () {
        return allowStyleProp;
    },
    get allowTransformProp () {
        return allowTransformProp;
    },
    get default () {
        return _default;
    },
    get isSupportedColorStyleProp () {
        return isSupportedColorStyleProp;
    },
    get isSupportedInterpolationParam () {
        return isSupportedInterpolationParam;
    },
    get isSupportedStyleProp () {
        return isSupportedStyleProp;
    },
    get isSupportedTransformProp () {
        return isSupportedTransformProp;
    }
});
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../src/private/featureflags/ReactNativeFeatureFlags */ "./node_modules/react-native/src/private/featureflags/ReactNativeFeatureFlags.js"));
var SUPPORTED_COLOR_STYLES = {
    backgroundColor: true,
    borderBottomColor: true,
    borderColor: true,
    borderEndColor: true,
    borderLeftColor: true,
    borderRightColor: true,
    borderStartColor: true,
    borderTopColor: true,
    color: true,
    tintColor: true
};
var SUPPORTED_STYLES = _object_spread_props._(_object_spread._({}, SUPPORTED_COLOR_STYLES), {
    borderBottomEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderRadius: true,
    borderTopEndRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    elevation: true,
    opacity: true,
    transform: true,
    zIndex: true,
    shadowOpacity: true,
    shadowRadius: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true
});
var SUPPORTED_TRANSFORMS = _object_spread._({
    translateX: true,
    translateY: true,
    scale: true,
    scaleX: true,
    scaleY: true,
    rotate: true,
    rotateX: true,
    rotateY: true,
    rotateZ: true,
    perspective: true,
    skewX: true,
    skewY: true
}, _ReactNativeFeatureFlags.shouldUseAnimatedObjectForTransform() ? {
    matrix: true
} : {});
var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
};
var _default = {
    style: SUPPORTED_STYLES
};
function allowInterpolationParam(param) {
    SUPPORTED_INTERPOLATION_PARAMS[param] = true;
}
function allowStyleProp(prop) {
    SUPPORTED_STYLES[prop] = true;
}
function allowTransformProp(prop) {
    SUPPORTED_TRANSFORMS[prop] = true;
}
function isSupportedColorStyleProp(prop) {
    return SUPPORTED_COLOR_STYLES.hasOwnProperty(prop);
}
function isSupportedInterpolationParam(param) {
    return SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(param);
}
function isSupportedStyleProp(prop) {
    return SUPPORTED_STYLES.hasOwnProperty(prop);
}
function isSupportedTransformProp(prop) {
    return SUPPORTED_TRANSFORMS.hasOwnProperty(prop);
}


}),
"./node_modules/react-native/Libraries/Animated/NativeAnimatedModule.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/NativeAnimatedModule.js ***!
  \******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeAnimatedModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeAnimatedModule */ "./node_modules/react-native/src/private/specs/modules/NativeAnimatedModule.js"), exports));
var _default = _NativeAnimatedModule.default;


}),
"./node_modules/react-native/Libraries/Animated/NativeAnimatedTurboModule.js": 
/*!***********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/NativeAnimatedTurboModule.js ***!
  \***********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeAnimatedTurboModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeAnimatedTurboModule */ "./node_modules/react-native/src/private/specs/modules/NativeAnimatedTurboModule.js"), exports));
var _default = _NativeAnimatedTurboModule.default;


}),
"./node_modules/react-native/Libraries/Blob/NativeBlobModule.js": 
/*!**********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Blob/NativeBlobModule.js ***!
  \**********************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeBlobModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeBlobModule */ "./node_modules/react-native/src/private/specs/modules/NativeBlobModule.js"), exports));
var _default = _NativeBlobModule.default;


}),
"./node_modules/react-native/Libraries/Components/Keyboard/NativeKeyboardObserver.js": 
/*!*******************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Keyboard/NativeKeyboardObserver.js ***!
  \*******************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeKeyboardObserver = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/modules/NativeKeyboardObserver */ "./node_modules/react-native/src/private/specs/modules/NativeKeyboardObserver.js"), exports));
var _default = _NativeKeyboardObserver.default;


}),
"./node_modules/react-native/Libraries/Components/RefreshControl/AndroidSwipeRefreshLayoutNativeComponent.js": 
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/RefreshControl/AndroidSwipeRefreshLayoutNativeComponent.js ***!
  \*******************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _AndroidSwipeRefreshLayoutNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/components/AndroidSwipeRefreshLayoutNativeComponent */ "./node_modules/react-native/src/private/specs/components/AndroidSwipeRefreshLayoutNativeComponent.js"), exports));
var _default = _AndroidSwipeRefreshLayoutNativeComponent.default;


}),
"./node_modules/react-native/Libraries/Components/RefreshControl/PullToRefreshViewNativeComponent.js": 
/*!***********************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/RefreshControl/PullToRefreshViewNativeComponent.js ***!
  \***********************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _PullToRefreshViewNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/components/PullToRefreshViewNativeComponent */ "./node_modules/react-native/src/private/specs/components/PullToRefreshViewNativeComponent.js"), exports));
var _default = _PullToRefreshViewNativeComponent.default;


}),
"./node_modules/react-native/Libraries/Components/SafeAreaView/RCTSafeAreaViewNativeComponent.js": 
/*!*******************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/SafeAreaView/RCTSafeAreaViewNativeComponent.js ***!
  \*******************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _RCTSafeAreaViewNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/components/RCTSafeAreaViewNativeComponent */ "./node_modules/react-native/src/private/specs/components/RCTSafeAreaViewNativeComponent.js"), exports));
var _default = _RCTSafeAreaViewNativeComponent.default;


}),
"./node_modules/react-native/Libraries/Components/ScrollView/AndroidHorizontalScrollViewNativeComponent.js": 
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/ScrollView/AndroidHorizontalScrollViewNativeComponent.js ***!
  \*****************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../NativeComponent/NativeComponentRegistry */ "./node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js"));
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidHorizontalScrollView',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {
        decelerationRate: true,
        disableIntervalMomentum: true,
        maintainVisibleContentPosition: true,
        endFillColor: {
            process: (__webpack_require__(/*! ../../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        },
        fadingEdgeLength: true,
        nestedScrollEnabled: true,
        overScrollMode: true,
        pagingEnabled: true,
        persistentScrollbar: true,
        horizontal: true,
        scrollEnabled: true,
        scrollEventThrottle: true,
        scrollPerfTag: true,
        sendMomentumEvents: true,
        showsHorizontalScrollIndicator: true,
        snapToAlignment: true,
        snapToEnd: true,
        snapToInterval: true,
        snapToStart: true,
        snapToOffsets: true,
        contentOffset: true,
        borderBottomLeftRadius: true,
        borderBottomRightRadius: true,
        borderRadius: true,
        borderStyle: true,
        borderRightColor: {
            process: (__webpack_require__(/*! ../../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        },
        borderColor: {
            process: (__webpack_require__(/*! ../../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        },
        borderBottomColor: {
            process: (__webpack_require__(/*! ../../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        },
        borderTopLeftRadius: true,
        borderTopColor: {
            process: (__webpack_require__(/*! ../../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        },
        removeClippedSubviews: true,
        borderTopRightRadius: true,
        borderLeftColor: {
            process: (__webpack_require__(/*! ../../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        },
        pointerEvents: true
    }
};
var AndroidHorizontalScrollViewNativeComponent = _NativeComponentRegistry.get('AndroidHorizontalScrollView', ()=>__INTERNAL_VIEW_CONFIG);
var _default = AndroidHorizontalScrollViewNativeComponent;


}),
"./node_modules/react-native/Libraries/Components/ScrollView/ScrollContentViewNativeComponent.js": 
/*!*******************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/ScrollView/ScrollContentViewNativeComponent.js ***!
  \*******************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../NativeComponent/NativeComponentRegistry */ "./node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js"));
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTScrollContentView',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {}
};
var ScrollContentViewNativeComponent = _NativeComponentRegistry.get('RCTScrollContentView', ()=>__INTERNAL_VIEW_CONFIG);
var _default = ScrollContentViewNativeComponent;


}),
"./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewNativeComponent.js": 
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewNativeComponent.js ***!
  \************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../NativeComponent/NativeComponentRegistry */ "./node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js"));
var _ViewConfigIgnore = __webpack_require__(/*! ../../NativeComponent/ViewConfigIgnore */ "./node_modules/react-native/Libraries/NativeComponent/ViewConfigIgnore.js");
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var __INTERNAL_VIEW_CONFIG = _Platform.default.OS === 'android' ? {
    uiViewClassName: 'RCTScrollView',
    bubblingEventTypes: {},
    directEventTypes: {
        topMomentumScrollBegin: {
            registrationName: 'onMomentumScrollBegin'
        },
        topMomentumScrollEnd: {
            registrationName: 'onMomentumScrollEnd'
        },
        topScroll: {
            registrationName: 'onScroll'
        },
        topScrollBeginDrag: {
            registrationName: 'onScrollBeginDrag'
        },
        topScrollEndDrag: {
            registrationName: 'onScrollEndDrag'
        }
    },
    validAttributes: {
        contentOffset: {
            diff: __webpack_require__(/*! ../../Utilities/differ/pointsDiffer */ "./node_modules/react-native/Libraries/Utilities/differ/pointsDiffer.js")
        },
        decelerationRate: true,
        disableIntervalMomentum: true,
        maintainVisibleContentPosition: true,
        pagingEnabled: true,
        scrollEnabled: true,
        showsVerticalScrollIndicator: true,
        snapToAlignment: true,
        snapToEnd: true,
        snapToInterval: true,
        snapToOffsets: true,
        snapToStart: true,
        borderBottomLeftRadius: true,
        borderBottomRightRadius: true,
        sendMomentumEvents: true,
        borderRadius: true,
        nestedScrollEnabled: true,
        scrollEventThrottle: true,
        borderStyle: true,
        borderRightColor: {
            process: (__webpack_require__(/*! ../../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        },
        borderColor: {
            process: (__webpack_require__(/*! ../../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        },
        borderBottomColor: {
            process: (__webpack_require__(/*! ../../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        },
        persistentScrollbar: true,
        horizontal: true,
        endFillColor: {
            process: (__webpack_require__(/*! ../../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        },
        fadingEdgeLength: true,
        overScrollMode: true,
        borderTopLeftRadius: true,
        scrollPerfTag: true,
        borderTopColor: {
            process: (__webpack_require__(/*! ../../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        },
        removeClippedSubviews: true,
        borderTopRightRadius: true,
        borderLeftColor: {
            process: (__webpack_require__(/*! ../../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        },
        pointerEvents: true,
        isInvertedVirtualizedList: true
    }
} : {
    uiViewClassName: 'RCTScrollView',
    bubblingEventTypes: {},
    directEventTypes: {
        topMomentumScrollBegin: {
            registrationName: 'onMomentumScrollBegin'
        },
        topMomentumScrollEnd: {
            registrationName: 'onMomentumScrollEnd'
        },
        topScroll: {
            registrationName: 'onScroll'
        },
        topScrollBeginDrag: {
            registrationName: 'onScrollBeginDrag'
        },
        topScrollEndDrag: {
            registrationName: 'onScrollEndDrag'
        },
        topScrollToTop: {
            registrationName: 'onScrollToTop'
        }
    },
    validAttributes: _object_spread._({
        alwaysBounceHorizontal: true,
        alwaysBounceVertical: true,
        automaticallyAdjustContentInsets: true,
        automaticallyAdjustKeyboardInsets: true,
        automaticallyAdjustsScrollIndicatorInsets: true,
        bounces: true,
        bouncesZoom: true,
        canCancelContentTouches: true,
        centerContent: true,
        contentInset: {
            diff: __webpack_require__(/*! ../../Utilities/differ/insetsDiffer */ "./node_modules/react-native/Libraries/Utilities/differ/insetsDiffer.js")
        },
        contentOffset: {
            diff: __webpack_require__(/*! ../../Utilities/differ/pointsDiffer */ "./node_modules/react-native/Libraries/Utilities/differ/pointsDiffer.js")
        },
        contentInsetAdjustmentBehavior: true,
        decelerationRate: true,
        endDraggingSensitivityMultiplier: true,
        directionalLockEnabled: true,
        disableIntervalMomentum: true,
        indicatorStyle: true,
        inverted: true,
        keyboardDismissMode: true,
        maintainVisibleContentPosition: true,
        maximumZoomScale: true,
        minimumZoomScale: true,
        pagingEnabled: true,
        pinchGestureEnabled: true,
        scrollEnabled: true,
        scrollEventThrottle: true,
        scrollIndicatorInsets: {
            diff: __webpack_require__(/*! ../../Utilities/differ/insetsDiffer */ "./node_modules/react-native/Libraries/Utilities/differ/insetsDiffer.js")
        },
        scrollToOverflowEnabled: true,
        scrollsToTop: true,
        showsHorizontalScrollIndicator: true,
        showsVerticalScrollIndicator: true,
        snapToAlignment: true,
        snapToEnd: true,
        snapToInterval: true,
        snapToOffsets: true,
        snapToStart: true,
        verticalScrollIndicatorInsets: {
            diff: __webpack_require__(/*! ../../Utilities/differ/insetsDiffer */ "./node_modules/react-native/Libraries/Utilities/differ/insetsDiffer.js")
        },
        zoomScale: true
    }, (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
        onScrollBeginDrag: true,
        onMomentumScrollEnd: true,
        onScrollEndDrag: true,
        onMomentumScrollBegin: true,
        onScrollToTop: true,
        onScroll: true
    }))
};
var ScrollViewNativeComponent = _NativeComponentRegistry.get('RCTScrollView', ()=>__INTERNAL_VIEW_CONFIG);
var _default = ScrollViewNativeComponent;


}),
"./node_modules/react-native/Libraries/Components/Sound/NativeSoundManager.js": 
/*!************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Sound/NativeSoundManager.js ***!
  \************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeSoundManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../../src/private/specs/modules/NativeSoundManager */ "./node_modules/react-native/src/private/specs/modules/NativeSoundManager.js"), exports));
var _default = _NativeSoundManager.default;


}),
"./node_modules/react-native/Libraries/Debugging/DebuggingOverlayNativeComponent.js": 
/*!******************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Debugging/DebuggingOverlayNativeComponent.js ***!
  \******************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _DebuggingOverlayNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/components/DebuggingOverlayNativeComponent */ "./node_modules/react-native/src/private/specs/components/DebuggingOverlayNativeComponent.js"), exports));
var _default = _DebuggingOverlayNativeComponent.default;


}),
"./node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js ***!
  \********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return NativeEventEmitter;
    }
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./RCTDeviceEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var NativeEventEmitter = /*#__PURE__*/ function() {
    function NativeEventEmitter(nativeModule) {
        _class_call_check._(this, NativeEventEmitter);
        if (_Platform.default.OS === 'ios') {
            (0, _invariant.default)(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');
        }
        var hasAddListener = !!nativeModule && typeof nativeModule.addListener === 'function';
        var hasRemoveListeners = !!nativeModule && typeof nativeModule.removeListeners === 'function';
        if (nativeModule && hasAddListener && hasRemoveListeners) {
            this._nativeModule = nativeModule;
        } else if (nativeModule != null) {
            if (!hasAddListener) {
                console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.');
            }
            if (!hasRemoveListeners) {
                console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.');
            }
        }
    }
    _create_class._(NativeEventEmitter, [
        {
            key: "addListener",
            value: function addListener(eventType, listener, context) {
                var _this__nativeModule;
                (_this__nativeModule = this._nativeModule) === null || _this__nativeModule === void 0 ? void 0 : _this__nativeModule.addListener(eventType);
                var subscription = _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);
                return {
                    remove: ()=>{
                        if (subscription != null) {
                            var _this__nativeModule;
                            (_this__nativeModule = this._nativeModule) === null || _this__nativeModule === void 0 ? void 0 : _this__nativeModule.removeListeners(1);
                            subscription.remove();
                            subscription = null;
                        }
                    }
                };
            }
        },
        {
            key: "emit",
            value: function emit(eventType, ...args) {
                var _RCTDeviceEventEmitter1;
                (_RCTDeviceEventEmitter1 = _RCTDeviceEventEmitter.default).emit.apply(_RCTDeviceEventEmitter1, [
                    eventType
                ].concat(_to_consumable_array._(args)));
            }
        },
        {
            key: "removeAllListeners",
            value: function removeAllListeners(eventType) {
                var _this__nativeModule;
                (0, _invariant.default)(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');
                (_this__nativeModule = this._nativeModule) === null || _this__nativeModule === void 0 ? void 0 : _this__nativeModule.removeListeners(this.listenerCount(eventType));
                _RCTDeviceEventEmitter.default.removeAllListeners(eventType);
            }
        },
        {
            key: "listenerCount",
            value: function listenerCount(eventType) {
                return _RCTDeviceEventEmitter.default.listenerCount(eventType);
            }
        }
    ]);
    return NativeEventEmitter;
}();


}),
"./node_modules/react-native/Libraries/Image/ImageViewNativeComponent.js": 
/*!*******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Image/ImageViewNativeComponent.js ***!
  \*******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../NativeComponent/NativeComponentRegistry */ "./node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js"));
var _ViewConfigIgnore = __webpack_require__(/*! ../NativeComponent/ViewConfigIgnore */ "./node_modules/react-native/Libraries/NativeComponent/ViewConfigIgnore.js");
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/codegenNativeCommands */ "./node_modules/react-native/Libraries/Utilities/codegenNativeCommands.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'setIsVisible_EXPERIMENTAL'
    ]
});
var __INTERNAL_VIEW_CONFIG = _Platform.default.OS === 'android' ? {
    uiViewClassName: 'RCTImageView',
    bubblingEventTypes: {},
    directEventTypes: {
        topLoadStart: {
            registrationName: 'onLoadStart'
        },
        topProgress: {
            registrationName: 'onProgress'
        },
        topError: {
            registrationName: 'onError'
        },
        topLoad: {
            registrationName: 'onLoad'
        },
        topLoadEnd: {
            registrationName: 'onLoadEnd'
        }
    },
    validAttributes: {
        blurRadius: true,
        defaultSource: true,
        internal_analyticTag: true,
        resizeMethod: true,
        resizeMode: true,
        resizeMultiplier: true,
        tintColor: {
            process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        },
        borderBottomLeftRadius: true,
        borderTopLeftRadius: true,
        src: true,
        source: true,
        borderRadius: true,
        headers: true,
        shouldNotifyLoadEvents: true,
        overlayColor: {
            process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        },
        borderColor: {
            process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        },
        accessible: true,
        progressiveRenderingEnabled: true,
        fadeDuration: true,
        borderBottomRightRadius: true,
        borderTopRightRadius: true,
        loadingIndicatorSrc: true
    }
} : {
    uiViewClassName: 'RCTImageView',
    bubblingEventTypes: {},
    directEventTypes: {
        topLoadStart: {
            registrationName: 'onLoadStart'
        },
        topProgress: {
            registrationName: 'onProgress'
        },
        topError: {
            registrationName: 'onError'
        },
        topPartialLoad: {
            registrationName: 'onPartialLoad'
        },
        topLoad: {
            registrationName: 'onLoad'
        },
        topLoadEnd: {
            registrationName: 'onLoadEnd'
        }
    },
    validAttributes: _object_spread._({
        blurRadius: true,
        capInsets: {
            diff: __webpack_require__(/*! ../Utilities/differ/insetsDiffer */ "./node_modules/react-native/Libraries/Utilities/differ/insetsDiffer.js")
        },
        defaultSource: {
            process: __webpack_require__(/*! ./resolveAssetSource */ "./node_modules/react-native/Libraries/Image/resolveAssetSource.js")
        },
        internal_analyticTag: true,
        resizeMode: true,
        source: true,
        tintColor: {
            process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        }
    }, (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
        onLoadStart: true,
        onLoad: true,
        onLoadEnd: true,
        onProgress: true,
        onError: true,
        onPartialLoad: true
    }))
};
var ImageViewNativeComponent = _NativeComponentRegistry.get('RCTImageView', ()=>__INTERNAL_VIEW_CONFIG);
var _default = ImageViewNativeComponent;


}),
"./node_modules/react-native/Libraries/Image/NativeImageLoaderAndroid.js": 
/*!*******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Image/NativeImageLoaderAndroid.js ***!
  \*******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeImageLoaderAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeImageLoaderAndroid */ "./node_modules/react-native/src/private/specs/modules/NativeImageLoaderAndroid.js"), exports));
var _default = _NativeImageLoaderAndroid.default;


}),
"./node_modules/react-native/Libraries/Image/TextInlineImageNativeComponent.js": 
/*!*************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Image/TextInlineImageNativeComponent.js ***!
  \*************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../NativeComponent/NativeComponentRegistry */ "./node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js"));
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTTextInlineImage',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {
        resizeMode: true,
        src: true,
        tintColor: {
            process: (__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js")/* ["default"] */["default"])
        },
        headers: true
    }
};
var TextInlineImage = _NativeComponentRegistry.get('RCTTextInlineImage', ()=>__INTERNAL_VIEW_CONFIG);
var _default = TextInlineImage;


}),
"./node_modules/react-native/Libraries/Interaction/NativeFrameRateLogger.js": 
/*!**********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Interaction/NativeFrameRateLogger.js ***!
  \**********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeFrameRateLogger = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeFrameRateLogger */ "./node_modules/react-native/src/private/specs/modules/NativeFrameRateLogger.js"), exports));
var _default = _NativeFrameRateLogger.default;


}),
"./node_modules/react-native/Libraries/Linking/NativeIntentAndroid.js": 
/*!****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Linking/NativeIntentAndroid.js ***!
  \****************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeIntentAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeIntentAndroid */ "./node_modules/react-native/src/private/specs/modules/NativeIntentAndroid.js"), exports));
var _default = _NativeIntentAndroid.default;


}),
"./node_modules/react-native/Libraries/Linking/NativeLinkingManager.js": 
/*!*****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Linking/NativeLinkingManager.js ***!
  \*****************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeLinkingManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeLinkingManager */ "./node_modules/react-native/src/private/specs/modules/NativeLinkingManager.js"), exports));
var _default = _NativeLinkingManager.default;


}),
"./node_modules/react-native/Libraries/Network/NativeNetworkingAndroid.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Network/NativeNetworkingAndroid.js ***!
  \********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeNetworkingAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeNetworkingAndroid */ "./node_modules/react-native/src/private/specs/modules/NativeNetworkingAndroid.js"), exports));
var _default = _NativeNetworkingAndroid.default;


}),
"./node_modules/react-native/Libraries/ReactNative/NativeI18nManager.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/ReactNative/NativeI18nManager.js ***!
  \******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeI18nManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeI18nManager */ "./node_modules/react-native/src/private/specs/modules/NativeI18nManager.js"), exports));
var _default = _NativeI18nManager.default;


}),
"./node_modules/react-native/Libraries/ReactNative/requireNativeComponent.js": 
/*!***********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/ReactNative/requireNativeComponent.js ***!
  \***********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var createReactNativeComponentClass = (__webpack_require__(/*! ../Renderer/shims/createReactNativeComponentClass */ "./node_modules/react-native/Libraries/Renderer/shims/createReactNativeComponentClass.js")/* ["default"] */["default"]);
var getNativeComponentAttributes = __webpack_require__(/*! ./getNativeComponentAttributes */ "./node_modules/react-native/Libraries/ReactNative/getNativeComponentAttributes.js");
var requireNativeComponent = (uiViewClassName)=>createReactNativeComponentClass(uiViewClassName, ()=>getNativeComponentAttributes(uiViewClassName));
var _default = requireNativeComponent;


}),
"./node_modules/react-native/Libraries/Text/TextNativeComponent.js": 
/*!*************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Text/TextNativeComponent.js ***!
  \*************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get NativeText () {
        return NativeText;
    },
    get NativeVirtualText () {
        return NativeVirtualText;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _ViewConfig = __webpack_require__(/*! ../NativeComponent/ViewConfig */ "./node_modules/react-native/Libraries/NativeComponent/ViewConfig.js");
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../ReactNative/UIManager */ "./node_modules/react-native/Libraries/ReactNative/UIManager.js"));
var _createReactNativeComponentClass = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Renderer/shims/createReactNativeComponentClass */ "./node_modules/react-native/Libraries/Renderer/shims/createReactNativeComponentClass.js"));
var textViewConfig = {
    validAttributes: {
        isHighlighted: true,
        isPressable: true,
        numberOfLines: true,
        ellipsizeMode: true,
        allowFontScaling: true,
        dynamicTypeRamp: true,
        maxFontSizeMultiplier: true,
        disabled: true,
        selectable: true,
        selectionColor: true,
        adjustsFontSizeToFit: true,
        minimumFontScale: true,
        textBreakStrategy: true,
        onTextLayout: true,
        onInlineViewLayout: true,
        dataDetectorType: true,
        android_hyphenationFrequency: true,
        lineBreakStrategyIOS: true
    },
    directEventTypes: {
        topTextLayout: {
            registrationName: 'onTextLayout'
        },
        topInlineViewLayout: {
            registrationName: 'onInlineViewLayout'
        }
    },
    uiViewClassName: 'RCTText'
};
var virtualTextViewConfig = {
    validAttributes: {
        isHighlighted: true,
        isPressable: true,
        maxFontSizeMultiplier: true
    },
    uiViewClassName: 'RCTVirtualText'
};
var NativeText = (0, _createReactNativeComponentClass.default)('RCTText', ()=>(0, _ViewConfig.createViewConfig)(textViewConfig));
var NativeVirtualText = !__webpack_require__.g.RN$Bridgeless && !_UIManager.default.hasViewManagerConfig('RCTVirtualText') ? NativeText : (0, _createReactNativeComponentClass.default)('RCTVirtualText', ()=>(0, _ViewConfig.createViewConfig)(virtualTextViewConfig));


}),
"./node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js": 
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js ***!
  \*********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _requireNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Libraries/ReactNative/requireNativeComponent */ "./node_modules/react-native/Libraries/ReactNative/requireNativeComponent.js"));
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../ReactNative/UIManager */ "./node_modules/react-native/Libraries/ReactNative/UIManager.js"));
function codegenNativeComponent(componentName, options) {
    if (__webpack_require__.g.RN$Bridgeless === true && true) {
        console.warn(`Codegen didn't run for ${componentName}. This will be an error in the future. Make sure you are using @react-native/babel-preset when building your JavaScript code.`);
    }
    var componentNameInUse = options && options.paperComponentName != null ? options.paperComponentName : componentName;
    if (options != null && options.paperComponentNameDeprecated != null) {
        if (_UIManager.default.hasViewManagerConfig(componentName)) {
            componentNameInUse = componentName;
        } else if (options.paperComponentNameDeprecated != null && _UIManager.default.hasViewManagerConfig(options.paperComponentNameDeprecated)) {
            componentNameInUse = options.paperComponentNameDeprecated;
        } else {
            throw new Error(`Failed to find native component for either ${componentName} or ${options.paperComponentNameDeprecated ?? '(unknown)'}`);
        }
    }
    return (0, _requireNativeComponent.default)(componentNameInUse);
}
var _default = codegenNativeComponent;


}),
"./node_modules/react-native/Libraries/WebSocket/NativeWebSocketModule.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/WebSocket/NativeWebSocketModule.js ***!
  \********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeWebSocketModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeWebSocketModule */ "./node_modules/react-native/src/private/specs/modules/NativeWebSocketModule.js"), exports));
var _default = _NativeWebSocketModule.default;


}),
"./node_modules/react-native/src/private/animated/NativeAnimatedHelper.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/src/private/animated/NativeAnimatedHelper.js ***!
  \********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _NativeAnimatedModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/Animated/NativeAnimatedModule */ "./node_modules/react-native/Libraries/Animated/NativeAnimatedModule.js"));
var _NativeAnimatedTurboModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/Animated/NativeAnimatedTurboModule */ "./node_modules/react-native/Libraries/Animated/NativeAnimatedTurboModule.js"));
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/EventEmitter/NativeEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js"));
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/EventEmitter/RCTDeviceEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../featureflags/ReactNativeFeatureFlags */ "./node_modules/react-native/src/private/featureflags/ReactNativeFeatureFlags.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! nullthrows */ "./node_modules/nullthrows/nullthrows.js"));
var NativeAnimatedModule = _NativeAnimatedModule.default ?? _NativeAnimatedTurboModule.default;
var __nativeAnimatedNodeTagCount = 1;
var __nativeAnimationIdCount = 1;
var nativeEventEmitter;
var waitingForQueuedOperations = new Set();
var queueOperations = false;
var queue = [];
var singleOpQueue = [];
var isSingleOpBatching = _Platform.default.OS === 'android' && (NativeAnimatedModule === null || NativeAnimatedModule === void 0 ? void 0 : NativeAnimatedModule.queueAndExecuteBatchedOperations) != null && _ReactNativeFeatureFlags.animatedShouldUseSingleOp();
var flushQueueImmediate = null;
var eventListenerGetValueCallbacks = {};
var eventListenerAnimationFinishedCallbacks = {};
var globalEventEmitterGetValueListener = null;
var globalEventEmitterAnimationFinishedListener = null;
function createNativeOperations() {
    var methodNames = [
        'createAnimatedNode',
        'updateAnimatedNodeConfig',
        'getValue',
        'startListeningToAnimatedNodeValue',
        'stopListeningToAnimatedNodeValue',
        'connectAnimatedNodes',
        'disconnectAnimatedNodes',
        'startAnimatingNode',
        'stopAnimation',
        'setAnimatedNodeValue',
        'setAnimatedNodeOffset',
        'flattenAnimatedNodeOffset',
        'extractAnimatedNodeOffset',
        'connectAnimatedNodeToView',
        'disconnectAnimatedNodeFromView',
        'restoreDefaultValues',
        'dropAnimatedNode',
        'addAnimatedEventToView',
        'removeAnimatedEventFromView',
        'addListener',
        'removeListener'
    ];
    var nativeOperations = {};
    if (isSingleOpBatching) {
        var _loop = function(ii, length) {
            var methodName = methodNames[ii];
            var operationID = ii + 1;
            nativeOperations[methodName] = (...args)=>{
                var _singleOpQueue;
                (_singleOpQueue = singleOpQueue).push.apply(_singleOpQueue, [
                    operationID
                ].concat(_to_consumable_array._(args)));
            };
        };
        for(var ii = 0, length = methodNames.length; ii < length; ii++)_loop(ii, length);
    } else {
        var _loop1 = function(ii1, length1) {
            var methodName = methodNames[ii1];
            nativeOperations[methodName] = (...args)=>{
                var method = (0, _nullthrows.default)(NativeAnimatedModule)[methodName];
                if (queueOperations || queue.length !== 0) {
                    queue.push(()=>method.apply(void 0, _to_consumable_array._(args)));
                } else {
                    method.apply(void 0, _to_consumable_array._(args));
                }
            };
        };
        for(var ii1 = 0, length1 = methodNames.length; ii1 < length1; ii1++)_loop1(ii1, length1);
    }
    return nativeOperations;
}
var NativeOperations = createNativeOperations();
var API = {
    getValue: isSingleOpBatching ? (tag, saveValueCallback)=>{
        if (saveValueCallback) {
            eventListenerGetValueCallbacks[tag] = saveValueCallback;
        }
        NativeOperations.getValue(tag);
    } : (tag, saveValueCallback)=>{
        NativeOperations.getValue(tag, saveValueCallback);
    },
    setWaitingForIdentifier (id) {
        waitingForQueuedOperations.add(id);
        queueOperations = true;
        if (_ReactNativeFeatureFlags.animatedShouldDebounceQueueFlush() && flushQueueImmediate) {
            if (_ReactNativeFeatureFlags.enableAnimatedClearImmediateFix()) {
                clearImmediate(flushQueueImmediate);
            } else {
                clearTimeout(flushQueueImmediate);
            }
        }
    },
    unsetWaitingForIdentifier (id) {
        waitingForQueuedOperations.delete(id);
        if (waitingForQueuedOperations.size === 0) {
            queueOperations = false;
            API.disableQueue();
        }
    },
    disableQueue () {
        (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
        if (_ReactNativeFeatureFlags.animatedShouldDebounceQueueFlush()) {
            var prevImmediate = flushQueueImmediate;
            clearImmediate(prevImmediate);
            flushQueueImmediate = setImmediate(API.flushQueue);
        } else {
            API.flushQueue();
        }
    },
    flushQueue: isSingleOpBatching ? ()=>{
        var _NativeAnimatedModule_queueAndExecuteBatchedOperations;
        (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
        flushQueueImmediate = null;
        if (singleOpQueue.length === 0) {
            return;
        }
        ensureGlobalEventEmitterListeners();
        NativeAnimatedModule === null || NativeAnimatedModule === void 0 ? void 0 : (_NativeAnimatedModule_queueAndExecuteBatchedOperations = NativeAnimatedModule.queueAndExecuteBatchedOperations) === null || _NativeAnimatedModule_queueAndExecuteBatchedOperations === void 0 ? void 0 : _NativeAnimatedModule_queueAndExecuteBatchedOperations.call(NativeAnimatedModule, singleOpQueue);
        singleOpQueue.length = 0;
    } : ()=>{
        (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
        flushQueueImmediate = null;
        if (queue.length === 0) {
            return;
        }
        if (_Platform.default.OS === 'android') {
            var _NativeAnimatedModule_startOperationBatch;
            NativeAnimatedModule === null || NativeAnimatedModule === void 0 ? void 0 : (_NativeAnimatedModule_startOperationBatch = NativeAnimatedModule.startOperationBatch) === null || _NativeAnimatedModule_startOperationBatch === void 0 ? void 0 : _NativeAnimatedModule_startOperationBatch.call(NativeAnimatedModule);
        }
        for(var q = 0, l = queue.length; q < l; q++){
            queue[q]();
        }
        queue.length = 0;
        if (_Platform.default.OS === 'android') {
            var _NativeAnimatedModule_finishOperationBatch;
            NativeAnimatedModule === null || NativeAnimatedModule === void 0 ? void 0 : (_NativeAnimatedModule_finishOperationBatch = NativeAnimatedModule.finishOperationBatch) === null || _NativeAnimatedModule_finishOperationBatch === void 0 ? void 0 : _NativeAnimatedModule_finishOperationBatch.call(NativeAnimatedModule);
        }
    },
    createAnimatedNode (tag, config) {
        NativeOperations.createAnimatedNode(tag, config);
    },
    updateAnimatedNodeConfig (tag, config) {
        var _NativeOperations_updateAnimatedNodeConfig;
        (_NativeOperations_updateAnimatedNodeConfig = NativeOperations.updateAnimatedNodeConfig) === null || _NativeOperations_updateAnimatedNodeConfig === void 0 ? void 0 : _NativeOperations_updateAnimatedNodeConfig.call(NativeOperations, tag, config);
    },
    startListeningToAnimatedNodeValue (tag) {
        NativeOperations.startListeningToAnimatedNodeValue(tag);
    },
    stopListeningToAnimatedNodeValue (tag) {
        NativeOperations.stopListeningToAnimatedNodeValue(tag);
    },
    connectAnimatedNodes (parentTag, childTag) {
        NativeOperations.connectAnimatedNodes(parentTag, childTag);
    },
    disconnectAnimatedNodes (parentTag, childTag) {
        NativeOperations.disconnectAnimatedNodes(parentTag, childTag);
    },
    startAnimatingNode: isSingleOpBatching ? (animationId, nodeTag, config, endCallback)=>{
        if (endCallback) {
            eventListenerAnimationFinishedCallbacks[animationId] = endCallback;
        }
        NativeOperations.startAnimatingNode(animationId, nodeTag, config);
    } : (animationId, nodeTag, config, endCallback)=>{
        NativeOperations.startAnimatingNode(animationId, nodeTag, config, endCallback);
    },
    stopAnimation (animationId) {
        NativeOperations.stopAnimation(animationId);
    },
    setAnimatedNodeValue (nodeTag, value) {
        NativeOperations.setAnimatedNodeValue(nodeTag, value);
    },
    setAnimatedNodeOffset (nodeTag, offset) {
        NativeOperations.setAnimatedNodeOffset(nodeTag, offset);
    },
    flattenAnimatedNodeOffset (nodeTag) {
        NativeOperations.flattenAnimatedNodeOffset(nodeTag);
    },
    extractAnimatedNodeOffset (nodeTag) {
        NativeOperations.extractAnimatedNodeOffset(nodeTag);
    },
    connectAnimatedNodeToView (nodeTag, viewTag) {
        NativeOperations.connectAnimatedNodeToView(nodeTag, viewTag);
    },
    disconnectAnimatedNodeFromView (nodeTag, viewTag) {
        NativeOperations.disconnectAnimatedNodeFromView(nodeTag, viewTag);
    },
    restoreDefaultValues (nodeTag) {
        var _NativeOperations_restoreDefaultValues;
        (_NativeOperations_restoreDefaultValues = NativeOperations.restoreDefaultValues) === null || _NativeOperations_restoreDefaultValues === void 0 ? void 0 : _NativeOperations_restoreDefaultValues.call(NativeOperations, nodeTag);
    },
    dropAnimatedNode (tag) {
        NativeOperations.dropAnimatedNode(tag);
    },
    addAnimatedEventToView (viewTag, eventName, eventMapping) {
        NativeOperations.addAnimatedEventToView(viewTag, eventName, eventMapping);
    },
    removeAnimatedEventFromView (viewTag, eventName, animatedNodeTag) {
        NativeOperations.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
    }
};
function ensureGlobalEventEmitterListeners() {
    if (globalEventEmitterGetValueListener && globalEventEmitterAnimationFinishedListener) {
        return;
    }
    globalEventEmitterGetValueListener = _RCTDeviceEventEmitter.default.addListener('onNativeAnimatedModuleGetValue', (params)=>{
        var tag = params.tag;
        var callback = eventListenerGetValueCallbacks[tag];
        if (!callback) {
            return;
        }
        callback(params.value);
        delete eventListenerGetValueCallbacks[tag];
    });
    globalEventEmitterAnimationFinishedListener = _RCTDeviceEventEmitter.default.addListener('onNativeAnimatedModuleAnimationFinished', (params)=>{
        var animations = Array.isArray(params) ? params : [
            params
        ];
        for (var animation of animations){
            var animationId = animation.animationId;
            var callback = eventListenerAnimationFinishedCallbacks[animationId];
            if (callback) {
                callback(animation);
                delete eventListenerAnimationFinishedCallbacks[animationId];
            }
        }
    });
}
function generateNewNodeTag() {
    return __nativeAnimatedNodeTagCount++;
}
function generateNewAnimationId() {
    return __nativeAnimationIdCount++;
}
function assertNativeAnimatedModule() {
    (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
}
var _warnedMissingNativeAnimated = false;
function shouldUseNativeDriver(config) {
    if (config.useNativeDriver == null) {
        console.warn('Animated: `useNativeDriver` was not specified. This is a required ' + 'option and must be explicitly set to `true` or `false`');
    }
    if (config.useNativeDriver === true && !NativeAnimatedModule) {
        if (true) {
            if (!_warnedMissingNativeAnimated) {
                console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'Make sure to run `bundle exec pod install` first. Read more about autolinking: https://github.com/react-native-community/cli/blob/master/docs/autolinking.md');
                _warnedMissingNativeAnimated = true;
            }
        }
        return false;
    }
    return config.useNativeDriver || false;
}
function transformDataType(value) {
    if (typeof value !== 'string') {
        return value;
    }
    if (value.endsWith('deg')) {
        var degrees = parseFloat(value) || 0;
        return degrees * Math.PI / 180.0;
    } else if (value.endsWith('rad')) {
        return parseFloat(value) || 0;
    } else {
        return value;
    }
}
var _default = {
    API,
    generateNewNodeTag,
    generateNewAnimationId,
    assertNativeAnimatedModule,
    shouldUseNativeDriver,
    transformDataType,
    get nativeEventEmitter () {
        if (!nativeEventEmitter) {
            nativeEventEmitter = new _NativeEventEmitter.default(_Platform.default.OS !== 'ios' ? null : NativeAnimatedModule);
        }
        return nativeEventEmitter;
    }
};


}),
"./node_modules/react-native/src/private/animated/NativeAnimatedValidation.js": 
/*!************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/animated/NativeAnimatedValidation.js ***!
  \************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get validateInterpolation () {
        return validateInterpolation;
    },
    get validateStyles () {
        return validateStyles;
    },
    get validateTransform () {
        return validateTransform;
    }
});
var _NativeAnimatedAllowlist = __webpack_require__(/*! ../../../Libraries/Animated/NativeAnimatedAllowlist */ "./node_modules/react-native/Libraries/Animated/NativeAnimatedAllowlist.js");
function validateInterpolation(config) {
    for(var key in config){
        if (key !== 'debugID' && !(0, _NativeAnimatedAllowlist.isSupportedInterpolationParam)(key)) {
            console.error(`Interpolation property '${key}' is not supported by native animated module`);
        }
    }
}
function validateStyles(styles) {
    for(var key in styles){
        if (!(0, _NativeAnimatedAllowlist.isSupportedStyleProp)(key)) {
            console.error(`Style property '${key}' is not supported by native animated module`);
        }
    }
}
function validateTransform(configs) {
    configs.forEach((config)=>{
        if (!(0, _NativeAnimatedAllowlist.isSupportedTransformProp)(config.property)) {
            console.error(`Property '${config.property}' is not supported by native animated module`);
        }
    });
}


}),
"./node_modules/react-native/src/private/specs/components/AndroidHorizontalScrollContentViewNativeComponent.js": 
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/components/AndroidHorizontalScrollContentViewNativeComponent.js ***!
  \*********************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeComponent */ "./node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js"));
var NativeComponentRegistry = __webpack_require__(/*! react-native/Libraries/NativeComponent/NativeComponentRegistry */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/NativeComponentRegistry/react-native/Libraries/NativeComponent/NativeComponentRegistry");
var nativeComponentName = 'AndroidHorizontalScrollContentView';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidHorizontalScrollContentView',
    validAttributes: {
        removeClippedSubviews: true
    }
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
"./node_modules/react-native/src/private/specs/components/AndroidSwipeRefreshLayoutNativeComponent.js": 
/*!************************************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/components/AndroidSwipeRefreshLayoutNativeComponent.js ***!
  \************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeCommands */ "./node_modules/react-native/Libraries/Utilities/codegenNativeCommands.js"));
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeComponent */ "./node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var NativeComponentRegistry = __webpack_require__(/*! react-native/Libraries/NativeComponent/NativeComponentRegistry */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/NativeComponentRegistry/react-native/Libraries/NativeComponent/NativeComponentRegistry");
var ConditionallyIgnoredEventHandlers = (__webpack_require__(/*! react-native/Libraries/NativeComponent/ViewConfigIgnore */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/ViewConfigIgnore/react-native/Libraries/NativeComponent/ViewConfigIgnore")/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(/*! react-native/Libraries/ReactNative/RendererProxy */ "webpack/sharing/consume/default/react-native/Libraries/ReactNative/RendererProxy/react-native/Libraries/ReactNative/RendererProxy")/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'AndroidSwipeRefreshLayout';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidSwipeRefreshLayout',
    directEventTypes: {
        topRefresh: {
            registrationName: 'onRefresh'
        }
    },
    validAttributes: _object_spread._({
        enabled: true,
        colors: {
            process: __webpack_require__(/*! react-native/Libraries/StyleSheet/processColorArray */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColorArray/react-native/Libraries/StyleSheet/processColorArray")
        },
        progressBackgroundColor: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        size: true,
        progressViewOffset: true,
        refreshing: true
    }, ConditionallyIgnoredEventHandlers({
        onRefresh: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);
var Commands = {
    setNativeRefreshing (ref, value) {
        dispatchCommand(ref, "setNativeRefreshing", [
            value
        ]);
    }
};


}),
"./node_modules/react-native/src/private/specs/components/DebuggingOverlayNativeComponent.js": 
/*!***************************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/components/DebuggingOverlayNativeComponent.js ***!
  \***************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeCommands */ "./node_modules/react-native/Libraries/Utilities/codegenNativeCommands.js"));
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeComponent */ "./node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var NativeComponentRegistry = __webpack_require__(/*! react-native/Libraries/NativeComponent/NativeComponentRegistry */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/NativeComponentRegistry/react-native/Libraries/NativeComponent/NativeComponentRegistry");
var dispatchCommand = (__webpack_require__(/*! react-native/Libraries/ReactNative/RendererProxy */ "webpack/sharing/consume/default/react-native/Libraries/ReactNative/RendererProxy/react-native/Libraries/ReactNative/RendererProxy")/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'DebuggingOverlay';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'DebuggingOverlay',
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);
var Commands = {
    highlightTraceUpdates (ref, updates) {
        dispatchCommand(ref, "highlightTraceUpdates", [
            updates
        ]);
    },
    highlightElements (ref, elements) {
        dispatchCommand(ref, "highlightElements", [
            elements
        ]);
    },
    clearElementsHighlights (ref) {
        dispatchCommand(ref, "clearElementsHighlights", []);
    }
};


}),
"./node_modules/react-native/src/private/specs/components/PullToRefreshViewNativeComponent.js": 
/*!****************************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/components/PullToRefreshViewNativeComponent.js ***!
  \****************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeCommands */ "./node_modules/react-native/Libraries/Utilities/codegenNativeCommands.js"));
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeComponent */ "./node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var NativeComponentRegistry = __webpack_require__(/*! react-native/Libraries/NativeComponent/NativeComponentRegistry */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/NativeComponentRegistry/react-native/Libraries/NativeComponent/NativeComponentRegistry");
var ConditionallyIgnoredEventHandlers = (__webpack_require__(/*! react-native/Libraries/NativeComponent/ViewConfigIgnore */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/ViewConfigIgnore/react-native/Libraries/NativeComponent/ViewConfigIgnore")/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(/*! react-native/Libraries/ReactNative/RendererProxy */ "webpack/sharing/consume/default/react-native/Libraries/ReactNative/RendererProxy/react-native/Libraries/ReactNative/RendererProxy")/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'RCTRefreshControl';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTRefreshControl',
    directEventTypes: {
        topRefresh: {
            registrationName: 'onRefresh'
        }
    },
    validAttributes: _object_spread._({
        tintColor: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        titleColor: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        title: true,
        progressViewOffset: true,
        refreshing: true
    }, ConditionallyIgnoredEventHandlers({
        onRefresh: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);
var Commands = {
    setNativeRefreshing (ref, refreshing) {
        dispatchCommand(ref, "setNativeRefreshing", [
            refreshing
        ]);
    }
};


}),
"./node_modules/react-native/src/private/specs/components/RCTSafeAreaViewNativeComponent.js": 
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/components/RCTSafeAreaViewNativeComponent.js ***!
  \**************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Utilities/codegenNativeComponent */ "./node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js"));
var NativeComponentRegistry = __webpack_require__(/*! react-native/Libraries/NativeComponent/NativeComponentRegistry */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/NativeComponentRegistry/react-native/Libraries/NativeComponent/NativeComponentRegistry");
var nativeComponentName = 'RCTSafeAreaView';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTSafeAreaView',
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
"./node_modules/react-native/src/private/specs/modules/NativeAnimatedModule.js": 
/*!*************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeAnimatedModule.js ***!
  \*************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _shouldUseTurboAnimatedModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Animated/shouldUseTurboAnimatedModule */ "./node_modules/react-native/Libraries/Animated/shouldUseTurboAnimatedModule.js"));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var NativeModule = !(0, _shouldUseTurboAnimatedModule.default)() ? _TurboModuleRegistry.get('NativeAnimatedModule') : null;
var _default = NativeModule;


}),
"./node_modules/react-native/src/private/specs/modules/NativeAnimatedTurboModule.js": 
/*!******************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeAnimatedTurboModule.js ***!
  \******************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _shouldUseTurboAnimatedModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../../Libraries/Animated/shouldUseTurboAnimatedModule */ "./node_modules/react-native/Libraries/Animated/shouldUseTurboAnimatedModule.js"));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var NativeModule = (0, _shouldUseTurboAnimatedModule.default)() ? _TurboModuleRegistry.get('NativeAnimatedTurboModule') : null;
var _default = NativeModule;


}),
"./node_modules/react-native/src/private/specs/modules/NativeBlobModule.js": 
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeBlobModule.js ***!
  \*********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var NativeModule = _TurboModuleRegistry.get('BlobModule');
var constants = null;
var NativeBlobModule = null;
if (NativeModule != null) {
    NativeBlobModule = {
        getConstants () {
            if (constants == null) {
                constants = NativeModule.getConstants();
            }
            return constants;
        },
        addNetworkingHandler () {
            NativeModule.addNetworkingHandler();
        },
        addWebSocketHandler (id) {
            NativeModule.addWebSocketHandler(id);
        },
        removeWebSocketHandler (id) {
            NativeModule.removeWebSocketHandler(id);
        },
        sendOverSocket (blob, socketID) {
            NativeModule.sendOverSocket(blob, socketID);
        },
        createFromParts (parts, withId) {
            NativeModule.createFromParts(parts, withId);
        },
        release (blobId) {
            NativeModule.release(blobId);
        }
    };
}
var _default = NativeBlobModule;


}),
"./node_modules/react-native/src/private/specs/modules/NativeFrameRateLogger.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeFrameRateLogger.js ***!
  \**************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('FrameRateLogger');


}),
"./node_modules/react-native/src/private/specs/modules/NativeI18nManager.js": 
/*!**********************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeI18nManager.js ***!
  \**********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('I18nManager');


}),
"./node_modules/react-native/src/private/specs/modules/NativeImageLoaderAndroid.js": 
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeImageLoaderAndroid.js ***!
  \*****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.getEnforcing('ImageLoader');


}),
"./node_modules/react-native/src/private/specs/modules/NativeIntentAndroid.js": 
/*!************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeIntentAndroid.js ***!
  \************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('IntentAndroid');


}),
"./node_modules/react-native/src/private/specs/modules/NativeKeyboardObserver.js": 
/*!***************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeKeyboardObserver.js ***!
  \***************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('KeyboardObserver');


}),
"./node_modules/react-native/src/private/specs/modules/NativeLinkingManager.js": 
/*!*************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeLinkingManager.js ***!
  \*************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('LinkingManager');


}),
"./node_modules/react-native/src/private/specs/modules/NativeNetworkingAndroid.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeNetworkingAndroid.js ***!
  \****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.getEnforcing('Networking');


}),
"./node_modules/react-native/src/private/specs/modules/NativeSoundManager.js": 
/*!***********************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeSoundManager.js ***!
  \***********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.get('SoundManager');


}),
"./node_modules/react-native/src/private/specs/modules/NativeWebSocketModule.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeWebSocketModule.js ***!
  \**************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.getEnforcing('WebSocketModule');


}),
"./node_modules/react-native/Libraries/Animated/Animated.js": 
/*!******************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/Animated.js ***!
  \******************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _AnimatedImplementation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedImplementation */ "./node_modules/react-native/Libraries/Animated/AnimatedImplementation.js"));
var _AnimatedMock = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedMock */ "./node_modules/react-native/Libraries/Animated/AnimatedMock.js"));
var Animated = _Platform.default.isDisableAnimations ? _AnimatedMock.default : _AnimatedImplementation.default;
var _default = _object_spread._({
    get FlatList () {
        return (__webpack_require__(/*! ./components/AnimatedFlatList */ "./node_modules/react-native/Libraries/Animated/components/AnimatedFlatList.js")/* ["default"] */["default"]);
    },
    get Image () {
        return (__webpack_require__(/*! ./components/AnimatedImage */ "./node_modules/react-native/Libraries/Animated/components/AnimatedImage.js")/* ["default"] */["default"]);
    },
    get ScrollView () {
        return (__webpack_require__(/*! ./components/AnimatedScrollView */ "./node_modules/react-native/Libraries/Animated/components/AnimatedScrollView.js")/* ["default"] */["default"]);
    },
    get SectionList () {
        return (__webpack_require__(/*! ./components/AnimatedSectionList */ "./node_modules/react-native/Libraries/Animated/components/AnimatedSectionList.js")/* ["default"] */["default"]);
    },
    get Text () {
        return (__webpack_require__(/*! ./components/AnimatedText */ "./node_modules/react-native/Libraries/Animated/components/AnimatedText.js")/* ["default"] */["default"]);
    },
    get View () {
        return (__webpack_require__(/*! ./components/AnimatedView */ "./node_modules/react-native/Libraries/Animated/components/AnimatedView.js")/* ["default"] */["default"]);
    }
}, Animated);


}),
"./node_modules/react-native/Libraries/Animated/AnimatedEvent.js": 
/*!***********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/AnimatedEvent.js ***!
  \***********************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get AnimatedEvent () {
        return AnimatedEvent;
    },
    get attachNativeEvent () {
        return attachNativeEvent;
    }
});
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../src/private/animated/NativeAnimatedHelper */ "./node_modules/react-native/src/private/animated/NativeAnimatedHelper.js"));
var _RendererProxy = __webpack_require__(/*! ../ReactNative/RendererProxy */ "./node_modules/react-native/Libraries/ReactNative/RendererProxy.js");
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedValue */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedValue.js"));
var _AnimatedValueXY = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedValueXY */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedValueXY.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
function attachNativeEvent(viewRef, eventName, argMapping, platformConfig) {
    // Find animated values in `argMapping` and create an array representing their
    // key path inside the `nativeEvent` object. Ex.: ['contentOffset', 'x'].
    var eventMappings = [];
    var traverse = (value, path)=>{
        if (value instanceof _AnimatedValue.default) {
            value.__makeNative(platformConfig);
            eventMappings.push({
                nativeEventPath: path,
                animatedValueTag: value.__getNativeTag()
            });
        } else if (value instanceof _AnimatedValueXY.default) {
            traverse(value.x, path.concat('x'));
            traverse(value.y, path.concat('y'));
        } else if (typeof value === 'object') {
            for(var key in value){
                traverse(value[key], path.concat(key));
            }
        }
    };
    (0, _invariant.default)(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');
    // Assume that the event containing `nativeEvent` is always the first argument.
    traverse(argMapping[0].nativeEvent, []);
    var viewTag = (0, _RendererProxy.findNodeHandle)(viewRef);
    if (viewTag != null) {
        eventMappings.forEach((mapping)=>{
            _NativeAnimatedHelper.default.API.addAnimatedEventToView(viewTag, eventName, mapping);
        });
    }
    return {
        detach () {
            if (viewTag != null) {
                eventMappings.forEach((mapping)=>{
                    _NativeAnimatedHelper.default.API.removeAnimatedEventFromView(viewTag, eventName, // $FlowFixMe[incompatible-call]
                    mapping.animatedValueTag);
                });
            }
        }
    };
}
function validateMapping(argMapping, args) {
    var validate = (recMapping, recEvt, key)=>{
        if (recMapping instanceof _AnimatedValue.default) {
            (0, _invariant.default)(typeof recEvt === 'number', 'Bad mapping of event key ' + key + ', should be number but got ' + typeof recEvt);
            return;
        }
        if (recMapping instanceof _AnimatedValueXY.default) {
            (0, _invariant.default)(typeof recEvt.x === 'number' && typeof recEvt.y === 'number', 'Bad mapping of event key ' + key + ', should be XY but got ' + recEvt);
            return;
        }
        if (typeof recEvt === 'number') {
            (0, _invariant.default)(recMapping instanceof _AnimatedValue.default, 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');
            return;
        }
        (0, _invariant.default)(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);
        (0, _invariant.default)(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);
        for(var mappingKey in recMapping){
            validate(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
        }
    };
    (0, _invariant.default)(args.length >= argMapping.length, 'Event has less arguments than mapping');
    argMapping.forEach((mapping, idx)=>{
        validate(mapping, args[idx], 'arg' + idx);
    });
}
var AnimatedEvent = /*#__PURE__*/ function() {
    function AnimatedEvent(argMapping, config) {
        _class_call_check._(this, AnimatedEvent);
        this._listeners = [];
        this._callListeners = (...args)=>{
            this._listeners.forEach((listener)=>listener.apply(void 0, _to_consumable_array._(args)));
        };
        this._argMapping = argMapping;
        if (config == null) {
            console.warn('Animated.event now requires a second argument for options');
            config = {
                useNativeDriver: false
            };
        }
        if (config.listener) {
            this.__addListener(config.listener);
        }
        this._attachedEvent = null;
        this.__isNative = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
        this.__platformConfig = config.platformConfig;
    }
    _create_class._(AnimatedEvent, [
        {
            key: "__addListener",
            value: function __addListener(callback) {
                this._listeners.push(callback);
            }
        },
        {
            key: "__removeListener",
            value: function __removeListener(callback) {
                this._listeners = this._listeners.filter((listener)=>listener !== callback);
            }
        },
        {
            key: "__attach",
            value: function __attach(viewRef, eventName) {
                (0, _invariant.default)(this.__isNative, 'Only native driven events need to be attached.');
                this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping, this.__platformConfig);
            }
        },
        {
            key: "__detach",
            value: function __detach(viewTag, eventName) {
                (0, _invariant.default)(this.__isNative, 'Only native driven events need to be detached.');
                this._attachedEvent && this._attachedEvent.detach();
            }
        },
        {
            key: "__getHandler",
            value: function __getHandler() {
                if (this.__isNative) {
                    if (true) {
                        var validatedMapping = false;
                        return (...args)=>{
                            if (!validatedMapping) {
                                validateMapping(this._argMapping, args);
                                validatedMapping = true;
                            }
                            this._callListeners.apply(this, _to_consumable_array._(args));
                        };
                    } else {}
                }
                var validatedMapping1 = false;
                return (...args)=>{
                    if ( true && !validatedMapping1) {
                        validateMapping(this._argMapping, args);
                        validatedMapping1 = true;
                    }
                    var traverse = (recMapping, recEvt)=>{
                        if (recMapping instanceof _AnimatedValue.default) {
                            if (typeof recEvt === 'number') {
                                recMapping.setValue(recEvt);
                            }
                        } else if (recMapping instanceof _AnimatedValueXY.default) {
                            if (typeof recEvt === 'object') {
                                traverse(recMapping.x, recEvt.x);
                                traverse(recMapping.y, recEvt.y);
                            }
                        } else if (typeof recMapping === 'object') {
                            for(var mappingKey in recMapping){
                                /* $FlowFixMe[prop-missing] (>=0.120.0) This comment suppresses an
             * error found when Flow v0.120 was deployed. To see the error,
             * delete this comment and run Flow. */ traverse(recMapping[mappingKey], recEvt[mappingKey]);
                            }
                        }
                    };
                    this._argMapping.forEach((mapping, idx)=>{
                        traverse(mapping, args[idx]);
                    });
                    this._callListeners.apply(this, _to_consumable_array._(args));
                };
            }
        }
    ]);
    return AnimatedEvent;
}();


}),
"./node_modules/react-native/Libraries/Animated/AnimatedImplementation.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/AnimatedImplementation.js ***!
  \********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _AnimatedEvent = __webpack_require__(/*! ./AnimatedEvent */ "./node_modules/react-native/Libraries/Animated/AnimatedEvent.js");
var _DecayAnimation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./animations/DecayAnimation */ "./node_modules/react-native/Libraries/Animated/animations/DecayAnimation.js"));
var _SpringAnimation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./animations/SpringAnimation */ "./node_modules/react-native/Libraries/Animated/animations/SpringAnimation.js"));
var _TimingAnimation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./animations/TimingAnimation */ "./node_modules/react-native/Libraries/Animated/animations/TimingAnimation.js"));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./createAnimatedComponent */ "./node_modules/react-native/Libraries/Animated/createAnimatedComponent.js"));
var _AnimatedAddition = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedAddition */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedAddition.js"));
var _AnimatedColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedColor */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedColor.js"));
var _AnimatedDiffClamp = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedDiffClamp */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedDiffClamp.js"));
var _AnimatedDivision = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedDivision */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedDivision.js"));
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedInterpolation */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedInterpolation.js"));
var _AnimatedModulo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedModulo */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedModulo.js"));
var _AnimatedMultiplication = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedMultiplication */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedMultiplication.js"));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedNode */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedNode.js"));
var _AnimatedSubtraction = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedSubtraction */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedSubtraction.js"));
var _AnimatedTracking = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedTracking */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedTracking.js"));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedValue */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedValue.js"));
var _AnimatedValueXY = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedValueXY */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedValueXY.js"));
var add = function(a, b) {
    return new _AnimatedAddition.default(a, b);
};
var subtract = function(a, b) {
    return new _AnimatedSubtraction.default(a, b);
};
var divide = function(a, b) {
    return new _AnimatedDivision.default(a, b);
};
var multiply = function(a, b) {
    return new _AnimatedMultiplication.default(a, b);
};
var modulo = function(a, modulus) {
    return new _AnimatedModulo.default(a, modulus);
};
var diffClamp = function(a, min, max) {
    return new _AnimatedDiffClamp.default(a, min, max);
};
var _combineCallbacks = function(callback, config) {
    if (callback && config.onComplete) {
        return (...args)=>{
            var _config;
            config.onComplete && (_config = config).onComplete.apply(_config, _to_consumable_array._(args));
            callback && callback.apply(void 0, _to_consumable_array._(args));
        };
    } else {
        return callback || config.onComplete;
    }
};
var maybeVectorAnim = function(value, config, anim) {
    if (value instanceof _AnimatedValueXY.default) {
        var configX = _object_spread._({}, config);
        var configY = _object_spread._({}, config);
        for(var key in config){
            var _config_key = config[key], x = _config_key.x, y = _config_key.y;
            if (x !== undefined && y !== undefined) {
                configX[key] = x;
                configY[key] = y;
            }
        }
        var aX = anim(value.x, configX);
        var aY = anim(value.y, configY);
        // We use `stopTogether: false` here because otherwise tracking will break
        // because the second animation will get stopped before it can update.
        return parallel([
            aX,
            aY
        ], {
            stopTogether: false
        });
    } else if (value instanceof _AnimatedColor.default) {
        var configR = _object_spread._({}, config);
        var configG = _object_spread._({}, config);
        var configB = _object_spread._({}, config);
        var configA = _object_spread._({}, config);
        for(var key1 in config){
            var _config_key1 = config[key1], r = _config_key1.r, g = _config_key1.g, b = _config_key1.b, a = _config_key1.a;
            if (r !== undefined && g !== undefined && b !== undefined && a !== undefined) {
                configR[key1] = r;
                configG[key1] = g;
                configB[key1] = b;
                configA[key1] = a;
            }
        }
        var aR = anim(value.r, configR);
        var aG = anim(value.g, configG);
        var aB = anim(value.b, configB);
        var aA = anim(value.a, configA);
        // We use `stopTogether: false` here because otherwise tracking will break
        // because the second animation will get stopped before it can update.
        return parallel([
            aR,
            aG,
            aB,
            aA
        ], {
            stopTogether: false
        });
    }
    return null;
};
var spring = function(value, config) {
    var start = function(animatedValue, configuration, callback) {
        callback = _combineCallbacks(callback, configuration);
        var singleValue = animatedValue;
        var singleConfig = configuration;
        singleValue.stopTracking();
        if (configuration.toValue instanceof _AnimatedNode.default) {
            singleValue.track(new _AnimatedTracking.default(singleValue, configuration.toValue, _SpringAnimation.default, singleConfig, callback));
        } else {
            singleValue.animate(new _SpringAnimation.default(singleConfig), callback);
        }
    };
    return maybeVectorAnim(value, config, spring) || {
        start: function(callback) {
            start(value, config, callback);
        },
        stop: function() {
            value.stopAnimation();
        },
        reset: function() {
            value.resetAnimation();
        },
        _startNativeLoop: function(iterations) {
            var singleConfig = _object_spread_props._(_object_spread._({}, config), {
                iterations
            });
            start(value, singleConfig);
        },
        _isUsingNativeDriver: function() {
            return config.useNativeDriver || false;
        }
    };
};
var timing = function(value, config) {
    var start = function(animatedValue, configuration, callback) {
        callback = _combineCallbacks(callback, configuration);
        var singleValue = animatedValue;
        var singleConfig = configuration;
        singleValue.stopTracking();
        if (configuration.toValue instanceof _AnimatedNode.default) {
            singleValue.track(new _AnimatedTracking.default(singleValue, configuration.toValue, _TimingAnimation.default, singleConfig, callback));
        } else {
            singleValue.animate(new _TimingAnimation.default(singleConfig), callback);
        }
    };
    return maybeVectorAnim(value, config, timing) || {
        start: function(callback, isLooping) {
            start(value, _object_spread_props._(_object_spread._({}, config), {
                isLooping
            }), callback);
        },
        stop: function() {
            value.stopAnimation();
        },
        reset: function() {
            value.resetAnimation();
        },
        _startNativeLoop: function(iterations) {
            var singleConfig = _object_spread_props._(_object_spread._({}, config), {
                iterations
            });
            start(value, singleConfig);
        },
        _isUsingNativeDriver: function() {
            return config.useNativeDriver || false;
        }
    };
};
var decay = function(value, config) {
    var start = function(animatedValue, configuration, callback) {
        callback = _combineCallbacks(callback, configuration);
        var singleValue = animatedValue;
        var singleConfig = configuration;
        singleValue.stopTracking();
        singleValue.animate(new _DecayAnimation.default(singleConfig), callback);
    };
    return maybeVectorAnim(value, config, decay) || {
        start: function(callback) {
            start(value, config, callback);
        },
        stop: function() {
            value.stopAnimation();
        },
        reset: function() {
            value.resetAnimation();
        },
        _startNativeLoop: function(iterations) {
            var singleConfig = _object_spread_props._(_object_spread._({}, config), {
                iterations
            });
            start(value, singleConfig);
        },
        _isUsingNativeDriver: function() {
            return config.useNativeDriver || false;
        }
    };
};
var sequence = function(animations) {
    var current = 0;
    return {
        start: function(callback, isLooping) {
            var onComplete = function(result) {
                if (!result.finished) {
                    callback && callback(result);
                    return;
                }
                current++;
                if (current === animations.length) {
                    // if the start is called, even without a reset, it should start from the beginning
                    current = 0;
                    callback && callback(result);
                    return;
                }
                animations[current].start(onComplete, isLooping);
            };
            if (animations.length === 0) {
                callback && callback({
                    finished: true
                });
            } else {
                animations[current].start(onComplete, isLooping);
            }
        },
        stop: function() {
            if (current < animations.length) {
                animations[current].stop();
            }
        },
        reset: function() {
            animations.forEach((animation, idx)=>{
                if (idx <= current) {
                    animation.reset();
                }
            });
            current = 0;
        },
        _startNativeLoop: function() {
            throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
        },
        _isUsingNativeDriver: function() {
            return false;
        }
    };
};
var parallel = function(animations, config) {
    var doneCount = 0;
    // Make sure we only call stop() at most once for each animation
    var hasEnded = {};
    var stopTogether = !(config && config.stopTogether === false);
    var result = {
        start: function(callback, isLooping) {
            if (doneCount === animations.length) {
                callback && callback({
                    finished: true
                });
                return;
            }
            animations.forEach((animation, idx)=>{
                var cb = function(endResult) {
                    hasEnded[idx] = true;
                    doneCount++;
                    if (doneCount === animations.length) {
                        doneCount = 0;
                        callback && callback(endResult);
                        return;
                    }
                    if (!endResult.finished && stopTogether) {
                        result.stop();
                    }
                };
                if (!animation) {
                    cb({
                        finished: true
                    });
                } else {
                    animation.start(cb, isLooping);
                }
            });
        },
        stop: function() {
            animations.forEach((animation, idx)=>{
                !hasEnded[idx] && animation.stop();
                hasEnded[idx] = true;
            });
        },
        reset: function() {
            animations.forEach((animation, idx)=>{
                animation.reset();
                hasEnded[idx] = false;
                doneCount = 0;
            });
        },
        _startNativeLoop: function() {
            throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
        },
        _isUsingNativeDriver: function() {
            return false;
        }
    };
    return result;
};
var delay = function(time) {
    // Would be nice to make a specialized implementation
    return timing(new _AnimatedValue.default(0), {
        toValue: 0,
        delay: time,
        duration: 0,
        useNativeDriver: false
    });
};
var stagger = function(time, animations) {
    return parallel(animations.map((animation, i)=>{
        return sequence([
            delay(time * i),
            animation
        ]);
    }));
};
var loop = function(animation, // $FlowFixMe[prop-missing]
ref) {
    var _ref = ref === void 0 ? {} : ref, _ref_iterations = _ref.iterations, iterations = _ref_iterations === void 0 ? -1 : _ref_iterations, _ref_resetBeforeIteration = _ref.resetBeforeIteration, resetBeforeIteration = _ref_resetBeforeIteration === void 0 ? true : _ref_resetBeforeIteration;
    var isFinished = false;
    var iterationsSoFar = 0;
    return {
        start: function(callback) {
            var restart = function(ref) {
                var result = ref === void 0 ? {
                    finished: true
                } : ref;
                if (isFinished || iterationsSoFar === iterations || result.finished === false) {
                    callback && callback(result);
                } else {
                    iterationsSoFar++;
                    resetBeforeIteration && animation.reset();
                    animation.start(restart, iterations === -1);
                }
            };
            if (!animation || iterations === 0) {
                callback && callback({
                    finished: true
                });
            } else {
                if (animation._isUsingNativeDriver()) {
                    animation._startNativeLoop(iterations);
                } else {
                    restart(); // Start looping recursively on the js thread
                }
            }
        },
        stop: function() {
            isFinished = true;
            animation.stop();
        },
        reset: function() {
            iterationsSoFar = 0;
            isFinished = false;
            animation.reset();
        },
        _startNativeLoop: function() {
            throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
        },
        _isUsingNativeDriver: function() {
            return animation._isUsingNativeDriver();
        }
    };
};
function forkEvent(event, listener) {
    if (!event) {
        return listener;
    } else if (event instanceof _AnimatedEvent.AnimatedEvent) {
        event.__addListener(listener);
        return event;
    } else {
        return (...args)=>{
            typeof event === 'function' && event.apply(void 0, _to_consumable_array._(args));
            listener.apply(void 0, _to_consumable_array._(args));
        };
    }
}
function unforkEvent(event, listener) {
    if (event && event instanceof _AnimatedEvent.AnimatedEvent) {
        event.__removeListener(listener);
    }
}
var event = function(argMapping, config) {
    var animatedEvent = new _AnimatedEvent.AnimatedEvent(argMapping, config);
    if (animatedEvent.__isNative) {
        return animatedEvent;
    } else {
        return animatedEvent.__getHandler();
    }
};
var _default = {
    /**
   * Standard value class for driving animations.  Typically initialized with
   * `new Animated.Value(0);`
   *
   * See https://reactnative.dev/docs/animated#value
   */ Value: _AnimatedValue.default,
    /**
   * 2D value class for driving 2D animations, such as pan gestures.
   *
   * See https://reactnative.dev/docs/animatedvaluexy
   */ ValueXY: _AnimatedValueXY.default,
    /**
   * Value class for driving color animations.
   */ Color: _AnimatedColor.default,
    /**
   * Exported to use the Interpolation type in flow.
   *
   * See https://reactnative.dev/docs/animated#interpolation
   */ Interpolation: _AnimatedInterpolation.default,
    /**
   * Exported for ease of type checking. All animated values derive from this
   * class.
   *
   * See https://reactnative.dev/docs/animated#node
   */ Node: _AnimatedNode.default,
    /**
   * Animates a value from an initial velocity to zero based on a decay
   * coefficient.
   *
   * See https://reactnative.dev/docs/animated#decay
   */ decay,
    /**
   * Animates a value along a timed easing curve. The Easing module has tons of
   * predefined curves, or you can use your own function.
   *
   * See https://reactnative.dev/docs/animated#timing
   */ timing,
    /**
   * Animates a value according to an analytical spring model based on
   * damped harmonic oscillation.
   *
   * See https://reactnative.dev/docs/animated#spring
   */ spring,
    /**
   * Creates a new Animated value composed from two Animated values added
   * together.
   *
   * See https://reactnative.dev/docs/animated#add
   */ add,
    /**
   * Creates a new Animated value composed by subtracting the second Animated
   * value from the first Animated value.
   *
   * See https://reactnative.dev/docs/animated#subtract
   */ subtract,
    /**
   * Creates a new Animated value composed by dividing the first Animated value
   * by the second Animated value.
   *
   * See https://reactnative.dev/docs/animated#divide
   */ divide,
    /**
   * Creates a new Animated value composed from two Animated values multiplied
   * together.
   *
   * See https://reactnative.dev/docs/animated#multiply
   */ multiply,
    /**
   * Creates a new Animated value that is the (non-negative) modulo of the
   * provided Animated value.
   *
   * See https://reactnative.dev/docs/animated#modulo
   */ modulo,
    /**
   * Create a new Animated value that is limited between 2 values. It uses the
   * difference between the last value so even if the value is far from the
   * bounds it will start changing when the value starts getting closer again.
   *
   * See https://reactnative.dev/docs/animated#diffclamp
   */ diffClamp,
    /**
   * Starts an animation after the given delay.
   *
   * See https://reactnative.dev/docs/animated#delay
   */ delay,
    /**
   * Starts an array of animations in order, waiting for each to complete
   * before starting the next. If the current running animation is stopped, no
   * following animations will be started.
   *
   * See https://reactnative.dev/docs/animated#sequence
   */ sequence,
    /**
   * Starts an array of animations all at the same time. By default, if one
   * of the animations is stopped, they will all be stopped. You can override
   * this with the `stopTogether` flag.
   *
   * See https://reactnative.dev/docs/animated#parallel
   */ parallel,
    /**
   * Array of animations may run in parallel (overlap), but are started in
   * sequence with successive delays.  Nice for doing trailing effects.
   *
   * See https://reactnative.dev/docs/animated#stagger
   */ stagger,
    /**
   * Loops a given animation continuously, so that each time it reaches the
   * end, it resets and begins again from the start.
   *
   * See https://reactnative.dev/docs/animated#loop
   */ loop,
    /**
   * Takes an array of mappings and extracts values from each arg accordingly,
   * then calls `setValue` on the mapped outputs.
   *
   * See https://reactnative.dev/docs/animated#event
   */ event,
    /**
   * Make any React component Animatable.  Used to create `Animated.View`, etc.
   *
   * See https://reactnative.dev/docs/animated#createanimatedcomponent
   */ createAnimatedComponent: _createAnimatedComponent.default,
    /**
   * Imperative API to attach an animated value to an event on a view. Prefer
   * using `Animated.event` with `useNativeDrive: true` if possible.
   *
   * See https://reactnative.dev/docs/animated#attachnativeevent
   */ attachNativeEvent: _AnimatedEvent.attachNativeEvent,
    /**
   * Advanced imperative API for snooping on animated events that are passed in
   * through props. Use values directly where possible.
   *
   * See https://reactnative.dev/docs/animated#forkevent
   */ forkEvent,
    unforkEvent,
    /**
   * Expose Event class, so it can be used as a type for type checkers.
   */ Event: _AnimatedEvent.AnimatedEvent
};


}),
"./node_modules/react-native/Libraries/Animated/AnimatedMock.js": 
/*!**********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/AnimatedMock.js ***!
  \**********************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _AnimatedEvent = __webpack_require__(/*! ./AnimatedEvent */ "./node_modules/react-native/Libraries/Animated/AnimatedEvent.js");
var _AnimatedImplementation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedImplementation */ "./node_modules/react-native/Libraries/Animated/AnimatedImplementation.js"));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./createAnimatedComponent */ "./node_modules/react-native/Libraries/Animated/createAnimatedComponent.js"));
var _AnimatedColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedColor */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedColor.js"));
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedInterpolation */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedInterpolation.js"));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedNode */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedNode.js"));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedValue */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedValue.js"));
var _AnimatedValueXY = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedValueXY */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedValueXY.js"));
/**
 * Animations are a source of flakiness in snapshot testing. This mock replaces
 * animation functions from AnimatedImplementation with empty animations for
 * predictability in tests. When possible the animation will run immediately
 * to the final state.
 */ // Prevent any callback invocation from recursively triggering another
// callback, which may trigger another animation
var inAnimationCallback = false;
function mockAnimationStart(start) {
    return (callback)=>{
        var guardedCallback = callback == null ? callback : (...args)=>{
            if (inAnimationCallback) {
                console.warn('Ignoring recursive animation callback when running mock animations');
                return;
            }
            inAnimationCallback = true;
            try {
                callback.apply(void 0, _to_consumable_array._(args));
            } finally{
                inAnimationCallback = false;
            }
        };
        start(guardedCallback);
    };
}
var emptyAnimation = {
    start: ()=>{},
    stop: ()=>{},
    reset: ()=>{},
    _startNativeLoop: ()=>{},
    _isUsingNativeDriver: ()=>{
        return false;
    }
};
var mockCompositeAnimation = (animations)=>_object_spread_props._(_object_spread._({}, emptyAnimation), {
        start: mockAnimationStart((callback)=>{
            animations.forEach((animation)=>animation.start());
            callback === null || callback === void 0 ? void 0 : callback({
                finished: true
            });
        })
    });
var spring = function(value, config) {
    var anyValue = value;
    return _object_spread_props._(_object_spread._({}, emptyAnimation), {
        start: mockAnimationStart((callback)=>{
            anyValue.setValue(config.toValue);
            callback === null || callback === void 0 ? void 0 : callback({
                finished: true
            });
        })
    });
};
var timing = function(value, config) {
    var anyValue = value;
    return _object_spread_props._(_object_spread._({}, emptyAnimation), {
        start: mockAnimationStart((callback)=>{
            anyValue.setValue(config.toValue);
            callback === null || callback === void 0 ? void 0 : callback({
                finished: true
            });
        })
    });
};
var decay = function(value, config) {
    return emptyAnimation;
};
var sequence = function(animations) {
    return mockCompositeAnimation(animations);
};
var parallel = function(animations, config) {
    return mockCompositeAnimation(animations);
};
var delay = function(time) {
    return emptyAnimation;
};
var stagger = function(time, animations) {
    return mockCompositeAnimation(animations);
};
var loop = function(animation, // $FlowFixMe[prop-missing]
ref) {
    var _ref = ref === void 0 ? {} : ref, _ref_iterations = _ref.iterations, iterations = _ref_iterations === void 0 ? -1 : _ref_iterations;
    return emptyAnimation;
};
var _default = {
    Value: _AnimatedValue.default,
    ValueXY: _AnimatedValueXY.default,
    Color: _AnimatedColor.default,
    Interpolation: _AnimatedInterpolation.default,
    Node: _AnimatedNode.default,
    decay,
    timing,
    spring,
    add: _AnimatedImplementation.default.add,
    subtract: _AnimatedImplementation.default.subtract,
    divide: _AnimatedImplementation.default.divide,
    multiply: _AnimatedImplementation.default.multiply,
    modulo: _AnimatedImplementation.default.modulo,
    diffClamp: _AnimatedImplementation.default.diffClamp,
    delay,
    sequence,
    parallel,
    stagger,
    loop,
    event: _AnimatedImplementation.default.event,
    createAnimatedComponent: _createAnimatedComponent.default,
    attachNativeEvent: _AnimatedEvent.attachNativeEvent,
    forkEvent: _AnimatedImplementation.default.forkEvent,
    unforkEvent: _AnimatedImplementation.default.unforkEvent,
    Event: _AnimatedEvent.AnimatedEvent
};


}),
"./node_modules/react-native/Libraries/Animated/Easing.js": 
/*!****************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/Easing.js ***!
  \****************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var ease;
/**
 * The `Easing` module implements common easing functions. This module is used
 * by [Animate.timing()](docs/animate.html#timing) to convey physically
 * believable motion in animations.
 *
 * You can find a visualization of some common easing functions at
 * http://easings.net/
 *
 * ### Predefined animations
 *
 * The `Easing` module provides several predefined animations through the
 * following methods:
 *
 * - [`back`](docs/easing.html#back) provides a simple animation where the
 *   object goes slightly back before moving forward
 * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation
 * - [`ease`](docs/easing.html#ease) provides a simple inertial animation
 * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction
 *
 * ### Standard functions
 *
 * Three standard easing functions are provided:
 *
 * - [`linear`](docs/easing.html#linear)
 * - [`quad`](docs/easing.html#quad)
 * - [`cubic`](docs/easing.html#cubic)
 *
 * The [`poly`](docs/easing.html#poly) function can be used to implement
 * quartic, quintic, and other higher power functions.
 *
 * ### Additional functions
 *
 * Additional mathematical functions are provided by the following methods:
 *
 * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve
 * - [`circle`](docs/easing.html#circle) provides a circular function
 * - [`sin`](docs/easing.html#sin) provides a sinusoidal function
 * - [`exp`](docs/easing.html#exp) provides an exponential function
 *
 * The following helpers are used to modify other easing functions.
 *
 * - [`in`](docs/easing.html#in) runs an easing function forwards
 * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical
 * - [`out`](docs/easing.html#out) runs an easing function backwards
 */ var Easing = {
    /**
   * A stepping function, returns 1 for any positive value of `n`.
   */ step0 (n) {
        return n > 0 ? 1 : 0;
    },
    /**
   * A stepping function, returns 1 if `n` is greater than or equal to 1.
   */ step1 (n) {
        return n >= 1 ? 1 : 0;
    },
    /**
   * A linear function, `f(t) = t`. Position correlates to elapsed time one to
   * one.
   *
   * http://cubic-bezier.com/#0,0,1,1
   */ linear (t) {
        return t;
    },
    /**
   * A simple inertial interaction, similar to an object slowly accelerating to
   * speed.
   *
   * http://cubic-bezier.com/#.42,0,1,1
   */ ease (t) {
        if (!ease) {
            ease = Easing.bezier(0.42, 0, 1, 1);
        }
        return ease(t);
    },
    /**
   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed
   * time.
   *
   * http://easings.net/#easeInQuad
   */ quad (t) {
        return t * t;
    },
    /**
   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed
   * time.
   *
   * http://easings.net/#easeInCubic
   */ cubic (t) {
        return t * t * t;
    },
    /**
   * A power function. Position is equal to the Nth power of elapsed time.
   *
   * n = 4: http://easings.net/#easeInQuart
   * n = 5: http://easings.net/#easeInQuint
   */ poly (n) {
        return (t)=>Math.pow(t, n);
    },
    /**
   * A sinusoidal function.
   *
   * http://easings.net/#easeInSine
   */ sin (t) {
        return 1 - Math.cos(t * Math.PI / 2);
    },
    /**
   * A circular function.
   *
   * http://easings.net/#easeInCirc
   */ circle (t) {
        return 1 - Math.sqrt(1 - t * t);
    },
    /**
   * An exponential function.
   *
   * http://easings.net/#easeInExpo
   */ exp (t) {
        return Math.pow(2, 10 * (t - 1));
    },
    /**
   * A simple elastic interaction, similar to a spring oscillating back and
   * forth.
   *
   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness
   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N
   * times.
   *
   * http://easings.net/#easeInElastic
   */ elastic (ref) {
        var bounciness = ref === void 0 ? 1 : ref;
        var p = bounciness * Math.PI;
        return (t)=>1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
    },
    /**
   * Use with `Animated.parallel()` to create a simple effect where the object
   * animates back slightly as the animation starts.
   *
   * https://easings.net/#easeInBack
   */ back (ref) {
        var s = ref === void 0 ? 1.70158 : ref;
        return (t)=>t * t * ((s + 1) * t - s);
    },
    /**
   * Provides a simple bouncing effect.
   *
   * http://easings.net/#easeInBounce
   */ bounce (t) {
        if (t < 1 / 2.75) {
            return 7.5625 * t * t;
        }
        if (t < 2 / 2.75) {
            var t2 = t - 1.5 / 2.75;
            return 7.5625 * t2 * t2 + 0.75;
        }
        if (t < 2.5 / 2.75) {
            var t21 = t - 2.25 / 2.75;
            return 7.5625 * t21 * t21 + 0.9375;
        }
        var t22 = t - 2.625 / 2.75;
        return 7.5625 * t22 * t22 + 0.984375;
    },
    /**
   * Provides a cubic bezier curve, equivalent to CSS Transitions'
   * `transition-timing-function`.
   *
   * A useful tool to visualize cubic bezier curves can be found at
   * http://cubic-bezier.com/
   */ bezier (x1, y1, x2, y2) {
        var _bezier = (__webpack_require__(/*! ./bezier */ "./node_modules/react-native/Libraries/Animated/bezier.js")/* ["default"] */["default"]);
        return _bezier(x1, y1, x2, y2);
    },
    /**
   * Runs an easing function forwards.
   */ in (easing) {
        return easing;
    },
    /**
   * Runs an easing function backwards.
   */ out (easing) {
        return (t)=>1 - easing(1 - t);
    },
    /**
   * Makes any easing function symmetrical. The easing function will run
   * forwards for half of the duration, then backwards for the rest of the
   * duration.
   */ inOut (easing) {
        return (t)=>{
            if (t < 0.5) {
                return easing(t * 2) / 2;
            }
            return 1 - easing((1 - t) * 2) / 2;
        };
    }
};
var _default = Easing;


}),
"./node_modules/react-native/Libraries/Animated/SpringConfig.js": 
/*!**********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/SpringConfig.js ***!
  \**********************************************************************/
(function (__unused_webpack_module, exports) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get fromBouncinessAndSpeed () {
        return fromBouncinessAndSpeed;
    },
    get fromOrigamiTensionAndFriction () {
        return fromOrigamiTensionAndFriction;
    }
});
function stiffnessFromOrigamiValue(oValue) {
    return (oValue - 30) * 3.62 + 194;
}
function dampingFromOrigamiValue(oValue) {
    return (oValue - 8) * 3 + 25;
}
function fromOrigamiTensionAndFriction(tension, friction) {
    return {
        stiffness: stiffnessFromOrigamiValue(tension),
        damping: dampingFromOrigamiValue(friction)
    };
}
function fromBouncinessAndSpeed(bounciness, speed) {
    function normalize(value, startValue, endValue) {
        return (value - startValue) / (endValue - startValue);
    }
    function projectNormal(n, start, end) {
        return start + n * (end - start);
    }
    function linearInterpolation(t, start, end) {
        return t * end + (1 - t) * start;
    }
    function quadraticOutInterpolation(t, start, end) {
        return linearInterpolation(2 * t - t * t, start, end);
    }
    function b3Friction1(x) {
        return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    }
    function b3Friction2(x) {
        return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
    }
    function b3Friction3(x) {
        return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    }
    function b3Nobounce(tension) {
        if (tension <= 18) {
            return b3Friction1(tension);
        } else if (tension > 18 && tension <= 44) {
            return b3Friction2(tension);
        } else {
            return b3Friction3(tension);
        }
    }
    var b = normalize(bounciness / 1.7, 0, 20);
    b = projectNormal(b, 0, 0.8);
    var s = normalize(speed / 1.7, 0, 20);
    var bouncyTension = projectNormal(s, 0.5, 200);
    var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
    return {
        stiffness: stiffnessFromOrigamiValue(bouncyTension),
        damping: dampingFromOrigamiValue(bouncyFriction)
    };
}


}),
"./node_modules/react-native/Libraries/Animated/animations/Animation.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/animations/Animation.js ***!
  \******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return Animation;
    }
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _class_private_field_loose_base = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_base */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_base.cjs");
var _class_private_field_loose_key = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_key */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_key.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../src/private/animated/NativeAnimatedHelper */ "./node_modules/react-native/src/private/animated/NativeAnimatedHelper.js"));
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../src/private/featureflags/ReactNativeFeatureFlags */ "./node_modules/react-native/src/private/featureflags/ReactNativeFeatureFlags.js"));
var _AnimatedProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../nodes/AnimatedProps */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedProps.js"));
var startNativeAnimationNextId = 1;
var _nativeID = /*#__PURE__*/ _class_private_field_loose_key._("_nativeID"), _onEnd = /*#__PURE__*/ _class_private_field_loose_key._("_onEnd"), _useNativeDriver = /*#__PURE__*/ _class_private_field_loose_key._("_useNativeDriver");
var Animation = /*#__PURE__*/ function() {
    "use strict";
    function Animation(config) {
        _class_call_check._(this, Animation);
        Object.defineProperty(this, _nativeID, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _onEnd, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _useNativeDriver, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(this, _useNativeDriver)[_useNativeDriver] = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
        this.__active = false;
        this.__isInteraction = config.isInteraction ?? !_class_private_field_loose_base._(this, _useNativeDriver)[_useNativeDriver];
        this.__isLooping = config.isLooping;
        this.__iterations = config.iterations ?? 1;
        if (true) {
            this.__debugID = config.debugID;
        }
    }
    _create_class._(Animation, [
        {
            key: "start",
            value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
                if (!_class_private_field_loose_base._(this, _useNativeDriver)[_useNativeDriver] && animatedValue.__isNative === true) {
                    throw new Error('Attempting to run JS driven animation on animated node ' + 'that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
                }
                _class_private_field_loose_base._(this, _onEnd)[_onEnd] = onEnd;
                this.__active = true;
            }
        },
        {
            key: "stop",
            value: function stop() {
                if (_class_private_field_loose_base._(this, _nativeID)[_nativeID] != null) {
                    var nativeID = _class_private_field_loose_base._(this, _nativeID)[_nativeID];
                    var identifier = `${nativeID}:stopAnimation`;
                    try {
                        // This is only required when singleOpBatching is used, as otherwise
                        // we flush calls immediately when there's no pending queue.
                        _NativeAnimatedHelper.default.API.setWaitingForIdentifier(identifier);
                        _NativeAnimatedHelper.default.API.stopAnimation(nativeID);
                    } finally{
                        _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(identifier);
                    }
                }
                this.__active = false;
            }
        },
        {
            key: "__getNativeAnimationConfig",
            value: function __getNativeAnimationConfig() {
                // Subclasses that have corresponding animation implementation done in native
                // should override this method
                throw new Error('This animation type cannot be offloaded to native');
            }
        },
        {
            key: "__findAnimatedPropsNodes",
            value: function __findAnimatedPropsNodes(node) {
                var result = [];
                if (node instanceof _AnimatedProps.default) {
                    result.push(node);
                    return result;
                }
                for (var child of node.__getChildren()){
                    var _result;
                    (_result = result).push.apply(_result, _to_consumable_array._(this.__findAnimatedPropsNodes(child)));
                }
                return result;
            }
        },
        {
            key: "__startAnimationIfNative",
            value: function __startAnimationIfNative(animatedValue) {
                if (!_class_private_field_loose_base._(this, _useNativeDriver)[_useNativeDriver]) {
                    return false;
                }
                var startNativeAnimationWaitId = `${startNativeAnimationNextId}:startAnimation`;
                startNativeAnimationNextId += 1;
                _NativeAnimatedHelper.default.API.setWaitingForIdentifier(startNativeAnimationWaitId);
                try {
                    var config = this.__getNativeAnimationConfig();
                    animatedValue.__makeNative(config.platformConfig);
                    _class_private_field_loose_base._(this, _nativeID)[_nativeID] = _NativeAnimatedHelper.default.generateNewAnimationId();
                    _NativeAnimatedHelper.default.API.startAnimatingNode(_class_private_field_loose_base._(this, _nativeID)[_nativeID], animatedValue.__getNativeTag(), config, (result)=>{
                        this.__notifyAnimationEnd(result);
                        // When using natively driven animations, once the animation completes,
                        // we need to ensure that the JS side nodes are synced with the updated
                        // values.
                        var value = result.value;
                        if (value != null) {
                            animatedValue.__onAnimatedValueUpdateReceived(value);
                            if (_ReactNativeFeatureFlags.shouldSkipStateUpdatesForLoopingAnimations() && this.__isLooping === true) {
                                return;
                            }
                            // Once the JS side node is synced with the updated values, trigger an
                            // update on the AnimatedProps nodes to call any registered callbacks.
                            this.__findAnimatedPropsNodes(animatedValue).forEach((node)=>node.update());
                        }
                    });
                    return true;
                } catch (e) {
                    throw e;
                } finally{
                    _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
                }
            }
        },
        {
            /**
   * Notify the completion callback that the animation has ended. The completion
   * callback will never be called more than once.
   */ key: "__notifyAnimationEnd",
            value: function __notifyAnimationEnd(result) {
                var callback = _class_private_field_loose_base._(this, _onEnd)[_onEnd];
                if (callback != null) {
                    _class_private_field_loose_base._(this, _onEnd)[_onEnd] = null;
                    callback(result);
                }
            }
        },
        {
            key: "__getDebugID",
            value: function __getDebugID() {
                if (true) {
                    return this.__debugID;
                }
                return undefined;
            }
        }
    ]);
    return Animation;
}();


}),
"./node_modules/react-native/Libraries/Animated/animations/DecayAnimation.js": 
/*!***********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/animations/DecayAnimation.js ***!
  \***********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return DecayAnimation;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _wrap_native_super = __webpack_require__(/*! @swc/helpers/_/_wrap_native_super */ "./node_modules/@swc/helpers/cjs/_wrap_native_super.cjs");
var _Animation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./Animation */ "./node_modules/react-native/Libraries/Animated/animations/Animation.js"));
var DecayAnimation = /*#__PURE__*/ function(Animation) {
    "use strict";
    _inherits._(DecayAnimation, Animation);
    function DecayAnimation(config) {
        _class_call_check._(this, DecayAnimation);
        var _this;
        _this = _call_super._(this, DecayAnimation, [
            config
        ]);
        _this._deceleration = config.deceleration ?? 0.998;
        _this._velocity = config.velocity;
        _this._platformConfig = config.platformConfig;
        return _this;
    }
    _create_class._(DecayAnimation, [
        {
            key: "__getNativeAnimationConfig",
            value: function __getNativeAnimationConfig() {
                return {
                    type: 'decay',
                    deceleration: this._deceleration,
                    velocity: this._velocity,
                    iterations: this.__iterations,
                    platformConfig: this._platformConfig,
                    debugID: this.__getDebugID()
                };
            }
        },
        {
            key: "start",
            value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
                _get._(_get_prototype_of._(DecayAnimation.prototype), "start", this).call(this, fromValue, onUpdate, onEnd, previousAnimation, animatedValue);
                this._lastValue = fromValue;
                this._fromValue = fromValue;
                this._onUpdate = onUpdate;
                this._startTime = Date.now();
                var useNativeDriver = this.__startAnimationIfNative(animatedValue);
                if (!useNativeDriver) {
                    this._animationFrame = requestAnimationFrame(()=>this.onUpdate());
                }
            }
        },
        {
            key: "onUpdate",
            value: function onUpdate() {
                var now = Date.now();
                var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));
                this._onUpdate(value);
                if (Math.abs(this._lastValue - value) < 0.1) {
                    this.__notifyAnimationEnd({
                        finished: true
                    });
                    return;
                }
                this._lastValue = value;
                if (this.__active) {
                    // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
                }
            }
        },
        {
            key: "stop",
            value: function stop() {
                _get._(_get_prototype_of._(DecayAnimation.prototype), "stop", this).call(this);
                if (this._animationFrame != null) {
                    __webpack_require__.g.cancelAnimationFrame(this._animationFrame);
                }
                this.__notifyAnimationEnd({
                    finished: false
                });
            }
        }
    ]);
    return DecayAnimation;
}(_wrap_native_super._(_Animation.default));


}),
"./node_modules/react-native/Libraries/Animated/animations/SpringAnimation.js": 
/*!************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/animations/SpringAnimation.js ***!
  \************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return SpringAnimation;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _wrap_native_super = __webpack_require__(/*! @swc/helpers/_/_wrap_native_super */ "./node_modules/@swc/helpers/cjs/_wrap_native_super.cjs");
var _AnimatedColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../nodes/AnimatedColor */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedColor.js"));
var _SpringConfig = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../SpringConfig */ "./node_modules/react-native/Libraries/Animated/SpringConfig.js"));
var _Animation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./Animation */ "./node_modules/react-native/Libraries/Animated/animations/Animation.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var SpringAnimation = /*#__PURE__*/ function(Animation) {
    "use strict";
    _inherits._(SpringAnimation, Animation);
    function SpringAnimation(config) {
        _class_call_check._(this, SpringAnimation);
        var _this;
        _this = _call_super._(this, SpringAnimation, [
            config
        ]);
        _this._overshootClamping = config.overshootClamping ?? false;
        _this._restDisplacementThreshold = config.restDisplacementThreshold ?? 0.001;
        _this._restSpeedThreshold = config.restSpeedThreshold ?? 0.001;
        _this._initialVelocity = config.velocity ?? 0;
        _this._lastVelocity = config.velocity ?? 0;
        _this._toValue = config.toValue;
        _this._delay = config.delay ?? 0;
        _this._platformConfig = config.platformConfig;
        if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
            (0, _invariant.default)(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
            _this._stiffness = config.stiffness ?? 100;
            _this._damping = config.damping ?? 10;
            _this._mass = config.mass ?? 1;
        } else if (config.bounciness !== undefined || config.speed !== undefined) {
            // Convert the origami bounciness/speed values to stiffness/damping
            // We assume mass is 1.
            (0, _invariant.default)(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
            var springConfig = _SpringConfig.fromBouncinessAndSpeed(config.bounciness ?? 8, config.speed ?? 12);
            _this._stiffness = springConfig.stiffness;
            _this._damping = springConfig.damping;
            _this._mass = 1;
        } else {
            // Convert the origami tension/friction values to stiffness/damping
            // We assume mass is 1.
            var springConfig1 = _SpringConfig.fromOrigamiTensionAndFriction(config.tension ?? 40, config.friction ?? 7);
            _this._stiffness = springConfig1.stiffness;
            _this._damping = springConfig1.damping;
            _this._mass = 1;
        }
        (0, _invariant.default)(_this._stiffness > 0, 'Stiffness value must be greater than 0');
        (0, _invariant.default)(_this._damping > 0, 'Damping value must be greater than 0');
        (0, _invariant.default)(_this._mass > 0, 'Mass value must be greater than 0');
        return _this;
    }
    _create_class._(SpringAnimation, [
        {
            key: "__getNativeAnimationConfig",
            value: function __getNativeAnimationConfig() {
                return {
                    type: 'spring',
                    overshootClamping: this._overshootClamping,
                    restDisplacementThreshold: this._restDisplacementThreshold,
                    restSpeedThreshold: this._restSpeedThreshold,
                    stiffness: this._stiffness,
                    damping: this._damping,
                    mass: this._mass,
                    initialVelocity: this._initialVelocity ?? this._lastVelocity,
                    toValue: this._toValue,
                    iterations: this.__iterations,
                    platformConfig: this._platformConfig,
                    debugID: this.__getDebugID()
                };
            }
        },
        {
            key: "start",
            value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
                _get._(_get_prototype_of._(SpringAnimation.prototype), "start", this).call(this, fromValue, onUpdate, onEnd, previousAnimation, animatedValue);
                this._startPosition = fromValue;
                this._lastPosition = this._startPosition;
                this._onUpdate = onUpdate;
                this._lastTime = Date.now();
                this._frameTime = 0.0;
                if (previousAnimation instanceof SpringAnimation) {
                    var internalState = previousAnimation.getInternalState();
                    this._lastPosition = internalState.lastPosition;
                    this._lastVelocity = internalState.lastVelocity;
                    // Set the initial velocity to the last velocity
                    this._initialVelocity = this._lastVelocity;
                    this._lastTime = internalState.lastTime;
                }
                var start = ()=>{
                    var useNativeDriver = this.__startAnimationIfNative(animatedValue);
                    if (!useNativeDriver) {
                        this.onUpdate();
                    }
                };
                //  If this._delay is more than 0, we start after the timeout.
                if (this._delay) {
                    this._timeout = setTimeout(start, this._delay);
                } else {
                    start();
                }
            }
        },
        {
            key: "getInternalState",
            value: function getInternalState() {
                return {
                    lastPosition: this._lastPosition,
                    lastVelocity: this._lastVelocity,
                    lastTime: this._lastTime
                };
            }
        },
        {
            /**
   * This spring model is based off of a damped harmonic oscillator
   * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).
   *
   * We use the closed form of the second order differential equation:
   *
   * x'' + (2ζ⍵_0)x' + ⍵^2x = 0
   *
   * where
   *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),
   *    ζ = c / 2√mk (damping ratio),
   *    c = damping constant
   *    k = stiffness
   *    m = mass
   *
   * The derivation of the closed form is described in detail here:
   * http://planetmath.org/sites/default/files/texpdf/39745.pdf
   *
   * This algorithm happens to match the algorithm used by CASpringAnimation,
   * a QuartzCore (iOS) API that creates spring animations.
   */ key: "onUpdate",
            value: function onUpdate() {
                // If for some reason we lost a lot of frames (e.g. process large payload or
                // stopped in the debugger), we only advance by 4 frames worth of
                // computation and will continue on the next frame. It's better to have it
                // running at faster speed than jumping to the end.
                var MAX_STEPS = 64;
                var now = Date.now();
                if (now > this._lastTime + MAX_STEPS) {
                    now = this._lastTime + MAX_STEPS;
                }
                var deltaTime = (now - this._lastTime) / 1000;
                this._frameTime += deltaTime;
                var c = this._damping;
                var m = this._mass;
                var k = this._stiffness;
                var v0 = -this._initialVelocity;
                var zeta = c / (2 * Math.sqrt(k * m)); // damping ratio
                var omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)
                var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay
                var x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0
                var position = 0.0;
                var velocity = 0.0;
                var t = this._frameTime;
                if (zeta < 1) {
                    // Under damped
                    var envelope = Math.exp(-zeta * omega0 * t);
                    position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));
                    // This looks crazy -- it's actually just the derivative of the
                    // oscillation function
                    velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
                } else {
                    // Critically damped
                    var envelope1 = Math.exp(-omega0 * t);
                    position = this._toValue - envelope1 * (x0 + (v0 + omega0 * x0) * t);
                    velocity = envelope1 * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
                }
                this._lastTime = now;
                this._lastPosition = position;
                this._lastVelocity = velocity;
                this._onUpdate(position);
                if (!this.__active) {
                    // a listener might have stopped us in _onUpdate
                    return;
                }
                // Conditions for stopping the spring animation
                var isOvershooting = false;
                if (this._overshootClamping && this._stiffness !== 0) {
                    if (this._startPosition < this._toValue) {
                        isOvershooting = position > this._toValue;
                    } else {
                        isOvershooting = position < this._toValue;
                    }
                }
                var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;
                var isDisplacement = true;
                if (this._stiffness !== 0) {
                    isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
                }
                if (isOvershooting || isVelocity && isDisplacement) {
                    if (this._stiffness !== 0) {
                        // Ensure that we end up with a round value
                        this._lastPosition = this._toValue;
                        this._lastVelocity = 0;
                        this._onUpdate(this._toValue);
                    }
                    this.__notifyAnimationEnd({
                        finished: true
                    });
                    return;
                }
                // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
            }
        },
        {
            key: "stop",
            value: function stop() {
                _get._(_get_prototype_of._(SpringAnimation.prototype), "stop", this).call(this);
                clearTimeout(this._timeout);
                if (this._animationFrame != null) {
                    __webpack_require__.g.cancelAnimationFrame(this._animationFrame);
                }
                this.__notifyAnimationEnd({
                    finished: false
                });
            }
        }
    ]);
    return SpringAnimation;
}(_wrap_native_super._(_Animation.default));


}),
"./node_modules/react-native/Libraries/Animated/animations/TimingAnimation.js": 
/*!************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/animations/TimingAnimation.js ***!
  \************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return TimingAnimation;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _wrap_native_super = __webpack_require__(/*! @swc/helpers/_/_wrap_native_super */ "./node_modules/@swc/helpers/cjs/_wrap_native_super.cjs");
var _AnimatedColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../nodes/AnimatedColor */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedColor.js"));
var _Animation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./Animation */ "./node_modules/react-native/Libraries/Animated/animations/Animation.js"));
var _easeInOut;
function easeInOut() {
    if (!_easeInOut) {
        var Easing = (__webpack_require__(/*! ../Easing */ "./node_modules/react-native/Libraries/Animated/Easing.js")/* ["default"] */["default"]);
        _easeInOut = Easing.inOut(Easing.ease);
    }
    return _easeInOut;
}
var TimingAnimation = /*#__PURE__*/ function(Animation) {
    "use strict";
    _inherits._(TimingAnimation, Animation);
    function TimingAnimation(config) {
        _class_call_check._(this, TimingAnimation);
        var _this;
        _this = _call_super._(this, TimingAnimation, [
            config
        ]);
        _this._toValue = config.toValue;
        _this._easing = config.easing ?? easeInOut();
        _this._duration = config.duration ?? 500;
        _this._delay = config.delay ?? 0;
        _this._platformConfig = config.platformConfig;
        return _this;
    }
    _create_class._(TimingAnimation, [
        {
            key: "__getNativeAnimationConfig",
            value: function __getNativeAnimationConfig() {
                var frameDuration = 1000.0 / 60.0;
                var frames = [];
                var numFrames = Math.round(this._duration / frameDuration);
                for(var frame = 0; frame < numFrames; frame++){
                    frames.push(this._easing(frame / numFrames));
                }
                frames.push(this._easing(1));
                return {
                    type: 'frames',
                    frames,
                    toValue: this._toValue,
                    iterations: this.__iterations,
                    platformConfig: this._platformConfig,
                    debugID: this.__getDebugID()
                };
            }
        },
        {
            key: "start",
            value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
                _get._(_get_prototype_of._(TimingAnimation.prototype), "start", this).call(this, fromValue, onUpdate, onEnd, previousAnimation, animatedValue);
                this._fromValue = fromValue;
                this._onUpdate = onUpdate;
                var start = ()=>{
                    this._startTime = Date.now();
                    var useNativeDriver = this.__startAnimationIfNative(animatedValue);
                    if (!useNativeDriver) {
                        // Animations that sometimes have 0 duration and sometimes do not
                        // still need to use the native driver when duration is 0 so as to
                        // not cause intermixed JS and native animations.
                        if (this._duration === 0) {
                            this._onUpdate(this._toValue);
                            this.__notifyAnimationEnd({
                                finished: true
                            });
                        } else {
                            this._animationFrame = requestAnimationFrame(()=>this.onUpdate());
                        }
                    }
                };
                if (this._delay) {
                    this._timeout = setTimeout(start, this._delay);
                } else {
                    start();
                }
            }
        },
        {
            key: "onUpdate",
            value: function onUpdate() {
                var now = Date.now();
                if (now >= this._startTime + this._duration) {
                    if (this._duration === 0) {
                        this._onUpdate(this._toValue);
                    } else {
                        this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
                    }
                    this.__notifyAnimationEnd({
                        finished: true
                    });
                    return;
                }
                this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));
                if (this.__active) {
                    // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
                }
            }
        },
        {
            key: "stop",
            value: function stop() {
                _get._(_get_prototype_of._(TimingAnimation.prototype), "stop", this).call(this);
                clearTimeout(this._timeout);
                if (this._animationFrame != null) {
                    __webpack_require__.g.cancelAnimationFrame(this._animationFrame);
                }
                this.__notifyAnimationEnd({
                    finished: false
                });
            }
        }
    ]);
    return TimingAnimation;
}(_wrap_native_super._(_Animation.default));


}),
"./node_modules/react-native/Libraries/Animated/bezier.js": 
/*!****************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/bezier.js ***!
  \****************************************************************/
(function (__unused_webpack_module, exports) {
"use strict";
/**
 * Portions Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * BezierEasing - use bezier curve for transition easing function
 * https://github.com/gre/bezier-easing
 * @copyright 2014-2015 Gaëtan Renaudeau. MIT License.
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return bezier;
    }
}));
// These values are established by empiricism with tests (tradeoff: performance VS precision)
var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;
var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
var float32ArraySupported = typeof Float32Array === 'function';
function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
}
function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
}
function C(aA1) {
    return 3.0 * aA1;
}
// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}
// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
}
function binarySubdivide(aX, _aA, _aB, mX1, mX2) {
    var currentX, currentT, i = 0, aA = _aA, aB = _aB;
    do {
        currentT = aA + (aB - aA) / 2.0;
        currentX = calcBezier(currentT, mX1, mX2) - aX;
        if (currentX > 0.0) {
            aB = currentT;
        } else {
            aA = currentT;
        }
    }while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
    return currentT;
}
function newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {
    var aGuessT = _aGuessT;
    for(var i = 0; i < NEWTON_ITERATIONS; ++i){
        var currentSlope = getSlope(aGuessT, mX1, mX2);
        if (currentSlope === 0.0) {
            return aGuessT;
        }
        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
        aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
}
function bezier(mX1, mY1, mX2, mY2) {
    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {
        throw new Error('bezier x values must be in [0, 1] range');
    }
    // Precompute samples table
    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
    if (mX1 !== mY1 || mX2 !== mY2) {
        for(var i = 0; i < kSplineTableSize; ++i){
            sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
        }
    }
    function getTForX(aX) {
        var intervalStart = 0.0;
        var currentSample = 1;
        var lastSample = kSplineTableSize - 1;
        for(; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample){
            intervalStart += kSampleStepSize;
        }
        --currentSample;
        // Interpolate to provide an initial guess for t
        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
        var guessForT = intervalStart + dist * kSampleStepSize;
        var initialSlope = getSlope(guessForT, mX1, mX2);
        if (initialSlope >= NEWTON_MIN_SLOPE) {
            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
        } else if (initialSlope === 0.0) {
            return guessForT;
        } else {
            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
        }
    }
    return function BezierEasing(x) {
        if (mX1 === mY1 && mX2 === mY2) {
            return x; // linear
        }
        // Because JavaScript number are imprecise, we should guarantee the extremes are right.
        if (x === 0) {
            return 0;
        }
        if (x === 1) {
            return 1;
        }
        return calcBezier(getTForX(x), mY1, mY2);
    };
}


}),
"./node_modules/react-native/Libraries/Animated/components/AnimatedFlatList.js": 
/*!*************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/components/AnimatedFlatList.js ***!
  \*************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _FlatList = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Lists/FlatList */ "./node_modules/react-native/Libraries/Lists/FlatList.js"));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../createAnimatedComponent */ "./node_modules/react-native/Libraries/Animated/createAnimatedComponent.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var _default = (0, _createAnimatedComponent.default)(_FlatList.default);


}),
"./node_modules/react-native/Libraries/Animated/components/AnimatedImage.js": 
/*!**********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/components/AnimatedImage.js ***!
  \**********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _Image = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Image/Image */ "./node_modules/react-native/Libraries/Image/Image.android.js"));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../createAnimatedComponent */ "./node_modules/react-native/Libraries/Animated/createAnimatedComponent.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var _default = (0, _createAnimatedComponent.default)(_Image.default);


}),
"./node_modules/react-native/Libraries/Animated/components/AnimatedScrollView.js": 
/*!***************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/components/AnimatedScrollView.js ***!
  \***************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _RefreshControl = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/RefreshControl/RefreshControl */ "./node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js"));
var _ScrollView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/ScrollView/ScrollView */ "./node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js"));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/flattenStyle */ "./node_modules/react-native/Libraries/StyleSheet/flattenStyle.js"));
var _splitLayoutProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/splitLayoutProps */ "./node_modules/react-native/Libraries/StyleSheet/splitLayoutProps.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/useMergeRefs */ "./node_modules/react-native/Libraries/Utilities/useMergeRefs.js"));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../createAnimatedComponent */ "./node_modules/react-native/Libraries/Animated/createAnimatedComponent.js"));
var _useAnimatedProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../useAnimatedProps */ "./node_modules/react-native/Libraries/Animated/useAnimatedProps.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
/**
 * @see https://github.com/facebook/react-native/commit/b8c8562
 */ var AnimatedScrollView = /*#__PURE__*/ _react.forwardRef(function AnimatedScrollViewWithOrWithoutInvertedRefreshControl(props, forwardedRef) {
    // (Android only) When a ScrollView has a RefreshControl and
    // any `style` property set with an Animated.Value, the CSS
    // gets incorrectly applied twice. This is because ScrollView
    // swaps the parent/child relationship of itself and the
    // RefreshControl component (see ScrollView.js for more details).
    if (_Platform.default.OS === 'android' && props.refreshControl != null && props.style != null) {
        return(// $FlowFixMe[prop-missing]
        /*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedScrollViewWithInvertedRefreshControl, _object_spread_props._(_object_spread._({
            scrollEventThrottle: 0.0001
        }, props), {
            ref: forwardedRef,
            refreshControl: props.refreshControl
        })));
    } else {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedScrollViewWithoutInvertedRefreshControl, _object_spread_props._(_object_spread._({
            scrollEventThrottle: 0.0001
        }, props), {
            ref: forwardedRef
        }));
    }
});
var AnimatedScrollViewWithInvertedRefreshControl = /*#__PURE__*/ _react.forwardRef(// $FlowFixMe[incompatible-call]
function AnimatedScrollViewWithInvertedRefreshControl(props, forwardedRef) {
    // Split `props` into the animate-able props for the parent (RefreshControl)
    // and child (ScrollView).
    var _useMemo = (0, _react.useMemo)(()=>{
        // $FlowFixMe[underconstrained-implicit-instantiation]
        // $FlowFixMe[incompatible-call]
        var _splitLayoutProps1 = (0, _splitLayoutProps.default)((0, _flattenStyle.default)(props.style)), outer = _splitLayoutProps1.outer, inner = _splitLayoutProps1.inner;
        return {
            intermediatePropsForRefreshControl: {
                style: outer
            },
            intermediatePropsForScrollView: _object_spread_props._(_object_spread._({}, props), {
                style: inner
            })
        };
    }, [
        props
    ]), intermediatePropsForRefreshControl = _useMemo.intermediatePropsForRefreshControl, intermediatePropsForScrollView = _useMemo.intermediatePropsForScrollView;
    // Handle animated props on `refreshControl`.
    var _useAnimatedProps1 = _sliced_to_array._((0, _useAnimatedProps.default)(intermediatePropsForRefreshControl), 2), refreshControlAnimatedProps = _useAnimatedProps1[0], refreshControlRef = _useAnimatedProps1[1];
    // NOTE: Assumes that refreshControl.ref` and `refreshControl.style` can be
    // safely clobbered.
    var refreshControl = /*#__PURE__*/ _react.cloneElement(props.refreshControl, _object_spread_props._(_object_spread._({}, refreshControlAnimatedProps), {
        ref: refreshControlRef
    }));
    // Handle animated props on `NativeDirectionalScrollView`.
    var _useAnimatedProps2 = _sliced_to_array._((0, _useAnimatedProps.default)(intermediatePropsForScrollView), 2), scrollViewAnimatedProps = _useAnimatedProps2[0], scrollViewRef = _useAnimatedProps2[1];
    var ref = (0, _useMergeRefs.default)(scrollViewRef, forwardedRef);
    return(// $FlowFixMe[incompatible-use] Investigate useAnimatedProps return value
    /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScrollView.default, _object_spread_props._(_object_spread._({}, scrollViewAnimatedProps), {
        ref: ref,
        refreshControl: refreshControl,
        // Because `refreshControl` is a clone of `props.refreshControl` with
        // `refreshControlAnimatedProps` added, we need to pass ScrollView.js
        // the combined styles since it also splits the outer/inner styles for
        // its parent/child, respectively. Without this, the refreshControl
        // styles would be ignored.
        style: _StyleSheet.default.compose(scrollViewAnimatedProps.style, refreshControlAnimatedProps.style)
    })));
});
var AnimatedScrollViewWithoutInvertedRefreshControl = (0, _createAnimatedComponent.default)(_ScrollView.default);
var _default = AnimatedScrollView;


}),
"./node_modules/react-native/Libraries/Animated/components/AnimatedSectionList.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/components/AnimatedSectionList.js ***!
  \****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _SectionList = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Lists/SectionList */ "./node_modules/react-native/Libraries/Lists/SectionList.js"));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../createAnimatedComponent */ "./node_modules/react-native/Libraries/Animated/createAnimatedComponent.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var _default = (0, _createAnimatedComponent.default)(_SectionList.default);


}),
"./node_modules/react-native/Libraries/Animated/components/AnimatedText.js": 
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/components/AnimatedText.js ***!
  \*********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../createAnimatedComponent */ "./node_modules/react-native/Libraries/Animated/createAnimatedComponent.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var _default = (0, _createAnimatedComponent.default)(_Text.default);


}),
"./node_modules/react-native/Libraries/Animated/components/AnimatedView.js": 
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/components/AnimatedView.js ***!
  \*********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../createAnimatedComponent */ "./node_modules/react-native/Libraries/Animated/createAnimatedComponent.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var _default = (0, _createAnimatedComponent.default)(_View.default);


}),
"./node_modules/react-native/Libraries/Animated/createAnimatedComponent.js": 
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/createAnimatedComponent.js ***!
  \*********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get // We could use a mapped type here to introduce acceptable Animated variants
    // of properties, instead of doing so in the core StyleSheetTypes
    // Inexact Props are not supported, they'll be made exact here.
    default () {
        return createAnimatedComponent;
    },
    get unstable_createAnimatedComponentWithAllowlist () {
        return unstable_createAnimatedComponentWithAllowlist;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _composeStyles = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../src/private/styles/composeStyles */ "./node_modules/react-native/src/private/styles/composeStyles.js"));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/useMergeRefs */ "./node_modules/react-native/Libraries/Utilities/useMergeRefs.js"));
var _useAnimatedProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./useAnimatedProps */ "./node_modules/react-native/Libraries/Animated/useAnimatedProps.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function createAnimatedComponent(Component) {
    return unstable_createAnimatedComponentWithAllowlist(Component, null);
}
function unstable_createAnimatedComponentWithAllowlist(Component, allowlist) {
    var AnimatedComponent = /*#__PURE__*/ _react.forwardRef((props, forwardedRef)=>{
        var _useAnimatedProps1 = _sliced_to_array._((0, _useAnimatedProps.default)(// $FlowFixMe[incompatible-call]
        props, allowlist), 2), reducedProps = _useAnimatedProps1[0], callbackRef = _useAnimatedProps1[1];
        var ref = (0, _useMergeRefs.default)(callbackRef, forwardedRef);
        // Some components require explicit passthrough values for animation
        // to work properly. For example, if an animated component is
        // transformed and Pressable, onPress will not work after transform
        // without these passthrough values.
        // $FlowFixMe[prop-missing]
        var passthroughAnimatedPropExplicitValues = reducedProps.passthroughAnimatedPropExplicitValues, style = reducedProps.style;
        var passthroughStyle = passthroughAnimatedPropExplicitValues === null || passthroughAnimatedPropExplicitValues === void 0 ? void 0 : passthroughAnimatedPropExplicitValues.style;
        var mergedStyle = (0, _react.useMemo)(()=>(0, _composeStyles.default)(style, passthroughStyle), [
            passthroughStyle,
            style
        ]);
        // NOTE: It is important that `passthroughAnimatedPropExplicitValues` is
        // spread after `reducedProps` but before `style`.
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(Component, _object_spread_props._(_object_spread._({}, reducedProps, passthroughAnimatedPropExplicitValues), {
            style: mergedStyle,
            ref: ref
        }));
    });
    AnimatedComponent.displayName = `Animated(${Component.displayName || 'Anonymous'})`;
    return AnimatedComponent;
}


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedAddition.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedAddition.js ***!
  \********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedAddition;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedInterpolation */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedInterpolation.js"));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedValue */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedValue.js"));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedWithChildren */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedWithChildren.js"));
var AnimatedAddition = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedAddition, AnimatedWithChildren);
    function AnimatedAddition(a, b, config) {
        _class_call_check._(this, AnimatedAddition);
        var _this;
        _this = _call_super._(this, AnimatedAddition, [
            config
        ]);
        _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
        _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
        return _this;
    }
    _create_class._(AnimatedAddition, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this._a.__makeNative(platformConfig);
                this._b.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedAddition.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                return this._a.__getValue() + this._b.__getValue();
            }
        },
        {
            key: "interpolate",
            value: function interpolate(config) {
                return new _AnimatedInterpolation.default(this, config);
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this._a.__addChild(this);
                this._b.__addChild(this);
                _get._(_get_prototype_of._(AnimatedAddition.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this._a.__removeChild(this);
                this._b.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedAddition.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'addition',
                    input: [
                        this._a.__getNativeTag(),
                        this._b.__getNativeTag()
                    ],
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedAddition;
}(_AnimatedWithChildren.default);


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedColor.js": 
/*!*****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedColor.js ***!
  \*****************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedColor;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../src/private/animated/NativeAnimatedHelper */ "./node_modules/react-native/src/private/animated/NativeAnimatedHelper.js"));
var _normalizeColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/normalizeColor */ "./node_modules/react-native/Libraries/StyleSheet/normalizeColor.js"));
var _PlatformColorValueTypes = __webpack_require__(/*! ../../StyleSheet/PlatformColorValueTypes */ "./node_modules/react-native/Libraries/StyleSheet/PlatformColorValueTypes.android.js");
var _AnimatedValue = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./AnimatedValue */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedValue.js"));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedWithChildren */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedWithChildren.js"));
var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
var defaultColor = {
    r: 0,
    g: 0,
    b: 0,
    a: 1.0
};
/* eslint no-bitwise: 0 */ function processColor(color) {
    if (color === undefined || color === null) {
        return null;
    }
    if (isRgbaValue(color)) {
        // $FlowIgnore[incompatible-cast] - Type is verified above
        return color;
    }
    var normalizedColor = (0, _normalizeColor.default)(// $FlowIgnore[incompatible-cast] - Type is verified above
    color);
    if (normalizedColor === undefined || normalizedColor === null) {
        return null;
    }
    if (typeof normalizedColor === 'object') {
        var processedColorObj = (0, _PlatformColorValueTypes.processColorObject)(normalizedColor);
        if (processedColorObj != null) {
            return processedColorObj;
        }
    } else if (typeof normalizedColor === 'number') {
        var r = (normalizedColor & 0xff000000) >>> 24;
        var g = (normalizedColor & 0x00ff0000) >>> 16;
        var b = (normalizedColor & 0x0000ff00) >>> 8;
        var a = (normalizedColor & 0x000000ff) / 255;
        return {
            r,
            g,
            b,
            a
        };
    }
    return null;
}
function isRgbaValue(value) {
    return value && typeof value.r === 'number' && typeof value.g === 'number' && typeof value.b === 'number' && typeof value.a === 'number';
}
function isRgbaAnimatedValue(value) {
    return value && value.r instanceof _AnimatedValue.default && value.g instanceof _AnimatedValue.default && value.b instanceof _AnimatedValue.default && value.a instanceof _AnimatedValue.default;
}
var AnimatedColor = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedColor, AnimatedWithChildren);
    function AnimatedColor(valueIn, config) {
        _class_call_check._(this, AnimatedColor);
        var _this;
        _this = _call_super._(this, AnimatedColor, [
            config
        ]), _this._suspendCallbacks = 0;
        var value = valueIn ?? defaultColor;
        if (isRgbaAnimatedValue(value)) {
            // $FlowIgnore[incompatible-cast] - Type is verified above
            var rgbaAnimatedValue = value;
            _this.r = rgbaAnimatedValue.r;
            _this.g = rgbaAnimatedValue.g;
            _this.b = rgbaAnimatedValue.b;
            _this.a = rgbaAnimatedValue.a;
        } else {
            var processedColor = // $FlowIgnore[incompatible-cast] - Type is verified above
            processColor(value) ?? defaultColor;
            var initColor = defaultColor;
            if (isRgbaValue(processedColor)) {
                // $FlowIgnore[incompatible-cast] - Type is verified above
                initColor = processedColor;
            } else {
                // $FlowIgnore[incompatible-cast] - Type is verified above
                _this.nativeColor = processedColor;
            }
            _this.r = new _AnimatedValue.default(initColor.r);
            _this.g = new _AnimatedValue.default(initColor.g);
            _this.b = new _AnimatedValue.default(initColor.b);
            _this.a = new _AnimatedValue.default(initColor.a);
        }
        if (config === null || config === void 0 ? void 0 : config.useNativeDriver) {
            _this.__makeNative();
        }
        return _this;
    }
    _create_class._(AnimatedColor, [
        {
            /**
   * Directly set the value. This will stop any animations running on the value
   * and update all the bound properties.
   */ key: "setValue",
            value: function setValue(value) {
                var shouldUpdateNodeConfig = false;
                if (this.__isNative) {
                    var nativeTag = this.__getNativeTag();
                    NativeAnimatedAPI.setWaitingForIdentifier(nativeTag.toString());
                }
                var processedColor = processColor(value) ?? defaultColor;
                this._withSuspendedCallbacks(()=>{
                    if (isRgbaValue(processedColor)) {
                        // $FlowIgnore[incompatible-type] - Type is verified above
                        var rgbaValue = processedColor;
                        this.r.setValue(rgbaValue.r);
                        this.g.setValue(rgbaValue.g);
                        this.b.setValue(rgbaValue.b);
                        this.a.setValue(rgbaValue.a);
                        if (this.nativeColor != null) {
                            this.nativeColor = null;
                            shouldUpdateNodeConfig = true;
                        }
                    } else {
                        // $FlowIgnore[incompatible-type] - Type is verified above
                        var nativeColor = processedColor;
                        if (this.nativeColor !== nativeColor) {
                            this.nativeColor = nativeColor;
                            shouldUpdateNodeConfig = true;
                        }
                    }
                });
                if (this.__isNative) {
                    var nativeTag1 = this.__getNativeTag();
                    if (shouldUpdateNodeConfig) {
                        NativeAnimatedAPI.updateAnimatedNodeConfig(nativeTag1, this.__getNativeConfig());
                    }
                    NativeAnimatedAPI.unsetWaitingForIdentifier(nativeTag1.toString());
                } else {
                    (0, _AnimatedValue.flushValue)(this);
                }
                // $FlowFixMe[incompatible-call]
                this.__callListeners(this.__getValue());
            }
        },
        {
            /**
   * Sets an offset that is applied on top of whatever value is set, whether
   * via `setValue`, an animation, or `Animated.event`. Useful for compensating
   * things like the start of a pan gesture.
   */ key: "setOffset",
            value: function setOffset(offset) {
                this.r.setOffset(offset.r);
                this.g.setOffset(offset.g);
                this.b.setOffset(offset.b);
                this.a.setOffset(offset.a);
            }
        },
        {
            /**
   * Merges the offset value into the base value and resets the offset to zero.
   * The final output of the value is unchanged.
   */ key: "flattenOffset",
            value: function flattenOffset() {
                this.r.flattenOffset();
                this.g.flattenOffset();
                this.b.flattenOffset();
                this.a.flattenOffset();
            }
        },
        {
            /**
   * Sets the offset value to the base value, and resets the base value to
   * zero. The final output of the value is unchanged.
   */ key: "extractOffset",
            value: function extractOffset() {
                this.r.extractOffset();
                this.g.extractOffset();
                this.b.extractOffset();
                this.a.extractOffset();
            }
        },
        {
            /**
   * Stops any running animation or tracking. `callback` is invoked with the
   * final value after stopping the animation, which is useful for updating
   * state to match the animation position with layout.
   */ key: "stopAnimation",
            value: function stopAnimation(callback) {
                this.r.stopAnimation();
                this.g.stopAnimation();
                this.b.stopAnimation();
                this.a.stopAnimation();
                callback && callback(this.__getValue());
            }
        },
        {
            /**
   * Stops any animation and resets the value to its original.
   */ key: "resetAnimation",
            value: function resetAnimation(callback) {
                this.r.resetAnimation();
                this.g.resetAnimation();
                this.b.resetAnimation();
                this.a.resetAnimation();
                callback && callback(this.__getValue());
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                if (this.nativeColor != null) {
                    return this.nativeColor;
                } else {
                    return `rgba(${this.r.__getValue()}, ${this.g.__getValue()}, ${this.b.__getValue()}, ${this.a.__getValue()})`;
                }
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this.r.__addChild(this);
                this.g.__addChild(this);
                this.b.__addChild(this);
                this.a.__addChild(this);
                _get._(_get_prototype_of._(AnimatedColor.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this.r.__removeChild(this);
                this.g.__removeChild(this);
                this.b.__removeChild(this);
                this.a.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedColor.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "_withSuspendedCallbacks",
            value: function _withSuspendedCallbacks(callback) {
                this._suspendCallbacks++;
                callback();
                this._suspendCallbacks--;
            }
        },
        {
            key: "__callListeners",
            value: function __callListeners(value) {
                if (this._suspendCallbacks === 0) {
                    _get._(_get_prototype_of._(AnimatedColor.prototype), "__callListeners", this).call(this, value);
                }
            }
        },
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this.r.__makeNative(platformConfig);
                this.g.__makeNative(platformConfig);
                this.b.__makeNative(platformConfig);
                this.a.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedColor.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'color',
                    r: this.r.__getNativeTag(),
                    g: this.g.__getNativeTag(),
                    b: this.b.__getNativeTag(),
                    a: this.a.__getNativeTag(),
                    nativeColor: this.nativeColor,
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedColor;
}(_AnimatedWithChildren.default);


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedDiffClamp.js": 
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedDiffClamp.js ***!
  \*********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedDiffClamp;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedInterpolation */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedInterpolation.js"));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedWithChildren */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedWithChildren.js"));
var AnimatedDiffClamp = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedDiffClamp, AnimatedWithChildren);
    function AnimatedDiffClamp(a, min, max, config) {
        _class_call_check._(this, AnimatedDiffClamp);
        var _this;
        _this = _call_super._(this, AnimatedDiffClamp, [
            config
        ]);
        _this._a = a;
        _this._min = min;
        _this._max = max;
        _this._value = _this._lastValue = _this._a.__getValue();
        return _this;
    }
    _create_class._(AnimatedDiffClamp, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this._a.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedDiffClamp.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "interpolate",
            value: function interpolate(config) {
                return new _AnimatedInterpolation.default(this, config);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                var value = this._a.__getValue();
                var diff = value - this._lastValue;
                this._lastValue = value;
                this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
                return this._value;
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this._a.__addChild(this);
                _get._(_get_prototype_of._(AnimatedDiffClamp.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this._a.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedDiffClamp.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'diffclamp',
                    input: this._a.__getNativeTag(),
                    min: this._min,
                    max: this._max,
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedDiffClamp;
}(_AnimatedWithChildren.default);


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedDivision.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedDivision.js ***!
  \********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedDivision;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedInterpolation */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedInterpolation.js"));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedNode */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedNode.js"));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedValue */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedValue.js"));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedWithChildren */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedWithChildren.js"));
var AnimatedDivision = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedDivision, AnimatedWithChildren);
    function AnimatedDivision(a, b, config) {
        _class_call_check._(this, AnimatedDivision);
        var _this;
        _this = _call_super._(this, AnimatedDivision, [
            config
        ]), _this._warnedAboutDivideByZero = false;
        if (b === 0 || b instanceof _AnimatedNode.default && b.__getValue() === 0) {
            console.error('Detected potential division by zero in AnimatedDivision');
        }
        _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
        _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
        return _this;
    }
    _create_class._(AnimatedDivision, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this._a.__makeNative(platformConfig);
                this._b.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedDivision.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                var a = this._a.__getValue();
                var b = this._b.__getValue();
                if (b === 0) {
                    // Prevent spamming the console/LogBox
                    if (!this._warnedAboutDivideByZero) {
                        console.error('Detected division by zero in AnimatedDivision');
                        this._warnedAboutDivideByZero = true;
                    }
                    // Passing infinity/NaN to Fabric will cause a native crash
                    return 0;
                }
                this._warnedAboutDivideByZero = false;
                return a / b;
            }
        },
        {
            key: "interpolate",
            value: function interpolate(config) {
                return new _AnimatedInterpolation.default(this, config);
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this._a.__addChild(this);
                this._b.__addChild(this);
                _get._(_get_prototype_of._(AnimatedDivision.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this._a.__removeChild(this);
                this._b.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedDivision.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'division',
                    input: [
                        this._a.__getNativeTag(),
                        this._b.__getNativeTag()
                    ],
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedDivision;
}(_AnimatedWithChildren.default);


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedInterpolation.js": 
/*!*************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedInterpolation.js ***!
  \*************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ /* eslint no-bitwise: 0 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedInterpolation;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../src/private/animated/NativeAnimatedHelper */ "./node_modules/react-native/src/private/animated/NativeAnimatedHelper.js"));
var _NativeAnimatedValidation = __webpack_require__(/*! ../../../src/private/animated/NativeAnimatedValidation */ "./node_modules/react-native/src/private/animated/NativeAnimatedValidation.js");
var _normalizeColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/normalizeColor */ "./node_modules/react-native/Libraries/StyleSheet/normalizeColor.js"));
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js"));
var _Easing = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Easing */ "./node_modules/react-native/Libraries/Animated/Easing.js"));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedWithChildren */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedWithChildren.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
/**
 * Very handy helper to map input ranges to output ranges with an easing
 * function and custom behavior outside of the ranges.
 */ function createNumericInterpolation(config) {
    var outputRange = config.outputRange;
    var inputRange = config.inputRange;
    var easing = config.easing || _Easing.default.linear;
    var extrapolateLeft = 'extend';
    if (config.extrapolateLeft !== undefined) {
        extrapolateLeft = config.extrapolateLeft;
    } else if (config.extrapolate !== undefined) {
        extrapolateLeft = config.extrapolate;
    }
    var extrapolateRight = 'extend';
    if (config.extrapolateRight !== undefined) {
        extrapolateRight = config.extrapolateRight;
    } else if (config.extrapolate !== undefined) {
        extrapolateRight = config.extrapolate;
    }
    return (input)=>{
        (0, _invariant.default)(typeof input === 'number', 'Cannot interpolation an input which is not a number');
        var range = findRange(input, inputRange);
        return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
    };
}
function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
    var result = input;
    // Extrapolate
    if (result < inputMin) {
        if (extrapolateLeft === 'identity') {
            return result;
        } else if (extrapolateLeft === 'clamp') {
            result = inputMin;
        } else if (extrapolateLeft === 'extend') {
        // noop
        }
    }
    if (result > inputMax) {
        if (extrapolateRight === 'identity') {
            return result;
        } else if (extrapolateRight === 'clamp') {
            result = inputMax;
        } else if (extrapolateRight === 'extend') {
        // noop
        }
    }
    if (outputMin === outputMax) {
        return outputMin;
    }
    if (inputMin === inputMax) {
        if (input <= inputMin) {
            return outputMin;
        }
        return outputMax;
    }
    // Input Range
    if (inputMin === -Infinity) {
        result = -result;
    } else if (inputMax === Infinity) {
        result = result - inputMin;
    } else {
        result = (result - inputMin) / (inputMax - inputMin);
    }
    // Easing
    result = easing(result);
    // Output Range
    if (outputMin === -Infinity) {
        result = -result;
    } else if (outputMax === Infinity) {
        result = result + outputMin;
    } else {
        result = result * (outputMax - outputMin) + outputMin;
    }
    return result;
}
var numericComponentRegex = /[+-]?(?:\d+\.?\d*|\.\d+)(?:[eE][+-]?\d+)?/g;
// Maps string inputs an RGBA color or an array of numeric components
function mapStringToNumericComponents(input) {
    var normalizedColor = (0, _normalizeColor.default)(input);
    (0, _invariant.default)(normalizedColor == null || typeof normalizedColor !== 'object', 'PlatformColors are not supported');
    if (typeof normalizedColor === 'number') {
        normalizedColor = normalizedColor || 0;
        var r = (normalizedColor & 0xff000000) >>> 24;
        var g = (normalizedColor & 0x00ff0000) >>> 16;
        var b = (normalizedColor & 0x0000ff00) >>> 8;
        var a = (normalizedColor & 0x000000ff) / 255;
        return {
            isColor: true,
            components: [
                r,
                g,
                b,
                a
            ]
        };
    } else {
        var components = [];
        var lastMatchEnd = 0;
        var match;
        while((match = numericComponentRegex.exec(input)) != null){
            if (match.index > lastMatchEnd) {
                components.push(input.substring(lastMatchEnd, match.index));
            }
            components.push(parseFloat(match[0]));
            lastMatchEnd = match.index + match[0].length;
        }
        (0, _invariant.default)(components.length > 0, 'outputRange must contain color or value with numeric component');
        if (lastMatchEnd < input.length) {
            components.push(input.substring(lastMatchEnd, input.length));
        }
        return {
            isColor: false,
            components
        };
    }
}
/**
 * Supports string shapes by extracting numbers so new values can be computed,
 * and recombines those values into new strings of the same shape.  Supports
 * things like:
 *
 *   rgba(123, 42, 99, 0.36) // colors
 *   -45deg                  // values with units
 */ function createStringInterpolation(config) {
    (0, _invariant.default)(config.outputRange.length >= 2, 'Bad output range');
    var outputRange = config.outputRange.map(mapStringToNumericComponents);
    var isColor = outputRange[0].isColor;
    if (true) {
        (0, _invariant.default)(outputRange.every((output)=>output.isColor === isColor), 'All elements of output range should either be a color or a string with numeric components');
        var firstOutput = outputRange[0].components;
        (0, _invariant.default)(outputRange.every((output)=>output.components.length === firstOutput.length), 'All elements of output range should have the same number of components');
        (0, _invariant.default)(outputRange.every((output)=>output.components.every((component, i)=>// $FlowIgnoreMe[invalid-compare]
                typeof component === 'number' || component === firstOutput[i])), 'All elements of output range should have the same non-numeric components');
    }
    var numericComponents = outputRange.map((output)=>isColor ? output.components : output.components.filter((c)=>typeof c === 'number'));
    var interpolations = numericComponents[0].map((_, i)=>createNumericInterpolation(_object_spread_props._(_object_spread._({}, config), {
            outputRange: numericComponents.map((components)=>components[i])
        })));
    if (!isColor) {
        return (input)=>{
            var values = interpolations.map((interpolation)=>interpolation(input));
            var i = 0;
            return outputRange[0].components.map((c)=>typeof c === 'number' ? values[i++] : c).join('');
        };
    } else {
        return (input)=>{
            var result = interpolations.map((interpolation, i)=>{
                var value = interpolation(input);
                // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to
                // round the opacity (4th column).
                return i < 3 ? Math.round(value) : Math.round(value * 1000) / 1000;
            });
            return `rgba(${result[0]}, ${result[1]}, ${result[2]}, ${result[3]})`;
        };
    }
}
function findRange(input, inputRange) {
    var i;
    for(i = 1; i < inputRange.length - 1; ++i){
        if (inputRange[i] >= input) {
            break;
        }
    }
    return i - 1;
}
function checkValidRanges(inputRange, outputRange) {
    checkInfiniteRange('outputRange', outputRange);
    checkInfiniteRange('inputRange', inputRange);
    checkValidInputRange(inputRange);
    (0, _invariant.default)(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');
}
function checkValidInputRange(arr) {
    (0, _invariant.default)(arr.length >= 2, 'inputRange must have at least 2 elements');
    var message = 'inputRange must be monotonically non-decreasing ' + String(arr);
    for(var i = 1; i < arr.length; ++i){
        (0, _invariant.default)(arr[i] >= arr[i - 1], message);
    }
}
function checkInfiniteRange(name, arr) {
    (0, _invariant.default)(arr.length >= 2, name + ' must have at least 2 elements');
    (0, _invariant.default)(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression
     * below this comment, one or both of the operands may be something that
     * doesn't cleanly convert to a string, like undefined, null, and object,
     * etc. If you really mean this implicit string conversion, you can do
     * something like String(myThing) */ // $FlowFixMe[unsafe-addition]
    name + 'cannot be ]-infinity;+infinity[ ' + arr);
}
var AnimatedInterpolation = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedInterpolation, AnimatedWithChildren);
    function AnimatedInterpolation(parent, config) {
        _class_call_check._(this, AnimatedInterpolation);
        var _this;
        _this = _call_super._(this, AnimatedInterpolation, [
            config
        ]);
        _this._parent = parent;
        _this._config = config;
        if (true) {
            checkValidRanges(config.inputRange, config.outputRange);
            // Create interpolation eagerly in dev, so we can signal errors faster
            // even when using the native driver
            _this._getInterpolation();
        }
        return _this;
    }
    _create_class._(AnimatedInterpolation, [
        {
            key: "_getInterpolation",
            value: function _getInterpolation() {
                if (!this._interpolation) {
                    var config = this._config;
                    if (config.outputRange && typeof config.outputRange[0] === 'string') {
                        this._interpolation = createStringInterpolation(config);
                    } else {
                        this._interpolation = createNumericInterpolation(config);
                    }
                }
                return this._interpolation;
            }
        },
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this._parent.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedInterpolation.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                var parentValue = this._parent.__getValue();
                (0, _invariant.default)(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
                return this._getInterpolation()(parentValue);
            }
        },
        {
            key: "interpolate",
            value: function interpolate(config) {
                return new AnimatedInterpolation(this, config);
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this._parent.__addChild(this);
                _get._(_get_prototype_of._(AnimatedInterpolation.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this._parent.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedInterpolation.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                if (true) {
                    (0, _NativeAnimatedValidation.validateInterpolation)(this._config);
                }
                // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here
                var outputRange = this._config.outputRange;
                var outputType = null;
                if (typeof outputRange[0] === 'string') {
                    // $FlowIgnoreMe[incompatible-cast]
                    outputRange = outputRange.map((value)=>{
                        var processedColor = (0, _processColor.default)(value);
                        if (typeof processedColor === 'number') {
                            outputType = 'color';
                            return processedColor;
                        } else {
                            return _NativeAnimatedHelper.default.transformDataType(value);
                        }
                    });
                }
                return {
                    inputRange: this._config.inputRange,
                    outputRange,
                    outputType,
                    extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
                    extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
                    type: 'interpolation',
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedInterpolation;
}(_AnimatedWithChildren.default);


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedModulo.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedModulo.js ***!
  \******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedModulo;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedInterpolation */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedInterpolation.js"));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedWithChildren */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedWithChildren.js"));
var AnimatedModulo = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedModulo, AnimatedWithChildren);
    function AnimatedModulo(a, modulus, config) {
        _class_call_check._(this, AnimatedModulo);
        var _this;
        _this = _call_super._(this, AnimatedModulo, [
            config
        ]);
        _this._a = a;
        _this._modulus = modulus;
        return _this;
    }
    _create_class._(AnimatedModulo, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this._a.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedModulo.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
            }
        },
        {
            key: "interpolate",
            value: function interpolate(config) {
                return new _AnimatedInterpolation.default(this, config);
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this._a.__addChild(this);
                _get._(_get_prototype_of._(AnimatedModulo.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this._a.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedModulo.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'modulus',
                    input: this._a.__getNativeTag(),
                    modulus: this._modulus,
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedModulo;
}(_AnimatedWithChildren.default);


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedMultiplication.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedMultiplication.js ***!
  \**************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedMultiplication;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedInterpolation */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedInterpolation.js"));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedValue */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedValue.js"));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedWithChildren */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedWithChildren.js"));
var AnimatedMultiplication = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedMultiplication, AnimatedWithChildren);
    function AnimatedMultiplication(a, b, config) {
        _class_call_check._(this, AnimatedMultiplication);
        var _this;
        _this = _call_super._(this, AnimatedMultiplication, [
            config
        ]);
        _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
        _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
        return _this;
    }
    _create_class._(AnimatedMultiplication, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this._a.__makeNative(platformConfig);
                this._b.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedMultiplication.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                return this._a.__getValue() * this._b.__getValue();
            }
        },
        {
            key: "interpolate",
            value: function interpolate(config) {
                return new _AnimatedInterpolation.default(this, config);
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this._a.__addChild(this);
                this._b.__addChild(this);
                _get._(_get_prototype_of._(AnimatedMultiplication.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this._a.__removeChild(this);
                this._b.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedMultiplication.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'multiplication',
                    input: [
                        this._a.__getNativeTag(),
                        this._b.__getNativeTag()
                    ],
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedMultiplication;
}(_AnimatedWithChildren.default);


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedNode.js": 
/*!****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedNode.js ***!
  \****************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedNode;
    }
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _class_private_field_loose_base = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_base */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_base.cjs");
var _class_private_field_loose_key = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_key */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_key.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../src/private/animated/NativeAnimatedHelper */ "./node_modules/react-native/src/private/animated/NativeAnimatedHelper.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var _uniqueId = 1;
var _assertNativeAnimatedModule = ()=>{
    _NativeAnimatedHelper.default.assertNativeAnimatedModule();
    // We only have to assert that the module exists once. After we've asserted
    // this, clear out the function so we know to skip it in the future.
    _assertNativeAnimatedModule = null;
};
var _listeners = /*#__PURE__*/ _class_private_field_loose_key._("_listeners");
var AnimatedNode = /*#__PURE__*/ function() {
    "use strict";
    function AnimatedNode(config) {
        _class_call_check._(this, AnimatedNode);
        Object.defineProperty(this, _listeners, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(this, _listeners)[_listeners] = new Map();
        this._platformConfig = undefined;
        /* Methods and props used by native Animated impl */ this.__isNative = false;
        this.__nativeTag = undefined;
        this.__debugID = undefined;
        if (true) {
            this.__debugID = config === null || config === void 0 ? void 0 : config.debugID;
        }
    }
    _create_class._(AnimatedNode, [
        {
            key: "__attach",
            value: function __attach() {}
        },
        {
            key: "__detach",
            value: function __detach() {
                this.removeAllListeners();
                if (this.__isNative && this.__nativeTag != null) {
                    _NativeAnimatedHelper.default.API.dropAnimatedNode(this.__nativeTag);
                    this.__nativeTag = undefined;
                }
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {}
        },
        {
            key: "__getAnimatedValue",
            value: function __getAnimatedValue() {
                return this.__getValue();
            }
        },
        {
            key: "__addChild",
            value: function __addChild(child) {}
        },
        {
            key: "__removeChild",
            value: function __removeChild(child) {}
        },
        {
            key: "__getChildren",
            value: function __getChildren() {
                return [];
            }
        },
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                // Subclasses are expected to set `__isNative` to true before this.
                (0, _invariant.default)(this.__isNative, 'This node cannot be made a "native" animated node');
                this._platformConfig = platformConfig;
            }
        },
        {
            /**
   * Adds an asynchronous listener to the value so you can observe updates from
   * animations.  This is useful because there is no way to
   * synchronously read the value because it might be driven natively.
   *
   * See https://reactnative.dev/docs/animatedvalue#addlistener
   */ key: "addListener",
            value: function addListener(callback) {
                var id = String(_uniqueId++);
                _class_private_field_loose_base._(this, _listeners)[_listeners].set(id, callback);
                return id;
            }
        },
        {
            /**
   * Unregister a listener. The `id` param shall match the identifier
   * previously returned by `addListener()`.
   *
   * See https://reactnative.dev/docs/animatedvalue#removelistener
   */ key: "removeListener",
            value: function removeListener(id) {
                _class_private_field_loose_base._(this, _listeners)[_listeners].delete(id);
            }
        },
        {
            /**
   * Remove all registered listeners.
   *
   * See https://reactnative.dev/docs/animatedvalue#removealllisteners
   */ key: "removeAllListeners",
            value: function removeAllListeners() {
                _class_private_field_loose_base._(this, _listeners)[_listeners].clear();
            }
        },
        {
            key: "hasListeners",
            value: function hasListeners() {
                return _class_private_field_loose_base._(this, _listeners)[_listeners].size > 0;
            }
        },
        {
            key: "__onAnimatedValueUpdateReceived",
            value: function __onAnimatedValueUpdateReceived(value) {
                this.__callListeners(value);
            }
        },
        {
            key: "__callListeners",
            value: function __callListeners(value) {
                var event = {
                    value
                };
                _class_private_field_loose_base._(this, _listeners)[_listeners].forEach((listener)=>{
                    listener(event);
                });
            }
        },
        {
            key: "__getNativeTag",
            value: function __getNativeTag() {
                var nativeTag = this.__nativeTag;
                if (nativeTag == null) {
                    _assertNativeAnimatedModule === null || _assertNativeAnimatedModule === void 0 ? void 0 : _assertNativeAnimatedModule();
                    // `__isNative` is initialized as false and only ever set to true. So we
                    // only need to check it once here when initializing `__nativeTag`.
                    (0, _invariant.default)(this.__isNative, 'Attempt to get native tag from node not marked as "native"');
                    nativeTag = _NativeAnimatedHelper.default.generateNewNodeTag();
                    this.__nativeTag = nativeTag;
                    var config = this.__getNativeConfig();
                    if (this._platformConfig) {
                        config.platformConfig = this._platformConfig;
                    }
                    _NativeAnimatedHelper.default.API.createAnimatedNode(nativeTag, config);
                }
                return nativeTag;
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                throw new Error('This JS animated node type cannot be used as native animated node');
            }
        },
        {
            key: "__getPlatformConfig",
            value: function __getPlatformConfig() {
                return this._platformConfig;
            }
        },
        {
            key: "__setPlatformConfig",
            value: function __setPlatformConfig(platformConfig) {
                this._platformConfig = platformConfig;
            }
        },
        {
            /**
   * NOTE: This is intended to prevent `JSON.stringify` from throwing "cyclic
   * structure" errors in React DevTools. Avoid depending on this!
   */ key: "toJSON",
            value: function toJSON() {
                return this.__getValue();
            }
        },
        {
            key: "__getDebugID",
            value: function __getDebugID() {
                if (true) {
                    return this.__debugID;
                }
                return undefined;
            }
        }
    ]);
    return AnimatedNode;
}();


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedObject.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedObject.js ***!
  \******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 * @oncall react_native
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return AnimatedObject;
    },
    get isPlainObject () {
        return isPlainObject;
    }
});
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _class_private_field_loose_base = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_base */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_base.cjs");
var _class_private_field_loose_key = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_key */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_key.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedNode */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedNode.js"));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedWithChildren */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedWithChildren.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var MAX_DEPTH = 5;
function isPlainObject(value) {
    return value !== null && typeof value === 'object' && Object.getPrototypeOf(value).isPrototypeOf(Object) && !/*#__PURE__*/ _react.isValidElement(value);
}
function flatAnimatedNodes(value, ref, ref1) {
    var nodes = ref === void 0 ? [] : ref, depth = ref1 === void 0 ? 0 : ref1;
    if (depth >= MAX_DEPTH) {
        return nodes;
    }
    if (value instanceof _AnimatedNode.default) {
        nodes.push(value);
    } else if (Array.isArray(value)) {
        for(var ii = 0, length = value.length; ii < length; ii++){
            var element = value[ii];
            flatAnimatedNodes(element, nodes, depth + 1);
        }
    } else if (isPlainObject(value)) {
        var keys = Object.keys(value);
        for(var ii1 = 0, length1 = keys.length; ii1 < length1; ii1++){
            var key = keys[ii1];
            flatAnimatedNodes(value[key], nodes, depth + 1);
        }
    }
    return nodes;
}
// Returns a copy of value with a transformation fn applied to any AnimatedNodes
function mapAnimatedNodes(value, fn, ref) {
    var depth = ref === void 0 ? 0 : ref;
    if (depth >= MAX_DEPTH) {
        return value;
    }
    if (value instanceof _AnimatedNode.default) {
        return fn(value);
    } else if (Array.isArray(value)) {
        return value.map((element)=>mapAnimatedNodes(element, fn, depth + 1));
    } else if (isPlainObject(value)) {
        var result = {};
        var keys = Object.keys(value);
        for(var ii = 0, length = keys.length; ii < length; ii++){
            var key = keys[ii];
            result[key] = mapAnimatedNodes(value[key], fn, depth + 1);
        }
        return result;
    } else {
        return value;
    }
}
var _nodes = /*#__PURE__*/ _class_private_field_loose_key._("_nodes");
var AnimatedObject = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedObject, AnimatedWithChildren);
    function AnimatedObject(nodes, value, config) {
        _class_call_check._(this, AnimatedObject);
        var _this;
        _this = _call_super._(this, AnimatedObject, [
            config
        ]), Object.defineProperty(_this, _nodes, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(_this, _nodes)[_nodes] = nodes;
        _this._value = value;
        return _this;
    }
    _create_class._(AnimatedObject, [
        {
            key: "__getValue",
            value: function __getValue() {
                return mapAnimatedNodes(this._value, (node)=>{
                    return node.__getValue();
                });
            }
        },
        {
            key: "__getValueWithStaticObject",
            value: function __getValueWithStaticObject(staticObject) {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                var index = 0;
                // NOTE: We can depend on `this._value` and `staticObject` sharing a
                // structure because of `useAnimatedPropsMemo`.
                return mapAnimatedNodes(staticObject, ()=>nodes[index++].__getValue());
            }
        },
        {
            key: "__getAnimatedValue",
            value: function __getAnimatedValue() {
                return mapAnimatedNodes(this._value, (node)=>{
                    return node.__getAnimatedValue();
                });
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__addChild(this);
                }
                _get._(_get_prototype_of._(AnimatedObject.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__removeChild(this);
                }
                _get._(_get_prototype_of._(AnimatedObject.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__makeNative(platformConfig);
                }
                _get._(_get_prototype_of._(AnimatedObject.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'object',
                    value: mapAnimatedNodes(this._value, (node)=>{
                        return {
                            nodeTag: node.__getNativeTag()
                        };
                    }),
                    debugID: this.__getDebugID()
                };
            }
        }
    ], [
        {
            key: "from",
            value: /**
   * Creates an `AnimatedObject` if `value` contains `AnimatedNode` instances.
   * Otherwise, returns `null`.
   */ function from(value) {
                var nodes = flatAnimatedNodes(value);
                if (nodes.length === 0) {
                    return null;
                }
                return new AnimatedObject(nodes, value);
            }
        }
    ]);
    return AnimatedObject;
}(_AnimatedWithChildren.default);


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedProps.js": 
/*!*****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedProps.js ***!
  \*****************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedProps;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _class_private_field_loose_base = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_base */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_base.cjs");
var _class_private_field_loose_key = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_key */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_key.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../src/private/animated/NativeAnimatedHelper */ "./node_modules/react-native/src/private/animated/NativeAnimatedHelper.js"));
var _RendererProxy = __webpack_require__(/*! ../../ReactNative/RendererProxy */ "./node_modules/react-native/Libraries/ReactNative/RendererProxy.js");
var _AnimatedEvent = __webpack_require__(/*! ../AnimatedEvent */ "./node_modules/react-native/Libraries/Animated/AnimatedEvent.js");
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedNode */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedNode.js"));
var _AnimatedObject = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedObject */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedObject.js"));
var _AnimatedStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedStyle */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedStyle.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
function createAnimatedProps(inputProps, allowlist) {
    var nodeKeys = [];
    var nodes = [];
    var props = {};
    var keys = Object.keys(inputProps);
    for(var ii = 0, length = keys.length; ii < length; ii++){
        var key = keys[ii];
        var value = inputProps[key];
        if (allowlist == null || hasOwn(allowlist, key)) {
            var node = void 0;
            if (key === 'style') {
                node = _AnimatedStyle.default.from(value, allowlist === null || allowlist === void 0 ? void 0 : allowlist.style);
            } else if (value instanceof _AnimatedNode.default) {
                node = value;
            } else {
                node = _AnimatedObject.default.from(value);
            }
            if (node == null) {
                props[key] = value;
            } else {
                nodeKeys.push(key);
                nodes.push(node);
                props[key] = node;
            }
        } else {
            if (true) {
                // WARNING: This is a potentially expensive check that we should only
                // do in development. Without this check in development, it might be
                // difficult to identify which props need to be allowlisted.
                if (_AnimatedObject.default.from(inputProps[key]) != null) {
                    console.error(`AnimatedProps: ${key} is not allowlisted for animation, but it ` + 'contains AnimatedNode values; props allowing animation: ', allowlist);
                }
            }
            props[key] = value;
        }
    }
    return [
        nodeKeys,
        nodes,
        props
    ];
}
var _animatedView = /*#__PURE__*/ _class_private_field_loose_key._("_animatedView"), _callback = /*#__PURE__*/ _class_private_field_loose_key._("_callback"), _nodeKeys = /*#__PURE__*/ _class_private_field_loose_key._("_nodeKeys"), _nodes = /*#__PURE__*/ _class_private_field_loose_key._("_nodes"), _props = /*#__PURE__*/ _class_private_field_loose_key._("_props");
var AnimatedProps = /*#__PURE__*/ function(AnimatedNode) {
    "use strict";
    _inherits._(AnimatedProps, AnimatedNode);
    function AnimatedProps(inputProps, callback, allowlist, config) {
        _class_call_check._(this, AnimatedProps);
        var _this;
        _this = _call_super._(this, AnimatedProps, [
            config
        ]), Object.defineProperty(_this, _animatedView, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _callback, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _nodeKeys, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _nodes, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _props, {
            writable: true,
            value: void 0
        }), _class_private_field_loose_base._(_this, _animatedView)[_animatedView] = null;
        var _createAnimatedProps = _sliced_to_array._(createAnimatedProps(inputProps, allowlist), 3), nodeKeys = _createAnimatedProps[0], nodes = _createAnimatedProps[1], props = _createAnimatedProps[2];
        _class_private_field_loose_base._(_this, _nodeKeys)[_nodeKeys] = nodeKeys;
        _class_private_field_loose_base._(_this, _nodes)[_nodes] = nodes;
        _class_private_field_loose_base._(_this, _props)[_props] = props;
        _class_private_field_loose_base._(_this, _callback)[_callback] = callback;
        return _this;
    }
    _create_class._(AnimatedProps, [
        {
            key: "__getValue",
            value: function __getValue() {
                var props = {};
                var keys = Object.keys(_class_private_field_loose_base._(this, _props)[_props]);
                for(var ii = 0, length = keys.length; ii < length; ii++){
                    var key = keys[ii];
                    var value = _class_private_field_loose_base._(this, _props)[_props][key];
                    if (value instanceof _AnimatedNode.default) {
                        props[key] = value.__getValue();
                    } else if (value instanceof _AnimatedEvent.AnimatedEvent) {
                        props[key] = value.__getHandler();
                    } else {
                        props[key] = value;
                    }
                }
                return props;
            }
        },
        {
            /**
   * Creates a new `props` object that contains the same props as the supplied
   * `staticProps` object, except with animated nodes for any props that were
   * created by this `AnimatedProps` instance.
   */ key: "__getValueWithStaticProps",
            value: function __getValueWithStaticProps(staticProps) {
                var props = _object_spread._({}, staticProps);
                var keys = Object.keys(staticProps);
                for(var ii = 0, length = keys.length; ii < length; ii++){
                    var key = keys[ii];
                    var maybeNode = _class_private_field_loose_base._(this, _props)[_props][key];
                    if (key === 'style' && maybeNode instanceof _AnimatedStyle.default) {
                        props[key] = maybeNode.__getValueWithStaticStyle(staticProps.style);
                    } else if (maybeNode instanceof _AnimatedNode.default) {
                        props[key] = maybeNode.__getValue();
                    } else if (maybeNode instanceof _AnimatedEvent.AnimatedEvent) {
                        props[key] = maybeNode.__getHandler();
                    }
                }
                return props;
            }
        },
        {
            key: "__getAnimatedValue",
            value: function __getAnimatedValue() {
                var props = {};
                var nodeKeys = _class_private_field_loose_base._(this, _nodeKeys)[_nodeKeys];
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var key = nodeKeys[ii];
                    var node = nodes[ii];
                    props[key] = node.__getAnimatedValue();
                }
                return props;
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__addChild(this);
                }
                _get._(_get_prototype_of._(AnimatedProps.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                if (this.__isNative && _class_private_field_loose_base._(this, _animatedView)[_animatedView]) {
                    this.__disconnectAnimatedView();
                }
                _class_private_field_loose_base._(this, _animatedView)[_animatedView] = null;
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__removeChild(this);
                }
                _get._(_get_prototype_of._(AnimatedProps.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "update",
            value: function update() {
                _class_private_field_loose_base._(this, _callback)[_callback]();
            }
        },
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__makeNative(platformConfig);
                }
                if (!this.__isNative) {
                    this.__isNative = true;
                    // Since this does not call the super.__makeNative, we need to store the
                    // supplied platformConfig here, before calling __connectAnimatedView
                    // where it will be needed to traverse the graph of attached values.
                    _get._(_get_prototype_of._(AnimatedProps.prototype), "__setPlatformConfig", this).call(this, platformConfig);
                    if (_class_private_field_loose_base._(this, _animatedView)[_animatedView]) {
                        this.__connectAnimatedView();
                    }
                }
            }
        },
        {
            key: "setNativeView",
            value: function setNativeView(animatedView) {
                if (_class_private_field_loose_base._(this, _animatedView)[_animatedView] === animatedView) {
                    return;
                }
                _class_private_field_loose_base._(this, _animatedView)[_animatedView] = animatedView;
                if (this.__isNative) {
                    this.__connectAnimatedView();
                }
            }
        },
        {
            key: "__connectAnimatedView",
            value: function __connectAnimatedView() {
                (0, _invariant.default)(this.__isNative, 'Expected node to be marked as "native"');
                var nativeViewTag = (0, _RendererProxy.findNodeHandle)(_class_private_field_loose_base._(this, _animatedView)[_animatedView]);
                if (nativeViewTag == null) {
                    if (false) {} else {
                        throw new Error('Unable to locate attached view in the native tree');
                    }
                }
                _NativeAnimatedHelper.default.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
            }
        },
        {
            key: "__disconnectAnimatedView",
            value: function __disconnectAnimatedView() {
                (0, _invariant.default)(this.__isNative, 'Expected node to be marked as "native"');
                var nativeViewTag = (0, _RendererProxy.findNodeHandle)(_class_private_field_loose_base._(this, _animatedView)[_animatedView]);
                if (nativeViewTag == null) {
                    if (false) {} else {
                        throw new Error('Unable to locate attached view in the native tree');
                    }
                }
                _NativeAnimatedHelper.default.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
            }
        },
        {
            key: "__restoreDefaultValues",
            value: function __restoreDefaultValues() {
                // When using the native driver, view properties need to be restored to
                // their default values manually since react no longer tracks them. This
                // is needed to handle cases where a prop driven by native animated is removed
                // after having been changed natively by an animation.
                if (this.__isNative) {
                    _NativeAnimatedHelper.default.API.restoreDefaultValues(this.__getNativeTag());
                }
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                var platformConfig = this.__getPlatformConfig();
                var propsConfig = {};
                var nodeKeys = _class_private_field_loose_base._(this, _nodeKeys)[_nodeKeys];
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var key = nodeKeys[ii];
                    var node = nodes[ii];
                    node.__makeNative(platformConfig);
                    propsConfig[key] = node.__getNativeTag();
                }
                return {
                    type: 'props',
                    props: propsConfig,
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedProps;
}(_AnimatedNode.default);
// Supported versions of JSC do not implement the newer Object.hasOwn. Remove
// this shim when they do.
// $FlowIgnore[method-unbinding]
var _hasOwnProp = Object.prototype.hasOwnProperty;
var hasOwn = // $FlowIgnore[method-unbinding]
Object.hasOwn ?? ((obj, prop)=>_hasOwnProp.call(obj, prop));


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedStyle.js": 
/*!*****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedStyle.js ***!
  \*****************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedStyle;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _class_private_field_loose_base = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_base */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_base.cjs");
var _class_private_field_loose_key = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_key */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_key.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _NativeAnimatedValidation = __webpack_require__(/*! ../../../src/private/animated/NativeAnimatedValidation */ "./node_modules/react-native/src/private/animated/NativeAnimatedValidation.js");
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../src/private/featureflags/ReactNativeFeatureFlags */ "./node_modules/react-native/src/private/featureflags/ReactNativeFeatureFlags.js"));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/flattenStyle */ "./node_modules/react-native/Libraries/StyleSheet/flattenStyle.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedNode */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedNode.js"));
var _AnimatedObject = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedObject */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedObject.js"));
var _AnimatedTransform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedTransform */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedTransform.js"));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedWithChildren */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedWithChildren.js"));
function createAnimatedStyle(inputStyle, allowlist, keepUnanimatedValues) {
    var nodeKeys = [];
    var nodes = [];
    var style = {};
    var keys = Object.keys(inputStyle);
    for(var ii = 0, length = keys.length; ii < length; ii++){
        var key = keys[ii];
        var value = inputStyle[key];
        if (allowlist == null || hasOwn(allowlist, key)) {
            var node = void 0;
            if (value != null && key === 'transform') {
                node = _ReactNativeFeatureFlags.shouldUseAnimatedObjectForTransform() ? _AnimatedObject.default.from(value) : _AnimatedTransform.default.from(value);
            } else if (value instanceof _AnimatedNode.default) {
                node = value;
            } else {
                node = _AnimatedObject.default.from(value);
            }
            if (node == null) {
                if (keepUnanimatedValues) {
                    style[key] = value;
                }
            } else {
                nodeKeys.push(key);
                nodes.push(node);
                style[key] = node;
            }
        } else {
            if (true) {
                // WARNING: This is a potentially expensive check that we should only
                // do in development. Without this check in development, it might be
                // difficult to identify which styles need to be allowlisted.
                if (_AnimatedObject.default.from(inputStyle[key]) != null) {
                    console.error(`AnimatedStyle: ${key} is not allowlisted for animation, but it ` + 'contains AnimatedNode values; styles allowing animation: ', allowlist);
                }
            }
            if (keepUnanimatedValues) {
                style[key] = value;
            }
        }
    }
    return [
        nodeKeys,
        nodes,
        style
    ];
}
var _inputStyle = /*#__PURE__*/ _class_private_field_loose_key._("_inputStyle"), _nodeKeys = /*#__PURE__*/ _class_private_field_loose_key._("_nodeKeys"), _nodes = /*#__PURE__*/ _class_private_field_loose_key._("_nodes"), _style = /*#__PURE__*/ _class_private_field_loose_key._("_style");
var AnimatedStyle = /*#__PURE__*/ function(AnimatedWithChildren) {
    "use strict";
    _inherits._(AnimatedStyle, AnimatedWithChildren);
    function AnimatedStyle(nodeKeys, nodes, style, inputStyle, config) {
        _class_call_check._(this, AnimatedStyle);
        var _this;
        _this = _call_super._(this, AnimatedStyle, [
            config
        ]), Object.defineProperty(_this, _inputStyle, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _nodeKeys, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _nodes, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _style, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(_this, _nodeKeys)[_nodeKeys] = nodeKeys;
        _class_private_field_loose_base._(_this, _nodes)[_nodes] = nodes;
        _class_private_field_loose_base._(_this, _style)[_style] = style;
        _class_private_field_loose_base._(_this, _inputStyle)[_inputStyle] = inputStyle;
        return _this;
    }
    _create_class._(AnimatedStyle, [
        {
            key: "__getValue",
            value: function __getValue() {
                var style = {};
                var keys = Object.keys(_class_private_field_loose_base._(this, _style)[_style]);
                for(var ii = 0, length = keys.length; ii < length; ii++){
                    var key = keys[ii];
                    var value = _class_private_field_loose_base._(this, _style)[_style][key];
                    if (value instanceof _AnimatedNode.default) {
                        style[key] = value.__getValue();
                    } else {
                        style[key] = value;
                    }
                }
                /* $FlowFixMe[incompatible-type] Error found due to incomplete typing of
     * Platform.flow.js */ return _Platform.default.OS === 'web' ? [
                    _class_private_field_loose_base._(this, _inputStyle)[_inputStyle],
                    style
                ] : style;
            }
        },
        {
            /**
   * Creates a new `style` object that contains the same style properties as
   * the supplied `staticStyle` object, except with animated nodes for any
   * style properties that were created by this `AnimatedStyle` instance.
   */ key: "__getValueWithStaticStyle",
            value: function __getValueWithStaticStyle(staticStyle) {
                var flatStaticStyle = (0, _flattenStyle.default)(staticStyle);
                var style = flatStaticStyle == null ? {} : flatStaticStyle === staticStyle ? _object_spread._({}, flatStaticStyle) : flatStaticStyle;
                var keys = Object.keys(style);
                for(var ii = 0, length = keys.length; ii < length; ii++){
                    var key = keys[ii];
                    var maybeNode = _class_private_field_loose_base._(this, _style)[_style][key];
                    if (key === 'transform' && maybeNode instanceof _AnimatedTransform.default) {
                        style[key] = maybeNode.__getValueWithStaticTransforms(// NOTE: This check should not be necessary, but the types are not
                        // enforced as of this writing.
                        Array.isArray(style[key]) ? style[key] : []);
                    } else if (maybeNode instanceof _AnimatedObject.default) {
                        style[key] = maybeNode.__getValueWithStaticObject(style[key]);
                    } else if (maybeNode instanceof _AnimatedNode.default) {
                        style[key] = maybeNode.__getValue();
                    }
                }
                /* $FlowFixMe[incompatible-type] Error found due to incomplete typing of
     * Platform.flow.js */ return _Platform.default.OS === 'web' ? [
                    _class_private_field_loose_base._(this, _inputStyle)[_inputStyle],
                    style
                ] : style;
            }
        },
        {
            key: "__getAnimatedValue",
            value: function __getAnimatedValue() {
                var style = {};
                var nodeKeys = _class_private_field_loose_base._(this, _nodeKeys)[_nodeKeys];
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var key = nodeKeys[ii];
                    var node = nodes[ii];
                    style[key] = node.__getAnimatedValue();
                }
                return style;
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__addChild(this);
                }
                _get._(_get_prototype_of._(AnimatedStyle.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__removeChild(this);
                }
                _get._(_get_prototype_of._(AnimatedStyle.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__makeNative(platformConfig);
                }
                _get._(_get_prototype_of._(AnimatedStyle.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                var platformConfig = this.__getPlatformConfig();
                var styleConfig = {};
                var nodeKeys = _class_private_field_loose_base._(this, _nodeKeys)[_nodeKeys];
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var key = nodeKeys[ii];
                    var node = nodes[ii];
                    node.__makeNative(platformConfig);
                    styleConfig[key] = node.__getNativeTag();
                }
                if (true) {
                    (0, _NativeAnimatedValidation.validateStyles)(styleConfig);
                }
                return {
                    type: 'style',
                    style: styleConfig,
                    debugID: this.__getDebugID()
                };
            }
        }
    ], [
        {
            key: "from",
            value: /**
   * Creates an `AnimatedStyle` if `value` contains `AnimatedNode` instances.
   * Otherwise, returns `null`.
   */ function from(inputStyle, allowlist) {
                var flatStyle = (0, _flattenStyle.default)(inputStyle);
                if (flatStyle == null) {
                    return null;
                }
                var _createAnimatedStyle = _sliced_to_array._(createAnimatedStyle(flatStyle, allowlist, _Platform.default.OS !== 'web'), 3), nodeKeys = _createAnimatedStyle[0], nodes = _createAnimatedStyle[1], style = _createAnimatedStyle[2];
                if (nodes.length === 0) {
                    return null;
                }
                return new AnimatedStyle(nodeKeys, nodes, style, inputStyle);
            }
        }
    ]);
    return AnimatedStyle;
}(_AnimatedWithChildren.default);
// Supported versions of JSC do not implement the newer Object.hasOwn. Remove
// this shim when they do.
// $FlowIgnore[method-unbinding]
var _hasOwnProp = Object.prototype.hasOwnProperty;
var hasOwn = // $FlowIgnore[method-unbinding]
Object.hasOwn ?? ((obj, prop)=>_hasOwnProp.call(obj, prop));


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedSubtraction.js": 
/*!***********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedSubtraction.js ***!
  \***********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedSubtraction;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedInterpolation */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedInterpolation.js"));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedValue */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedValue.js"));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedWithChildren */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedWithChildren.js"));
var AnimatedSubtraction = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedSubtraction, AnimatedWithChildren);
    function AnimatedSubtraction(a, b, config) {
        _class_call_check._(this, AnimatedSubtraction);
        var _this;
        _this = _call_super._(this, AnimatedSubtraction, [
            config
        ]);
        _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
        _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
        return _this;
    }
    _create_class._(AnimatedSubtraction, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this._a.__makeNative(platformConfig);
                this._b.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedSubtraction.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                return this._a.__getValue() - this._b.__getValue();
            }
        },
        {
            key: "interpolate",
            value: function interpolate(config) {
                return new _AnimatedInterpolation.default(this, config);
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this._a.__addChild(this);
                this._b.__addChild(this);
                _get._(_get_prototype_of._(AnimatedSubtraction.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this._a.__removeChild(this);
                this._b.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedSubtraction.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'subtraction',
                    input: [
                        this._a.__getNativeTag(),
                        this._b.__getNativeTag()
                    ],
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedSubtraction;
}(_AnimatedWithChildren.default);


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedTracking.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedTracking.js ***!
  \********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedTracking;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../src/private/animated/NativeAnimatedHelper */ "./node_modules/react-native/src/private/animated/NativeAnimatedHelper.js"));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedNode */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedNode.js"));
var AnimatedTracking = /*#__PURE__*/ function(AnimatedNode) {
    _inherits._(AnimatedTracking, AnimatedNode);
    function AnimatedTracking(value, parent, animationClass, animationConfig, callback, config) {
        _class_call_check._(this, AnimatedTracking);
        var _this;
        _this = _call_super._(this, AnimatedTracking, [
            config
        ]);
        _this._value = value;
        _this._parent = parent;
        _this._animationClass = animationClass;
        _this._animationConfig = animationConfig;
        _this._useNativeDriver = _NativeAnimatedHelper.default.shouldUseNativeDriver(animationConfig);
        _this._callback = callback;
        _this.__attach();
        return _this;
    }
    _create_class._(AnimatedTracking, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this.__isNative = true;
                this._parent.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedTracking.prototype), "__makeNative", this).call(this, platformConfig);
                this._value.__makeNative(platformConfig);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                return this._parent.__getValue();
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this._parent.__addChild(this);
                if (this._useNativeDriver) {
                    // when the tracking starts we need to convert this node to a "native node"
                    // so that the parent node will be made "native" too. This is necessary as
                    // if we don't do this `update` method will get called. At that point it
                    // may be too late as it would mean the JS driver has already started
                    // updating node values
                    var platformConfig = this._animationConfig.platformConfig;
                    this.__makeNative(platformConfig);
                }
                _get._(_get_prototype_of._(AnimatedTracking.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this._parent.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedTracking.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "update",
            value: function update() {
                this._value.animate(new this._animationClass(_object_spread_props._(_object_spread._({}, this._animationConfig), {
                    toValue: this._animationConfig.toValue.__getValue()
                })), this._callback);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                var animation = new this._animationClass(_object_spread_props._(_object_spread._({}, this._animationConfig), {
                    // remove toValue from the config as it's a ref to Animated.Value
                    toValue: undefined
                }));
                var animationConfig = animation.__getNativeAnimationConfig();
                return {
                    type: 'tracking',
                    animationId: _NativeAnimatedHelper.default.generateNewAnimationId(),
                    animationConfig,
                    toValue: this._parent.__getNativeTag(),
                    value: this._value.__getNativeTag(),
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedTracking;
}(_AnimatedNode.default);


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedTransform.js": 
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedTransform.js ***!
  \*********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedTransform;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _class_private_field_loose_base = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_base */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_base.cjs");
var _class_private_field_loose_key = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_key */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_key.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../src/private/animated/NativeAnimatedHelper */ "./node_modules/react-native/src/private/animated/NativeAnimatedHelper.js"));
var _NativeAnimatedValidation = __webpack_require__(/*! ../../../src/private/animated/NativeAnimatedValidation */ "./node_modules/react-native/src/private/animated/NativeAnimatedValidation.js");
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedNode */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedNode.js"));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedWithChildren */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedWithChildren.js"));
function flatAnimatedNodes(transforms) {
    var nodes = [];
    for(var ii = 0, length = transforms.length; ii < length; ii++){
        var transform = transforms[ii];
        // There should be exactly one property in `transform`.
        for(var key in transform){
            var value = transform[key];
            if (value instanceof _AnimatedNode.default) {
                nodes.push(value);
            }
        }
    }
    return nodes;
}
var // NOTE: For potentially historical reasons, some operations only operate on
// the first level of AnimatedNode instances. This optimizes that bevavior.
_nodes = /*#__PURE__*/ _class_private_field_loose_key._("_nodes");
var AnimatedTransform = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedTransform, AnimatedWithChildren);
    function AnimatedTransform(nodes, transforms, config) {
        _class_call_check._(this, AnimatedTransform);
        var _this;
        _this = _call_super._(this, AnimatedTransform, [
            config
        ]), Object.defineProperty(_this, _nodes, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(_this, _nodes)[_nodes] = nodes;
        _this._transforms = transforms;
        return _this;
    }
    _create_class._(AnimatedTransform, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__makeNative(platformConfig);
                }
                _get._(_get_prototype_of._(AnimatedTransform.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                return mapTransforms(this._transforms, (animatedNode)=>animatedNode.__getValue());
            }
        },
        {
            key: "__getValueWithStaticTransforms",
            value: function __getValueWithStaticTransforms(staticTransforms) {
                var values = [];
                mapTransforms(this._transforms, (node)=>{
                    values.push(node.__getValue());
                });
                // NOTE: We can depend on `this._transforms` and `staticTransforms` sharing
                // a structure because of `useAnimatedPropsMemo`.
                return mapTransforms(staticTransforms, ()=>values.shift());
            }
        },
        {
            key: "__getAnimatedValue",
            value: function __getAnimatedValue() {
                return mapTransforms(this._transforms, (animatedNode)=>animatedNode.__getAnimatedValue());
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__addChild(this);
                }
                _get._(_get_prototype_of._(AnimatedTransform.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__removeChild(this);
                }
                _get._(_get_prototype_of._(AnimatedTransform.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                var transformsConfig = [];
                var transforms = this._transforms;
                for(var ii = 0, length = transforms.length; ii < length; ii++){
                    var transform = transforms[ii];
                    // There should be exactly one property in `transform`.
                    for(var key in transform){
                        var value = transform[key];
                        if (value instanceof _AnimatedNode.default) {
                            transformsConfig.push({
                                type: 'animated',
                                property: key,
                                nodeTag: value.__getNativeTag()
                            });
                        } else {
                            transformsConfig.push({
                                type: 'static',
                                property: key,
                                /* $FlowFixMe[incompatible-call] - `value` can be an array or an
               object. This is not currently handled by `transformDataType`.
               Migrating to `TransformObject` might solve this. */ value: _NativeAnimatedHelper.default.transformDataType(value)
                            });
                        }
                    }
                }
                if (true) {
                    (0, _NativeAnimatedValidation.validateTransform)(transformsConfig);
                }
                return {
                    type: 'transform',
                    transforms: transformsConfig,
                    debugID: this.__getDebugID()
                };
            }
        }
    ], [
        {
            key: "from",
            value: /**
   * Creates an `AnimatedTransform` if `transforms` contains `AnimatedNode`
   * instances. Otherwise, returns `null`.
   */ function from(transforms) {
                var nodes = flatAnimatedNodes(// NOTE: This check should not be necessary, but the types are not
                // enforced as of this writing. This check should be hoisted to
                // instantiation sites.
                Array.isArray(transforms) ? transforms : []);
                if (nodes.length === 0) {
                    return null;
                }
                return new AnimatedTransform(nodes, transforms);
            }
        }
    ]);
    return AnimatedTransform;
}(_AnimatedWithChildren.default);
function mapTransforms(transforms, mapFunction) {
    return transforms.map((transform)=>{
        var result = {};
        // There should be exactly one property in `transform`.
        for(var key in transform){
            var value = transform[key];
            if (value instanceof _AnimatedNode.default) {
                result[key] = mapFunction(value);
            } else if (Array.isArray(value)) {
                result[key] = value.map((element)=>element instanceof _AnimatedNode.default ? mapFunction(element) : element);
            } else if (typeof value === 'object') {
                var object = {};
                for(var propertyName in value){
                    var propertyValue = value[propertyName];
                    object[propertyName] = propertyValue instanceof _AnimatedNode.default ? mapFunction(propertyValue) : propertyValue;
                }
                result[key] = object;
            } else {
                result[key] = value;
            }
        }
        return result;
    });
}


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedValue.js": 
/*!*****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedValue.js ***!
  \*****************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return AnimatedValue;
    },
    get flushValue () {
        return flushValue;
    }
});
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _class_private_field_loose_base = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_base */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_base.cjs");
var _class_private_field_loose_key = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_key */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_key.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../src/private/animated/NativeAnimatedHelper */ "./node_modules/react-native/src/private/animated/NativeAnimatedHelper.js"));
var _InteractionManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Interaction/InteractionManager */ "./node_modules/react-native/Libraries/Interaction/InteractionManager.js"));
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedInterpolation */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedInterpolation.js"));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedWithChildren */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedWithChildren.js"));
var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
function flushValue(rootNode) {
    // eslint-disable-next-line func-call-spacing
    var leaves = new Set();
    function findAnimatedStyles(node) {
        // $FlowFixMe[prop-missing]
        if (typeof node.update === 'function') {
            leaves.add(node);
        } else {
            node.__getChildren().forEach(findAnimatedStyles);
        }
    }
    findAnimatedStyles(rootNode);
    leaves.forEach((leaf)=>leaf.update());
}
/**
 * Some operations are executed only on batch end, which is _mostly_ scheduled when
 * Animated component props change. For some of the changes which require immediate execution
 * (e.g. setValue), we create a separate batch in case none is scheduled.
 */ function _executeAsAnimatedBatch(id, operation) {
    NativeAnimatedAPI.setWaitingForIdentifier(id);
    operation();
    NativeAnimatedAPI.unsetWaitingForIdentifier(id);
}
var _attached = /*#__PURE__*/ _class_private_field_loose_key._("_attached"), _updateSubscription = /*#__PURE__*/ _class_private_field_loose_key._("_updateSubscription"), /**
   * NOTE: In theory, we should only need to call this when any listeners
   * are added. However, there is a global `onUserDrivenAnimationEnded`
   * listener that relies on `onAnimatedValueUpdate` having fired to update
   * the values in JavaScript. If that listener is removed, this could be
   * re-optimized.
   */ _ensureUpdateSubscriptionExists = /*#__PURE__*/ _class_private_field_loose_key._("_ensureUpdateSubscriptionExists");
var AnimatedValue = /*#__PURE__*/ function(AnimatedWithChildren) {
    "use strict";
    _inherits._(AnimatedValue, AnimatedWithChildren);
    function AnimatedValue(value, config) {
        _class_call_check._(this, AnimatedValue);
        var _this;
        _this = _call_super._(this, AnimatedValue, [
            config
        ]), Object.defineProperty(_this, _ensureUpdateSubscriptionExists, {
            value: ensureUpdateSubscriptionExists
        }), Object.defineProperty(_this, _attached, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _updateSubscription, {
            writable: true,
            value: void 0
        }), _class_private_field_loose_base._(_this, _attached)[_attached] = false, _class_private_field_loose_base._(_this, _updateSubscription)[_updateSubscription] = null;
        if (typeof value !== 'number') {
            throw new Error('AnimatedValue: Attempting to set value to undefined');
        }
        _this._startingValue = _this._value = value;
        _this._offset = 0;
        _this._animation = null;
        if (config && config.useNativeDriver) {
            _this.__makeNative();
        }
        return _this;
    }
    _create_class._(AnimatedValue, [
        {
            key: "__attach",
            value: function __attach() {
                _class_private_field_loose_base._(this, _attached)[_attached] = true;
                _class_private_field_loose_base._(this, _ensureUpdateSubscriptionExists)[_ensureUpdateSubscriptionExists]();
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                if (this.__isNative) {
                    var _class_private_field_loose_base__updateSubscription;
                    (_class_private_field_loose_base__updateSubscription = _class_private_field_loose_base._(this, _updateSubscription)[_updateSubscription]) === null || _class_private_field_loose_base__updateSubscription === void 0 ? void 0 : _class_private_field_loose_base__updateSubscription.remove();
                    NativeAnimatedAPI.getValue(this.__getNativeTag(), (value)=>{
                        this._value = value - this._offset;
                    });
                }
                this.stopAnimation();
                _get._(_get_prototype_of._(AnimatedValue.prototype), "__detach", this).call(this);
                _class_private_field_loose_base._(this, _attached)[_attached] = false;
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                return this._value + this._offset;
            }
        },
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                _get._(_get_prototype_of._(AnimatedValue.prototype), "__makeNative", this).call(this, platformConfig);
                _class_private_field_loose_base._(this, _ensureUpdateSubscriptionExists)[_ensureUpdateSubscriptionExists]();
            }
        },
        {
            /**
   * Directly set the value.  This will stop any animations running on the value
   * and update all the bound properties.
   *
   * See https://reactnative.dev/docs/animatedvalue#setvalue
   */ key: "setValue",
            value: function setValue(value) {
                if (this._animation) {
                    this._animation.stop();
                    this._animation = null;
                }
                this._updateValue(value, !this.__isNative /* don't perform a flush for natively driven values */ );
                if (this.__isNative) {
                    _executeAsAnimatedBatch(this.__getNativeTag().toString(), ()=>NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value));
                }
            }
        },
        {
            /**
   * Sets an offset that is applied on top of whatever value is set, whether via
   * `setValue`, an animation, or `Animated.event`.  Useful for compensating
   * things like the start of a pan gesture.
   *
   * See https://reactnative.dev/docs/animatedvalue#setoffset
   */ key: "setOffset",
            value: function setOffset(offset) {
                this._offset = offset;
                if (this.__isNative) {
                    NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
                }
            }
        },
        {
            /**
   * Merges the offset value into the base value and resets the offset to zero.
   * The final output of the value is unchanged.
   *
   * See https://reactnative.dev/docs/animatedvalue#flattenoffset
   */ key: "flattenOffset",
            value: function flattenOffset() {
                this._value += this._offset;
                this._offset = 0;
                if (this.__isNative) {
                    NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
                }
            }
        },
        {
            /**
   * Sets the offset value to the base value, and resets the base value to zero.
   * The final output of the value is unchanged.
   *
   * See https://reactnative.dev/docs/animatedvalue#extractoffset
   */ key: "extractOffset",
            value: function extractOffset() {
                this._offset += this._value;
                this._value = 0;
                if (this.__isNative) {
                    NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
                }
            }
        },
        {
            /**
   * Stops any running animation or tracking. `callback` is invoked with the
   * final value after stopping the animation, which is useful for updating
   * state to match the animation position with layout.
   *
   * See https://reactnative.dev/docs/animatedvalue#stopanimation
   */ key: "stopAnimation",
            value: function stopAnimation(callback) {
                this.stopTracking();
                this._animation && this._animation.stop();
                this._animation = null;
                if (callback) {
                    if (this.__isNative) {
                        NativeAnimatedAPI.getValue(this.__getNativeTag(), callback);
                    } else {
                        callback(this.__getValue());
                    }
                }
            }
        },
        {
            /**
   * Stops any animation and resets the value to its original.
   *
   * See https://reactnative.dev/docs/animatedvalue#resetanimation
   */ key: "resetAnimation",
            value: function resetAnimation(callback) {
                this.stopAnimation(callback);
                this._value = this._startingValue;
                if (this.__isNative) {
                    NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), this._startingValue);
                }
            }
        },
        {
            key: "__onAnimatedValueUpdateReceived",
            value: function __onAnimatedValueUpdateReceived(value) {
                this._updateValue(value, false);
            }
        },
        {
            /**
   * Interpolates the value before updating the property, e.g. mapping 0-1 to
   * 0-10.
   */ key: "interpolate",
            value: function interpolate(config) {
                return new _AnimatedInterpolation.default(this, config);
            }
        },
        {
            /**
   * Typically only used internally, but could be used by a custom Animation
   * class.
   *
   * See https://reactnative.dev/docs/animatedvalue#animate
   */ key: "animate",
            value: function animate(animation, callback) {
                var handle = null;
                if (animation.__isInteraction) {
                    handle = _InteractionManager.default.createInteractionHandle();
                }
                var previousAnimation = this._animation;
                this._animation && this._animation.stop();
                this._animation = animation;
                animation.start(this._value, (value)=>{
                    // Natively driven animations will never call into that callback, therefore we can always
                    // pass flush = true to allow the updated value to propagate to native with setNativeProps
                    this._updateValue(value, true);
                }, (result)=>{
                    this._animation = null;
                    if (handle !== null) {
                        _InteractionManager.default.clearInteractionHandle(handle);
                    }
                    callback && callback(result);
                }, previousAnimation, this);
            }
        },
        {
            /**
   * Typically only used internally.
   */ key: "stopTracking",
            value: function stopTracking() {
                this._tracking && this._tracking.__detach();
                this._tracking = null;
            }
        },
        {
            /**
   * Typically only used internally.
   */ key: "track",
            value: function track(tracking) {
                this.stopTracking();
                this._tracking = tracking;
                // Make sure that the tracking animation starts executing
                this._tracking && this._tracking.update();
            }
        },
        {
            key: "_updateValue",
            value: function _updateValue(value, flush) {
                if (value === undefined) {
                    throw new Error('AnimatedValue: Attempting to set value to undefined');
                }
                this._value = value;
                if (flush) {
                    flushValue(this);
                }
                this.__callListeners(this.__getValue());
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'value',
                    value: this._value,
                    offset: this._offset,
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedValue;
}(_AnimatedWithChildren.default);
function ensureUpdateSubscriptionExists() {
    if (_class_private_field_loose_base._(this, _updateSubscription)[_updateSubscription] != null) {
        return;
    }
    // The order in which `__attach` and `__makeNative` are called is not
    // deterministic, and we only want to do this when both have occurred.
    if (!_class_private_field_loose_base._(this, _attached)[_attached] || !this.__isNative) {
        return;
    }
    var nativeTag = this.__getNativeTag();
    NativeAnimatedAPI.startListeningToAnimatedNodeValue(nativeTag);
    var subscription = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onAnimatedValueUpdate', (data)=>{
        if (data.tag === nativeTag) {
            this.__onAnimatedValueUpdateReceived(data.value);
        }
    });
    _class_private_field_loose_base._(this, _updateSubscription)[_updateSubscription] = {
        remove: ()=>{
            // Only this function assigns to `this.#updateSubscription`.
            if (_class_private_field_loose_base._(this, _updateSubscription)[_updateSubscription] == null) {
                return;
            }
            _class_private_field_loose_base._(this, _updateSubscription)[_updateSubscription] = null;
            subscription.remove();
            NativeAnimatedAPI.stopListeningToAnimatedNodeValue(nativeTag);
        }
    };
}


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedValueXY.js": 
/*!*******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedValueXY.js ***!
  \*******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedValueXY;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedValue */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedValue.js"));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedWithChildren */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedWithChildren.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var _uniqueId = 1;
var AnimatedValueXY = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedValueXY, AnimatedWithChildren);
    function AnimatedValueXY(valueIn, config) {
        _class_call_check._(this, AnimatedValueXY);
        var _this;
        _this = _call_super._(this, AnimatedValueXY, [
            config
        ]);
        var value = valueIn || {
            x: 0,
            y: 0
        }; // @flowfixme: shouldn't need `: any`
        if (typeof value.x === 'number' && typeof value.y === 'number') {
            _this.x = new _AnimatedValue.default(value.x);
            _this.y = new _AnimatedValue.default(value.y);
        } else {
            (0, _invariant.default)(value.x instanceof _AnimatedValue.default && value.y instanceof _AnimatedValue.default, 'AnimatedValueXY must be initialized with an object of numbers or ' + 'AnimatedValues.');
            _this.x = value.x;
            _this.y = value.y;
        }
        _this._listeners = {};
        if (config && config.useNativeDriver) {
            _this.__makeNative();
        }
        return _this;
    }
    _create_class._(AnimatedValueXY, [
        {
            /**
   * Directly set the value. This will stop any animations running on the value
   * and update all the bound properties.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#setvalue
   */ key: "setValue",
            value: function setValue(value) {
                this.x.setValue(value.x);
                this.y.setValue(value.y);
            }
        },
        {
            /**
   * Sets an offset that is applied on top of whatever value is set, whether
   * via `setValue`, an animation, or `Animated.event`. Useful for compensating
   * things like the start of a pan gesture.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#setoffset
   */ key: "setOffset",
            value: function setOffset(offset) {
                this.x.setOffset(offset.x);
                this.y.setOffset(offset.y);
            }
        },
        {
            /**
   * Merges the offset value into the base value and resets the offset to zero.
   * The final output of the value is unchanged.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#flattenoffset
   */ key: "flattenOffset",
            value: function flattenOffset() {
                this.x.flattenOffset();
                this.y.flattenOffset();
            }
        },
        {
            /**
   * Sets the offset value to the base value, and resets the base value to
   * zero. The final output of the value is unchanged.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#extractoffset
   */ key: "extractOffset",
            value: function extractOffset() {
                this.x.extractOffset();
                this.y.extractOffset();
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                return {
                    x: this.x.__getValue(),
                    y: this.y.__getValue()
                };
            }
        },
        {
            /**
   * Stops any animation and resets the value to its original.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#resetanimation
   */ key: "resetAnimation",
            value: function resetAnimation(callback) {
                this.x.resetAnimation();
                this.y.resetAnimation();
                callback && callback(this.__getValue());
            }
        },
        {
            /**
   * Stops any running animation or tracking. `callback` is invoked with the
   * final value after stopping the animation, which is useful for updating
   * state to match the animation position with layout.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#stopanimation
   */ key: "stopAnimation",
            value: function stopAnimation(callback) {
                this.x.stopAnimation();
                this.y.stopAnimation();
                callback && callback(this.__getValue());
            }
        },
        {
            /**
   * Adds an asynchronous listener to the value so you can observe updates from
   * animations.  This is useful because there is no way to synchronously read
   * the value because it might be driven natively.
   *
   * Returns a string that serves as an identifier for the listener.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#addlistener
   */ key: "addListener",
            value: function addListener(callback) {
                var id = String(_uniqueId++);
                var jointCallback = (ref)=>{
                    var number = ref.value;
                    callback(this.__getValue());
                };
                this._listeners[id] = {
                    x: this.x.addListener(jointCallback),
                    y: this.y.addListener(jointCallback)
                };
                return id;
            }
        },
        {
            /**
   * Unregister a listener. The `id` param shall match the identifier
   * previously returned by `addListener()`.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#removelistener
   */ key: "removeListener",
            value: function removeListener(id) {
                this.x.removeListener(this._listeners[id].x);
                this.y.removeListener(this._listeners[id].y);
                delete this._listeners[id];
            }
        },
        {
            /**
   * Remove all registered listeners.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#removealllisteners
   */ key: "removeAllListeners",
            value: function removeAllListeners() {
                this.x.removeAllListeners();
                this.y.removeAllListeners();
                this._listeners = {};
            }
        },
        {
            /**
   * Converts `{x, y}` into `{left, top}` for use in style.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#getlayout
   */ key: "getLayout",
            value: function getLayout() {
                return {
                    left: this.x,
                    top: this.y
                };
            }
        },
        {
            /**
   * Converts `{x, y}` into a useable translation transform.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#gettranslatetransform
   */ key: "getTranslateTransform",
            value: function getTranslateTransform() {
                return [
                    {
                        translateX: this.x
                    },
                    {
                        translateY: this.y
                    }
                ];
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this.x.__addChild(this);
                this.y.__addChild(this);
                _get._(_get_prototype_of._(AnimatedValueXY.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this.x.__removeChild(this);
                this.y.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedValueXY.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this.x.__makeNative(platformConfig);
                this.y.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedValueXY.prototype), "__makeNative", this).call(this, platformConfig);
            }
        }
    ]);
    return AnimatedValueXY;
}(_AnimatedWithChildren.default);


}),
"./node_modules/react-native/Libraries/Animated/nodes/AnimatedWithChildren.js": 
/*!************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/nodes/AnimatedWithChildren.js ***!
  \************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedWithChildren;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../src/private/animated/NativeAnimatedHelper */ "./node_modules/react-native/src/private/animated/NativeAnimatedHelper.js"));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./AnimatedNode */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedNode.js"));
var _NativeAnimatedHelper_API = _NativeAnimatedHelper.default.API, connectAnimatedNodes = _NativeAnimatedHelper_API.connectAnimatedNodes, disconnectAnimatedNodes = _NativeAnimatedHelper_API.disconnectAnimatedNodes;
var AnimatedWithChildren = /*#__PURE__*/ function(AnimatedNode) {
    _inherits._(AnimatedWithChildren, AnimatedNode);
    function AnimatedWithChildren() {
        _class_call_check._(this, AnimatedWithChildren);
        var _this;
        _this = _call_super._(this, AnimatedWithChildren, arguments), _this._children = [];
        return _this;
    }
    _create_class._(AnimatedWithChildren, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                if (!this.__isNative) {
                    this.__isNative = true;
                    var children = this._children;
                    var length = children.length;
                    if (length > 0) {
                        for(var ii = 0; ii < length; ii++){
                            var child = children[ii];
                            child.__makeNative(platformConfig);
                            connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
                        }
                    }
                }
                _get._(_get_prototype_of._(AnimatedWithChildren.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__addChild",
            value: function __addChild(child) {
                if (this._children.length === 0) {
                    this.__attach();
                }
                this._children.push(child);
                if (this.__isNative) {
                    // Only accept "native" animated nodes as children
                    child.__makeNative(this.__getPlatformConfig());
                    connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
                }
            }
        },
        {
            key: "__removeChild",
            value: function __removeChild(child) {
                var index = this._children.indexOf(child);
                if (index === -1) {
                    console.warn("Trying to remove a child that doesn't exist");
                    return;
                }
                if (this.__isNative && child.__isNative) {
                    disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
                }
                this._children.splice(index, 1);
                if (this._children.length === 0) {
                    this.__detach();
                }
            }
        },
        {
            key: "__getChildren",
            value: function __getChildren() {
                return this._children;
            }
        },
        {
            key: "__callListeners",
            value: function __callListeners(value) {
                _get._(_get_prototype_of._(AnimatedWithChildren.prototype), "__callListeners", this).call(this, value);
                if (!this.__isNative) {
                    var children = this._children;
                    for(var ii = 0, length = children.length; ii < length; ii++){
                        var child = children[ii];
                        // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                        if (child.__getValue) {
                            child.__callListeners(child.__getValue());
                        }
                    }
                }
            }
        }
    ]);
    return AnimatedWithChildren;
}(_AnimatedNode.default);


}),
"./node_modules/react-native/Libraries/Animated/shouldUseTurboAnimatedModule.js": 
/*!**************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/shouldUseTurboAnimatedModule.js ***!
  \**************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
function shouldUseTurboAnimatedModule() {
    return _Platform.default.OS === 'ios' && __webpack_require__.g.RN$Bridgeless === true;
}
var _default = shouldUseTurboAnimatedModule;


}),
"./node_modules/react-native/Libraries/Animated/useAnimatedProps.js": 
/*!**************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Animated/useAnimatedProps.js ***!
  \**************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useAnimatedProps;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../src/private/animated/NativeAnimatedHelper */ "./node_modules/react-native/src/private/animated/NativeAnimatedHelper.js"));
var _useAnimatedPropsMemo = __webpack_require__(/*! ../../src/private/animated/useAnimatedPropsMemo */ "./node_modules/react-native/src/private/animated/useAnimatedPropsMemo.js");
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../src/private/featureflags/ReactNativeFeatureFlags */ "./node_modules/react-native/src/private/featureflags/ReactNativeFeatureFlags.js"));
var _ReactFabricPublicInstanceUtils = __webpack_require__(/*! ../ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils */ "./node_modules/react-native/Libraries/ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils.js");
var _useRefEffect = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/useRefEffect */ "./node_modules/react-native/Libraries/Utilities/useRefEffect.js"));
var _AnimatedEvent = __webpack_require__(/*! ./AnimatedEvent */ "./node_modules/react-native/Libraries/Animated/AnimatedEvent.js");
var _AnimatedProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./nodes/AnimatedProps */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedProps.js"));
var _react = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
var useMemoOrAnimatedPropsMemo = _ReactNativeFeatureFlags.enableAnimatedPropsMemo() ? _useAnimatedPropsMemo.useAnimatedPropsMemo : _react.useMemo;
function useAnimatedProps(props, allowlist) {
    var _useReducer = _sliced_to_array._((0, _react.useReducer)((count)=>count + 1, 0), 2), scheduleUpdate = _useReducer[1];
    var onUpdateRef = (0, _react.useRef)(null);
    var timerRef = (0, _react.useRef)(null);
    var allowlistIfEnabled = _ReactNativeFeatureFlags.enableAnimatedAllowlist() ? allowlist : null;
    var node = useMemoOrAnimatedPropsMemo(()=>new _AnimatedProps.default(props, ()=>{
            var _onUpdateRef_current;
            return (_onUpdateRef_current = onUpdateRef.current) === null || _onUpdateRef_current === void 0 ? void 0 : _onUpdateRef_current.call(onUpdateRef);
        }, allowlistIfEnabled), [
        allowlistIfEnabled,
        props
    ]);
    var useNativePropsInFabric = _ReactNativeFeatureFlags.shouldUseSetNativePropsInFabric();
    var useAnimatedPropsLifecycle = _ReactNativeFeatureFlags.useInsertionEffectsForAnimations() ? useAnimatedPropsLifecycle_insertionEffects : useAnimatedPropsLifecycle_layoutEffects;
    useAnimatedPropsLifecycle(node);
    // TODO: This "effect" does three things:
    //
    //   1) Call `setNativeView`.
    //   2) Update `onUpdateRef`.
    //   3) Update listeners for `AnimatedEvent` props.
    //
    // Ideally, each of these would be separate "effects" so that they are not
    // unnecessarily re-run when irrelevant dependencies change. For example, we
    // should be able to hoist all `AnimatedEvent` props and only do #3 if either
    // the `AnimatedEvent` props change or `instance` changes.
    //
    // But there is no way to transparently compose three separate callback refs,
    // so we just combine them all into one for now.
    var refEffect = (0, _react.useCallback)((instance)=>{
        // NOTE: This may be called more often than necessary (e.g. when `props`
        // changes), but `setNativeView` already optimizes for that.
        node.setNativeView(instance);
        // NOTE: When using the JS animation driver, this callback is called on
        // every animation frame. When using the native driver, this callback is
        // called when the animation completes.
        onUpdateRef.current = ()=>{
            if (false) {}
            var isFabricNode = isFabricInstance(instance);
            if (node.__isNative) {
                // Check 2: this is an animation driven by native.
                // In native driven animations, this callback is only called once the animation completes.
                if (isFabricNode) {
                    // Call `scheduleUpdate` to synchronise Fiber and Shadow tree.
                    // Must not be called in Paper.
                    scheduleUpdate();
                }
                return;
            }
            if (typeof instance !== 'object' || typeof (instance === null || instance === void 0 ? void 0 : instance.setNativeProps) !== 'function') {
                // Check 3: the instance does not support setNativeProps. Call `scheduleUpdate`.
                return scheduleUpdate();
            }
            if (!isFabricNode) {
                // Check 4: this is a paper instance, call setNativeProps.
                // $FlowIgnore[not-a-function] - Assume it's still a function.
                // $FlowFixMe[incompatible-use]
                return instance.setNativeProps(node.__getAnimatedValue());
            }
            if (!useNativePropsInFabric) {
                // Check 5: setNativeProps are disabled.
                return scheduleUpdate();
            }
            // This is a Fabric instance and setNativeProps is supported.
            // $FlowIgnore[not-a-function] - Assume it's still a function.
            // $FlowFixMe[incompatible-use]
            instance.setNativeProps(node.__getAnimatedValue());
            // Keeping state of Fiber tree and Shadow tree in sync.
            //
            // This is done by calling `scheduleUpdate` which will trigger a commit.
            // However, React commit is not fast enough to drive animations.
            // This is where setNativeProps comes in handy but the state between
            // Fiber tree and Shadow tree needs to be kept in sync.
            // The goal is to call `scheduleUpdate` as little as possible to maintain
            // performance but frequently enough to keep state in sync.
            // Debounce is set to 48ms, which is 3 * the duration of a frame.
            // 3 frames was the highest value where flickering state was not observed.
            if (timerRef.current != null) {
                clearTimeout(timerRef.current);
            }
            timerRef.current = setTimeout(()=>{
                timerRef.current = null;
                scheduleUpdate();
            }, 48);
        };
        var target = getEventTarget(instance);
        var events = [];
        for(var propName in props){
            // $FlowFixMe[invalid-computed-prop]
            var propValue = props[propName];
            if (propValue instanceof _AnimatedEvent.AnimatedEvent && propValue.__isNative) {
                propValue.__attach(target, propName);
                events.push([
                    propName,
                    propValue
                ]);
            }
        }
        return ()=>{
            onUpdateRef.current = null;
            for (var ref of events){
                var _ref = _sliced_to_array._(ref, 2), propName = _ref[0], propValue = _ref[1];
                propValue.__detach(target, propName);
            }
        };
    }, [
        node,
        useNativePropsInFabric,
        props
    ]);
    var callbackRef = (0, _useRefEffect.default)(refEffect);
    return [
        reduceAnimatedProps(node, props),
        callbackRef
    ];
}
function reduceAnimatedProps(node, props) {
    // Force `collapsable` to be false so that the native view is not flattened.
    // Flattened views cannot be accurately referenced by the native driver.
    return _object_spread_props._(_object_spread._({}, _ReactNativeFeatureFlags.enableAnimatedPropsMemo() ? node.__getValueWithStaticProps(props) : node.__getValue()), {
        collapsable: false
    });
}
/**
 * Manages the lifecycle of the supplied `AnimatedProps` by invoking `__attach`
 * and `__detach`. However, this is more complicated because `AnimatedProps`
 * uses reference counting to determine when to recursively detach its children
 * nodes. So in order to optimize this, we avoid detaching until the next attach
 * unless we are unmounting.
 */ function useAnimatedPropsLifecycle_layoutEffects(node) {
    var prevNodeRef = (0, _react.useRef)(null);
    var isUnmountingRef = (0, _react.useRef)(false);
    (0, _react.useEffect)(()=>{
        // It is ok for multiple components to call `flushQueue` because it noops
        // if the queue is empty. When multiple animated components are mounted at
        // the same time. Only first component flushes the queue and the others will noop.
        _NativeAnimatedHelper.default.API.flushQueue();
        var drivenAnimationEndedListener = null;
        if (node.__isNative) {
            drivenAnimationEndedListener = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onUserDrivenAnimationEnded', (data)=>{
                node.update();
            });
        }
        return ()=>{
            drivenAnimationEndedListener === null || drivenAnimationEndedListener === void 0 ? void 0 : drivenAnimationEndedListener.remove();
        };
    });
    (0, _react.useLayoutEffect)(()=>{
        isUnmountingRef.current = false;
        return ()=>{
            isUnmountingRef.current = true;
        };
    }, []);
    (0, _react.useLayoutEffect)(()=>{
        node.__attach();
        if (prevNodeRef.current != null) {
            var prevNode = prevNodeRef.current;
            // TODO: Stop restoring default values (unless `reset` is called).
            prevNode.__restoreDefaultValues();
            prevNode.__detach();
            prevNodeRef.current = null;
        }
        return ()=>{
            if (isUnmountingRef.current) {
                // NOTE: Do not restore default values on unmount, see D18197735.
                node.__detach();
            } else {
                prevNodeRef.current = node;
            }
        };
    }, [
        node
    ]);
}
/**
 * Manages the lifecycle of the supplied `AnimatedProps` by invoking `__attach`
 * and `__detach`. However, this is more complicated because `AnimatedProps`
 * uses reference counting to determine when to recursively detach its children
 * nodes. So in order to optimize this, we avoid detaching until the next attach
 * unless we are unmounting.
 */ function useAnimatedPropsLifecycle_insertionEffects(node) {
    var prevNodeRef = (0, _react.useRef)(null);
    var isUnmountingRef = (0, _react.useRef)(false);
    (0, _react.useEffect)(()=>{
        // It is ok for multiple components to call `flushQueue` because it noops
        // if the queue is empty. When multiple animated components are mounted at
        // the same time. Only first component flushes the queue and the others will noop.
        _NativeAnimatedHelper.default.API.flushQueue();
        var drivenAnimationEndedListener = null;
        if (node.__isNative) {
            drivenAnimationEndedListener = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onUserDrivenAnimationEnded', (data)=>{
                node.update();
            });
        }
        return ()=>{
            drivenAnimationEndedListener === null || drivenAnimationEndedListener === void 0 ? void 0 : drivenAnimationEndedListener.remove();
        };
    });
    (0, _react.useInsertionEffect)(()=>{
        isUnmountingRef.current = false;
        return ()=>{
            isUnmountingRef.current = true;
        };
    }, []);
    (0, _react.useInsertionEffect)(()=>{
        node.__attach();
        if (prevNodeRef.current != null) {
            var prevNode = prevNodeRef.current;
            // TODO: Stop restoring default values (unless `reset` is called).
            prevNode.__restoreDefaultValues();
            prevNode.__detach();
            prevNodeRef.current = null;
        }
        return ()=>{
            if (isUnmountingRef.current) {
                // NOTE: Do not restore default values on unmount, see D18197735.
                node.__detach();
            } else {
                prevNodeRef.current = node;
            }
        };
    }, [
        node
    ]);
}
function getEventTarget(instance) {
    return typeof instance === 'object' && typeof (instance === null || instance === void 0 ? void 0 : instance.getScrollableNode) === 'function' ? instance.getScrollableNode() : instance;
}
// $FlowFixMe[unclear-type] - Legacy instance assumptions.
function isFabricInstance(instance) {
    var _instance_getNativeScrollRef, _instance_getScrollResponder_getNativeScrollRef, _instance_getScrollResponder, _instance_getScrollResponder1;
    return (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance) || // Some components have a setNativeProps function but aren't a host component
    // such as lists like FlatList and SectionList. These should also use
    // forceUpdate in Fabric since setNativeProps doesn't exist on the underlying
    // host component. This crazy hack is essentially special casing those lists and
    // ScrollView itself to use forceUpdate in Fabric.
    // If these components end up using forwardRef then these hacks can go away
    // as instance would actually be the underlying host component and the above check
    // would be sufficient.
    (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance === null || instance === void 0 ? void 0 : (_instance_getNativeScrollRef = instance.getNativeScrollRef) === null || _instance_getNativeScrollRef === void 0 ? void 0 : _instance_getNativeScrollRef.call(instance)) || (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance === null || instance === void 0 ? void 0 : (_instance_getScrollResponder1 = instance.getScrollResponder) === null || _instance_getScrollResponder1 === void 0 ? void 0 : (_instance_getScrollResponder = _instance_getScrollResponder1.call(instance)) === null || _instance_getScrollResponder === void 0 ? void 0 : (_instance_getScrollResponder_getNativeScrollRef = _instance_getScrollResponder.getNativeScrollRef) === null || _instance_getScrollResponder_getNativeScrollRef === void 0 ? void 0 : _instance_getScrollResponder_getNativeScrollRef.call(_instance_getScrollResponder));
}


}),
"./node_modules/react-native/Libraries/Blob/Blob.js": 
/*!**********************************************************!*\
  !*** ./node_modules/react-native/Libraries/Blob/Blob.js ***!
  \**********************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
/**
 * Opaque JS representation of some binary data in native.
 *
 * The API is modeled after the W3C Blob API, with one caveat
 * regarding explicit deallocation. Refer to the `close()`
 * method for further details.
 *
 * Example usage in a React component:
 *
 *   class WebSocketImage extends React.Component {
 *      state = {blob: null};
 *      componentDidMount() {
 *        let ws = this.ws = new WebSocket(...);
 *        ws.binaryType = 'blob';
 *        ws.onmessage = (event) => {
 *          if (this.state.blob) {
 *            this.state.blob.close();
 *          }
 *          this.setState({blob: event.data});
 *        };
 *      }
 *      componentUnmount() {
 *        if (this.state.blob) {
 *          this.state.blob.close();
 *        }
 *        this.ws.close();
 *      }
 *      render() {
 *        if (!this.state.blob) {
 *          return <View />;
 *        }
 *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;
 *      }
 *   }
 *
 * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob
 */ var Blob = /*#__PURE__*/ function() {
    function Blob(ref, options) {
        var parts = ref === void 0 ? [] : ref;
        _class_call_check._(this, Blob);
        var BlobManager = __webpack_require__(/*! ./BlobManager */ "./node_modules/react-native/Libraries/Blob/BlobManager.js");
        this.data = BlobManager.createFromParts(parts, options).data;
    }
    _create_class._(Blob, [
        {
            key: "data",
            get: // $FlowFixMe[unsafe-getters-setters]
            function() {
                if (!this._data) {
                    throw new Error('Blob has been closed and is no longer available');
                }
                return this._data;
            },
            set: /*
   * This method is used to create a new Blob object containing
   * the data in the specified range of bytes of the source Blob.
   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice
   */ // $FlowFixMe[unsafe-getters-setters]
            function(data) {
                this._data = data;
            }
        },
        {
            key: "slice",
            value: function slice(start, end, ref) {
                var contentType = ref === void 0 ? '' : ref;
                var BlobManager = __webpack_require__(/*! ./BlobManager */ "./node_modules/react-native/Libraries/Blob/BlobManager.js");
                var _this_data = this.data, offset = _this_data.offset, size = _this_data.size;
                if (typeof start === 'number') {
                    if (start > size) {
                        // $FlowFixMe[reassign-const]
                        start = size;
                    }
                    offset += start;
                    size -= start;
                    if (typeof end === 'number') {
                        if (end < 0) {
                            // $FlowFixMe[reassign-const]
                            end = this.size + end;
                        }
                        if (end > this.size) {
                            // $FlowFixMe[reassign-const]
                            end = this.size;
                        }
                        size = end - start;
                    }
                }
                return BlobManager.createFromOptions({
                    blobId: this.data.blobId,
                    offset,
                    size,
                    type: contentType,
                    /* Since `blob.slice()` creates a new view onto the same binary
       * data as the original blob, we should re-use the same collector
       * object so that the underlying resource gets deallocated when
       * the last view into the data is released, not the first.
       */ __collector: this.data.__collector
                });
            }
        },
        {
            /**
   * This method is in the standard, but not actually implemented by
   * any browsers at this point. It's important for how Blobs work in
   * React Native, however, since we cannot de-allocate resources automatically,
   * so consumers need to explicitly de-allocate them.
   *
   * Note that the semantics around Blobs created via `blob.slice()`
   * and `new Blob([blob])` are different. `blob.slice()` creates a
   * new *view* onto the same binary data, so calling `close()` on any
   * of those views is enough to deallocate the data, whereas
   * `new Blob([blob, ...])` actually copies the data in memory.
   */ key: "close",
            value: function close() {
                var BlobManager = __webpack_require__(/*! ./BlobManager */ "./node_modules/react-native/Libraries/Blob/BlobManager.js");
                BlobManager.release(this.data.blobId);
                this.data = null;
            }
        },
        {
            key: "size",
            get: /**
   * Size of the data contained in the Blob object, in bytes.
   */ // $FlowFixMe[unsafe-getters-setters]
            function() {
                return this.data.size;
            }
        },
        {
            key: "type",
            get: /*
   * String indicating the MIME type of the data contained in the Blob.
   * If the type is unknown, this string is empty.
   */ // $FlowFixMe[unsafe-getters-setters]
            function() {
                return this.data.type || '';
            }
        }
    ]);
    return Blob;
}();
module.exports = Blob;


}),
"./node_modules/react-native/Libraries/Blob/BlobManager.js": 
/*!*****************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Blob/BlobManager.js ***!
  \*****************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _NativeBlobModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeBlobModule */ "./node_modules/react-native/Libraries/Blob/NativeBlobModule.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var Blob = __webpack_require__(/*! ./Blob */ "./node_modules/react-native/Libraries/Blob/Blob.js");
var BlobRegistry = __webpack_require__(/*! ./BlobRegistry */ "./node_modules/react-native/Libraries/Blob/BlobRegistry.js");
/*eslint-disable no-bitwise */ /*eslint-disable eqeqeq */ /**
 * Based on the rfc4122-compliant solution posted at
 * http://stackoverflow.com/questions/105034
 */ function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c)=>{
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
    });
}
// **Temporary workaround**
// TODO(#24654): Use turbomodules for the Blob module.
// Blob collector is a jsi::HostObject that is used by native to know
// when the a Blob instance is deallocated. This allows to free the
// underlying native resources. This is a hack to workaround the fact
// that the current bridge infra doesn't allow to track js objects
// deallocation. Ideally the whole Blob object should be a jsi::HostObject.
function createBlobCollector(blobId) {
    if (__webpack_require__.g.__blobCollectorProvider == null) {
        return null;
    } else {
        return __webpack_require__.g.__blobCollectorProvider(blobId);
    }
}
/**
 * Module to manage blobs. Wrapper around the native blob module.
 */ var BlobManager = /*#__PURE__*/ function() {
    "use strict";
    function BlobManager() {
        _class_call_check._(this, BlobManager);
    }
    _create_class._(BlobManager, null, [
        {
            key: "createFromParts",
            value: /**
   * Create blob from existing array of blobs.
   */ function createFromParts(parts, options) {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                var blobId = uuidv4();
                var items = parts.map((part)=>{
                    if (part instanceof ArrayBuffer || ArrayBuffer.isView(part)) {
                        throw new Error("Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported");
                    }
                    if (part instanceof Blob) {
                        return {
                            data: part.data,
                            type: 'blob'
                        };
                    } else {
                        return {
                            data: String(part),
                            type: 'string'
                        };
                    }
                });
                var size = items.reduce((acc, curr)=>{
                    if (curr.type === 'string') {
                        return acc + __webpack_require__.g.unescape(encodeURI(curr.data)).length;
                    } else {
                        return acc + curr.data.size;
                    }
                }, 0);
                _NativeBlobModule.default.createFromParts(items, blobId);
                return BlobManager.createFromOptions({
                    blobId,
                    offset: 0,
                    size,
                    type: options ? options.type : '',
                    lastModified: options ? options.lastModified : Date.now()
                });
            }
        },
        {
            key: "createFromOptions",
            value: /**
   * Create blob instance from blob data from native.
   * Used internally by modules like XHR, WebSocket, etc.
   */ function createFromOptions(options) {
                BlobRegistry.register(options.blobId);
                // $FlowFixMe[prop-missing]
                return Object.assign(Object.create(Blob.prototype), {
                    data: // Reuse the collector instance when creating from an existing blob.
                    // This will make sure that the underlying resource is only deallocated
                    // when all blobs that refer to it are deallocated.
                    options.__collector == null ? _object_spread_props._(_object_spread._({}, options), {
                        __collector: createBlobCollector(options.blobId)
                    }) : options
                });
            }
        },
        {
            key: "release",
            value: /**
   * Deallocate resources for a blob.
   */ function release(blobId) {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                BlobRegistry.unregister(blobId);
                if (BlobRegistry.has(blobId)) {
                    return;
                }
                _NativeBlobModule.default.release(blobId);
            }
        },
        {
            key: "addNetworkingHandler",
            value: /**
   * Inject the blob content handler in the networking module to support blob
   * requests and responses.
   */ function addNetworkingHandler() {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                _NativeBlobModule.default.addNetworkingHandler();
            }
        },
        {
            key: "addWebSocketHandler",
            value: /**
   * Indicate the websocket should return a blob for incoming binary
   * messages.
   */ function addWebSocketHandler(socketId) {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                _NativeBlobModule.default.addWebSocketHandler(socketId);
            }
        },
        {
            key: "removeWebSocketHandler",
            value: /**
   * Indicate the websocket should no longer return a blob for incoming
   * binary messages.
   */ function removeWebSocketHandler(socketId) {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                _NativeBlobModule.default.removeWebSocketHandler(socketId);
            }
        },
        {
            key: "sendOverSocket",
            value: /**
   * Send a blob message to a websocket.
   */ function sendOverSocket(blob, socketId) {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                _NativeBlobModule.default.sendOverSocket(blob.data, socketId);
            }
        }
    ]);
    return BlobManager;
}();
/**
   * If the native blob module is available.
   */ BlobManager.isAvailable = !!_NativeBlobModule.default;
module.exports = BlobManager;


}),
"./node_modules/react-native/Libraries/Blob/BlobRegistry.js": 
/*!******************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Blob/BlobRegistry.js ***!
  \******************************************************************/
(function (module) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ var registry = new Map();
var register = (id)=>{
    var used = registry.get(id);
    if (used != null) {
        registry.set(id, used + 1);
    } else {
        registry.set(id, 1);
    }
};
var unregister = (id)=>{
    var used = registry.get(id);
    if (used != null) {
        if (used <= 1) {
            registry.delete(id);
        } else {
            registry.set(id, used - 1);
        }
    }
};
var has = (id)=>{
    return registry.get(id) || false;
};
module.exports = {
    register,
    unregister,
    has
};


}),
"./node_modules/react-native/Libraries/Components/Keyboard/Keyboard.js": 
/*!*****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Keyboard/Keyboard.js ***!
  \*****************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../EventEmitter/NativeEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js"));
var _LayoutAnimation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../LayoutAnimation/LayoutAnimation */ "./node_modules/react-native/Libraries/LayoutAnimation/LayoutAnimation.js"));
var _dismissKeyboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/dismissKeyboard */ "./node_modules/react-native/Libraries/Utilities/dismissKeyboard.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _NativeKeyboardObserver = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeKeyboardObserver */ "./node_modules/react-native/Libraries/Components/Keyboard/NativeKeyboardObserver.js"));
/**
 * `Keyboard` module to control keyboard events.
 *
 * ### Usage
 *
 * The Keyboard module allows you to listen for native events and react to them, as
 * well as make changes to the keyboard, like dismissing it.
 *
 *```
 * import React, { Component } from 'react';
 * import { Keyboard, TextInput } from 'react-native';
 *
 * class Example extends Component {
 *   componentWillMount () {
 *     this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this._keyboardDidShow);
 *     this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this._keyboardDidHide);
 *   }
 *
 *   componentWillUnmount () {
 *     this.keyboardDidShowListener.remove();
 *     this.keyboardDidHideListener.remove();
 *   }
 *
 *   _keyboardDidShow () {
 *     alert('Keyboard Shown');
 *   }
 *
 *   _keyboardDidHide () {
 *     alert('Keyboard Hidden');
 *   }
 *
 *   render() {
 *     return (
 *       <TextInput
 *         onSubmitEditing={Keyboard.dismiss}
 *       />
 *     );
 *   }
 * }
 *```
 */ var Keyboard = /*#__PURE__*/ function() {
    "use strict";
    function Keyboard() {
        _class_call_check._(this, Keyboard);
        this._emitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
        // If you want to use the native module on other platforms, please remove this condition and test its behavior
        _Platform.default.OS !== 'ios' ? null : _NativeKeyboardObserver.default);
        this.addListener('keyboardDidShow', (ev)=>{
            this._currentlyShowing = ev;
        });
        this.addListener('keyboardDidHide', (_ev)=>{
            this._currentlyShowing = null;
        });
    }
    _create_class._(Keyboard, [
        {
            /**
   * The `addListener` function connects a JavaScript function to an identified native
   * keyboard notification event.
   *
   * This function then returns the reference to the listener.
   *
   * @param {string} eventName The `nativeEvent` is the string that identifies the event you're listening for.  This
   *can be any of the following:
   *
   * - `keyboardWillShow`
   * - `keyboardDidShow`
   * - `keyboardWillHide`
   * - `keyboardDidHide`
   * - `keyboardWillChangeFrame`
   * - `keyboardDidChangeFrame`
   *
   * Android versions prior to API 30 rely on observing layout changes when
   * `android:windowSoftInputMode` is set to `adjustResize` or `adjustPan`.
   *
   * `keyboardWillShow` as well as `keyboardWillHide` are not available on Android since there is
   * no native corresponding event.
   *
   * @param {function} callback function to be called when the event fires.
   */ key: "addListener",
            value: function addListener(eventType, listener, context) {
                return this._emitter.addListener(eventType, listener);
            }
        },
        {
            /**
   * Removes all listeners for a specific event type.
   *
   * @param {string} eventType The native event string listeners are watching which will be removed.
   */ key: "removeAllListeners",
            value: function removeAllListeners(eventType) {
                this._emitter.removeAllListeners(eventType);
            }
        },
        {
            /**
   * Dismisses the active keyboard and removes focus.
   */ key: "dismiss",
            value: function dismiss() {
                (0, _dismissKeyboard.default)();
            }
        },
        {
            /**
   * Whether the keyboard is last known to be visible.
   */ key: "isVisible",
            value: function isVisible() {
                return !!this._currentlyShowing;
            }
        },
        {
            /**
   * Return the metrics of the soft-keyboard if visible.
   */ key: "metrics",
            value: function metrics() {
                var _this__currentlyShowing;
                return (_this__currentlyShowing = this._currentlyShowing) === null || _this__currentlyShowing === void 0 ? void 0 : _this__currentlyShowing.endCoordinates;
            }
        },
        {
            /**
   * Useful for syncing TextInput (or other keyboard accessory view) size of
   * position changes with keyboard movements.
   */ key: "scheduleLayoutAnimation",
            value: function scheduleLayoutAnimation(event) {
                var duration = event.duration, easing = event.easing;
                if (duration != null && duration !== 0) {
                    _LayoutAnimation.default.configureNext({
                        duration: duration,
                        update: {
                            duration: duration,
                            type: easing != null && _LayoutAnimation.default.Types[easing] || 'keyboard'
                        }
                    });
                }
            }
        }
    ]);
    return Keyboard;
}();
module.exports = new Keyboard();


}),
"./node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js": 
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js ***!
  \*****************************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _AndroidSwipeRefreshLayoutNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./AndroidSwipeRefreshLayoutNativeComponent */ "./node_modules/react-native/Libraries/Components/RefreshControl/AndroidSwipeRefreshLayoutNativeComponent.js"));
var _PullToRefreshViewNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./PullToRefreshViewNativeComponent */ "./node_modules/react-native/Libraries/Components/RefreshControl/PullToRefreshViewNativeComponent.js"));
var Platform = __webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js");
var React = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
/**
 * This component is used inside a ScrollView or ListView to add pull to refresh
 * functionality. When the ScrollView is at `scrollY: 0`, swiping down
 * triggers an `onRefresh` event.
 *
 * ### Usage example
 *
 * ``` js
 * class RefreshableList extends Component {
 *   constructor(props) {
 *     super(props);
 *     this.state = {
 *       refreshing: false,
 *     };
 *   }
 *
 *   _onRefresh() {
 *     this.setState({refreshing: true});
 *     fetchData().then(() => {
 *       this.setState({refreshing: false});
 *     });
 *   }
 *
 *   render() {
 *     return (
 *       <ListView
 *         refreshControl={
 *           <RefreshControl
 *             refreshing={this.state.refreshing}
 *             onRefresh={this._onRefresh.bind(this)}
 *           />
 *         }
 *         ...
 *       >
 *       ...
 *       </ListView>
 *     );
 *   }
 *   ...
 * }
 * ```
 *
 * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true
 * in the `onRefresh` function otherwise the refresh indicator will stop immediately.
 */ var RefreshControl = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(RefreshControl, _React_Component);
    function RefreshControl() {
        _class_call_check._(this, RefreshControl);
        var _this;
        _this = _call_super._(this, RefreshControl, arguments), _this._lastNativeRefreshing = false, _this._onRefresh = ()=>{
            _this._lastNativeRefreshing = true;
            // $FlowFixMe[unused-promise]
            _this.props.onRefresh && _this.props.onRefresh();
            // The native component will start refreshing so force an update to
            // make sure it stays in sync with the js component.
            _this.forceUpdate();
        }, _this._setNativeRef = (ref)=>{
            _this._nativeRef = ref;
        };
        return _this;
    }
    _create_class._(RefreshControl, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                this._lastNativeRefreshing = this.props.refreshing;
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                // RefreshControl is a controlled component so if the native refreshing
                // value doesn't match the current js refreshing prop update it to
                // the js value.
                if (this.props.refreshing !== prevProps.refreshing) {
                    this._lastNativeRefreshing = this.props.refreshing;
                } else if (this.props.refreshing !== this._lastNativeRefreshing && this._nativeRef) {
                    if (Platform.OS === 'android') {
                        _AndroidSwipeRefreshLayoutNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);
                    } else {
                        _PullToRefreshViewNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);
                    }
                    this._lastNativeRefreshing = this.props.refreshing;
                }
            }
        },
        {
            key: "render",
            value: function render() {
                if (Platform.OS === 'ios') {
                    var _this_props = this.props, enabled = _this_props.enabled, colors = _this_props.colors, progressBackgroundColor = _this_props.progressBackgroundColor, size = _this_props.size, props = _object_without_properties._(_this_props, [
                        "enabled",
                        "colors",
                        "progressBackgroundColor",
                        "size"
                    ]);
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_PullToRefreshViewNativeComponent.default, _object_spread_props._(_object_spread._({}, props), {
                        ref: this._setNativeRef,
                        onRefresh: this._onRefresh
                    }));
                } else {
                    var _this_props1 = this.props, tintColor = _this_props1.tintColor, titleColor = _this_props1.titleColor, title = _this_props1.title, props1 = _object_without_properties._(_this_props1, [
                        "tintColor",
                        "titleColor",
                        "title"
                    ]);
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_AndroidSwipeRefreshLayoutNativeComponent.default, _object_spread_props._(_object_spread._({}, props1), {
                        ref: this._setNativeRef,
                        onRefresh: this._onRefresh
                    }));
                }
            }
        }
    ]);
    return RefreshControl;
}(React.Component);
module.exports = RefreshControl;


}),
"./node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js": 
/*!*************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js ***!
  \*************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
/**
 * Renders nested content and automatically applies paddings reflect the portion
 * of the view that is not covered by navigation bars, tab bars, toolbars, and
 * other ancestor views.
 *
 * Moreover, and most importantly, Safe Area's paddings reflect physical
 * limitation of the screen, such as rounded corners or camera notches (aka
 * sensor housing area on iPhone X).
 */ var exported = _Platform.default.select({
    ios: (__webpack_require__(/*! ./RCTSafeAreaViewNativeComponent */ "./node_modules/react-native/Libraries/Components/SafeAreaView/RCTSafeAreaViewNativeComponent.js")/* ["default"] */["default"]),
    default: _View.default
});
var _default = exported;


}),
"./node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js": 
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js ***!
  \*********************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _HScrollViewNativeComponents = __webpack_require__(/*! ../../../src/private/components/HScrollViewNativeComponents */ "./node_modules/react-native/src/private/components/HScrollViewNativeComponents.js");
var _VScrollViewNativeComponents = __webpack_require__(/*! ../../../src/private/components/VScrollViewNativeComponents */ "./node_modules/react-native/src/private/components/VScrollViewNativeComponents.js");
var _AnimatedImplementation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Animated/AnimatedImplementation */ "./node_modules/react-native/Libraries/Animated/AnimatedImplementation.js"));
var _FrameRateLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Interaction/FrameRateLogger */ "./node_modules/react-native/Libraries/Interaction/FrameRateLogger.js"));
var _RendererProxy = __webpack_require__(/*! ../../ReactNative/RendererProxy */ "./node_modules/react-native/Libraries/ReactNative/RendererProxy.js");
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../ReactNative/UIManager */ "./node_modules/react-native/Libraries/ReactNative/UIManager.js"));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/flattenStyle */ "./node_modules/react-native/Libraries/StyleSheet/flattenStyle.js"));
var _splitLayoutProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/splitLayoutProps */ "./node_modules/react-native/Libraries/StyleSheet/splitLayoutProps.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Dimensions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Dimensions */ "./node_modules/react-native/Libraries/Utilities/Dimensions.js"));
var _dismissKeyboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/dismissKeyboard */ "./node_modules/react-native/Libraries/Utilities/dismissKeyboard.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _Keyboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Keyboard/Keyboard */ "./node_modules/react-native/Libraries/Components/Keyboard/Keyboard.js"));
var _TextInputState = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../TextInput/TextInputState */ "./node_modules/react-native/Libraries/Components/TextInput/TextInputState.js"));
var _processDecelerationRate = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./processDecelerationRate */ "./node_modules/react-native/Libraries/Components/ScrollView/processDecelerationRate.js"));
var _ScrollViewCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./ScrollViewCommands */ "./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewCommands.js"));
var _ScrollViewContext = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./ScrollViewContext */ "./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewContext.js"));
var _ScrollViewStickyHeader = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./ScrollViewStickyHeader */ "./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var _memoizeone = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! memoize-one */ "./node_modules/memoize-one/dist/memoize-one.cjs.js"));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! nullthrows */ "./node_modules/nullthrows/nullthrows.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
/*
 * iOS scroll event timing nuances:
 * ===============================
 *
 *
 * Scrolling without bouncing, if you touch down:
 * -------------------------------
 *
 * 1. `onMomentumScrollBegin` (when animation begins after letting up)
 *    ... physical touch starts ...
 * 2. `onTouchStartCapture`   (when you press down to stop the scroll)
 * 3. `onTouchStart`          (same, but bubble phase)
 * 4. `onResponderRelease`    (when lifting up - you could pause forever before * lifting)
 * 5. `onMomentumScrollEnd`
 *
 *
 * Scrolling with bouncing, if you touch down:
 * -------------------------------
 *
 * 1. `onMomentumScrollBegin` (when animation begins after letting up)
 *    ... bounce begins ...
 *    ... some time elapses ...
 *    ... physical touch during bounce ...
 * 2. `onMomentumScrollEnd`   (Makes no sense why this occurs first during bounce)
 * 3. `onTouchStartCapture`   (immediately after `onMomentumScrollEnd`)
 * 4. `onTouchStart`          (same, but bubble phase)
 * 5. `onTouchEnd`            (You could hold the touch start for a long time)
 * 6. `onMomentumScrollBegin` (When releasing the view starts bouncing back)
 *
 * So when we receive an `onTouchStart`, how can we tell if we are touching
 * *during* an animation (which then causes the animation to stop)? The only way
 * to tell is if the `touchStart` occurred immediately after the
 * `onMomentumScrollEnd`.
 *
 * This is abstracted out for you, so you can just call this.scrollResponderIsAnimating() if
 * necessary
 *
 * `ScrollView` also includes logic for blurring a currently focused input
 * if one is focused while scrolling. This is a natural place
 * to put this logic since it can support not dismissing the keyboard while
 * scrolling, unless a recognized "tap"-like gesture has occurred.
 *
 * The public lifecycle API includes events for keyboard interaction, responder
 * interaction, and scrolling (among others). The keyboard callbacks
 * `onKeyboardWill/Did/*` are *global* events, but are invoked on scroll
 * responder's props so that you can guarantee that the scroll responder's
 * internal state has been updated accordingly (and deterministically) by
 * the time the props callbacks are invoke. Otherwise, you would always wonder
 * if the scroll responder is currently in a state where it recognizes new
 * keyboard positions etc. If coordinating scrolling with keyboard movement,
 * *always* use these hooks instead of listening to your own global keyboard
 * events.
 *
 * Public keyboard lifecycle API: (props callbacks)
 *
 * Standard Keyboard Appearance Sequence:
 *
 *   this.props.onKeyboardWillShow
 *   this.props.onKeyboardDidShow
 *
 * `onScrollResponderKeyboardDismissed` will be invoked if an appropriate
 * tap inside the scroll responder's scrollable region was responsible
 * for the dismissal of the keyboard. There are other reasons why the
 * keyboard could be dismissed.
 *
 *   this.props.onScrollResponderKeyboardDismissed
 *
 * Standard Keyboard Hide Sequence:
 *
 *   this.props.onKeyboardWillHide
 *   this.props.onKeyboardDidHide
 */ // Public methods for ScrollView
var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;
/**
 * Component that wraps platform ScrollView while providing
 * integration with touch locking "responder" system.
 *
 * Keep in mind that ScrollViews must have a bounded height in order to work,
 * since they contain unbounded-height children into a bounded container (via
 * a scroll interaction). In order to bound the height of a ScrollView, either
 * set the height of the view directly (discouraged) or make sure all parent
 * views have bounded height. Forgetting to transfer `{flex: 1}` down the
 * view stack can lead to errors here, which the element inspector makes
 * easy to debug.
 *
 * Doesn't yet support other contained responders from blocking this scroll
 * view from becoming the responder.
 *
 *
 * `<ScrollView>` vs [`<FlatList>`](https://reactnative.dev/docs/flatlist) - which one to use?
 *
 * `ScrollView` simply renders all its react child components at once. That
 * makes it very easy to understand and use.
 *
 * On the other hand, this has a performance downside. Imagine you have a very
 * long list of items you want to display, maybe several screens worth of
 * content. Creating JS components and native views for everything all at once,
 * much of which may not even be shown, will contribute to slow rendering and
 * increased memory usage.
 *
 * This is where `FlatList` comes into play. `FlatList` renders items lazily,
 * just when they are about to appear, and removes items that scroll way off
 * screen to save memory and processing time.
 *
 * `FlatList` is also handy if you want to render separators between your items,
 * multiple columns, infinite scroll loading, or any number of other features it
 * supports out of the box.
 */ var ScrollView = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(ScrollView, _React_Component);
    function ScrollView(props) {
        _class_call_check._(this, ScrollView);
        var _this;
        var _this_props_contentOffset, _this_props_contentInset;
        _this = _call_super._(this, ScrollView, [
            props
        ]), _this._scrollAnimatedValueAttachment = null, _this._stickyHeaderRefs = new Map(), _this._headerLayoutYs = new Map(), _this._keyboardMetrics = null, _this._additionalScrollOffset = 0, _this._isTouching = false, _this._lastMomentumScrollBeginTime = 0, _this._lastMomentumScrollEndTime = 0, // Reset to false every time becomes responder. This is used to:
        // - Determine if the scroll view has been scrolled and therefore should
        // refuse to give up its responder lock.
        // - Determine if releasing should dismiss the keyboard when we are in
        // tap-to-dismiss mode (this.props.keyboardShouldPersistTaps !== 'always').
        _this._observedScrollSinceBecomingResponder = false, _this._becameResponderWhileAnimating = false, _this._preventNegativeScrollOffset = null, _this._animated = null, _this._subscriptionKeyboardWillShow = null, _this._subscriptionKeyboardWillHide = null, _this._subscriptionKeyboardDidShow = null, _this._subscriptionKeyboardDidHide = null, _this.state = {
            layoutHeight: null
        }, /**
   * Returns a reference to the underlying scroll responder, which supports
   * operations like `scrollTo`. All ScrollView-like components should
   * implement this method so that they can be composed while providing access
   * to the underlying scroll responder's methods.
   */ _this.getScrollResponder = ()=>{
            // $FlowFixMe[unclear-type]
            return _this;
        }, _this.getScrollableNode = ()=>{
            return (0, _RendererProxy.findNodeHandle)(_this.getNativeScrollRef());
        }, _this.getInnerViewNode = ()=>{
            return (0, _RendererProxy.findNodeHandle)(_this._innerView.nativeInstance);
        }, _this.getInnerViewRef = ()=>{
            return _this._innerView.nativeInstance;
        }, _this.getNativeScrollRef = ()=>{
            return _this._scrollView.nativeInstance;
        }, /**
   * Scrolls to a given x, y offset, either immediately or with a smooth animation.
   *
   * Example:
   *
   * `scrollTo({x: 0, y: 0, animated: true})`
   *
   * Note: The weird function signature is due to the fact that, for historical reasons,
   * the function also accepts separate arguments as an alternative to the options object.
   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.
   */ _this.scrollTo = (options, deprecatedX, deprecatedAnimated)=>{
            var x, y, animated;
            if (typeof options === 'number') {
                console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');
                y = options;
                x = deprecatedX;
                animated = deprecatedAnimated;
            } else if (options) {
                y = options.y;
                x = options.x;
                animated = options.animated;
            }
            var component = _this.getNativeScrollRef();
            if (component == null) {
                return;
            }
            _ScrollViewCommands.default.scrollTo(component, x || 0, y || 0, animated !== false);
        }, /**
   * If this is a vertical ScrollView scrolls to the bottom.
   * If this is a horizontal ScrollView scrolls to the right.
   *
   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,
   * `scrollToEnd({animated: false})` for immediate scrolling.
   * If no options are passed, `animated` defaults to true.
   */ _this.scrollToEnd = (options)=>{
            // Default to true
            var animated = (options && options.animated) !== false;
            var component = _this.getNativeScrollRef();
            if (component == null) {
                return;
            }
            _ScrollViewCommands.default.scrollToEnd(component, animated);
        }, /**
   * Displays the scroll indicators momentarily.
   *
   * @platform ios
   */ _this.flashScrollIndicators = ()=>{
            var component = _this.getNativeScrollRef();
            if (component == null) {
                return;
            }
            _ScrollViewCommands.default.flashScrollIndicators(component);
        }, /**
   * This method should be used as the callback to onFocus in a TextInputs'
   * parent view. Note that any module using this mixin needs to return
   * the parent view's ref in getScrollViewRef() in order to use this method.
   * @param {number} nodeHandle The TextInput node handle
   * @param {number} additionalOffset The scroll view's bottom "contentInset".
   *        Default is 0.
   * @param {bool} preventNegativeScrolling Whether to allow pulling the content
   *        down to make it meet the keyboard's top. Default is false.
   */ _this.scrollResponderScrollNativeHandleToKeyboard = (nodeHandle, additionalOffset, preventNegativeScrollOffset)=>{
            _this._additionalScrollOffset = additionalOffset || 0;
            _this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;
            if (_this._innerView.nativeInstance == null) {
                return;
            }
            if (typeof nodeHandle === 'number') {
                _UIManager.default.measureLayout(nodeHandle, (0, _nullthrows.default)((0, _RendererProxy.findNodeHandle)(_this)), // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                _this._textInputFocusError, _this._inputMeasureAndScrollToKeyboard);
            } else {
                nodeHandle.measureLayout(_this._innerView.nativeInstance, _this._inputMeasureAndScrollToKeyboard, // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                _this._textInputFocusError);
            }
        }, /**
   * A helper function to zoom to a specific rect in the scrollview. The argument has the shape
   * {x: number; y: number; width: number; height: number; animated: boolean = true}
   *
   * @platform ios
   */ _this.scrollResponderZoomTo = (rect, animated)=>{
            (0, _invariant.default)(_Platform.default.OS === 'ios', 'zoomToRect is not implemented');
            if ('animated' in rect) {
                _this._animated = rect.animated;
                delete rect.animated;
            } else if (typeof animated !== 'undefined') {
                console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
            }
            var component = _this.getNativeScrollRef();
            if (component == null) {
                return;
            }
            _ScrollViewCommands.default.zoomToRect(component, rect, animated !== false);
        }, /**
   * The calculations performed here assume the scroll view takes up the entire
   * screen - even if has some content inset. We then measure the offsets of the
   * keyboard, and compensate both for the scroll view's "contentInset".
   *
   * @param {number} left Position of input w.r.t. table view.
   * @param {number} top Position of input w.r.t. table view.
   * @param {number} width Width of the text input.
   * @param {number} height Height of the text input.
   */ _this._inputMeasureAndScrollToKeyboard = (left, top, width, height)=>{
            var keyboardScreenY = _Dimensions.default.get('window').height;
            var scrollTextInputIntoVisibleRect = ()=>{
                if (_this._keyboardMetrics != null) {
                    keyboardScreenY = _this._keyboardMetrics.screenY;
                }
                var scrollOffsetY = top - keyboardScreenY + height + _this._additionalScrollOffset;
                // By default, this can scroll with negative offset, pulling the content
                // down so that the target component's bottom meets the keyboard's top.
                // If requested otherwise, cap the offset at 0 minimum to avoid content
                // shifting down.
                if (_this._preventNegativeScrollOffset === true) {
                    scrollOffsetY = Math.max(0, scrollOffsetY);
                }
                _this.scrollTo({
                    x: 0,
                    y: scrollOffsetY,
                    animated: true
                });
                _this._additionalScrollOffset = 0;
                _this._preventNegativeScrollOffset = false;
            };
            if (_this._keyboardMetrics == null) {
                // `_keyboardMetrics` is set inside `scrollResponderKeyboardWillShow` which
                // is not guaranteed to be called before `_inputMeasureAndScrollToKeyboard` but native has already scheduled it.
                // In case it was not called before `_inputMeasureAndScrollToKeyboard`, we postpone scrolling to
                // text input.
                setTimeout(()=>{
                    scrollTextInputIntoVisibleRect();
                }, 0);
            } else {
                scrollTextInputIntoVisibleRect();
            }
        }, _this._handleScroll = (e)=>{
            _this._observedScrollSinceBecomingResponder = true;
            _this.props.onScroll && _this.props.onScroll(e);
        }, _this._handleLayout = (e)=>{
            if (_this.props.invertStickyHeaders === true) {
                _this.setState({
                    layoutHeight: e.nativeEvent.layout.height
                });
            }
            if (_this.props.onLayout) {
                _this.props.onLayout(e);
            }
        }, _this._handleContentOnLayout = (e)=>{
            var _e_nativeEvent_layout = e.nativeEvent.layout, width = _e_nativeEvent_layout.width, height = _e_nativeEvent_layout.height;
            _this.props.onContentSizeChange && _this.props.onContentSizeChange(width, height);
        }, _this._innerView = createRefForwarder((instance)=>instance), _this._scrollView = createRefForwarder((nativeInstance)=>{
            // This is a hack. Ideally we would forwardRef  to the underlying
            // host component. However, since ScrollView has it's own methods that can be
            // called as well, if we used the standard forwardRef then these
            // methods wouldn't be accessible and thus be a breaking change.
            //
            // Therefore we edit ref to include ScrollView's public methods so that
            // they are callable from the ref.
            // $FlowFixMe[prop-missing] - Known issue with appending custom methods.
            var publicInstance = Object.assign(nativeInstance, {
                getScrollResponder: _this.getScrollResponder,
                getScrollableNode: _this.getScrollableNode,
                getInnerViewNode: _this.getInnerViewNode,
                getInnerViewRef: _this.getInnerViewRef,
                getNativeScrollRef: _this.getNativeScrollRef,
                scrollTo: _this.scrollTo,
                scrollToEnd: _this.scrollToEnd,
                flashScrollIndicators: _this.flashScrollIndicators,
                scrollResponderZoomTo: _this.scrollResponderZoomTo,
                scrollResponderScrollNativeHandleToKeyboard: _this.scrollResponderScrollNativeHandleToKeyboard
            });
            return publicInstance;
        }), /**
   * Warning, this may be called several times for a single keyboard opening.
   * It's best to store the information in this method and then take any action
   * at a later point (either in `keyboardDidShow` or other).
   *
   * Here's the order that events occur in:
   * - focus
   * - willShow {startCoordinates, endCoordinates} several times
   * - didShow several times
   * - blur
   * - willHide {startCoordinates, endCoordinates} several times
   * - didHide several times
   *
   * The `ScrollResponder` module callbacks for each of these events.
   * Even though any user could have easily listened to keyboard events
   * themselves, using these `props` callbacks ensures that ordering of events
   * is consistent - and not dependent on the order that the keyboard events are
   * subscribed to. This matters when telling the scroll view to scroll to where
   * the keyboard is headed - the scroll responder better have been notified of
   * the keyboard destination before being instructed to scroll to where the
   * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything
   * will work.
   *
   * WARNING: These callbacks will fire even if a keyboard is displayed in a
   * different navigation pane. Filter out the events to determine if they are
   * relevant to you. (For example, only if you receive these callbacks after
   * you had explicitly focused a node etc).
   */ _this.scrollResponderKeyboardWillShow = (e)=>{
            _this._keyboardMetrics = e.endCoordinates;
            _this.props.onKeyboardWillShow && _this.props.onKeyboardWillShow(e);
        }, _this.scrollResponderKeyboardWillHide = (e)=>{
            _this._keyboardMetrics = null;
            _this.props.onKeyboardWillHide && _this.props.onKeyboardWillHide(e);
        }, _this.scrollResponderKeyboardDidShow = (e)=>{
            _this._keyboardMetrics = e.endCoordinates;
            _this.props.onKeyboardDidShow && _this.props.onKeyboardDidShow(e);
        }, _this.scrollResponderKeyboardDidHide = (e)=>{
            _this._keyboardMetrics = null;
            _this.props.onKeyboardDidHide && _this.props.onKeyboardDidHide(e);
        }, /**
   * Invoke this from an `onMomentumScrollBegin` event.
   */ _this._handleMomentumScrollBegin = (e)=>{
            _this._lastMomentumScrollBeginTime = __webpack_require__.g.performance.now();
            _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);
        }, /**
   * Invoke this from an `onMomentumScrollEnd` event.
   */ _this._handleMomentumScrollEnd = (e)=>{
            _FrameRateLogger.default.endScroll();
            _this._lastMomentumScrollEndTime = __webpack_require__.g.performance.now();
            _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
        }, /**
   * Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll
   * animation, and there's not an easy way to distinguish a drag vs. stopping
   * momentum.
   *
   * Invoke this from an `onScrollBeginDrag` event.
   */ _this._handleScrollBeginDrag = (e)=>{
            _FrameRateLogger.default.beginScroll(); // TODO: track all scrolls after implementing onScrollEndAnimation
            if (_Platform.default.OS === 'android' && _this.props.keyboardDismissMode === 'on-drag') {
                (0, _dismissKeyboard.default)();
            }
            _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
        }, /**
   * Invoke this from an `onScrollEndDrag` event.
   */ _this._handleScrollEndDrag = (e)=>{
            var velocity = e.nativeEvent.velocity;
            // - If we are animating, then this is a "drag" that is stopping the scrollview and momentum end
            //   will fire.
            // - If velocity is non-zero, then the interaction will stop when momentum scroll ends or
            //   another drag starts and ends.
            // - If we don't get velocity, better to stop the interaction twice than not stop it.
            if (!_this._isAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
                _FrameRateLogger.default.endScroll();
            }
            _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
        }, /**
   * A helper function for this class that lets us quickly determine if the
   * view is currently animating. This is particularly useful to know when
   * a touch has just started or ended.
   */ _this._isAnimating = ()=>{
            var now = __webpack_require__.g.performance.now();
            var timeSinceLastMomentumScrollEnd = now - _this._lastMomentumScrollEndTime;
            var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || _this._lastMomentumScrollEndTime < _this._lastMomentumScrollBeginTime;
            return isAnimating;
        }, /**
   * Invoke this from an `onResponderGrant` event.
   */ _this._handleResponderGrant = (e)=>{
            _this._observedScrollSinceBecomingResponder = false;
            _this.props.onResponderGrant && _this.props.onResponderGrant(e);
            _this._becameResponderWhileAnimating = _this._isAnimating();
        }, /**
   * Invoke this from an `onResponderReject` event.
   *
   * Some other element is not yielding its role as responder. Normally, we'd
   * just disable the `UIScrollView`, but a touch has already began on it, the
   * `UIScrollView` will not accept being disabled after that. The easiest
   * solution for now is to accept the limitation of disallowing this
   * altogether. To improve this, find a way to disable the `UIScrollView` after
   * a touch has already started.
   */ _this._handleResponderReject = ()=>{}, /**
   * Invoke this from an `onResponderRelease` event.
   */ _this._handleResponderRelease = (e)=>{
            _this._isTouching = e.nativeEvent.touches.length !== 0;
            _this.props.onResponderRelease && _this.props.onResponderRelease(e);
            if (typeof e.target === 'number') {
                if (true) {
                    console.error('Did not expect event target to be a number. Should have been a native component');
                }
                return;
            }
            // By default scroll views will unfocus a textField
            // if another touch occurs outside of it
            var currentlyFocusedTextInput = _TextInputState.default.currentlyFocusedInput();
            if (currentlyFocusedTextInput != null && _this.props.keyboardShouldPersistTaps !== true && _this.props.keyboardShouldPersistTaps !== 'always' && _this._keyboardIsDismissible() && e.target !== currentlyFocusedTextInput && !_this._observedScrollSinceBecomingResponder && !_this._becameResponderWhileAnimating) {
                _TextInputState.default.blurTextInput(currentlyFocusedTextInput);
            }
        }, /**
   * We will allow the scroll view to give up its lock iff it acquired the lock
   * during an animation. This is a very useful default that happens to satisfy
   * many common user experiences.
   *
   * - Stop a scroll on the left edge, then turn that into an outer view's
   *   backswipe.
   * - Stop a scroll mid-bounce at the top, continue pulling to have the outer
   *   view dismiss.
   * - However, without catching the scroll view mid-bounce (while it is
   *   motionless), if you drag far enough for the scroll view to become
   *   responder (and therefore drag the scroll view a bit), any backswipe
   *   navigation of a swipe gesture higher in the view hierarchy, should be
   *   rejected.
   */ _this._handleResponderTerminationRequest = ()=>{
            return !_this._observedScrollSinceBecomingResponder;
        }, /**
   * Invoke this from an `onScroll` event.
   */ _this._handleScrollShouldSetResponder = ()=>{
            // Allow any event touch pass through if the default pan responder is disabled
            if (_this.props.disableScrollViewPanResponder === true) {
                return false;
            }
            return _this._isTouching;
        }, /**
   * Merely touch starting is not sufficient for a scroll view to become the
   * responder. Being the "responder" means that the very next touch move/end
   * event will result in an action/movement.
   *
   * Invoke this from an `onStartShouldSetResponder` event.
   *
   * `onStartShouldSetResponder` is used when the next move/end will trigger
   * some UI movement/action, but when you want to yield priority to views
   * nested inside of the view.
   *
   * There may be some cases where scroll views actually should return `true`
   * from `onStartShouldSetResponder`: Any time we are detecting a standard tap
   * that gives priority to nested views.
   *
   * - If a single tap on the scroll view triggers an action such as
   *   recentering a map style view yet wants to give priority to interaction
   *   views inside (such as dropped pins or labels), then we would return true
   *   from this method when there is a single touch.
   *
   * - Similar to the previous case, if a two finger "tap" should trigger a
   *   zoom, we would check the `touches` count, and if `>= 2`, we would return
   *   true.
   *
   */ _this._handleStartShouldSetResponder = (e)=>{
            // Allow any event touch pass through if the default pan responder is disabled
            if (_this.props.disableScrollViewPanResponder === true) {
                return false;
            }
            var currentlyFocusedInput = _TextInputState.default.currentlyFocusedInput();
            if (_this.props.keyboardShouldPersistTaps === 'handled' && _this._keyboardIsDismissible() && e.target !== currentlyFocusedInput) {
                return true;
            }
            return false;
        }, /**
   * There are times when the scroll view wants to become the responder
   * (meaning respond to the next immediate `touchStart/touchEnd`), in a way
   * that *doesn't* give priority to nested views (hence the capture phase):
   *
   * - Currently animating.
   * - Tapping anywhere that is not a text input, while the keyboard is
   *   up (which should dismiss the keyboard).
   *
   * Invoke this from an `onStartShouldSetResponderCapture` event.
   */ _this._handleStartShouldSetResponderCapture = (e)=>{
            // The scroll view should receive taps instead of its descendants if:
            // * it is already animating/decelerating
            if (_this._isAnimating()) {
                return true;
            }
            // Allow any event touch pass through if the default pan responder is disabled
            if (_this.props.disableScrollViewPanResponder === true) {
                return false;
            }
            // * the keyboard is up, keyboardShouldPersistTaps is 'never' (the default),
            // and a new touch starts with a non-textinput target (in which case the
            // first tap should be sent to the scroll view and dismiss the keyboard,
            // then the second tap goes to the actual interior view)
            var keyboardShouldPersistTaps = _this.props.keyboardShouldPersistTaps;
            var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
            if (typeof e.target === 'number') {
                if (true) {
                    console.error('Did not expect event target to be a number. Should have been a native component');
                }
                return false;
            }
            // Let presses through if the soft keyboard is detached from the viewport
            if (_this._softKeyboardIsDetached()) {
                return false;
            }
            if (keyboardNeverPersistTaps && _this._keyboardIsDismissible() && e.target != null && // $FlowFixMe[incompatible-call]
            !_TextInputState.default.isTextInput(e.target)) {
                return true;
            }
            return false;
        }, /**
   * Do we consider there to be a dismissible soft-keyboard open?
   */ _this._keyboardIsDismissible = ()=>{
            var currentlyFocusedInput = _TextInputState.default.currentlyFocusedInput();
            // We cannot dismiss the keyboard without an input to blur, even if a soft
            // keyboard is open (e.g. when keyboard is open due to a native component
            // not participating in TextInputState). It's also possible that the
            // currently focused input isn't a TextInput (such as by calling ref.focus
            // on a non-TextInput).
            var hasFocusedTextInput = currentlyFocusedInput != null && _TextInputState.default.isTextInput(currentlyFocusedInput);
            // Even if an input is focused, we may not have a keyboard to dismiss. E.g
            // when using a physical keyboard. Ensure we have an event for an opened
            // keyboard.
            var softKeyboardMayBeOpen = _this._keyboardMetrics != null || _this._keyboardEventsAreUnreliable();
            return hasFocusedTextInput && softKeyboardMayBeOpen;
        }, /**
   * Whether an open soft keyboard is present which does not overlap the
   * viewport. E.g. for a VR soft-keyboard which is detached from the app
   * viewport.
   */ _this._softKeyboardIsDetached = ()=>{
            return _this._keyboardMetrics != null && _this._keyboardMetrics.height === 0;
        }, _this._keyboardEventsAreUnreliable = ()=>{
            // Android versions prior to API 30 rely on observing layout changes when
            // `android:windowSoftInputMode` is set to `adjustResize` or `adjustPan`.
            return _Platform.default.OS === 'android' && _Platform.default.Version < 30;
        }, /**
   * Invoke this from an `onTouchEnd` event.
   *
   * @param {PressEvent} e Event.
   */ _this._handleTouchEnd = (e)=>{
            var nativeEvent = e.nativeEvent;
            _this._isTouching = nativeEvent.touches.length !== 0;
            var keyboardShouldPersistTaps = _this.props.keyboardShouldPersistTaps;
            var keyboardNeverPersistsTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
            // Dismiss the keyboard now if we didn't become responder in capture phase
            // to eat presses, but still want to dismiss on interaction.
            // Don't do anything if the target of the touch event is the current input.
            var currentlyFocusedTextInput = _TextInputState.default.currentlyFocusedInput();
            if (currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && _this._softKeyboardIsDetached() && _this._keyboardIsDismissible() && keyboardNeverPersistsTaps) {
                _TextInputState.default.blurTextInput(currentlyFocusedTextInput);
            }
            _this.props.onTouchEnd && _this.props.onTouchEnd(e);
        }, /**
   * Invoke this from an `onTouchCancel` event.
   *
   * @param {PressEvent} e Event.
   */ _this._handleTouchCancel = (e)=>{
            _this._isTouching = false;
            _this.props.onTouchCancel && _this.props.onTouchCancel(e);
        }, /**
   * Invoke this from an `onTouchStart` event.
   *
   * Since we know that the `SimpleEventPlugin` occurs later in the plugin
   * order, after `ResponderEventPlugin`, we can detect that we were *not*
   * permitted to be the responder (presumably because a contained view became
   * responder). The `onResponderReject` won't fire in that case - it only
   * fires when a *current* responder rejects our request.
   *
   * @param {PressEvent} e Touch Start event.
   */ _this._handleTouchStart = (e)=>{
            _this._isTouching = true;
            _this.props.onTouchStart && _this.props.onTouchStart(e);
        }, /**
   * Invoke this from an `onTouchMove` event.
   *
   * Since we know that the `SimpleEventPlugin` occurs later in the plugin
   * order, after `ResponderEventPlugin`, we can detect that we were *not*
   * permitted to be the responder (presumably because a contained view became
   * responder). The `onResponderReject` won't fire in that case - it only
   * fires when a *current* responder rejects our request.
   *
   * @param {PressEvent} e Touch Start event.
   */ _this._handleTouchMove = (e)=>{
            _this.props.onTouchMove && _this.props.onTouchMove(e);
        };
        _this._scrollAnimatedValue = new _AnimatedImplementation.default.Value(((_this_props_contentOffset = _this.props.contentOffset) === null || _this_props_contentOffset === void 0 ? void 0 : _this_props_contentOffset.y) ?? 0);
        _this._scrollAnimatedValue.setOffset(((_this_props_contentInset = _this.props.contentInset) === null || _this_props_contentInset === void 0 ? void 0 : _this_props_contentInset.top) ?? 0);
        return _this;
    }
    _create_class._(ScrollView, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                if (typeof this.props.keyboardShouldPersistTaps === 'boolean') {
                    console.warn(`'keyboardShouldPersistTaps={${this.props.keyboardShouldPersistTaps === true ? 'true' : 'false'}}' is deprecated. ` + `Use 'keyboardShouldPersistTaps="${this.props.keyboardShouldPersistTaps ? 'always' : 'never'}"' instead`);
                }
                this._keyboardMetrics = _Keyboard.default.metrics();
                this._additionalScrollOffset = 0;
                this._subscriptionKeyboardWillShow = _Keyboard.default.addListener('keyboardWillShow', this.scrollResponderKeyboardWillShow);
                this._subscriptionKeyboardWillHide = _Keyboard.default.addListener('keyboardWillHide', this.scrollResponderKeyboardWillHide);
                this._subscriptionKeyboardDidShow = _Keyboard.default.addListener('keyboardDidShow', this.scrollResponderKeyboardDidShow);
                this._subscriptionKeyboardDidHide = _Keyboard.default.addListener('keyboardDidHide', this.scrollResponderKeyboardDidHide);
                this._updateAnimatedNodeAttachment();
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                var prevContentInsetTop = prevProps.contentInset ? prevProps.contentInset.top : 0;
                var newContentInsetTop = this.props.contentInset ? this.props.contentInset.top : 0;
                if (prevContentInsetTop !== newContentInsetTop) {
                    this._scrollAnimatedValue.setOffset(newContentInsetTop || 0);
                }
                this._updateAnimatedNodeAttachment();
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                if (this._subscriptionKeyboardWillShow != null) {
                    this._subscriptionKeyboardWillShow.remove();
                }
                if (this._subscriptionKeyboardWillHide != null) {
                    this._subscriptionKeyboardWillHide.remove();
                }
                if (this._subscriptionKeyboardDidShow != null) {
                    this._subscriptionKeyboardDidShow.remove();
                }
                if (this._subscriptionKeyboardDidHide != null) {
                    this._subscriptionKeyboardDidHide.remove();
                }
                if (this._scrollAnimatedValueAttachment) {
                    this._scrollAnimatedValueAttachment.detach();
                }
            }
        },
        {
            key: "_textInputFocusError",
            value: function _textInputFocusError() {
                console.warn('Error measuring text field.');
            }
        },
        {
            key: "_getKeyForIndex",
            value: function _getKeyForIndex(index, childArray) {
                var child = childArray[index];
                return child && child.key;
            }
        },
        {
            key: "_updateAnimatedNodeAttachment",
            value: function _updateAnimatedNodeAttachment() {
                if (this._scrollAnimatedValueAttachment) {
                    this._scrollAnimatedValueAttachment.detach();
                }
                if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
                    this._scrollAnimatedValueAttachment = _AnimatedImplementation.default.attachNativeEvent(this.getNativeScrollRef(), 'onScroll', [
                        {
                            nativeEvent: {
                                contentOffset: {
                                    y: this._scrollAnimatedValue
                                }
                            }
                        }
                    ]);
                }
            }
        },
        {
            key: "_setStickyHeaderRef",
            value: function _setStickyHeaderRef(key, ref) {
                if (ref) {
                    this._stickyHeaderRefs.set(key, ref);
                } else {
                    this._stickyHeaderRefs.delete(key);
                }
            }
        },
        {
            key: "_onStickyHeaderLayout",
            value: function _onStickyHeaderLayout(index, event, key) {
                var stickyHeaderIndices = this.props.stickyHeaderIndices;
                if (!stickyHeaderIndices) {
                    return;
                }
                var childArray = _react.Children.toArray(this.props.children);
                if (key !== this._getKeyForIndex(index, childArray)) {
                    // ignore stale layout update
                    return;
                }
                var layoutY = event.nativeEvent.layout.y;
                this._headerLayoutYs.set(key, layoutY);
                var indexOfIndex = stickyHeaderIndices.indexOf(index);
                var previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];
                if (previousHeaderIndex != null) {
                    var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));
                    previousHeader && previousHeader.setNextHeaderY && previousHeader.setNextHeaderY(layoutY);
                }
            }
        },
        {
            key: "render",
            value: function render() {
                var horizontal = this.props.horizontal === true;
                var NativeScrollView = horizontal ? _HScrollViewNativeComponents.HScrollViewNativeComponent : _VScrollViewNativeComponents.VScrollViewNativeComponent;
                var NativeScrollContentView = horizontal ? _HScrollViewNativeComponents.HScrollContentViewNativeComponent : _VScrollViewNativeComponents.VScrollContentViewNativeComponent;
                var contentContainerStyle = [
                    horizontal && styles.contentContainerHorizontal,
                    this.props.contentContainerStyle
                ];
                if ( true && this.props.style !== undefined) {
                    // $FlowFixMe[underconstrained-implicit-instantiation]
                    var style = (0, _flattenStyle.default)(this.props.style);
                    var childLayoutProps = [
                        'alignItems',
                        'justifyContent'
                    ].filter(// $FlowFixMe[incompatible-use]
                    (prop)=>style && style[prop] !== undefined);
                    (0, _invariant.default)(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
                }
                var contentSizeChangeProps = this.props.onContentSizeChange == null ? null : {
                    onLayout: this._handleContentOnLayout
                };
                var stickyHeaderIndices = this.props.stickyHeaderIndices;
                var children = this.props.children;
                /**
     * This function can cause unnecessary remount when nested in conditionals as it causes remap of children keys.
     * https://react.dev/reference/react/Children#children-toarray-caveats
     */ children = _react.Children.toArray(children);
                if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {
                    children = children.map((child, index)=>{
                        var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;
                        if (indexOfIndex > -1) {
                            var key = child.key;
                            var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
                            var StickyHeaderComponent = this.props.StickyHeaderComponent || _ScrollViewStickyHeader.default;
                            return /*#__PURE__*/ (0, _jsxruntime.jsx)(StickyHeaderComponent, {
                                ref: (ref)=>this._setStickyHeaderRef(key, ref),
                                nextHeaderLayoutY: this._headerLayoutYs.get(this._getKeyForIndex(nextIndex, children)),
                                onLayout: (event)=>this._onStickyHeaderLayout(index, event, key),
                                scrollAnimatedValue: this._scrollAnimatedValue,
                                inverted: this.props.invertStickyHeaders,
                                hiddenOnScroll: this.props.stickyHeaderHiddenOnScroll,
                                scrollViewHeight: this.state.layoutHeight,
                                children: child
                            }, key);
                        } else {
                            return child;
                        }
                    });
                }
                children = /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScrollViewContext.default.Provider, {
                    value: horizontal ? _ScrollViewContext.HORIZONTAL : _ScrollViewContext.VERTICAL,
                    children: children
                });
                var hasStickyHeaders = Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;
                // Some ScrollView native component behaviors rely on using the metrics
                // of mounted views for anchoring. Make sure not to flatten children if
                // this is the case.
                var preserveChildren = this.props.maintainVisibleContentPosition != null || _Platform.default.OS === 'android' && this.props.snapToAlignment != null;
                var contentContainer = /*#__PURE__*/ (0, _jsxruntime.jsx)(NativeScrollContentView, _object_spread_props._(_object_spread._({}, contentSizeChangeProps), {
                    ref: this._innerView.getForwardingRef(this.props.innerViewRef),
                    style: contentContainerStyle,
                    removeClippedSubviews: // Subview clipping causes issues with sticky headers on Android and
                    // would be hard to fix properly in a performant way.
                    _Platform.default.OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,
                    collapsable: false,
                    collapsableChildren: !preserveChildren,
                    children: children
                }));
                var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
                var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
                var baseStyle = horizontal ? styles.baseHorizontal : styles.baseVertical;
                var _this_props = this.props, experimental_endDraggingSensitivityMultiplier = _this_props.experimental_endDraggingSensitivityMultiplier, otherProps = _object_without_properties._(_this_props, [
                    "experimental_endDraggingSensitivityMultiplier"
                ]);
                var props = _object_spread_props._(_object_spread._({}, otherProps), {
                    alwaysBounceHorizontal,
                    alwaysBounceVertical,
                    style: _StyleSheet.default.compose(baseStyle, this.props.style),
                    // Override the onContentSizeChange from props, since this event can
                    // bubble up from TextInputs
                    onContentSizeChange: null,
                    onLayout: this._handleLayout,
                    onMomentumScrollBegin: this._handleMomentumScrollBegin,
                    onMomentumScrollEnd: this._handleMomentumScrollEnd,
                    onResponderGrant: this._handleResponderGrant,
                    onResponderReject: this._handleResponderReject,
                    onResponderRelease: this._handleResponderRelease,
                    onResponderTerminationRequest: this._handleResponderTerminationRequest,
                    onScrollBeginDrag: this._handleScrollBeginDrag,
                    onScrollEndDrag: this._handleScrollEndDrag,
                    onScrollShouldSetResponder: this._handleScrollShouldSetResponder,
                    onStartShouldSetResponder: this._handleStartShouldSetResponder,
                    onStartShouldSetResponderCapture: this._handleStartShouldSetResponderCapture,
                    onTouchEnd: this._handleTouchEnd,
                    onTouchMove: this._handleTouchMove,
                    onTouchStart: this._handleTouchStart,
                    onTouchCancel: this._handleTouchCancel,
                    onScroll: this._handleScroll,
                    endDraggingSensitivityMultiplier: experimental_endDraggingSensitivityMultiplier,
                    scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
                    sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
                    // default to true
                    snapToStart: this.props.snapToStart !== false,
                    // default to true
                    snapToEnd: this.props.snapToEnd !== false,
                    // pagingEnabled is overridden by snapToInterval / snapToOffsets
                    pagingEnabled: _Platform.default.select({
                        // on iOS, pagingEnabled must be set to false to have snapToInterval / snapToOffsets work
                        ios: this.props.pagingEnabled === true && this.props.snapToInterval == null && this.props.snapToOffsets == null,
                        // on Android, pagingEnabled must be set to true to have snapToInterval / snapToOffsets work
                        android: this.props.pagingEnabled === true || this.props.snapToInterval != null || this.props.snapToOffsets != null
                    })
                });
                var decelerationRate = this.props.decelerationRate;
                if (decelerationRate != null) {
                    props.decelerationRate = (0, _processDecelerationRate.default)(decelerationRate);
                }
                var refreshControl = this.props.refreshControl;
                var scrollViewRef = this._scrollView.getForwardingRef(this.props.scrollViewRef);
                if (refreshControl) {
                    if (_Platform.default.OS === 'ios') {
                        // On iOS the RefreshControl is a child of the ScrollView.
                        return(// $FlowFixMe[incompatible-type] - Flow only knows element refs.
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(NativeScrollView, _object_spread_props._(_object_spread._({}, props), {
                            ref: scrollViewRef,
                            children: [
                                refreshControl,
                                contentContainer
                            ]
                        })));
                    } else if (_Platform.default.OS === 'android') {
                        // On Android wrap the ScrollView with a AndroidSwipeRefreshLayout.
                        // Since the ScrollView is wrapped add the style props to the
                        // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.
                        // Note: we should split props.style on the inner and outer props
                        // however, the ScrollView still needs the baseStyle to be scrollable
                        // $FlowFixMe[underconstrained-implicit-instantiation]
                        // $FlowFixMe[incompatible-call]
                        var _splitLayoutProps1 = (0, _splitLayoutProps.default)((0, _flattenStyle.default)(props.style)), outer = _splitLayoutProps1.outer, inner = _splitLayoutProps1.inner;
                        return /*#__PURE__*/ _react.cloneElement(refreshControl, {
                            style: _StyleSheet.default.compose(baseStyle, outer)
                        }, /*#__PURE__*/ (0, _jsxruntime.jsx)(NativeScrollView, _object_spread_props._(_object_spread._({}, props), {
                            style: _StyleSheet.default.compose(baseStyle, inner),
                            // $FlowFixMe[incompatible-type] - Flow only knows element refs.
                            ref: scrollViewRef,
                            children: contentContainer
                        })));
                    }
                }
                return(// $FlowFixMe[incompatible-type] - Flow only knows element refs.
                /*#__PURE__*/ (0, _jsxruntime.jsx)(NativeScrollView, _object_spread_props._(_object_spread._({}, props), {
                    ref: scrollViewRef,
                    children: contentContainer
                })));
            }
        }
    ]);
    return ScrollView;
}(_react.Component);
ScrollView.Context = _ScrollViewContext.default;
var styles = _StyleSheet.default.create({
    baseVertical: {
        flexGrow: 1,
        flexShrink: 1,
        flexDirection: 'column',
        overflow: 'scroll'
    },
    baseHorizontal: {
        flexGrow: 1,
        flexShrink: 1,
        flexDirection: 'row',
        overflow: 'scroll'
    },
    contentContainerHorizontal: {
        flexDirection: 'row'
    }
});
/**
 * Helper function that should be replaced with `useCallback` and `useMergeRefs`
 * once `ScrollView` is reimplemented as a functional component.
 */ function createRefForwarder(mutator) {
    var state = {
        getForwardingRef: (0, _memoizeone.default)((forwardedRef)=>{
            return (nativeInstance)=>{
                var publicInstance = nativeInstance == null ? null : mutator(nativeInstance);
                state.nativeInstance = nativeInstance;
                state.publicInstance = publicInstance;
                if (forwardedRef != null) {
                    if (typeof forwardedRef === 'function') {
                        forwardedRef(publicInstance);
                    } else {
                        forwardedRef.current = publicInstance;
                    }
                }
            };
        }),
        nativeInstance: null,
        publicInstance: null
    };
    return state;
}
// TODO: After upgrading to React 19, remove `forwardRef` from this component.
// NOTE: This wrapper component is necessary because `ScrollView` is a class
// component and we need to map `ref` to a differently named prop. This can be
// removed when `ScrollView` is a functional component.
var Wrapper = /*#__PURE__*/ _react.forwardRef(function Wrapper(props, ref) {
    return ref == null ? /*#__PURE__*/ (0, _jsxruntime.jsx)(ScrollView, _object_spread._({}, props)) : /*#__PURE__*/ (0, _jsxruntime.jsx)(ScrollView, _object_spread_props._(_object_spread._({}, props), {
        scrollViewRef: ref
    }));
});
Wrapper.displayName = 'ScrollView';
// $FlowExpectedError[prop-missing]
Wrapper.Context = _ScrollViewContext.default;
module.exports = Wrapper;


}),
"./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewCommands.js": 
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewCommands.js ***!
  \*****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/codegenNativeCommands */ "./node_modules/react-native/Libraries/Utilities/codegenNativeCommands.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var _default = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'flashScrollIndicators',
        'scrollTo',
        'scrollToEnd',
        'zoomToRect'
    ]
});


}),
"./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewContext.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewContext.js ***!
  \****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get HORIZONTAL () {
        return HORIZONTAL;
    },
    get VERTICAL () {
        return VERTICAL;
    },
    get default () {
        return _default;
    }
});
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var ScrollViewContext = /*#__PURE__*/ _react.createContext(null);
if (true) {
    ScrollViewContext.displayName = 'ScrollViewContext';
}
var _default = ScrollViewContext;
var HORIZONTAL = Object.freeze({
    horizontal: true
});
var VERTICAL = Object.freeze({
    horizontal: false
});


}),
"./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js": 
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js ***!
  \*********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _Animated = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Animated/Animated */ "./node_modules/react-native/Libraries/Animated/Animated.js"));
var _ReactFabricPublicInstanceUtils = __webpack_require__(/*! ../../ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils */ "./node_modules/react-native/Libraries/ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils.js");
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/useMergeRefs */ "./node_modules/react-native/Libraries/Utilities/useMergeRefs.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var ScrollViewStickyHeaderWithForwardedRef = /*#__PURE__*/ _react.forwardRef(function ScrollViewStickyHeader(props, forwardedRef) {
    var inverted = props.inverted, scrollViewHeight = props.scrollViewHeight, hiddenOnScroll = props.hiddenOnScroll, scrollAnimatedValue = props.scrollAnimatedValue, _nextHeaderLayoutY = props.nextHeaderLayoutY;
    var _useState = _sliced_to_array._((0, _react.useState)(false), 2), measured = _useState[0], setMeasured = _useState[1];
    var _useState1 = _sliced_to_array._((0, _react.useState)(0), 2), layoutY = _useState1[0], setLayoutY = _useState1[1];
    var _useState2 = _sliced_to_array._((0, _react.useState)(0), 2), layoutHeight = _useState2[0], setLayoutHeight = _useState2[1];
    var _useState3 = _sliced_to_array._((0, _react.useState)(null), 2), translateY = _useState3[0], setTranslateY = _useState3[1];
    var _useState4 = _sliced_to_array._((0, _react.useState)(_nextHeaderLayoutY), 2), nextHeaderLayoutY = _useState4[0], setNextHeaderLayoutY = _useState4[1];
    var _useState5 = _sliced_to_array._((0, _react.useState)(false), 2), isFabric = _useState5[0], setIsFabric = _useState5[1];
    var callbackRef = (0, _react.useCallback)((ref)=>{
        if (ref == null) {
            return;
        }
        ref.setNextHeaderY = setNextHeaderLayoutY;
        setIsFabric((0, _ReactFabricPublicInstanceUtils.isPublicInstance)(ref));
    }, []);
    var ref = // $FlowFixMe[prop-missing] - Instance is mutated to have `setNextHeaderY`.
    (0, _useMergeRefs.default)(callbackRef, forwardedRef);
    var offset = (0, _react.useMemo)(()=>hiddenOnScroll === true ? _Animated.default.diffClamp(scrollAnimatedValue.interpolate({
            extrapolateLeft: 'clamp',
            inputRange: [
                layoutY,
                layoutY + 1
            ],
            outputRange: [
                0,
                1
            ]
        }).interpolate({
            inputRange: [
                0,
                1
            ],
            outputRange: [
                0,
                -1
            ]
        }), -layoutHeight, 0) : null, [
        scrollAnimatedValue,
        layoutHeight,
        layoutY,
        hiddenOnScroll
    ]);
    var _useState6 = _sliced_to_array._((0, _react.useState)(()=>{
        var inputRange = [
            -1,
            0
        ];
        var outputRange = [
            0,
            0
        ];
        var initialTranslateY = scrollAnimatedValue.interpolate({
            inputRange,
            outputRange
        });
        if (offset != null) {
            return _Animated.default.add(initialTranslateY, offset);
        }
        return initialTranslateY;
    }), 2), animatedTranslateY = _useState6[0], setAnimatedTranslateY = _useState6[1];
    var haveReceivedInitialZeroTranslateY = (0, _react.useRef)(true);
    var translateYDebounceTimer = (0, _react.useRef)(null);
    (0, _react.useEffect)(()=>{
        if (translateY !== 0 && translateY != null) {
            haveReceivedInitialZeroTranslateY.current = false;
        }
    }, [
        translateY
    ]);
    // This is called whenever the (Interpolated) Animated Value
    // updates, which is several times per frame during scrolling.
    // To ensure that the Fabric ShadowTree has the most recent
    // translate style of this node, we debounce the value and then
    // pass it through to the underlying node during render.
    // This is:
    // 1. Only an issue in Fabric.
    // 2. Worse in Android than iOS. In Android, but not iOS, you
    //    can touch and move your finger slightly and still trigger
    //    a "tap" event. In iOS, moving will cancel the tap in
    //    both Fabric and non-Fabric. On Android when you move
    //    your finger, the hit-detection moves from the Android
    //    platform to JS, so we need the ShadowTree to have knowledge
    //    of the current position.
    var animatedValueListener = (0, _react.useCallback)((ref)=>{
        var value = ref.value;
        var debounceTimeout = _Platform.default.OS === 'android' ? 15 : 64;
        // When the AnimatedInterpolation is recreated, it always initializes
        // to a value of zero and emits a value change of 0 to its listeners.
        if (value === 0 && !haveReceivedInitialZeroTranslateY.current) {
            haveReceivedInitialZeroTranslateY.current = true;
            return;
        }
        if (translateYDebounceTimer.current != null) {
            clearTimeout(translateYDebounceTimer.current);
        }
        translateYDebounceTimer.current = setTimeout(()=>setTranslateY(value), debounceTimeout);
    }, []);
    (0, _react.useEffect)(()=>{
        var inputRange = [
            -1,
            0
        ];
        var outputRange = [
            0,
            0
        ];
        if (measured) {
            if (inverted === true) {
                // The interpolation looks like:
                // - Negative scroll: no translation
                // - `stickStartPoint` is the point at which the header will start sticking.
                //   It is calculated using the ScrollView viewport height so it is a the bottom.
                // - Headers that are in the initial viewport will never stick, `stickStartPoint`
                //   will be negative.
                // - From 0 to `stickStartPoint` no translation. This will cause the header
                //   to scroll normally until it reaches the top of the scroll view.
                // - From `stickStartPoint` to when the next header y hits the bottom edge of the header: translate
                //   equally to scroll. This will cause the header to stay at the top of the scroll view.
                // - Past the collision with the next header y: no more translation. This will cause the
                //   header to continue scrolling up and make room for the next sticky header.
                //   In the case that there is no next header just translate equally to
                //   scroll indefinitely.
                if (scrollViewHeight != null) {
                    var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;
                    if (stickStartPoint > 0) {
                        inputRange.push(stickStartPoint);
                        outputRange.push(0);
                        inputRange.push(stickStartPoint + 1);
                        outputRange.push(1);
                        // If the next sticky header has not loaded yet (probably windowing) or is the last
                        // we can just keep it sticked forever.
                        var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;
                        if (collisionPoint > stickStartPoint) {
                            inputRange.push(collisionPoint, collisionPoint + 1);
                            outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);
                        }
                    }
                }
            } else {
                // The interpolation looks like:
                // - Negative scroll: no translation
                // - From 0 to the y of the header: no translation. This will cause the header
                //   to scroll normally until it reaches the top of the scroll view.
                // - From header y to when the next header y hits the bottom edge of the header: translate
                //   equally to scroll. This will cause the header to stay at the top of the scroll view.
                // - Past the collision with the next header y: no more translation. This will cause the
                //   header to continue scrolling up and make room for the next sticky header.
                //   In the case that there is no next header just translate equally to
                //   scroll indefinitely.
                inputRange.push(layoutY);
                outputRange.push(0);
                // If the next sticky header has not loaded yet (probably windowing) or is the last
                // we can just keep it sticked forever.
                var collisionPoint1 = (nextHeaderLayoutY || 0) - layoutHeight;
                if (collisionPoint1 >= layoutY) {
                    inputRange.push(collisionPoint1, collisionPoint1 + 1);
                    outputRange.push(collisionPoint1 - layoutY, collisionPoint1 - layoutY);
                } else {
                    inputRange.push(layoutY + 1);
                    outputRange.push(1);
                }
            }
        }
        var newAnimatedTranslateY = scrollAnimatedValue.interpolate({
            inputRange,
            outputRange
        });
        if (offset != null) {
            newAnimatedTranslateY = _Animated.default.add(newAnimatedTranslateY, offset);
        }
        // add the event listener
        var animatedListenerId;
        if (isFabric) {
            animatedListenerId = newAnimatedTranslateY.addListener(animatedValueListener);
        }
        setAnimatedTranslateY(newAnimatedTranslateY);
        // clean up the event listener and timer
        return ()=>{
            if (animatedListenerId) {
                newAnimatedTranslateY.removeListener(animatedListenerId);
            }
            if (translateYDebounceTimer.current != null) {
                clearTimeout(translateYDebounceTimer.current);
            }
        };
    }, [
        nextHeaderLayoutY,
        measured,
        layoutHeight,
        layoutY,
        scrollViewHeight,
        scrollAnimatedValue,
        inverted,
        offset,
        animatedValueListener,
        isFabric
    ]);
    var _onLayout = (event)=>{
        setLayoutY(event.nativeEvent.layout.y);
        setLayoutHeight(event.nativeEvent.layout.height);
        setMeasured(true);
        props.onLayout(event);
        var child = _react.Children.only(props.children);
        if (child.props.onLayout) {
            child.props.onLayout(event);
        }
    };
    var child = _react.Children.only(props.children);
    var passthroughAnimatedPropExplicitValues = isFabric && translateY != null ? {
        style: {
            transform: [
                {
                    translateY: translateY
                }
            ]
        }
    } : null;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Animated.default.View, {
        collapsable: false,
        nativeID: props.nativeID,
        onLayout: _onLayout,
        /* $FlowFixMe[prop-missing] passthroughAnimatedPropExplicitValues isn't properly
         included in the Animated.View flow type. */ ref: ref,
        style: [
            child.props.style,
            styles.header,
            {
                transform: [
                    {
                        translateY: animatedTranslateY
                    }
                ]
            }
        ],
        passthroughAnimatedPropExplicitValues: passthroughAnimatedPropExplicitValues,
        children: /*#__PURE__*/ _react.cloneElement(child, {
            style: styles.fill,
            onLayout: undefined
        })
    });
});
var styles = _StyleSheet.default.create({
    header: {
        zIndex: 10
    },
    fill: {
        flex: 1
    }
});
var _default = ScrollViewStickyHeaderWithForwardedRef;


}),
"./node_modules/react-native/Libraries/Components/ScrollView/processDecelerationRate.js": 
/*!**********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/ScrollView/processDecelerationRate.js ***!
  \**********************************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
function processDecelerationRate(decelerationRate) {
    if (decelerationRate === 'normal') {
        return _Platform.default.select({
            ios: 0.998,
            android: 0.985
        });
    } else if (decelerationRate === 'fast') {
        return _Platform.default.select({
            ios: 0.99,
            android: 0.9
        });
    }
    return decelerationRate;
}
module.exports = processDecelerationRate;


}),
"./node_modules/react-native/Libraries/Components/Sound/SoundManager.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Sound/SoundManager.js ***!
  \******************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeSoundManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeSoundManager */ "./node_modules/react-native/Libraries/Components/Sound/NativeSoundManager.js"));
var SoundManager = {
    playTouchSound: function() {
        if (_NativeSoundManager.default) {
            _NativeSoundManager.default.playTouchSound();
        }
    }
};
module.exports = SoundManager;


}),
"./node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js": 
/*!****************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js ***!
  \****************************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _Pressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Pressability/Pressability */ "./node_modules/react-native/Libraries/Pressability/Pressability.js"));
var _PressabilityDebug = __webpack_require__(/*! ../../Pressability/PressabilityDebug */ "./node_modules/react-native/Libraries/Pressability/PressabilityDebug.js");
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
/**
 * A wrapper for making views respond properly to touches.
 * On press down, the opacity of the wrapped view is decreased, which allows
 * the underlay color to show through, darkening or tinting the view.
 *
 * The underlay comes from wrapping the child in a new View, which can affect
 * layout, and sometimes cause unwanted visual artifacts if not used correctly,
 * for example if the backgroundColor of the wrapped view isn't explicitly set
 * to an opaque color.
 *
 * TouchableHighlight must have one child (not zero or more than one).
 * If you wish to have several child components, wrap them in a View.
 *
 * Example:
 *
 * ```
 * renderButton: function() {
 *   return (
 *     <TouchableHighlight onPress={this._onPressButton}>
 *       <Image
 *         style={styles.button}
 *         source={require('./myButton.png')}
 *       />
 *     </TouchableHighlight>
 *   );
 * },
 * ```
 *
 *
 * ### Example
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react'
 * import {
 *   AppRegistry,
 *   StyleSheet,
 *   TouchableHighlight,
 *   Text,
 *   View,
 * } from 'react-native'
 *
 * class App extends Component {
 *   constructor(props) {
 *     super(props)
 *     this.state = { count: 0 }
 *   }
 *
 *   onPress = () => {
 *     this.setState({
 *       count: this.state.count+1
 *     })
 *   }
 *
 *  render() {
 *     return (
 *       <View style={styles.container}>
 *         <TouchableHighlight
 *          style={styles.button}
 *          onPress={this.onPress}
 *         >
 *          <Text> Touch Here </Text>
 *         </TouchableHighlight>
 *         <View style={[styles.countContainer]}>
 *           <Text style={[styles.countText]}>
 *             { this.state.count !== 0 ? this.state.count: null}
 *           </Text>
 *         </View>
 *       </View>
 *     )
 *   }
 * }
 *
 * const styles = StyleSheet.create({
 *   container: {
 *     flex: 1,
 *     justifyContent: 'center',
 *     paddingHorizontal: 10
 *   },
 *   button: {
 *     alignItems: 'center',
 *     backgroundColor: '#DDDDDD',
 *     padding: 10
 *   },
 *   countContainer: {
 *     alignItems: 'center',
 *     padding: 10
 *   },
 *   countText: {
 *     color: '#FF00FF'
 *   }
 * })
 *
 * AppRegistry.registerComponent('App', () => App)
 * ```
 *
 */ var TouchableHighlight = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(TouchableHighlight, _React_Component);
    function TouchableHighlight() {
        _class_call_check._(this, TouchableHighlight);
        var _this;
        _this = _call_super._(this, TouchableHighlight, arguments), _this._isMounted = false, _this.state = {
            pressability: new _Pressability.default(_this._createPressabilityConfig()),
            extraStyles: _this.props.testOnly_pressed === true ? _this._createExtraStyles() : null
        };
        return _this;
    }
    _create_class._(TouchableHighlight, [
        {
            key: "_createPressabilityConfig",
            value: function _createPressabilityConfig() {
                var _this_props_accessibilityState;
                return {
                    cancelable: !this.props.rejectResponderTermination,
                    disabled: this.props.disabled != null ? this.props.disabled : (_this_props_accessibilityState = this.props.accessibilityState) === null || _this_props_accessibilityState === void 0 ? void 0 : _this_props_accessibilityState.disabled,
                    hitSlop: this.props.hitSlop,
                    delayLongPress: this.props.delayLongPress,
                    delayPressIn: this.props.delayPressIn,
                    delayPressOut: this.props.delayPressOut,
                    minPressDuration: 0,
                    pressRectOffset: this.props.pressRetentionOffset,
                    android_disableSound: this.props.touchSoundDisabled,
                    onBlur: (event)=>{
                        if (_Platform.default.isTV) {
                            this._hideUnderlay();
                        }
                        if (this.props.onBlur != null) {
                            this.props.onBlur(event);
                        }
                    },
                    onFocus: (event)=>{
                        if (_Platform.default.isTV) {
                            this._showUnderlay();
                        }
                        if (this.props.onFocus != null) {
                            this.props.onFocus(event);
                        }
                    },
                    onLongPress: this.props.onLongPress,
                    onPress: (event)=>{
                        if (this._hideTimeout != null) {
                            clearTimeout(this._hideTimeout);
                        }
                        if (!_Platform.default.isTV) {
                            this._showUnderlay();
                            this._hideTimeout = setTimeout(()=>{
                                this._hideUnderlay();
                            }, this.props.delayPressOut ?? 0);
                        }
                        if (this.props.onPress != null) {
                            this.props.onPress(event);
                        }
                    },
                    onPressIn: (event)=>{
                        if (this._hideTimeout != null) {
                            clearTimeout(this._hideTimeout);
                            this._hideTimeout = null;
                        }
                        this._showUnderlay();
                        if (this.props.onPressIn != null) {
                            this.props.onPressIn(event);
                        }
                    },
                    onPressOut: (event)=>{
                        if (this._hideTimeout == null) {
                            this._hideUnderlay();
                        }
                        if (this.props.onPressOut != null) {
                            this.props.onPressOut(event);
                        }
                    }
                };
            }
        },
        {
            key: "_createExtraStyles",
            value: function _createExtraStyles() {
                return {
                    child: {
                        opacity: this.props.activeOpacity ?? 0.85
                    },
                    underlay: {
                        backgroundColor: this.props.underlayColor === undefined ? 'black' : this.props.underlayColor
                    }
                };
            }
        },
        {
            key: "_showUnderlay",
            value: function _showUnderlay() {
                if (!this._isMounted || !this._hasPressHandler()) {
                    return;
                }
                this.setState({
                    extraStyles: this._createExtraStyles()
                });
                if (this.props.onShowUnderlay != null) {
                    this.props.onShowUnderlay();
                }
            }
        },
        {
            key: "_hideUnderlay",
            value: function _hideUnderlay() {
                if (this._hideTimeout != null) {
                    clearTimeout(this._hideTimeout);
                    this._hideTimeout = null;
                }
                if (this.props.testOnly_pressed === true) {
                    return;
                }
                if (this._hasPressHandler()) {
                    this.setState({
                        extraStyles: null
                    });
                    if (this.props.onHideUnderlay != null) {
                        this.props.onHideUnderlay();
                    }
                }
            }
        },
        {
            key: "_hasPressHandler",
            value: function _hasPressHandler() {
                return this.props.onPress != null || this.props.onPressIn != null || this.props.onPressOut != null || this.props.onLongPress != null;
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props_accessibilityValue, _this_props_accessibilityValue1, _this_props_accessibilityValue2, _this_props_accessibilityValue3, _this_state_extraStyles, _this_state_extraStyles1;
                var child = _react.Children.only(this.props.children);
                // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before
                // adopting `Pressability`, so preserve that behavior.
                var _this_state_pressability_getEventHandlers = this.state.pressability.getEventHandlers(), onBlur = _this_state_pressability_getEventHandlers.onBlur, onFocus = _this_state_pressability_getEventHandlers.onFocus, eventHandlersWithoutBlurAndFocus = _object_without_properties._(_this_state_pressability_getEventHandlers, [
                    "onBlur",
                    "onFocus"
                ]);
                var accessibilityState = this.props.disabled != null ? _object_spread_props._(_object_spread._({}, this.props.accessibilityState), {
                    disabled: this.props.disabled
                }) : this.props.accessibilityState;
                var accessibilityValue = {
                    max: this.props['aria-valuemax'] ?? ((_this_props_accessibilityValue = this.props.accessibilityValue) === null || _this_props_accessibilityValue === void 0 ? void 0 : _this_props_accessibilityValue.max),
                    min: this.props['aria-valuemin'] ?? ((_this_props_accessibilityValue1 = this.props.accessibilityValue) === null || _this_props_accessibilityValue1 === void 0 ? void 0 : _this_props_accessibilityValue1.min),
                    now: this.props['aria-valuenow'] ?? ((_this_props_accessibilityValue2 = this.props.accessibilityValue) === null || _this_props_accessibilityValue2 === void 0 ? void 0 : _this_props_accessibilityValue2.now),
                    text: this.props['aria-valuetext'] ?? ((_this_props_accessibilityValue3 = this.props.accessibilityValue) === null || _this_props_accessibilityValue3 === void 0 ? void 0 : _this_props_accessibilityValue3.text)
                };
                var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : this.props['aria-live'] ?? this.props.accessibilityLiveRegion;
                var accessibilityLabel = this.props['aria-label'] ?? this.props.accessibilityLabel;
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, _object_spread_props._(_object_spread._({
                    accessible: this.props.accessible !== false,
                    accessibilityLabel: accessibilityLabel,
                    accessibilityHint: this.props.accessibilityHint,
                    accessibilityLanguage: this.props.accessibilityLanguage,
                    accessibilityRole: this.props.accessibilityRole,
                    accessibilityState: accessibilityState,
                    accessibilityValue: accessibilityValue,
                    accessibilityActions: this.props.accessibilityActions,
                    onAccessibilityAction: this.props.onAccessibilityAction,
                    importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
                    accessibilityViewIsModal: this.props['aria-modal'] ?? this.props.accessibilityViewIsModal,
                    accessibilityLiveRegion: accessibilityLiveRegion,
                    accessibilityElementsHidden: this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden,
                    style: _StyleSheet.default.compose(this.props.style, (_this_state_extraStyles = this.state.extraStyles) === null || _this_state_extraStyles === void 0 ? void 0 : _this_state_extraStyles.underlay),
                    onLayout: this.props.onLayout,
                    hitSlop: this.props.hitSlop,
                    hasTVPreferredFocus: this.props.hasTVPreferredFocus,
                    nextFocusDown: this.props.nextFocusDown,
                    nextFocusForward: this.props.nextFocusForward,
                    nextFocusLeft: this.props.nextFocusLeft,
                    nextFocusRight: this.props.nextFocusRight,
                    nextFocusUp: this.props.nextFocusUp,
                    focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,
                    nativeID: this.props.id ?? this.props.nativeID,
                    testID: this.props.testID,
                    ref: this.props.hostRef
                }, eventHandlersWithoutBlurAndFocus), {
                    children: [
                        /*#__PURE__*/ _react.cloneElement(child, {
                            style: _StyleSheet.default.compose(child.props.style, (_this_state_extraStyles1 = this.state.extraStyles) === null || _this_state_extraStyles1 === void 0 ? void 0 : _this_state_extraStyles1.child)
                        }),
                         true ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_PressabilityDebug.PressabilityDebugView, {
                            color: "green",
                            hitSlop: this.props.hitSlop
                        }) : 0
                    ]
                }));
            }
        },
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                this._isMounted = true;
                this.state.pressability.configure(this._createPressabilityConfig());
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps, prevState) {
                this.state.pressability.configure(this._createPressabilityConfig());
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this._isMounted = false;
                if (this._hideTimeout != null) {
                    clearTimeout(this._hideTimeout);
                }
                this.state.pressability.reset();
            }
        }
    ]);
    return TouchableHighlight;
}(_react.Component);
var Touchable = /*#__PURE__*/ _react.forwardRef((props, hostRef)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(TouchableHighlight, _object_spread_props._(_object_spread._({}, props), {
        hostRef: hostRef
    })));
Touchable.displayName = 'TouchableHighlight';
module.exports = Touchable;


}),
"./node_modules/react-native/Libraries/Components/Touchable/TouchableWithoutFeedback.js": 
/*!**********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Components/Touchable/TouchableWithoutFeedback.js ***!
  \**********************************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _PressabilityDebug = __webpack_require__(/*! ../../Pressability/PressabilityDebug */ "./node_modules/react-native/Libraries/Pressability/PressabilityDebug.js");
var _usePressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Pressability/usePressability */ "./node_modules/react-native/Libraries/Pressability/usePressability.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var PASSTHROUGH_PROPS = [
    'accessibilityActions',
    'accessibilityElementsHidden',
    'accessibilityHint',
    'accessibilityLanguage',
    'accessibilityIgnoresInvertColors',
    'accessibilityLabel',
    'accessibilityLiveRegion',
    'accessibilityRole',
    'accessibilityValue',
    'aria-valuemax',
    'aria-valuemin',
    'aria-valuenow',
    'aria-valuetext',
    'accessibilityViewIsModal',
    'aria-modal',
    'hitSlop',
    'importantForAccessibility',
    'nativeID',
    'onAccessibilityAction',
    'onBlur',
    'onFocus',
    'onLayout',
    'testID'
];
module.exports = function TouchableWithoutFeedback(props) {
    var /*#__PURE__*/ _React;
    var _props_accessibilityState, _props_accessibilityState1, _props_accessibilityState2, _props_accessibilityState3, _props_accessibilityState4;
    var disabled = props.disabled, rejectResponderTermination = props.rejectResponderTermination, ariaDisabled = props['aria-disabled'], accessibilityState = props.accessibilityState, hitSlop = props.hitSlop, delayLongPress = props.delayLongPress, delayPressIn = props.delayPressIn, delayPressOut = props.delayPressOut, pressRetentionOffset = props.pressRetentionOffset, touchSoundDisabled = props.touchSoundDisabled, _onBlur = props.onBlur, _onFocus = props.onFocus, onLongPress = props.onLongPress, onPress = props.onPress, onPressIn = props.onPressIn, onPressOut = props.onPressOut;
    var pressabilityConfig = (0, _react.useMemo)(()=>({
            cancelable: !rejectResponderTermination,
            disabled: disabled !== null ? disabled : ariaDisabled ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.disabled),
            hitSlop: hitSlop,
            delayLongPress: delayLongPress,
            delayPressIn: delayPressIn,
            delayPressOut: delayPressOut,
            minPressDuration: 0,
            pressRectOffset: pressRetentionOffset,
            android_disableSound: touchSoundDisabled,
            onBlur: _onBlur,
            onFocus: _onFocus,
            onLongPress: onLongPress,
            onPress: onPress,
            onPressIn: onPressIn,
            onPressOut: onPressOut
        }), [
        rejectResponderTermination,
        disabled,
        ariaDisabled,
        accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.disabled,
        hitSlop,
        delayLongPress,
        delayPressIn,
        delayPressOut,
        pressRetentionOffset,
        touchSoundDisabled,
        _onBlur,
        _onFocus,
        onLongPress,
        onPress,
        onPressIn,
        onPressOut
    ]);
    var eventHandlers = (0, _usePressability.default)(pressabilityConfig);
    var element = _react.Children.only(props.children);
    var children = [
        element.props.children
    ];
    var ariaLive = props['aria-live'];
    if (true) {
        if (element.type === _View.default) {
            children.push(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PressabilityDebug.PressabilityDebugView, {
                color: "red",
                hitSlop: props.hitSlop
            }));
        }
    }
    var _accessibilityState = {
        busy: props['aria-busy'] ?? ((_props_accessibilityState = props.accessibilityState) === null || _props_accessibilityState === void 0 ? void 0 : _props_accessibilityState.busy),
        checked: props['aria-checked'] ?? ((_props_accessibilityState1 = props.accessibilityState) === null || _props_accessibilityState1 === void 0 ? void 0 : _props_accessibilityState1.checked),
        disabled: props['aria-disabled'] ?? ((_props_accessibilityState2 = props.accessibilityState) === null || _props_accessibilityState2 === void 0 ? void 0 : _props_accessibilityState2.disabled),
        expanded: props['aria-expanded'] ?? ((_props_accessibilityState3 = props.accessibilityState) === null || _props_accessibilityState3 === void 0 ? void 0 : _props_accessibilityState3.expanded),
        selected: props['aria-selected'] ?? ((_props_accessibilityState4 = props.accessibilityState) === null || _props_accessibilityState4 === void 0 ? void 0 : _props_accessibilityState4.selected)
    };
    // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before
    // adopting `Pressability`, so preserve that behavior.
    var onBlur = eventHandlers.onBlur, onFocus = eventHandlers.onFocus, eventHandlersWithoutBlurAndFocus = _object_without_properties._(eventHandlers, [
        "onBlur",
        "onFocus"
    ]);
    var elementProps = _object_spread_props._(_object_spread._({}, eventHandlersWithoutBlurAndFocus), {
        accessible: props.accessible !== false,
        accessibilityState: props.disabled != null ? _object_spread_props._(_object_spread._({}, _accessibilityState), {
            disabled: props.disabled
        }) : _accessibilityState,
        focusable: props.focusable !== false && props.onPress !== undefined && !props.disabled,
        accessibilityElementsHidden: props['aria-hidden'] ?? props.accessibilityElementsHidden,
        importantForAccessibility: props['aria-hidden'] === true ? 'no-hide-descendants' : props.importantForAccessibility,
        accessibilityLiveRegion: ariaLive === 'off' ? 'none' : ariaLive ?? props.accessibilityLiveRegion,
        nativeID: props.id ?? props.nativeID
    });
    for (var prop of PASSTHROUGH_PROPS){
        if (props[prop] !== undefined) {
            elementProps[prop] = props[prop];
        }
    }
    // $FlowFixMe[incompatible-call]
    return (_React = _react).cloneElement.apply(_React, [
        element,
        elementProps
    ].concat(_to_consumable_array._(children)));
};


}),
"./node_modules/react-native/Libraries/Debugging/DebuggingOverlay.js": 
/*!***************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Debugging/DebuggingOverlay.js ***!
  \***************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../ReactNative/UIManager */ "./node_modules/react-native/Libraries/ReactNative/UIManager.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _DebuggingOverlayNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./DebuggingOverlayNativeComponent */ "./node_modules/react-native/Libraries/Debugging/DebuggingOverlayNativeComponent.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var useRef = _react.useRef, useImperativeHandle = _react.useImperativeHandle;
var isNativeComponentReady = _UIManager.default.hasViewManagerConfig('DebuggingOverlay');
function DebuggingOverlay(_props, ref) {
    useImperativeHandle(ref, ()=>({
            highlightTraceUpdates (updates) {
                if (!isNativeComponentReady) {
                    return;
                }
                var nonEmptyRectangles = updates.filter((ref)=>{
                    var rectangle = ref.rectangle, color = ref.color;
                    return rectangle.width >= 0 && rectangle.height >= 0;
                });
                if (nativeComponentRef.current != null) {
                    _DebuggingOverlayNativeComponent.Commands.highlightTraceUpdates(nativeComponentRef.current, nonEmptyRectangles);
                }
            },
            highlightElements (elements) {
                if (!isNativeComponentReady) {
                    return;
                }
                if (nativeComponentRef.current != null) {
                    _DebuggingOverlayNativeComponent.Commands.highlightElements(nativeComponentRef.current, elements);
                }
            },
            clearElementsHighlight () {
                if (!isNativeComponentReady) {
                    return;
                }
                if (nativeComponentRef.current != null) {
                    _DebuggingOverlayNativeComponent.Commands.clearElementsHighlights(nativeComponentRef.current);
                }
            }
        }), []);
    var nativeComponentRef = useRef(null);
    return isNativeComponentReady && /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
        pointerEvents: "none",
        style: styles.overlay,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_DebuggingOverlayNativeComponent.default, {
            ref: nativeComponentRef,
            style: styles.overlay
        })
    });
}
var styles = _StyleSheet.default.create({
    overlay: {
        position: 'absolute',
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
    }
});
var DebuggingOverlayWithForwardedRef = /*#__PURE__*/ _react.forwardRef(DebuggingOverlay);
var _default = DebuggingOverlayWithForwardedRef;


}),
"./node_modules/react-native/Libraries/Debugging/DebuggingOverlayRegistry.js": 
/*!***********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Debugging/DebuggingOverlayRegistry.js ***!
  \***********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _class_private_field_loose_base = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_base */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_base.cjs");
var _class_private_field_loose_key = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_key */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_key.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _type_of = __webpack_require__(/*! @swc/helpers/_/_type_of */ "./node_modules/@swc/helpers/cjs/_type_of.cjs");
var _RendererProxy = __webpack_require__(/*! ../ReactNative/RendererProxy */ "./node_modules/react-native/Libraries/ReactNative/RendererProxy.js");
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js"));
// TODO(T171193075): __REACT_DEVTOOLS_GLOBAL_HOOK__ is always injected in dev-bundles,
// but it is not mocked in some Jest tests. We should update Jest tests setup, so it would be the same as expected testing environment.
var reactDevToolsHook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
var _registry = /*#__PURE__*/ _class_private_field_loose_key._("_registry"), _reactDevToolsAgent = /*#__PURE__*/ _class_private_field_loose_key._("_reactDevToolsAgent"), _onReactDevToolsAgentAttached = /*#__PURE__*/ _class_private_field_loose_key._("_onReactDevToolsAgentAttached"), _getPublicInstanceFromInstance = /*#__PURE__*/ _class_private_field_loose_key._("_getPublicInstanceFromInstance"), _findLowestParentFromRegistryForInstance = /*#__PURE__*/ _class_private_field_loose_key._("_findLowestParentFromRegistryForInstance"), _findLowestParentFromRegistryForInstanceLegacy = /*#__PURE__*/ _class_private_field_loose_key._("_findLowestParentFromRegistryForInstanceLegacy"), _onDrawTraceUpdates = /*#__PURE__*/ _class_private_field_loose_key._("_onDrawTraceUpdates"), _drawTraceUpdatesModern = /*#__PURE__*/ _class_private_field_loose_key._("_drawTraceUpdatesModern"), // TODO: remove once DOM Node APIs are opt-in by default and Paper is no longer supported.
_drawTraceUpdatesLegacy = /*#__PURE__*/ _class_private_field_loose_key._("_drawTraceUpdatesLegacy"), _onHighlightElements = /*#__PURE__*/ _class_private_field_loose_key._("_onHighlightElements"), _onHighlightElementsModern = /*#__PURE__*/ _class_private_field_loose_key._("_onHighlightElementsModern"), // TODO: remove once DOM Node APIs are opt-in by default and Paper is no longer supported.
_onHighlightElementsLegacy = /*#__PURE__*/ _class_private_field_loose_key._("_onHighlightElementsLegacy"), _onClearElementsHighlights = /*#__PURE__*/ _class_private_field_loose_key._("_onClearElementsHighlights");
var DebuggingOverlayRegistry = /*#__PURE__*/ function() {
    "use strict";
    function DebuggingOverlayRegistry() {
        _class_call_check._(this, DebuggingOverlayRegistry);
        var // There could be cases when frontend is disconnected and then connected again for the same React Native runtime.
        _reactDevToolsHook_on;
        Object.defineProperty(this, _findLowestParentFromRegistryForInstance, {
            value: findLowestParentFromRegistryForInstance
        });
        Object.defineProperty(this, _findLowestParentFromRegistryForInstanceLegacy, {
            value: findLowestParentFromRegistryForInstanceLegacy
        });
        Object.defineProperty(this, _drawTraceUpdatesModern, {
            value: drawTraceUpdatesModern
        });
        Object.defineProperty(this, _drawTraceUpdatesLegacy, {
            value: drawTraceUpdatesLegacy
        });
        Object.defineProperty(this, _onHighlightElementsModern, {
            value: onHighlightElementsModern
        });
        Object.defineProperty(this, _onHighlightElementsLegacy, {
            value: onHighlightElementsLegacy
        });
        Object.defineProperty(this, _registry, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _reactDevToolsAgent, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _onReactDevToolsAgentAttached, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _getPublicInstanceFromInstance, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _onDrawTraceUpdates, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _onHighlightElements, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _onClearElementsHighlights, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(this, _registry)[_registry] = new Set();
        _class_private_field_loose_base._(this, _reactDevToolsAgent)[_reactDevToolsAgent] = null;
        _class_private_field_loose_base._(this, _onReactDevToolsAgentAttached)[_onReactDevToolsAgentAttached] = (agent)=>{
            _class_private_field_loose_base._(this, _reactDevToolsAgent)[_reactDevToolsAgent] = agent;
            agent.addListener('drawTraceUpdates', _class_private_field_loose_base._(this, _onDrawTraceUpdates)[_onDrawTraceUpdates]);
            agent.addListener('showNativeHighlight', _class_private_field_loose_base._(this, _onHighlightElements)[_onHighlightElements]);
            agent.addListener('hideNativeHighlight', _class_private_field_loose_base._(this, _onClearElementsHighlights)[_onClearElementsHighlights]);
        };
        _class_private_field_loose_base._(this, _getPublicInstanceFromInstance)[_getPublicInstanceFromInstance] = (instanceHandle)=>{
            var _instanceHandle_canonical;
            // `canonical.publicInstance` => Fabric
            if (((_instanceHandle_canonical = instanceHandle.canonical) === null || _instanceHandle_canonical === void 0 ? void 0 : _instanceHandle_canonical.publicInstance) != null) {
                var _instanceHandle_canonical1;
                return (_instanceHandle_canonical1 = instanceHandle.canonical) === null || _instanceHandle_canonical1 === void 0 ? void 0 : _instanceHandle_canonical1.publicInstance;
            }
            // `canonical` => Legacy Fabric
            if (instanceHandle.canonical != null) {
                // $FlowFixMe[incompatible-return]
                return instanceHandle.canonical;
            }
            // `instanceHandle` => Legacy renderer
            if (instanceHandle.measure != null) {
                // $FlowFixMe[incompatible-return]
                return instanceHandle;
            }
            return null;
        };
        _class_private_field_loose_base._(this, _onDrawTraceUpdates)[_onDrawTraceUpdates] = (traceUpdates)=>{
            var modernNodesUpdates = [];
            var legacyNodesUpdates = [];
            for (var ref of traceUpdates){
                var node = ref.node, color = ref.color;
                var publicInstance = _class_private_field_loose_base._(this, _getPublicInstanceFromInstance)[_getPublicInstanceFromInstance](node);
                if (publicInstance == null) {
                    return;
                }
                var instanceReactTag = (0, _RendererProxy.findNodeHandle)(node);
                if (instanceReactTag == null) {
                    return;
                }
                // Lazy import to avoid dependency cycle.
                var ReactNativeElementClass = (__webpack_require__(/*! ../../src/private/webapis/dom/nodes/ReactNativeElement */ "./node_modules/react-native/src/private/webapis/dom/nodes/ReactNativeElement.js")/* ["default"] */["default"]);
                if (publicInstance instanceof ReactNativeElementClass) {
                    modernNodesUpdates.push({
                        id: instanceReactTag,
                        instance: publicInstance,
                        color
                    });
                } else {
                    legacyNodesUpdates.push({
                        id: instanceReactTag,
                        instance: publicInstance,
                        color
                    });
                }
            }
            if (modernNodesUpdates.length > 0) {
                _class_private_field_loose_base._(this, _drawTraceUpdatesModern)[_drawTraceUpdatesModern](modernNodesUpdates);
            }
            if (legacyNodesUpdates.length > 0) {
                _class_private_field_loose_base._(this, _drawTraceUpdatesLegacy)[_drawTraceUpdatesLegacy](legacyNodesUpdates);
            }
        };
        _class_private_field_loose_base._(this, _onHighlightElements)[_onHighlightElements] = (nodes)=>{
            // First clear highlights for every container
            for (var subscriber of _class_private_field_loose_base._(this, _registry)[_registry]){
                var _subscriber_debuggingOverlayRef_current;
                (_subscriber_debuggingOverlayRef_current = subscriber.debuggingOverlayRef.current) === null || _subscriber_debuggingOverlayRef_current === void 0 ? void 0 : _subscriber_debuggingOverlayRef_current.clearElementsHighlight();
            }
            // Lazy import to avoid dependency cycle.
            var ReactNativeElementClass = (__webpack_require__(/*! ../../src/private/webapis/dom/nodes/ReactNativeElement */ "./node_modules/react-native/src/private/webapis/dom/nodes/ReactNativeElement.js")/* ["default"] */["default"]);
            var reactNativeElements = [];
            var legacyPublicInstances = [];
            for (var node of nodes){
                var publicInstance = _class_private_field_loose_base._(this, _getPublicInstanceFromInstance)[_getPublicInstanceFromInstance](node);
                if (publicInstance == null) {
                    continue;
                }
                if (publicInstance instanceof ReactNativeElementClass) {
                    reactNativeElements.push(publicInstance);
                } else {
                    legacyPublicInstances.push(publicInstance);
                }
            }
            if (reactNativeElements.length > 0) {
                _class_private_field_loose_base._(this, _onHighlightElementsModern)[_onHighlightElementsModern](reactNativeElements);
            }
            if (legacyPublicInstances.length > 0) {
                _class_private_field_loose_base._(this, _onHighlightElementsLegacy)[_onHighlightElementsLegacy](legacyPublicInstances);
            }
        };
        _class_private_field_loose_base._(this, _onClearElementsHighlights)[_onClearElementsHighlights] = ()=>{
            for (var subscriber of _class_private_field_loose_base._(this, _registry)[_registry]){
                var _subscriber_debuggingOverlayRef_current;
                (_subscriber_debuggingOverlayRef_current = subscriber.debuggingOverlayRef.current) === null || _subscriber_debuggingOverlayRef_current === void 0 ? void 0 : _subscriber_debuggingOverlayRef_current.clearElementsHighlight();
            }
        };
        if ((reactDevToolsHook === null || reactDevToolsHook === void 0 ? void 0 : reactDevToolsHook.reactDevtoolsAgent) != null) {
            _class_private_field_loose_base._(this, _onReactDevToolsAgentAttached)[_onReactDevToolsAgentAttached](reactDevToolsHook.reactDevtoolsAgent);
        }
        reactDevToolsHook === null || reactDevToolsHook === void 0 ? void 0 : (_reactDevToolsHook_on = reactDevToolsHook.on) === null || _reactDevToolsHook_on === void 0 ? void 0 : _reactDevToolsHook_on.call(reactDevToolsHook, 'react-devtools', _class_private_field_loose_base._(this, _onReactDevToolsAgentAttached)[_onReactDevToolsAgentAttached]);
    }
    _create_class._(DebuggingOverlayRegistry, [
        {
            key: "subscribe",
            value: function subscribe(subscriber) {
                _class_private_field_loose_base._(this, _registry)[_registry].add(subscriber);
            }
        },
        {
            key: "unsubscribe",
            value: function unsubscribe(subscriber) {
                var wasPresent = _class_private_field_loose_base._(this, _registry)[_registry].delete(subscriber);
                if (!wasPresent) {
                    console.error('[DebuggingOverlayRegistry] Unexpected argument for unsubscription, which was not previously subscribed:', subscriber);
                }
            }
        }
    ]);
    return DebuggingOverlayRegistry;
}();
function findLowestParentFromRegistryForInstance(instance) {
    var iterator = instance;
    while(iterator != null){
        for (var subscriber of _class_private_field_loose_base._(this, _registry)[_registry]){
            if (subscriber.rootViewRef.current === iterator) {
                return subscriber;
            }
        }
        iterator = iterator.parentElement;
    }
    return null;
}
function findLowestParentFromRegistryForInstanceLegacy(instance) {
    var candidates = [];
    for (var subscriber of _class_private_field_loose_base._(this, _registry)[_registry]){
        if (subscriber.rootViewRef.current != null && // $FlowFixMe[incompatible-call] There is a lot of stuff to untangle to make types for refs work.
        (0, _RendererProxy.isChildPublicInstance)(subscriber.rootViewRef.current, instance)) {
            candidates.push(subscriber);
        }
    }
    if (candidates.length === 0) {
        // In some cases, like with LogBox in custom integrations, the whole subtree for specific React root might not have an AppContainer.
        return null;
    }
    if (candidates.length === 1) {
        return candidates[0];
    }
    // If there are multiple candidates, we need to find the lowest.
    // Imagine the case when there is a modal on the screen, both of them will have their own AppContainers,
    // but modal's AppContainer is a child of screen's AppContainer.
    var candidatesWithNoChildren = [];
    for (var potentialParent of candidates){
        var shouldSkipThisParent = false;
        if (potentialParent.rootViewRef.current == null) {
            continue;
        }
        for (var potentialChild of candidates){
            if (potentialChild === potentialParent) {
                continue;
            }
            if (potentialChild.rootViewRef.current == null) {
                continue;
            }
            if ((0, _RendererProxy.isChildPublicInstance)(// $FlowFixMe[incompatible-call] There is a lot of stuff to untangle to make types for refs work.
            potentialParent.rootViewRef.current, // $FlowFixMe[incompatible-call] There is a lot of stuff to untangle to make types for refs work.
            potentialChild.rootViewRef.current)) {
                shouldSkipThisParent = true;
                break;
            }
        }
        if (!shouldSkipThisParent) {
            candidatesWithNoChildren.push(potentialParent);
        }
    }
    if (candidatesWithNoChildren.length === 0) {
        console.error('[DebuggingOverlayRegistry] Unexpected circular relationship between AppContainers');
        return null;
    } else if (candidatesWithNoChildren.length > 1) {
        console.error('[DebuggingOverlayRegistry] Unexpected multiple options for lowest parent AppContainer');
        return null;
    }
    return candidatesWithNoChildren[0];
}
function drawTraceUpdatesModern(updates) {
    var parentToTraceUpdatesMap = new Map();
    for (var ref of updates){
        var id = ref.id, instance = ref.instance, color = ref.color;
        var parent = _class_private_field_loose_base._(this, _findLowestParentFromRegistryForInstance)[_findLowestParentFromRegistryForInstance](instance);
        if (parent == null) {
            continue;
        }
        var traceUpdatesForParent = parentToTraceUpdatesMap.get(parent);
        if (traceUpdatesForParent == null) {
            traceUpdatesForParent = [];
            parentToTraceUpdatesMap.set(parent, traceUpdatesForParent);
        }
        var _instance_getBoundingClientRect = instance.getBoundingClientRect(), x = _instance_getBoundingClientRect.x, y = _instance_getBoundingClientRect.y, width = _instance_getBoundingClientRect.width, height = _instance_getBoundingClientRect.height;
        var rootViewInstance = parent.rootViewRef.current;
        if (rootViewInstance == null) {
            continue;
        }
        var // $FlowFixMe[prop-missing] React Native View is not a descendant of ReactNativeElement yet. We should be able to remove it once Paper is no longer supported.
        _rootViewInstance_getBoundingClientRect = rootViewInstance.getBoundingClientRect(), parentX = _rootViewInstance_getBoundingClientRect.x, parentY = _rootViewInstance_getBoundingClientRect.y;
        // DebuggingOverlay will scale to the same size as a Root view. Substract Root view position from the element position
        // to calculate the element's position relatively to its parent DebuggingOverlay.
        // We can't call `getBoundingClientRect` on the debuggingOverlayRef, because its a ref for the native component, which doesn't have it, hopefully yet.
        traceUpdatesForParent.push({
            id,
            rectangle: {
                x: x - parentX,
                y: y - parentY,
                width,
                height
            },
            color: (0, _processColor.default)(color)
        });
    }
    for (var ref1 of parentToTraceUpdatesMap.entries()){
        var _ref = _sliced_to_array._(ref1, 2), parent1 = _ref[0], traceUpdates = _ref[1];
        var _debuggingOverlayRef_current;
        var debuggingOverlayRef = parent1.debuggingOverlayRef;
        (_debuggingOverlayRef_current = debuggingOverlayRef.current) === null || _debuggingOverlayRef_current === void 0 ? void 0 : _debuggingOverlayRef_current.highlightTraceUpdates(traceUpdates);
    }
}
function drawTraceUpdatesLegacy(updates) {
    var _this, _loop = function(ref) {
        var id = ref.id, instance = ref.instance, color = ref.color;
        var parent = _class_private_field_loose_base._(_this, _findLowestParentFromRegistryForInstanceLegacy)[_findLowestParentFromRegistryForInstanceLegacy](instance);
        if (parent == null) {
            return "continue";
        }
        var traceUpdatesPromisesForParent = parentToTraceUpdatesPromisesMap.get(parent);
        if (traceUpdatesPromisesForParent == null) {
            traceUpdatesPromisesForParent = [];
            parentToTraceUpdatesPromisesMap.set(parent, traceUpdatesPromisesForParent);
        }
        var frameToDrawPromise = new Promise((resolve, reject)=>{
            instance.measure((x, y, width, height, left, top)=>{
                // measure can execute callback without any values provided to signal error.
                if (left == null || top == null || width == null || height == null) {
                    reject('Unexpectedly failed to call measure on an instance.');
                }
                resolve({
                    id,
                    rectangle: {
                        x: left,
                        y: top,
                        width,
                        height
                    },
                    color: (0, _processColor.default)(color)
                });
            });
        });
        traceUpdatesPromisesForParent.push(frameToDrawPromise);
    }, _loop1 = function(ref1) {
        var _ref = _sliced_to_array._(ref1, 2), parent = _ref[0], traceUpdatesPromises = _ref[1];
        Promise.all(traceUpdatesPromises).then((resolvedTraceUpdates)=>{
            var _parent_debuggingOverlayRef_current;
            return (_parent_debuggingOverlayRef_current = parent.debuggingOverlayRef.current) === null || _parent_debuggingOverlayRef_current === void 0 ? void 0 : _parent_debuggingOverlayRef_current.highlightTraceUpdates(resolvedTraceUpdates);
        }).catch(()=>{
        // noop. For legacy architecture (Paper) this can happen for root views or LogBox button.
        // LogBox case: it has a separate React root, so `measure` fails.
        // Calling `console.error` here would trigger rendering a new LogBox button, for which we will call measure again, this is a cycle.
        // Don't spam the UI with errors for such cases.
        });
    };
    var parentToTraceUpdatesPromisesMap = new Map();
    for (var ref of updates)_this = this, _loop(ref);
    for (var ref1 of parentToTraceUpdatesPromisesMap.entries())_loop1(ref1);
}
function onHighlightElementsModern(elements) {
    var _loop = function(ref) {
        var _ref = _sliced_to_array._(ref, 2), parent = _ref[0], elementsToHighlight = _ref[1];
        var _parent_debuggingOverlayRef_current;
        var rootViewInstance = parent.rootViewRef.current;
        if (rootViewInstance == null) {
            return {
                v: void void 0
            };
        }
        var // $FlowFixMe[prop-missing] React Native View is not a descendant of ReactNativeElement yet. We should be able to remove it once Paper is no longer supported.
        _rootViewInstance_getBoundingClientRect = rootViewInstance.getBoundingClientRect(), parentX = _rootViewInstance_getBoundingClientRect.x, parentY = _rootViewInstance_getBoundingClientRect.y;
        // DebuggingOverlay will scale to the same size as a Root view. Substract Root view position from the element position
        // to calculate the element's position relatively to its parent DebuggingOverlay.
        // We can't call `getBoundingClientRect` on the debuggingOverlayRef, because its a ref for the native component, which doesn't have it, hopefully yet.
        var elementsRectangles = elementsToHighlight.map((element)=>{
            var _element_getBoundingClientRect = element.getBoundingClientRect(), x = _element_getBoundingClientRect.x, y = _element_getBoundingClientRect.y, width = _element_getBoundingClientRect.width, height = _element_getBoundingClientRect.height;
            return {
                x: x - parentX,
                y: y - parentY,
                width,
                height
            };
        });
        (_parent_debuggingOverlayRef_current = parent.debuggingOverlayRef.current) === null || _parent_debuggingOverlayRef_current === void 0 ? void 0 : _parent_debuggingOverlayRef_current.highlightElements(elementsRectangles);
    };
    var parentToElementsMap = new Map();
    for (var element of elements){
        var parent = _class_private_field_loose_base._(this, _findLowestParentFromRegistryForInstance)[_findLowestParentFromRegistryForInstance](element);
        if (parent == null) {
            continue;
        }
        var childElementOfAParent = parentToElementsMap.get(parent);
        if (childElementOfAParent == null) {
            childElementOfAParent = [];
            parentToElementsMap.set(parent, childElementOfAParent);
        }
        childElementOfAParent.push(element);
    }
    for (var ref of parentToElementsMap.entries()){
        var _ret = _loop(ref);
        if (_type_of._(_ret) === "object") return _ret.v;
    }
}
function onHighlightElementsLegacy(elements) {
    var _loop = function(ref) {
        var _ref = _sliced_to_array._(ref, 2), parent = _ref[0], elementsToHighlight = _ref[1];
        var promises = elementsToHighlight.map((element)=>new Promise((resolve, reject)=>{
                element.measure((x, y, width, height, left, top)=>{
                    // measure can execute callback without any values provided to signal error.
                    if (left == null || top == null || width == null || height == null) {
                        reject('Unexpectedly failed to call measure on an instance.');
                    }
                    resolve({
                        x: left,
                        y: top,
                        width,
                        height
                    });
                });
            }));
        Promise.all(promises).then((resolvedElementsRectangles)=>{
            var _parent_debuggingOverlayRef_current;
            return (_parent_debuggingOverlayRef_current = parent.debuggingOverlayRef.current) === null || _parent_debuggingOverlayRef_current === void 0 ? void 0 : _parent_debuggingOverlayRef_current.highlightElements(resolvedElementsRectangles);
        }).catch(()=>{
        // noop. For legacy architecture (Paper) this can happen for root views or LogBox button.
        // LogBox case: it has a separate React root, so `measure` fails.
        // Calling `console.error` here would trigger rendering a new LogBox button, for which we will call measure again, this is a cycle.
        // Don't spam the UI with errors for such cases.
        });
    };
    var parentToElementsMap = new Map();
    for (var element of elements){
        var parent = _class_private_field_loose_base._(this, _findLowestParentFromRegistryForInstanceLegacy)[_findLowestParentFromRegistryForInstanceLegacy](element);
        if (parent == null) {
            continue;
        }
        var childElementOfAParent = parentToElementsMap.get(parent);
        if (childElementOfAParent == null) {
            childElementOfAParent = [];
            parentToElementsMap.set(parent, childElementOfAParent);
        }
        childElementOfAParent.push(element);
    }
    for (var ref of parentToElementsMap.entries())_loop(ref);
}
var debuggingOverlayRegistryInstance = new DebuggingOverlayRegistry();
var _default = debuggingOverlayRegistryInstance;


}),
"./node_modules/react-native/Libraries/Debugging/useSubscribeToDebuggingOverlayRegistry.js": 
/*!*************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Debugging/useSubscribeToDebuggingOverlayRegistry.js ***!
  \*************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _DebuggingOverlayRegistry = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./DebuggingOverlayRegistry */ "./node_modules/react-native/Libraries/Debugging/DebuggingOverlayRegistry.js"));
var _react = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
var useSubscribeToDebuggingOverlayRegistry = (rootViewRef, debuggingOverlayRef)=>{
    (0, _react.useEffect)(()=>{
        var subscriber = {
            rootViewRef,
            debuggingOverlayRef
        };
        _DebuggingOverlayRegistry.default.subscribe(subscriber);
        return ()=>_DebuggingOverlayRegistry.default.unsubscribe(subscriber);
    }, [
        rootViewRef,
        debuggingOverlayRef
    ]);
};
var _default = useSubscribeToDebuggingOverlayRegistry;


}),
"./node_modules/react-native/Libraries/Image/Image.android.js": 
/*!********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Image/Image.android.js ***!
  \********************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _async_to_generator = __webpack_require__(/*! @swc/helpers/_/_async_to_generator */ "./node_modules/@swc/helpers/cjs/_async_to_generator.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../StyleSheet/flattenStyle */ "./node_modules/react-native/Libraries/StyleSheet/flattenStyle.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _TextAncestor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Text/TextAncestor */ "./node_modules/react-native/Libraries/Text/TextAncestor.js"));
var _ImageAnalyticsTagContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./ImageAnalyticsTagContext */ "./node_modules/react-native/Libraries/Image/ImageAnalyticsTagContext.js"));
var _ImageInjection = __webpack_require__(/*! ./ImageInjection */ "./node_modules/react-native/Libraries/Image/ImageInjection.js");
var _ImageSourceUtils = __webpack_require__(/*! ./ImageSourceUtils */ "./node_modules/react-native/Libraries/Image/ImageSourceUtils.js");
var _ImageUtils = __webpack_require__(/*! ./ImageUtils */ "./node_modules/react-native/Libraries/Image/ImageUtils.js");
var _ImageViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./ImageViewNativeComponent */ "./node_modules/react-native/Libraries/Image/ImageViewNativeComponent.js"));
var _NativeImageLoaderAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeImageLoaderAndroid */ "./node_modules/react-native/Libraries/Image/NativeImageLoaderAndroid.js"));
var _resolveAssetSource = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./resolveAssetSource */ "./node_modules/react-native/Libraries/Image/resolveAssetSource.js"));
var _TextInlineImageNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./TextInlineImageNativeComponent */ "./node_modules/react-native/Libraries/Image/TextInlineImageNativeComponent.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var _requestId = 1;
function generateRequestId() {
    return _requestId++;
}
/**
 * Retrieve the width and height (in pixels) of an image prior to displaying it
 *
 * See https://reactnative.dev/docs/image#getsize
 */ function getSize(url, success, failure) {
    var promise = _NativeImageLoaderAndroid.default.getSize(url);
    if (typeof success !== 'function') {
        return promise;
    }
    promise.then((sizes)=>success(sizes.width, sizes.height)).catch(failure || function() {
        console.warn('Failed to get size for image: ' + url);
    });
}
/**
 * Retrieve the width and height (in pixels) of an image prior to displaying it
 * with the ability to provide the headers for the request
 *
 * See https://reactnative.dev/docs/image#getsizewithheaders
 */ function getSizeWithHeaders(url, headers, success, failure) {
    var promise = _NativeImageLoaderAndroid.default.getSizeWithHeaders(url, headers);
    if (typeof success !== 'function') {
        return promise;
    }
    promise.then((sizes)=>success(sizes.width, sizes.height)).catch(failure || function() {
        console.warn('Failed to get size for image: ' + url);
    });
}
function prefetchWithMetadata(url, queryRootName, rootTag, callback) {
    // TODO: T79192300 Log queryRootName and rootTag
    return prefetch(url, callback);
}
function prefetch(url, callback) {
    var requestId = generateRequestId();
    callback && callback(requestId);
    return _NativeImageLoaderAndroid.default.prefetchImage(url, requestId);
}
function abortPrefetch(requestId) {
    _NativeImageLoaderAndroid.default.abortRequest(requestId);
}
/**
 * Perform cache interrogation.
 *
 * See https://reactnative.dev/docs/image#querycache
 */ function queryCache(urls) {
    return _async_to_generator._(function*() {
        return _NativeImageLoaderAndroid.default.queryCache(urls);
    })();
}
/**
 * A React component for displaying different types of images,
 * including network images, static resources, temporary local images, and
 * images from local disk, such as the camera roll.
 *
 * See https://reactnative.dev/docs/image
 */ var BaseImage = /*#__PURE__*/ _react.forwardRef((props, forwardedRef)=>{
    var _source_, _props_accessibilityState, _props_accessibilityState1, _props_accessibilityState2, _props_accessibilityState3, _props_accessibilityState4;
    var source = (0, _ImageSourceUtils.getImageSourcesFromImageProps)(props) || {
        uri: undefined,
        width: undefined,
        height: undefined
    };
    var defaultSource = (0, _resolveAssetSource.default)(props.defaultSource);
    var loadingIndicatorSource = (0, _resolveAssetSource.default)(props.loadingIndicatorSource);
    if (props.children) {
        throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
    }
    if (props.defaultSource != null && props.loadingIndicatorSource != null) {
        throw new Error('The <Image> component cannot have defaultSource and loadingIndicatorSource at the same time. Please use either defaultSource or loadingIndicatorSource.');
    }
    var style;
    var sources;
    if (Array.isArray(source)) {
        style = [
            styles.base,
            props.style
        ];
        sources = source;
    } else {
        var uri = source.uri;
        if (uri === '') {
            console.warn('source.uri should not be an empty string');
        }
        var width = source.width ?? props.width;
        var height = source.height ?? props.height;
        style = [
            {
                width,
                height
            },
            styles.base,
            props.style
        ];
        sources = [
            source
        ];
    }
    var onLoadStart = props.onLoadStart, onLoad = props.onLoad, onLoadEnd = props.onLoadEnd, onError = props.onError;
    var nativeProps = _object_spread_props._(_object_spread._({}, props), {
        style,
        shouldNotifyLoadEvents: !!(onLoadStart || onLoad || onLoadEnd || onError),
        // Both iOS and C++ sides expect to have "source" prop, whereas on Android it's "src"
        // (for historical reasons). So in the latter case we populate both "src" and "source",
        // in order to have a better alignment between platforms in the future.
        src: sources,
        source: sources,
        /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found
       * when making Flow check .android.js files. */ headers: (source === null || source === void 0 ? void 0 : (_source_ = source[0]) === null || _source_ === void 0 ? void 0 : _source_.headers) || (source === null || source === void 0 ? void 0 : source.headers),
        defaultSource: defaultSource ? defaultSource.uri : null,
        loadingIndicatorSrc: loadingIndicatorSource ? loadingIndicatorSource.uri : null,
        accessibilityLabel: props['aria-label'] ?? props.accessibilityLabel ?? props.alt,
        accessibilityLabelledBy: (props === null || props === void 0 ? void 0 : props['aria-labelledby']) ?? (props === null || props === void 0 ? void 0 : props.accessibilityLabelledBy),
        accessible: props.alt !== undefined ? true : props.accessible,
        accessibilityState: {
            busy: props['aria-busy'] ?? ((_props_accessibilityState = props.accessibilityState) === null || _props_accessibilityState === void 0 ? void 0 : _props_accessibilityState.busy),
            checked: props['aria-checked'] ?? ((_props_accessibilityState1 = props.accessibilityState) === null || _props_accessibilityState1 === void 0 ? void 0 : _props_accessibilityState1.checked),
            disabled: props['aria-disabled'] ?? ((_props_accessibilityState2 = props.accessibilityState) === null || _props_accessibilityState2 === void 0 ? void 0 : _props_accessibilityState2.disabled),
            expanded: props['aria-expanded'] ?? ((_props_accessibilityState3 = props.accessibilityState) === null || _props_accessibilityState3 === void 0 ? void 0 : _props_accessibilityState3.expanded),
            selected: props['aria-selected'] ?? ((_props_accessibilityState4 = props.accessibilityState) === null || _props_accessibilityState4 === void 0 ? void 0 : _props_accessibilityState4.selected)
        }
    });
    var flattenedStyle = (0, _flattenStyle.default)(style);
    var objectFit = (0, _ImageUtils.convertObjectFitToResizeMode)(flattenedStyle === null || flattenedStyle === void 0 ? void 0 : flattenedStyle.objectFit);
    var resizeMode = objectFit || props.resizeMode || (flattenedStyle === null || flattenedStyle === void 0 ? void 0 : flattenedStyle.resizeMode) || 'cover';
    var actualRef = (0, _ImageInjection.useWrapRefWithImageAttachedCallbacks)(forwardedRef);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageAnalyticsTagContext.default.Consumer, {
        children: (analyticTag)=>{
            var nativePropsWithAnalytics = analyticTag !== null ? _object_spread_props._(_object_spread._({}, nativeProps), {
                internal_analyticTag: analyticTag
            }) : nativeProps;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextAncestor.default.Consumer, {
                children: (hasTextAncestor)=>{
                    if (hasTextAncestor) {
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextInlineImageNativeComponent.default, {
                            // $FlowFixMe[incompatible-type]
                            style: style,
                            resizeMode: resizeMode,
                            headers: nativeProps.headers,
                            src: sources,
                            ref: actualRef
                        });
                    }
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageViewNativeComponent.default, _object_spread_props._(_object_spread._({}, nativePropsWithAnalytics), {
                        resizeMode: resizeMode,
                        ref: actualRef
                    }));
                }
            });
        }
    });
});
var imageComponentDecorator = (0, _ImageInjection.unstable_getImageComponentDecorator)();
if (imageComponentDecorator != null) {
    BaseImage = imageComponentDecorator(BaseImage);
}
// $FlowExpectedError[incompatible-type] Eventually we need to move these functions from statics of the component to exports in the module.
var Image = BaseImage;
Image.displayName = 'Image';
/**
 * Retrieve the width and height (in pixels) of an image prior to displaying it
 *
 * See https://reactnative.dev/docs/image#getsize
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.getSize = getSize;
/**
 * Retrieve the width and height (in pixels) of an image prior to displaying it
 * with the ability to provide the headers for the request
 *
 * See https://reactnative.dev/docs/image#getsizewithheaders
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.getSizeWithHeaders = getSizeWithHeaders;
/**
 * Prefetches a remote image for later use by downloading it to the disk
 * cache
 *
 * See https://reactnative.dev/docs/image#prefetch
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.prefetch = prefetch;
/**
 * Prefetches a remote image for later use by downloading it to the disk
 * cache, and adds metadata for queryRootName and rootTag.
 *
 * See https://reactnative.dev/docs/image#prefetch
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.prefetchWithMetadata = prefetchWithMetadata;
/**
 * Abort prefetch request.
 *
 * See https://reactnative.dev/docs/image#abortprefetch
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.abortPrefetch = abortPrefetch;
/**
 * Perform cache interrogation.
 *
 * See https://reactnative.dev/docs/image#querycache
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.queryCache = queryCache;
/**
 * Resolves an asset reference into an object.
 *
 * See https://reactnative.dev/docs/image#resolveassetsource
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.resolveAssetSource = _resolveAssetSource.default;
var styles = _StyleSheet.default.create({
    base: {
        overflow: 'hidden'
    }
});
module.exports = Image;


}),
"./node_modules/react-native/Libraries/Image/ImageAnalyticsTagContext.js": 
/*!*******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Image/ImageAnalyticsTagContext.js ***!
  \*******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var Context = /*#__PURE__*/ _react.createContext(null);
if (true) {
    Context.displayName = 'ImageAnalyticsTagContext';
}
var _default = Context;


}),
"./node_modules/react-native/Libraries/Image/ImageInjection.js": 
/*!*********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Image/ImageInjection.js ***!
  \*********************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get unstable_getImageComponentDecorator () {
        return unstable_getImageComponentDecorator;
    },
    get unstable_registerImageAttachedCallback () {
        return unstable_registerImageAttachedCallback;
    },
    get unstable_setImageComponentDecorator () {
        return unstable_setImageComponentDecorator;
    },
    get unstable_unregisterImageAttachedCallback () {
        return unstable_unregisterImageAttachedCallback;
    },
    get useWrapRefWithImageAttachedCallbacks () {
        return useWrapRefWithImageAttachedCallbacks;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/useMergeRefs */ "./node_modules/react-native/Libraries/Utilities/useMergeRefs.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var injectedImageComponentDecorator;
function unstable_setImageComponentDecorator(imageComponentDecorator) {
    injectedImageComponentDecorator = imageComponentDecorator;
}
function unstable_getImageComponentDecorator() {
    return injectedImageComponentDecorator;
}
var imageAttachedCallbacks = new Set();
function unstable_registerImageAttachedCallback(callback) {
    imageAttachedCallbacks.add(callback);
}
function unstable_unregisterImageAttachedCallback(callback) {
    imageAttachedCallbacks.delete(callback);
}
function useWrapRefWithImageAttachedCallbacks(forwardedRef) {
    var pendingCleanupCallbacks = (0, _react.useRef)([]);
    var imageAttachedCallbacksRef = (0, _react.useRef)(null);
    if (imageAttachedCallbacksRef.current == null) {
        imageAttachedCallbacksRef.current = (node)=>{
            if (node == null) {
                if (pendingCleanupCallbacks.current.length > 0) {
                    pendingCleanupCallbacks.current.forEach((cb)=>cb());
                    pendingCleanupCallbacks.current = [];
                }
            } else {
                imageAttachedCallbacks.forEach((imageAttachedCallback)=>{
                    var maybeCleanupCallback = imageAttachedCallback(node);
                    if (maybeCleanupCallback != null) {
                        pendingCleanupCallbacks.current.push(maybeCleanupCallback);
                    }
                });
            }
        };
    }
    // `useMergeRefs` returns a stable ref if its arguments don't change.
    return (0, _useMergeRefs.default)(forwardedRef, imageAttachedCallbacksRef.current);
}


}),
"./node_modules/react-native/Libraries/Image/ImageSourceUtils.js": 
/*!***********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Image/ImageSourceUtils.js ***!
  \***********************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getImageSourcesFromImageProps", ({
    enumerable: true,
    get: function() {
        return getImageSourcesFromImageProps;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _resolveAssetSource = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./resolveAssetSource */ "./node_modules/react-native/Libraries/Image/resolveAssetSource.js"));
function getImageSourcesFromImageProps(imageProps) {
    var source = (0, _resolveAssetSource.default)(imageProps.source);
    var sources;
    var crossOrigin = imageProps.crossOrigin, referrerPolicy = imageProps.referrerPolicy, src = imageProps.src, srcSet = imageProps.srcSet, width = imageProps.width, height = imageProps.height;
    var headers = {};
    if (crossOrigin === 'use-credentials') {
        headers['Access-Control-Allow-Credentials'] = 'true';
    }
    if (referrerPolicy != null) {
        headers['Referrer-Policy'] = referrerPolicy;
    }
    if (srcSet != null) {
        var sourceList = [];
        var srcSetList = srcSet.split(', ');
        // `src` prop should be used with default scale if `srcSet` does not have 1x scale.
        var shouldUseSrcForDefaultScale = true;
        srcSetList.forEach((imageSrc)=>{
            var _imageSrc_split = _sliced_to_array._(imageSrc.split(' '), 2), uri = _imageSrc_split[0], tmp = _imageSrc_split[1], xScale = tmp === void 0 ? '1x' : tmp;
            if (!xScale.endsWith('x')) {
                console.warn('The provided format for scale is not supported yet. Please use scales like 1x, 2x, etc.');
            } else {
                var scale = parseInt(xScale.split('x')[0], 10);
                if (!isNaN(scale)) {
                    // 1x scale is provided in `srcSet` prop so ignore the `src` prop if provided.
                    shouldUseSrcForDefaultScale = scale === 1 ? false : shouldUseSrcForDefaultScale;
                    sourceList.push({
                        headers: headers,
                        scale,
                        uri,
                        width,
                        height
                    });
                }
            }
        });
        if (shouldUseSrcForDefaultScale && src != null) {
            sourceList.push({
                headers: headers,
                scale: 1,
                uri: src,
                width,
                height
            });
        }
        if (sourceList.length === 0) {
            console.warn('The provided value for srcSet is not valid.');
        }
        sources = sourceList;
    } else if (src != null) {
        sources = [
            {
                uri: src,
                headers: headers,
                width,
                height
            }
        ];
    } else {
        sources = source;
    }
    return sources;
}


}),
"./node_modules/react-native/Libraries/Image/ImageUtils.js": 
/*!*****************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Image/ImageUtils.js ***!
  \*****************************************************************/
(function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "convertObjectFitToResizeMode", ({
    enumerable: true,
    get: function() {
        return convertObjectFitToResizeMode;
    }
}));
var objectFitMap = {
    contain: 'contain',
    cover: 'cover',
    fill: 'stretch',
    'scale-down': 'contain',
    none: 'none'
};
function convertObjectFitToResizeMode(objectFit) {
    return objectFit != null ? objectFitMap[objectFit] : undefined;
}


}),
"./node_modules/react-native/Libraries/Inspector/BorderBox.js": 
/*!********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Inspector/BorderBox.js ***!
  \********************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var View = __webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js");
function BorderBox(ref) {
    var children = ref.children, box = ref.box, style = ref.style;
    if (!box) {
        return children;
    }
    var borderStyle = {
        borderTopWidth: box.top,
        borderBottomWidth: box.bottom,
        borderLeftWidth: box.left,
        borderRightWidth: box.right
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
        style: [
            borderStyle,
            style
        ],
        children: children
    });
}
module.exports = BorderBox;


}),
"./node_modules/react-native/Libraries/Inspector/BoxInspector.js": 
/*!***********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Inspector/BoxInspector.js ***!
  \***********************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var View = __webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js");
var StyleSheet = __webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js");
var Text = __webpack_require__(/*! ../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js");
var resolveBoxStyle = __webpack_require__(/*! ./resolveBoxStyle */ "./node_modules/react-native/Libraries/Inspector/resolveBoxStyle.js");
var blank = {
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
};
function BoxInspector(ref) {
    var style = ref.style, frame = ref.frame;
    var margin = style && resolveBoxStyle('margin', style) || blank;
    var padding = style && resolveBoxStyle('padding', style) || blank;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(BoxContainer, {
        title: "margin",
        titleStyle: styles.marginLabel,
        box: margin,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(BoxContainer, {
            title: "padding",
            box: padding,
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(View, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(Text, {
                        style: styles.innerText,
                        children: [
                            "(",
                            ((frame === null || frame === void 0 ? void 0 : frame.left) || 0).toFixed(1),
                            ", ",
                            ((frame === null || frame === void 0 ? void 0 : frame.top) || 0).toFixed(1),
                            ")"
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(Text, {
                        style: styles.innerText,
                        children: [
                            ((frame === null || frame === void 0 ? void 0 : frame.width) || 0).toFixed(1),
                            " \xd7",
                            ' ',
                            ((frame === null || frame === void 0 ? void 0 : frame.height) || 0).toFixed(1)
                        ]
                    })
                ]
            })
        })
    });
}
function BoxContainer(ref) {
    var title = ref.title, titleStyle = ref.titleStyle, box = ref.box, children = ref.children;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(View, {
        style: styles.box,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(View, {
                style: styles.row,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                        style: [
                            titleStyle,
                            styles.label
                        ],
                        children: title
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                        style: styles.boxText,
                        children: box.top
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(View, {
                style: styles.row,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                        style: styles.boxText,
                        children: box.left
                    }),
                    children,
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                        style: styles.boxText,
                        children: box.right
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                style: styles.boxText,
                children: box.bottom
            })
        ]
    });
}
var styles = StyleSheet.create({
    row: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-around'
    },
    marginLabel: {
        width: 60
    },
    label: {
        fontSize: 10,
        color: 'rgb(255,100,0)',
        marginLeft: 5,
        flex: 1,
        textAlign: 'left',
        top: -3
    },
    innerText: {
        color: 'yellow',
        fontSize: 12,
        textAlign: 'center',
        width: 70
    },
    box: {
        borderWidth: 1,
        borderColor: 'grey'
    },
    boxText: {
        color: 'white',
        fontSize: 12,
        marginHorizontal: 3,
        marginVertical: 2,
        textAlign: 'center'
    }
});
module.exports = BoxInspector;


}),
"./node_modules/react-native/Libraries/Inspector/ElementBox.js": 
/*!*********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Inspector/ElementBox.js ***!
  \*********************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var View = __webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js");
var flattenStyle = __webpack_require__(/*! ../StyleSheet/flattenStyle */ "./node_modules/react-native/Libraries/StyleSheet/flattenStyle.js");
var StyleSheet = __webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js");
var Dimensions = (__webpack_require__(/*! ../Utilities/Dimensions */ "./node_modules/react-native/Libraries/Utilities/Dimensions.js")/* ["default"] */["default"]);
var BorderBox = __webpack_require__(/*! ./BorderBox */ "./node_modules/react-native/Libraries/Inspector/BorderBox.js");
var resolveBoxStyle = __webpack_require__(/*! ./resolveBoxStyle */ "./node_modules/react-native/Libraries/Inspector/resolveBoxStyle.js");
function ElementBox(ref) {
    var frame = ref.frame, style = ref.style;
    var flattenedStyle = flattenStyle(style) || {};
    var margin = resolveBoxStyle('margin', flattenedStyle);
    var padding = resolveBoxStyle('padding', flattenedStyle);
    var frameStyle = _object_spread._({}, frame);
    var contentStyle = {
        width: frame.width,
        height: frame.height
    };
    if (margin != null) {
        margin = resolveRelativeSizes(margin);
        frameStyle.top -= margin.top;
        frameStyle.left -= margin.left;
        frameStyle.height += margin.top + margin.bottom;
        frameStyle.width += margin.left + margin.right;
        if (margin.top < 0) {
            contentStyle.height += margin.top;
        }
        if (margin.bottom < 0) {
            contentStyle.height += margin.bottom;
        }
        if (margin.left < 0) {
            contentStyle.width += margin.left;
        }
        if (margin.right < 0) {
            contentStyle.width += margin.right;
        }
    }
    if (padding != null) {
        padding = resolveRelativeSizes(padding);
        contentStyle.width -= padding.left + padding.right;
        contentStyle.height -= padding.top + padding.bottom;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
        style: [
            styles.frame,
            frameStyle
        ],
        pointerEvents: "none",
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(BorderBox, {
            box: margin,
            style: styles.margin,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(BorderBox, {
                box: padding,
                style: styles.padding,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                    style: [
                        styles.content,
                        contentStyle
                    ]
                })
            })
        })
    });
}
var styles = StyleSheet.create({
    frame: {
        position: 'absolute'
    },
    content: {
        backgroundColor: 'rgba(200, 230, 255, 0.8)'
    },
    padding: {
        borderColor: 'rgba(77, 255, 0, 0.3)'
    },
    margin: {
        borderColor: 'rgba(255, 132, 0, 0.3)'
    }
});
/**
 * Resolves relative sizes (percentages and auto) in a style object.
 *
 * @param style the style to resolve
 * @return a modified copy
 */ function resolveRelativeSizes(style) {
    var resolvedStyle = _object_spread._({}, style);
    resolveSizeInPlace(resolvedStyle, 'top', 'height');
    resolveSizeInPlace(resolvedStyle, 'right', 'width');
    resolveSizeInPlace(resolvedStyle, 'bottom', 'height');
    resolveSizeInPlace(resolvedStyle, 'left', 'width');
    return resolvedStyle;
}
/**
 * Resolves the given size of a style object in place.
 *
 * @param style the style object to modify
 * @param direction the direction to resolve (e.g. 'top')
 * @param dimension the window dimension that this direction belongs to (e.g. 'height')
 */ function resolveSizeInPlace(style, direction, dimension) {
    // $FlowFixMe[invalid-computed-prop]
    if (style[direction] !== null && typeof style[direction] === 'string') {
        if (style[direction].indexOf('%') !== -1) {
            // $FlowFixMe[prop-missing]
            style[direction] = // $FlowFixMe[invalid-computed-prop]
            parseFloat(style[direction]) / 100.0 * // $FlowFixMe[invalid-computed-prop]
            Dimensions.get('window')[dimension];
        }
        // $FlowFixMe[invalid-computed-prop]
        if (style[direction] === 'auto') {
            // Ignore auto sizing in frame drawing due to complexity of correctly rendering this
            // $FlowFixMe[prop-missing]
            style[direction] = 0;
        }
    }
}
module.exports = ElementBox;


}),
"./node_modules/react-native/Libraries/Inspector/ElementProperties.js": 
/*!****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Inspector/ElementProperties.js ***!
  \****************************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var TouchableHighlight = __webpack_require__(/*! ../Components/Touchable/TouchableHighlight */ "./node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js");
var TouchableWithoutFeedback = __webpack_require__(/*! ../Components/Touchable/TouchableWithoutFeedback */ "./node_modules/react-native/Libraries/Components/Touchable/TouchableWithoutFeedback.js");
var View = __webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js");
var flattenStyle = __webpack_require__(/*! ../StyleSheet/flattenStyle */ "./node_modules/react-native/Libraries/StyleSheet/flattenStyle.js");
var StyleSheet = __webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js");
var Text = __webpack_require__(/*! ../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js");
var mapWithSeparator = __webpack_require__(/*! ../Utilities/mapWithSeparator */ "./node_modules/react-native/Libraries/Utilities/mapWithSeparator.js");
var BoxInspector = __webpack_require__(/*! ./BoxInspector */ "./node_modules/react-native/Libraries/Inspector/BoxInspector.js");
var StyleInspector = __webpack_require__(/*! ./StyleInspector */ "./node_modules/react-native/Libraries/Inspector/StyleInspector.js");
var React = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
var ElementProperties = /*#__PURE__*/ function(_React_Component) {
    _inherits._(ElementProperties, _React_Component);
    function ElementProperties() {
        _class_call_check._(this, ElementProperties);
        return _call_super._(this, ElementProperties, arguments);
    }
    _create_class._(ElementProperties, [
        {
            key: "render",
            value: function render() {
                var style = flattenStyle(this.props.style);
                var selection = this.props.selection;
                // Without the `TouchableWithoutFeedback`, taps on this inspector pane
                // would change the inspected element to whatever is under the inspector
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(TouchableWithoutFeedback, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(View, {
                        style: styles.info,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                                style: styles.breadcrumb,
                                children: this.props.hierarchy != null && mapWithSeparator(this.props.hierarchy, (hierarchyItem, i)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(TouchableHighlight, {
                                        style: [
                                            styles.breadItem,
                                            i === selection && styles.selected
                                        ],
                                        // $FlowFixMe[not-a-function] found when converting React.createClass to ES6
                                        onPress: ()=>this.props.setSelection(i),
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                                            style: styles.breadItemText,
                                            children: hierarchyItem.name
                                        })
                                    }, 'item-' + i), (i)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                                        style: styles.breadSep,
                                        children: "\u25B8"
                                    }, 'sep-' + i))
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(View, {
                                style: styles.row,
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                                        style: styles.col,
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(StyleInspector, {
                                            style: style
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(BoxInspector, {
                                        style: style,
                                        frame: this.props.frame
                                    })
                                ]
                            })
                        ]
                    })
                });
            }
        }
    ]);
    return ElementProperties;
}(React.Component);
var styles = StyleSheet.create({
    breadSep: {
        fontSize: 8,
        color: 'white'
    },
    breadcrumb: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        alignItems: 'flex-start',
        marginBottom: 5
    },
    selected: {
        borderColor: 'white',
        borderRadius: 5
    },
    breadItem: {
        borderWidth: 1,
        borderColor: 'transparent',
        marginHorizontal: 2
    },
    breadItemText: {
        fontSize: 10,
        color: 'white',
        marginHorizontal: 5
    },
    row: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between'
    },
    col: {
        flex: 1
    },
    info: {
        padding: 10
    }
});
module.exports = ElementProperties;


}),
"./node_modules/react-native/Libraries/Inspector/Inspector.js": 
/*!********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Inspector/Inspector.js ***!
  \********************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _SafeAreaView_INTERNAL_DO_NOT_USE = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../src/private/components/SafeAreaView_INTERNAL_DO_NOT_USE */ "./node_modules/react-native/src/private/components/SafeAreaView_INTERNAL_DO_NOT_USE.js"));
var View = __webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js");
var PressabilityDebug = __webpack_require__(/*! ../Pressability/PressabilityDebug */ "./node_modules/react-native/Libraries/Pressability/PressabilityDebug.js");
var findNodeHandle = (__webpack_require__(/*! ../ReactNative/RendererProxy */ "./node_modules/react-native/Libraries/ReactNative/RendererProxy.js")/* .findNodeHandle */.findNodeHandle);
var StyleSheet = __webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js");
var Dimensions = (__webpack_require__(/*! ../Utilities/Dimensions */ "./node_modules/react-native/Libraries/Utilities/Dimensions.js")/* ["default"] */["default"]);
var Platform = __webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js");
var getInspectorDataForViewAtPoint = __webpack_require__(/*! ./getInspectorDataForViewAtPoint */ "./node_modules/react-native/Libraries/Inspector/getInspectorDataForViewAtPoint.js");
var InspectorOverlay = __webpack_require__(/*! ./InspectorOverlay */ "./node_modules/react-native/Libraries/Inspector/InspectorOverlay.js");
var InspectorPanel = __webpack_require__(/*! ./InspectorPanel */ "./node_modules/react-native/Libraries/Inspector/InspectorPanel.js");
var React = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
var useState = React.useState;
function Inspector(ref) {
    var inspectedViewRef = ref.inspectedViewRef, onRequestRerenderApp = ref.onRequestRerenderApp, reactDevToolsAgent = ref.reactDevToolsAgent;
    var _useState = _sliced_to_array._(useState('elements-inspector'), 2), selectedTab = _useState[0], setSelectedTab = _useState[1];
    var _useState1 = _sliced_to_array._(useState('bottom'), 2), panelPosition = _useState1[0], setPanelPosition = _useState1[1];
    var _useState2 = _sliced_to_array._(useState(null), 2), inspectedElement = _useState2[0], setInspectedElement = _useState2[1];
    var _useState3 = _sliced_to_array._(useState(null), 2), selectionIndex = _useState3[0], setSelectionIndex = _useState3[1];
    var _useState4 = _sliced_to_array._(useState(null), 2), elementsHierarchy = _useState4[0], setElementsHierarchy = _useState4[1];
    var setSelection = (i)=>{
        var hierarchyItem = elementsHierarchy === null || elementsHierarchy === void 0 ? void 0 : elementsHierarchy[i];
        if (hierarchyItem == null) {
            return;
        }
        // We pass in findNodeHandle as the method is injected
        var _hierarchyItem_getInspectorData = hierarchyItem.getInspectorData(findNodeHandle), measure = _hierarchyItem_getInspectorData.measure, props = _hierarchyItem_getInspectorData.props;
        measure((x, y, width, height, left, top)=>{
            // $FlowFixMe[incompatible-call] `props` from InspectorData are defined as <string, string> dictionary, which is incompatible with ViewStyleProp
            setInspectedElement({
                frame: {
                    left,
                    top,
                    width,
                    height
                },
                style: props.style
            });
            setSelectionIndex(i);
        });
    };
    var onTouchPoint = (locationX, locationY)=>{
        var setTouchedViewData = (viewData)=>{
            var hierarchy = viewData.hierarchy, props = viewData.props, selectedIndex = viewData.selectedIndex, frame = viewData.frame, pointerY = viewData.pointerY, touchedViewTag = viewData.touchedViewTag, closestInstance = viewData.closestInstance;
            // Sync the touched view with React DevTools.
            // Note: This is Paper only. To support Fabric,
            // DevTools needs to be updated to not rely on view tags.
            if (reactDevToolsAgent) {
                reactDevToolsAgent.selectNode(findNodeHandle(touchedViewTag));
                if (closestInstance != null) {
                    reactDevToolsAgent.selectNode(closestInstance);
                }
            }
            setPanelPosition(pointerY > Dimensions.get('window').height / 2 ? 'top' : 'bottom');
            setSelectionIndex(selectedIndex);
            setElementsHierarchy(hierarchy);
            // $FlowFixMe[incompatible-call] `props` from InspectorData are defined as <string, string> dictionary, which is incompatible with ViewStyleProp
            setInspectedElement({
                frame,
                style: props.style
            });
        };
        getInspectorDataForViewAtPoint(inspectedViewRef.current, locationX, locationY, (viewData)=>{
            setTouchedViewData(viewData);
            return false;
        });
    };
    var setInspecting = (enabled)=>{
        setSelectedTab(enabled ? 'elements-inspector' : null);
        setInspectedElement(null);
    };
    var setPerfing = (enabled)=>{
        setSelectedTab(enabled ? 'performance-profiling' : null);
        setInspectedElement(null);
    };
    var setNetworking = (enabled)=>{
        setSelectedTab(enabled ? 'network-profiling' : null);
        setInspectedElement(null);
    };
    var setTouchTargeting = (val)=>{
        PressabilityDebug.setEnabled(val);
        onRequestRerenderApp();
    };
    var panelContainerStyle = panelPosition === 'bottom' ? {
        bottom: 0
    } : Platform.select({
        ios: {
            top: 0
        },
        default: {
            top: 0
        }
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(View, {
        style: styles.container,
        pointerEvents: "box-none",
        children: [
            selectedTab === 'elements-inspector' && /*#__PURE__*/ (0, _jsxruntime.jsx)(InspectorOverlay, {
                inspected: inspectedElement,
                onTouchPoint: onTouchPoint
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_SafeAreaView_INTERNAL_DO_NOT_USE.default, {
                style: [
                    styles.panelContainer,
                    panelContainerStyle
                ],
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(InspectorPanel, {
                    devtoolsIsOpen: !!reactDevToolsAgent,
                    inspecting: selectedTab === 'elements-inspector',
                    perfing: selectedTab === 'performance-profiling',
                    setPerfing: setPerfing,
                    setInspecting: setInspecting,
                    inspected: inspectedElement,
                    hierarchy: elementsHierarchy,
                    selection: selectionIndex,
                    setSelection: setSelection,
                    touchTargeting: PressabilityDebug.isEnabled(),
                    setTouchTargeting: setTouchTargeting,
                    networking: selectedTab === 'network-profiling',
                    setNetworking: setNetworking
                })
            })
        ]
    });
}
var styles = StyleSheet.create({
    container: {
        position: 'absolute',
        backgroundColor: 'transparent',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
    },
    panelContainer: {
        position: 'absolute',
        left: 0,
        right: 0
    }
});
module.exports = Inspector;


}),
"./node_modules/react-native/Libraries/Inspector/InspectorOverlay.js": 
/*!***************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Inspector/InspectorOverlay.js ***!
  \***************************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var View = __webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js");
var StyleSheet = __webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js");
var ElementBox = __webpack_require__(/*! ./ElementBox */ "./node_modules/react-native/Libraries/Inspector/ElementBox.js");
var React = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
function InspectorOverlay(ref) {
    var inspected = ref.inspected, onTouchPoint = ref.onTouchPoint;
    var findViewForTouchEvent = (e)=>{
        var _e_nativeEvent_touches_ = e.nativeEvent.touches[0], locationX = _e_nativeEvent_touches_.locationX, locationY = _e_nativeEvent_touches_.locationY;
        onTouchPoint(locationX, locationY);
    };
    var handleStartShouldSetResponder = (e)=>{
        findViewForTouchEvent(e);
        return true;
    };
    var content = null;
    if (inspected) {
        content = /*#__PURE__*/ (0, _jsxruntime.jsx)(ElementBox, {
            frame: inspected.frame,
            style: inspected.style
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
        onStartShouldSetResponder: handleStartShouldSetResponder,
        onResponderMove: findViewForTouchEvent,
        nativeID: "inspectorOverlay",
        /* TODO: T68258846. */ style: styles.inspector,
        children: content
    });
}
var styles = StyleSheet.create({
    inspector: {
        backgroundColor: 'transparent',
        position: 'absolute',
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
    }
});
module.exports = InspectorOverlay;


}),
"./node_modules/react-native/Libraries/Inspector/InspectorPanel.js": 
/*!*************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Inspector/InspectorPanel.js ***!
  \*************************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _SafeAreaView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Components/SafeAreaView/SafeAreaView */ "./node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js"));
var ScrollView = __webpack_require__(/*! ../Components/ScrollView/ScrollView */ "./node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js");
var TouchableHighlight = __webpack_require__(/*! ../Components/Touchable/TouchableHighlight */ "./node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js");
var View = __webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js");
var StyleSheet = __webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js");
var Text = __webpack_require__(/*! ../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js");
var ElementProperties = __webpack_require__(/*! ./ElementProperties */ "./node_modules/react-native/Libraries/Inspector/ElementProperties.js");
var NetworkOverlay = __webpack_require__(/*! ./NetworkOverlay */ "./node_modules/react-native/Libraries/Inspector/NetworkOverlay.js");
var PerformanceOverlay = __webpack_require__(/*! ./PerformanceOverlay */ "./node_modules/react-native/Libraries/Inspector/PerformanceOverlay.js");
var React = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
var InspectorPanel = /*#__PURE__*/ function(_React_Component) {
    _inherits._(InspectorPanel, _React_Component);
    function InspectorPanel() {
        _class_call_check._(this, InspectorPanel);
        return _call_super._(this, InspectorPanel, arguments);
    }
    _create_class._(InspectorPanel, [
        {
            key: "renderWaiting",
            value: function renderWaiting() {
                if (this.props.inspecting) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                        style: styles.waitingText,
                        children: "Tap something to inspect it"
                    });
                }
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                    style: styles.waitingText,
                    children: "Nothing is inspected"
                });
            }
        },
        {
            key: "render",
            value: function render() {
                var contents;
                if (this.props.inspected) {
                    contents = /*#__PURE__*/ (0, _jsxruntime.jsx)(ScrollView, {
                        style: styles.properties,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ElementProperties, {
                            style: this.props.inspected.style,
                            frame: this.props.inspected.frame,
                            hierarchy: this.props.hierarchy,
                            selection: this.props.selection,
                            setSelection: this.props.setSelection
                        })
                    });
                } else if (this.props.perfing) {
                    contents = /*#__PURE__*/ (0, _jsxruntime.jsx)(PerformanceOverlay, {});
                } else if (this.props.networking) {
                    contents = /*#__PURE__*/ (0, _jsxruntime.jsx)(NetworkOverlay, {});
                } else {
                    contents = /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                        style: styles.waiting,
                        children: this.renderWaiting()
                    });
                }
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_SafeAreaView.default, {
                    style: styles.container,
                    children: [
                        !this.props.devtoolsIsOpen && contents,
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(View, {
                            style: styles.buttonRow,
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(InspectorPanelButton, {
                                    title: 'Inspect',
                                    pressed: this.props.inspecting,
                                    onClick: this.props.setInspecting
                                }),
                                __webpack_require__.g.RN$Bridgeless === true ? null : // These Inspector Panel sub-features are removed under the New Arch.
                                // See https://github.com/react-native-community/discussions-and-proposals/pull/777
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(InspectorPanelButton, {
                                            title: 'Perf',
                                            pressed: this.props.perfing,
                                            onClick: this.props.setPerfing
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(InspectorPanelButton, {
                                            title: 'Network',
                                            pressed: this.props.networking,
                                            onClick: this.props.setNetworking
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(InspectorPanelButton, {
                                    title: 'Touchables',
                                    pressed: this.props.touchTargeting,
                                    onClick: this.props.setTouchTargeting
                                })
                            ]
                        })
                    ]
                });
            }
        }
    ]);
    return InspectorPanel;
}(React.Component);
var InspectorPanelButton = /*#__PURE__*/ function(_React_Component) {
    _inherits._(InspectorPanelButton, _React_Component);
    function InspectorPanelButton() {
        _class_call_check._(this, InspectorPanelButton);
        return _call_super._(this, InspectorPanelButton, arguments);
    }
    _create_class._(InspectorPanelButton, [
        {
            key: "render",
            value: function render() {
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(TouchableHighlight, {
                    onPress: ()=>this.props.onClick(!this.props.pressed),
                    style: [
                        styles.button,
                        this.props.pressed && styles.buttonPressed
                    ],
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                        style: styles.buttonText,
                        children: this.props.title
                    })
                });
            }
        }
    ]);
    return InspectorPanelButton;
}(React.Component);
var styles = StyleSheet.create({
    buttonRow: {
        flexDirection: 'row'
    },
    button: {
        backgroundColor: 'rgba(0, 0, 0, 0.3)',
        margin: 2,
        height: 30,
        justifyContent: 'center',
        alignItems: 'center'
    },
    buttonPressed: {
        backgroundColor: 'rgba(255, 255, 255, 0.3)'
    },
    buttonText: {
        textAlign: 'center',
        color: 'white',
        margin: 5
    },
    container: {
        backgroundColor: 'rgba(0, 0, 0, 0.7)'
    },
    properties: {
        height: 200
    },
    waiting: {
        height: 100
    },
    waitingText: {
        fontSize: 20,
        textAlign: 'center',
        marginVertical: 20,
        color: 'white'
    }
});
module.exports = InspectorPanel;


}),
"./node_modules/react-native/Libraries/Inspector/NetworkOverlay.js": 
/*!*************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Inspector/NetworkOverlay.js ***!
  \*************************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var ScrollView = __webpack_require__(/*! ../Components/ScrollView/ScrollView */ "./node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js");
var TouchableHighlight = __webpack_require__(/*! ../Components/Touchable/TouchableHighlight */ "./node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js");
var View = __webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js");
var FlatList = __webpack_require__(/*! ../Lists/FlatList */ "./node_modules/react-native/Libraries/Lists/FlatList.js");
var XHRInterceptor = __webpack_require__(/*! ../Network/XHRInterceptor */ "./node_modules/react-native/Libraries/Network/XHRInterceptor.js");
var StyleSheet = __webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js");
var Text = __webpack_require__(/*! ../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js");
var WebSocketInterceptor = __webpack_require__(/*! ../WebSocket/WebSocketInterceptor */ "./node_modules/react-native/Libraries/WebSocket/WebSocketInterceptor.js");
var React = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
var LISTVIEW_CELL_HEIGHT = 15;
// Global id for the intercepted XMLHttpRequest objects.
var nextXHRId = 0;
function getStringByValue(value) {
    if (value === undefined) {
        return 'undefined';
    }
    if (typeof value === 'object') {
        return JSON.stringify(value);
    }
    if (typeof value === 'string' && value.length > 500) {
        return String(value).slice(0, 500).concat('\n***TRUNCATED TO 500 CHARACTERS***');
    }
    return value;
}
function getTypeShortName(type) {
    if (type === 'XMLHttpRequest') {
        return 'XHR';
    } else if (type === 'WebSocket') {
        return 'WS';
    }
    return '';
}
function keyExtractor(request) {
    return String(request.id);
}
/**
 * Show all the intercepted network requests over the InspectorPanel.
 */ var NetworkOverlay = /*#__PURE__*/ function(_React_Component) {
    _inherits._(NetworkOverlay, _React_Component);
    function NetworkOverlay() {
        _class_call_check._(this, NetworkOverlay);
        var _this;
        _this = _call_super._(this, NetworkOverlay, arguments), // Metrics are used to decide when if the request list should be sticky, and
        // scroll to the bottom as new network requests come in, or if the user has
        // intentionally scrolled away from the bottom - to instead flash the scroll bar
        // and keep the current position
        _this._requestsListViewScrollMetrics = {
            offset: 0,
            visibleLength: 0,
            contentLength: 0
        }, // Map of `socketId` -> `index in `this.state.requests`.
        _this._socketIdMap = {}, // Map of `xhr._index` -> `index in `this.state.requests`.
        _this._xhrIdMap = {}, _this.state = {
            detailRowId: null,
            requests: []
        }, _this._renderItem = (ref)=>{
            var item = ref.item, index = ref.index;
            var tableRowViewStyle = [
                styles.tableRow,
                index % 2 === 1 ? styles.tableRowOdd : styles.tableRowEven,
                index === _this.state.detailRowId && styles.tableRowPressed
            ];
            var urlCellViewStyle = styles.urlCellView;
            var methodCellViewStyle = styles.methodCellView;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(TouchableHighlight, {
                onPress: ()=>{
                    _this._pressRow(index);
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(View, {
                        style: tableRowViewStyle,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                                style: urlCellViewStyle,
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                                    style: styles.cellText,
                                    numberOfLines: 1,
                                    children: item.url
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                                style: methodCellViewStyle,
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                                    style: styles.cellText,
                                    numberOfLines: 1,
                                    children: getTypeShortName(item.type)
                                })
                            })
                        ]
                    })
                })
            });
        }, _this._indicateAdditionalRequests = ()=>{
            if (_this._requestsListView) {
                var distanceFromEndThreshold = LISTVIEW_CELL_HEIGHT * 2;
                var _this__requestsListViewScrollMetrics = _this._requestsListViewScrollMetrics, offset = _this__requestsListViewScrollMetrics.offset, visibleLength = _this__requestsListViewScrollMetrics.visibleLength, contentLength = _this__requestsListViewScrollMetrics.contentLength;
                var distanceFromEnd = contentLength - visibleLength - offset;
                var isCloseToEnd = distanceFromEnd <= distanceFromEndThreshold;
                if (isCloseToEnd) {
                    _this._requestsListView.scrollToEnd();
                } else {
                    _this._requestsListView.flashScrollIndicators();
                }
            }
        }, _this._captureRequestsListView = (listRef)=>{
            _this._requestsListView = listRef;
        }, _this._requestsListViewOnScroll = (e)=>{
            _this._requestsListViewScrollMetrics.offset = e.nativeEvent.contentOffset.y;
            _this._requestsListViewScrollMetrics.visibleLength = e.nativeEvent.layoutMeasurement.height;
            _this._requestsListViewScrollMetrics.contentLength = e.nativeEvent.contentSize.height;
        }, _this._scrollDetailToTop = ()=>{
            if (_this._detailScrollView) {
                _this._detailScrollView.scrollTo({
                    y: 0,
                    animated: false
                });
            }
        }, _this._closeButtonClicked = ()=>{
            _this.setState({
                detailRowId: null
            });
        };
        return _this;
    }
    _create_class._(NetworkOverlay, [
        {
            key: "_enableXHRInterception",
            value: function _enableXHRInterception() {
                if (XHRInterceptor.isInterceptorEnabled()) {
                    return;
                }
                // Show the XHR request item in listView as soon as it was opened.
                XHRInterceptor.setOpenCallback((method, url, xhr)=>{
                    // Generate a global id for each intercepted xhr object, add this id
                    // to the xhr object as a private `_index` property to identify it,
                    // so that we can distinguish different xhr objects in callbacks.
                    xhr._index = nextXHRId++;
                    var xhrIndex = this.state.requests.length;
                    this._xhrIdMap[xhr._index] = xhrIndex;
                    var _xhr = {
                        id: xhrIndex,
                        type: 'XMLHttpRequest',
                        method: method,
                        url: url
                    };
                    this.setState({
                        requests: this.state.requests.concat(_xhr)
                    }, this._indicateAdditionalRequests);
                });
                XHRInterceptor.setRequestHeaderCallback((header, value, xhr)=>{
                    // $FlowFixMe[prop-missing]
                    var xhrIndex = this._getRequestIndexByXHRID(xhr._index);
                    if (xhrIndex === -1) {
                        return;
                    }
                    this.setState((ref)=>{
                        var requests = ref.requests;
                        var networkRequestInfo = requests[xhrIndex];
                        if (!networkRequestInfo.requestHeaders) {
                            networkRequestInfo.requestHeaders = {};
                        }
                        networkRequestInfo.requestHeaders[header] = value;
                        return {
                            requests
                        };
                    });
                });
                XHRInterceptor.setSendCallback((data, xhr)=>{
                    // $FlowFixMe[prop-missing]
                    var xhrIndex = this._getRequestIndexByXHRID(xhr._index);
                    if (xhrIndex === -1) {
                        return;
                    }
                    this.setState((ref)=>{
                        var requests = ref.requests;
                        var networkRequestInfo = requests[xhrIndex];
                        networkRequestInfo.dataSent = data;
                        return {
                            requests
                        };
                    });
                });
                XHRInterceptor.setHeaderReceivedCallback((type, size, responseHeaders, xhr)=>{
                    // $FlowFixMe[prop-missing]
                    var xhrIndex = this._getRequestIndexByXHRID(xhr._index);
                    if (xhrIndex === -1) {
                        return;
                    }
                    this.setState((ref)=>{
                        var requests = ref.requests;
                        var networkRequestInfo = requests[xhrIndex];
                        networkRequestInfo.responseContentType = type;
                        networkRequestInfo.responseSize = size;
                        networkRequestInfo.responseHeaders = responseHeaders;
                        return {
                            requests
                        };
                    });
                });
                XHRInterceptor.setResponseCallback((status, timeout, response, responseURL, responseType, xhr)=>{
                    // $FlowFixMe[prop-missing]
                    var xhrIndex = this._getRequestIndexByXHRID(xhr._index);
                    if (xhrIndex === -1) {
                        return;
                    }
                    this.setState((ref)=>{
                        var requests = ref.requests;
                        var networkRequestInfo = requests[xhrIndex];
                        networkRequestInfo.status = status;
                        networkRequestInfo.timeout = timeout;
                        networkRequestInfo.response = response;
                        networkRequestInfo.responseURL = responseURL;
                        networkRequestInfo.responseType = responseType;
                        return {
                            requests
                        };
                    });
                });
                // Fire above callbacks.
                XHRInterceptor.enableInterception();
            }
        },
        {
            key: "_enableWebSocketInterception",
            value: function _enableWebSocketInterception() {
                if (WebSocketInterceptor.isInterceptorEnabled()) {
                    return;
                }
                // Show the WebSocket request item in listView when 'connect' is called.
                WebSocketInterceptor.setConnectCallback((url, protocols, options, socketId)=>{
                    var socketIndex = this.state.requests.length;
                    this._socketIdMap[socketId] = socketIndex;
                    var _webSocket = {
                        id: socketIndex,
                        type: 'WebSocket',
                        url: url,
                        protocols: protocols
                    };
                    this.setState({
                        requests: this.state.requests.concat(_webSocket)
                    }, this._indicateAdditionalRequests);
                });
                WebSocketInterceptor.setCloseCallback((statusCode, closeReason, socketId)=>{
                    var socketIndex = this._socketIdMap[socketId];
                    if (socketIndex === undefined) {
                        return;
                    }
                    if (statusCode !== null && closeReason !== null) {
                        this.setState((ref)=>{
                            var requests = ref.requests;
                            var networkRequestInfo = requests[socketIndex];
                            networkRequestInfo.status = statusCode;
                            networkRequestInfo.closeReason = closeReason;
                            return {
                                requests
                            };
                        });
                    }
                });
                WebSocketInterceptor.setSendCallback((data, socketId)=>{
                    var socketIndex = this._socketIdMap[socketId];
                    if (socketIndex === undefined) {
                        return;
                    }
                    this.setState((ref)=>{
                        var requests = ref.requests;
                        var networkRequestInfo = requests[socketIndex];
                        if (!networkRequestInfo.messages) {
                            networkRequestInfo.messages = '';
                        }
                        networkRequestInfo.messages += 'Sent: ' + JSON.stringify(data) + '\n';
                        return {
                            requests
                        };
                    });
                });
                WebSocketInterceptor.setOnMessageCallback((socketId, message)=>{
                    var socketIndex = this._socketIdMap[socketId];
                    if (socketIndex === undefined) {
                        return;
                    }
                    this.setState((ref)=>{
                        var requests = ref.requests;
                        var networkRequestInfo = requests[socketIndex];
                        if (!networkRequestInfo.messages) {
                            networkRequestInfo.messages = '';
                        }
                        networkRequestInfo.messages += 'Received: ' + JSON.stringify(message) + '\n';
                        return {
                            requests
                        };
                    });
                });
                WebSocketInterceptor.setOnCloseCallback((socketId, message)=>{
                    var socketIndex = this._socketIdMap[socketId];
                    if (socketIndex === undefined) {
                        return;
                    }
                    this.setState((ref)=>{
                        var requests = ref.requests;
                        var networkRequestInfo = requests[socketIndex];
                        networkRequestInfo.serverClose = message;
                        return {
                            requests
                        };
                    });
                });
                WebSocketInterceptor.setOnErrorCallback((socketId, message)=>{
                    var socketIndex = this._socketIdMap[socketId];
                    if (socketIndex === undefined) {
                        return;
                    }
                    this.setState((ref)=>{
                        var requests = ref.requests;
                        var networkRequestInfo = requests[socketIndex];
                        networkRequestInfo.serverError = message;
                        return {
                            requests
                        };
                    });
                });
                // Fire above callbacks.
                WebSocketInterceptor.enableInterception();
            }
        },
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                this._enableXHRInterception();
                this._enableWebSocketInterception();
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                XHRInterceptor.disableInterception();
                WebSocketInterceptor.disableInterception();
            }
        },
        {
            key: "_renderItemDetail",
            value: function _renderItemDetail(id) {
                var requestItem = this.state.requests[id];
                var details = Object.keys(requestItem).map((key)=>{
                    if (key === 'id') {
                        return;
                    }
                    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(View, {
                        style: styles.detailViewRow,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                                style: [
                                    styles.detailViewText,
                                    styles.detailKeyCellView
                                ],
                                children: key
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                                style: [
                                    styles.detailViewText,
                                    styles.detailValueCellView
                                ],
                                children: getStringByValue(requestItem[key])
                            })
                        ]
                    }, key);
                });
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(View, {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(TouchableHighlight, {
                            style: styles.closeButton,
                            onPress: this._closeButtonClicked,
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                                    style: styles.closeButtonText,
                                    children: "v"
                                })
                            })
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(ScrollView, {
                            style: styles.detailScrollView,
                            ref: (scrollRef)=>this._detailScrollView = scrollRef,
                            children: details
                        })
                    ]
                });
            }
        },
        {
            /**
   * Popup a scrollView to dynamically show detailed information of
   * the request, when pressing a row in the network flow listView.
   */ key: "_pressRow",
            value: function _pressRow(rowId) {
                this.setState({
                    detailRowId: rowId
                }, this._scrollDetailToTop);
            }
        },
        {
            key: "_getRequestIndexByXHRID",
            value: function _getRequestIndexByXHRID(index) {
                if (index === undefined) {
                    return -1;
                }
                var xhrIndex = this._xhrIdMap[index];
                if (xhrIndex === undefined) {
                    return -1;
                } else {
                    return xhrIndex;
                }
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_state = this.state, requests = _this_state.requests, detailRowId = _this_state.detailRowId;
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(View, {
                    style: styles.container,
                    children: [
                        detailRowId != null && this._renderItemDetail(detailRowId),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                            style: styles.listViewTitle,
                            children: requests.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)(View, {
                                style: styles.tableRow,
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                                        style: styles.urlTitleCellView,
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                                            style: styles.cellText,
                                            numberOfLines: 1,
                                            children: "URL"
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                                        style: styles.methodTitleCellView,
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                                            style: styles.cellText,
                                            numberOfLines: 1,
                                            children: "Type"
                                        })
                                    })
                                ]
                            })
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(FlatList, {
                            ref: this._captureRequestsListView,
                            onScroll: this._requestsListViewOnScroll,
                            style: styles.listView,
                            data: requests,
                            renderItem: this._renderItem,
                            keyExtractor: keyExtractor,
                            extraData: this.state
                        })
                    ]
                });
            }
        }
    ]);
    return NetworkOverlay;
}(React.Component);
var styles = StyleSheet.create({
    container: {
        paddingTop: 10,
        paddingBottom: 10,
        paddingLeft: 5,
        paddingRight: 5
    },
    listViewTitle: {
        height: 20
    },
    listView: {
        flex: 1,
        height: 60
    },
    tableRow: {
        flexDirection: 'row',
        flex: 1,
        height: LISTVIEW_CELL_HEIGHT
    },
    tableRowEven: {
        backgroundColor: '#555'
    },
    tableRowOdd: {
        backgroundColor: '#000'
    },
    tableRowPressed: {
        backgroundColor: '#3B5998'
    },
    cellText: {
        color: 'white',
        fontSize: 12
    },
    methodTitleCellView: {
        height: 18,
        borderColor: '#DCD7CD',
        borderTopWidth: 1,
        borderBottomWidth: 1,
        borderRightWidth: 1,
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: '#444',
        flex: 1
    },
    urlTitleCellView: {
        height: 18,
        borderColor: '#DCD7CD',
        borderTopWidth: 1,
        borderBottomWidth: 1,
        borderLeftWidth: 1,
        borderRightWidth: 1,
        justifyContent: 'center',
        backgroundColor: '#444',
        flex: 5,
        paddingLeft: 3
    },
    methodCellView: {
        height: 15,
        borderColor: '#DCD7CD',
        borderRightWidth: 1,
        alignItems: 'center',
        justifyContent: 'center',
        flex: 1
    },
    urlCellView: {
        height: 15,
        borderColor: '#DCD7CD',
        borderLeftWidth: 1,
        borderRightWidth: 1,
        justifyContent: 'center',
        flex: 5,
        paddingLeft: 3
    },
    detailScrollView: {
        flex: 1,
        height: 180,
        marginTop: 5,
        marginBottom: 5
    },
    detailKeyCellView: {
        flex: 1.3
    },
    detailValueCellView: {
        flex: 2
    },
    detailViewRow: {
        flexDirection: 'row',
        paddingHorizontal: 3
    },
    detailViewText: {
        color: 'white',
        fontSize: 11
    },
    closeButtonText: {
        color: 'white',
        fontSize: 10
    },
    closeButton: {
        marginTop: 5,
        backgroundColor: '#888',
        justifyContent: 'center',
        alignItems: 'center'
    }
});
module.exports = NetworkOverlay;


}),
"./node_modules/react-native/Libraries/Inspector/PerformanceOverlay.js": 
/*!*****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Inspector/PerformanceOverlay.js ***!
  \*****************************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var View = __webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js");
var StyleSheet = __webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js");
var Text = __webpack_require__(/*! ../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js");
var PerformanceLogger = __webpack_require__(/*! ../Utilities/GlobalPerformanceLogger */ "./node_modules/react-native/Libraries/Utilities/GlobalPerformanceLogger.js");
var React = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
var PerformanceOverlay = /*#__PURE__*/ function(_React_Component) {
    _inherits._(PerformanceOverlay, _React_Component);
    function PerformanceOverlay() {
        _class_call_check._(this, PerformanceOverlay);
        return _call_super._(this, PerformanceOverlay, arguments);
    }
    _create_class._(PerformanceOverlay, [
        {
            key: "render",
            value: function render() {
                var perfLogs = PerformanceLogger.getTimespans();
                var items = [];
                for(var key in perfLogs){
                    var _perfLogs_key;
                    if ((_perfLogs_key = perfLogs[key]) === null || _perfLogs_key === void 0 ? void 0 : _perfLogs_key.totalTime) {
                        var unit = key === 'BundleSize' ? 'b' : 'ms';
                        items.push(/*#__PURE__*/ (0, _jsxruntime.jsxs)(View, {
                            style: styles.row,
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                                    style: [
                                        styles.text,
                                        styles.label
                                    ],
                                    children: key
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                                    style: [
                                        styles.text,
                                        styles.totalTime
                                    ],
                                    children: perfLogs[key].totalTime + unit
                                })
                            ]
                        }, key));
                    }
                }
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                    style: styles.container,
                    children: items
                });
            }
        }
    ]);
    return PerformanceOverlay;
}(React.Component);
var styles = StyleSheet.create({
    container: {
        height: 100,
        paddingTop: 10
    },
    label: {
        flex: 1
    },
    row: {
        flexDirection: 'row',
        paddingHorizontal: 10
    },
    text: {
        color: 'white',
        fontSize: 12
    },
    totalTime: {
        paddingRight: 100
    }
});
module.exports = PerformanceOverlay;


}),
"./node_modules/react-native/Libraries/Inspector/ReactDevToolsOverlay.js": 
/*!*******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Inspector/ReactDevToolsOverlay.js ***!
  \*******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return ReactDevToolsOverlay;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../ReactNative/ReactNativeFeatureFlags */ "./node_modules/react-native/Libraries/ReactNative/ReactNativeFeatureFlags.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _ElementBox = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./ElementBox */ "./node_modules/react-native/Libraries/Inspector/ElementBox.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var getInspectorDataForViewAtPoint = __webpack_require__(/*! ./getInspectorDataForViewAtPoint */ "./node_modules/react-native/Libraries/Inspector/getInspectorDataForViewAtPoint.js");
var useEffect = _react.useEffect, useState = _react.useState, useCallback = _react.useCallback;
function ReactDevToolsOverlay(ref) {
    var inspectedViewRef = ref.inspectedViewRef, reactDevToolsAgent = ref.reactDevToolsAgent;
    var _useState = _sliced_to_array._(useState(null), 2), inspected = _useState[0], setInspected = _useState[1];
    var _useState1 = _sliced_to_array._(useState(false), 2), isInspecting = _useState1[0], setIsInspecting = _useState1[1];
    useEffect(()=>{
        function cleanup() {
            reactDevToolsAgent.removeListener('shutdown', cleanup);
            reactDevToolsAgent.removeListener('startInspectingNative', onStartInspectingNative);
            reactDevToolsAgent.removeListener('stopInspectingNative', onStopInspectingNative);
        }
        function onStartInspectingNative() {
            setIsInspecting(true);
        }
        function onStopInspectingNative() {
            setIsInspecting(false);
        }
        reactDevToolsAgent.addListener('shutdown', cleanup);
        reactDevToolsAgent.addListener('startInspectingNative', onStartInspectingNative);
        reactDevToolsAgent.addListener('stopInspectingNative', onStopInspectingNative);
        return cleanup;
    }, [
        reactDevToolsAgent
    ]);
    var findViewForLocation = useCallback((x, y)=>{
        getInspectorDataForViewAtPoint(inspectedViewRef.current, x, y, (viewData)=>{
            var frame = viewData.frame, closestPublicInstance = viewData.closestPublicInstance;
            if (closestPublicInstance == null) {
                return false;
            }
            reactDevToolsAgent.selectNode(closestPublicInstance);
            setInspected({
                frame
            });
            return true;
        });
    }, [
        inspectedViewRef,
        reactDevToolsAgent
    ]);
    var stopInspecting = useCallback(()=>{
        reactDevToolsAgent.stopInspectingNative(true);
        setIsInspecting(false);
        setInspected(null);
    }, [
        reactDevToolsAgent
    ]);
    var onPointerMove = useCallback((e)=>{
        findViewForLocation(e.nativeEvent.x, e.nativeEvent.y);
    }, [
        findViewForLocation
    ]);
    var onResponderMove = useCallback((e)=>{
        findViewForLocation(e.nativeEvent.touches[0].locationX, e.nativeEvent.touches[0].locationY);
    }, [
        findViewForLocation
    ]);
    var shouldSetResponder = useCallback((e)=>{
        onResponderMove(e);
        return true;
    }, [
        onResponderMove
    ]);
    var highlight = inspected ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_ElementBox.default, {
        frame: inspected.frame
    }) : null;
    if (isInspecting) {
        var events = // Pointer events only work on fabric
        _ReactNativeFeatureFlags.default.shouldEmitW3CPointerEvents() ? {
            onPointerMove,
            onPointerDown: onPointerMove,
            onPointerUp: stopInspecting
        } : {
            onStartShouldSetResponder: shouldSetResponder,
            onResponderMove: onResponderMove,
            onResponderRelease: stopInspecting
        };
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, _object_spread_props._(_object_spread._({
            nativeID: "devToolsInspectorOverlay",
            style: styles.inspector
        }, events), {
            children: highlight
        }));
    }
    return highlight;
}
var styles = _StyleSheet.default.create({
    inspector: {
        backgroundColor: 'transparent',
        position: 'absolute',
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
    }
});


}),
"./node_modules/react-native/Libraries/Inspector/StyleInspector.js": 
/*!*************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Inspector/StyleInspector.js ***!
  \*************************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var View = __webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js");
var StyleSheet = __webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js");
var Text = __webpack_require__(/*! ../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js");
function StyleInspector(ref) {
    var style = ref.style;
    if (!style) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
            style: styles.noStyle,
            children: "No style"
        });
    }
    var names = Object.keys(style);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(View, {
        style: styles.container,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                children: names.map((name)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(Text, {
                        style: styles.attr,
                        children: [
                            name,
                            ":"
                        ]
                    }, name))
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                children: names.map((name)=>{
                    var value = style === null || style === void 0 ? void 0 : style[name];
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(Text, {
                        style: styles.value,
                        children: typeof value !== 'string' && typeof value !== 'number' ? JSON.stringify(value) : value
                    }, name);
                })
            })
        ]
    });
}
var styles = StyleSheet.create({
    container: {
        flexDirection: 'row'
    },
    attr: {
        fontSize: 10,
        color: '#ccc'
    },
    value: {
        fontSize: 10,
        color: 'white',
        marginLeft: 10
    },
    noStyle: {
        color: 'white',
        fontSize: 10
    }
});
module.exports = StyleInspector;


}),
"./node_modules/react-native/Libraries/Inspector/getInspectorDataForViewAtPoint.js": 
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Inspector/getInspectorDataForViewAtPoint.js ***!
  \*****************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ var invariant = __webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js");
var reactDevToolsHook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
invariant(Boolean(reactDevToolsHook), 'getInspectorDataForViewAtPoint should not be used if React DevTools hook is not injected');
var renderers = Array.from(window.__REACT_DEVTOOLS_GLOBAL_HOOK__.renderers.values());
var appendRenderer = (ref)=>{
    var renderer = ref.renderer;
    return renderers.push(renderer);
};
reactDevToolsHook.on('renderer', appendRenderer);
function validateRenderers() {
    invariant(renderers.length > 0, 'Expected to find at least one React Native renderer on DevTools hook.');
}
module.exports = function getInspectorDataForViewAtPoint(inspectedView, locationX, locationY, callback) {
    validateRenderers();
    var shouldBreak = false;
    // Check all renderers for inspector data.
    for (var renderer of renderers){
        var _renderer_rendererConfig;
        if (shouldBreak) {
            break;
        }
        if ((renderer === null || renderer === void 0 ? void 0 : (_renderer_rendererConfig = renderer.rendererConfig) === null || _renderer_rendererConfig === void 0 ? void 0 : _renderer_rendererConfig.getInspectorDataForViewAtPoint) != null) {
            renderer.rendererConfig.getInspectorDataForViewAtPoint(inspectedView, locationX, locationY, (viewData)=>{
                // Only return with non-empty view data since only one renderer will have this view.
                if (viewData && viewData.hierarchy.length > 0) {
                    shouldBreak = callback(viewData);
                }
            });
        }
    }
};


}),
"./node_modules/react-native/Libraries/Inspector/resolveBoxStyle.js": 
/*!**************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Inspector/resolveBoxStyle.js ***!
  \**************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
var I18nManager = __webpack_require__(/*! ../ReactNative/I18nManager */ "./node_modules/react-native/Libraries/ReactNative/I18nManager.js");
/**
 * Resolve a style property into its component parts.
 *
 * For example:
 *
 *   > resolveProperties('margin', {margin: 5, marginBottom: 10})
 *   {top: 5, left: 5, right: 5, bottom: 10}
 *
 * If no parts exist, this returns null.
 */ function resolveBoxStyle(prefix, style) {
    var hasParts = false;
    var result = {
        bottom: 0,
        left: 0,
        right: 0,
        top: 0
    };
    // TODO: Fix issues with multiple properties affecting the same side.
    var styleForAll = style[prefix];
    if (styleForAll != null) {
        for (var key of Object.keys(result)){
            result[key] = styleForAll;
        }
        hasParts = true;
    }
    var styleForHorizontal = style[prefix + 'Horizontal'];
    if (styleForHorizontal != null) {
        result.left = styleForHorizontal;
        result.right = styleForHorizontal;
        hasParts = true;
    } else {
        var styleForLeft = style[prefix + 'Left'];
        if (styleForLeft != null) {
            result.left = styleForLeft;
            hasParts = true;
        }
        var styleForRight = style[prefix + 'Right'];
        if (styleForRight != null) {
            result.right = styleForRight;
            hasParts = true;
        }
        var styleForEnd = style[prefix + 'End'];
        if (styleForEnd != null) {
            var constants = I18nManager.getConstants();
            if (constants.isRTL && constants.doLeftAndRightSwapInRTL) {
                result.left = styleForEnd;
            } else {
                result.right = styleForEnd;
            }
            hasParts = true;
        }
        var styleForStart = style[prefix + 'Start'];
        if (styleForStart != null) {
            var constants1 = I18nManager.getConstants();
            if (constants1.isRTL && constants1.doLeftAndRightSwapInRTL) {
                result.right = styleForStart;
            } else {
                result.left = styleForStart;
            }
            hasParts = true;
        }
    }
    var styleForVertical = style[prefix + 'Vertical'];
    if (styleForVertical != null) {
        result.bottom = styleForVertical;
        result.top = styleForVertical;
        hasParts = true;
    } else {
        var styleForBottom = style[prefix + 'Bottom'];
        if (styleForBottom != null) {
            result.bottom = styleForBottom;
            hasParts = true;
        }
        var styleForTop = style[prefix + 'Top'];
        if (styleForTop != null) {
            result.top = styleForTop;
            hasParts = true;
        }
    }
    return hasParts ? result : null;
}
module.exports = resolveBoxStyle;


}),
"./node_modules/react-native/Libraries/Interaction/FrameRateLogger.js": 
/*!****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Interaction/FrameRateLogger.js ***!
  \****************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeFrameRateLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeFrameRateLogger */ "./node_modules/react-native/Libraries/Interaction/NativeFrameRateLogger.js"));
var invariant = __webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js");
/**
 * Flow API for native FrameRateLogger module. If the native module is not installed, function calls
 * are just no-ops.
 *
 * Typical behavior is that `setContext` is called when a new screen is loaded (e.g. via a
 * navigation integration), and then `beginScroll` is called by `ScrollResponder` at which point the
 * native module then begins tracking frame drops. When `ScrollResponder` calls `endScroll`, the
 * native module gathers up all it's frame drop data and reports it via an analytics pipeline for
 * analysis.
 *
 * Note that `beginScroll` may be called multiple times by `ScrollResponder` - unclear if that's a
 * bug, but the native module should be robust to that.
 *
 * In the future we may add support for tracking frame drops in other types of interactions beyond
 * scrolling.
 */ var FrameRateLogger = {
    /**
   * Enable `debug` to see local logs of what's going on.
   */ setGlobalOptions: function(options) {
        if (options.debug !== undefined) {
            invariant(_NativeFrameRateLogger.default, 'Trying to debug FrameRateLogger without the native module!');
        }
        _NativeFrameRateLogger.default === null || _NativeFrameRateLogger.default === void 0 ? void 0 : _NativeFrameRateLogger.default.setGlobalOptions({
            debug: !!options.debug
        });
    },
    /**
   * Must call `setContext` before any events can be properly tracked, which is done automatically
   * in `AppRegistry`, but navigation is also a common place to hook in.
   */ setContext: function(context) {
        _NativeFrameRateLogger.default === null || _NativeFrameRateLogger.default === void 0 ? void 0 : _NativeFrameRateLogger.default.setContext(context);
    },
    /**
   * Called in `ScrollResponder` so any component that uses that module will handle this
   * automatically.
   */ beginScroll () {
        _NativeFrameRateLogger.default === null || _NativeFrameRateLogger.default === void 0 ? void 0 : _NativeFrameRateLogger.default.beginScroll();
    },
    /**
   * Called in `ScrollResponder` so any component that uses that module will handle this
   * automatically.
   */ endScroll () {
        _NativeFrameRateLogger.default === null || _NativeFrameRateLogger.default === void 0 ? void 0 : _NativeFrameRateLogger.default.endScroll();
    }
};
module.exports = FrameRateLogger;


}),
"./node_modules/react-native/Libraries/Interaction/InteractionManager.js": 
/*!*******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Interaction/InteractionManager.js ***!
  \*******************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../src/private/featureflags/ReactNativeFeatureFlags */ "./node_modules/react-native/src/private/featureflags/ReactNativeFeatureFlags.js"));
var _EventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../vendor/emitter/EventEmitter */ "./node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js"));
var BatchedBridge = __webpack_require__(/*! ../BatchedBridge/BatchedBridge */ "./node_modules/react-native/Libraries/BatchedBridge/BatchedBridge.js");
var infoLog = __webpack_require__(/*! ../Utilities/infoLog */ "./node_modules/react-native/Libraries/Utilities/infoLog.js");
var TaskQueue = __webpack_require__(/*! ./TaskQueue */ "./node_modules/react-native/Libraries/Interaction/TaskQueue.js");
var invariant = __webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js");
var _emitter = new _EventEmitter.default();
var DEBUG_DELAY = 0;
var DEBUG = false;
/**
 * InteractionManager allows long-running work to be scheduled after any
 * interactions/animations have completed. In particular, this allows JavaScript
 * animations to run smoothly.
 *
 * Applications can schedule tasks to run after interactions with the following:
 *
 * ```
 * InteractionManager.runAfterInteractions(() => {
 *   // ...long-running synchronous task...
 * });
 * ```
 *
 * Compare this to other scheduling alternatives:
 *
 * - requestAnimationFrame(): for code that animates a view over time.
 * - setImmediate/setTimeout(): run code later, note this may delay animations.
 * - runAfterInteractions(): run code later, without delaying active animations.
 *
 * The touch handling system considers one or more active touches to be an
 * 'interaction' and will delay `runAfterInteractions()` callbacks until all
 * touches have ended or been cancelled.
 *
 * InteractionManager also allows applications to register animations by
 * creating an interaction 'handle' on animation start, and clearing it upon
 * completion:
 *
 * ```
 * var handle = InteractionManager.createInteractionHandle();
 * // run animation... (`runAfterInteractions` tasks are queued)
 * // later, on animation completion:
 * InteractionManager.clearInteractionHandle(handle);
 * // queued tasks run if all handles were cleared
 * ```
 *
 * `runAfterInteractions` takes either a plain callback function, or a
 * `PromiseTask` object with a `gen` method that returns a `Promise`.  If a
 * `PromiseTask` is supplied, then it is fully resolved (including asynchronous
 * dependencies that also schedule more tasks via `runAfterInteractions`) before
 * starting on the next task that might have been queued up synchronously
 * earlier.
 *
 * By default, queued tasks are executed together in a loop in one
 * `setImmediate` batch. If `setDeadline` is called with a positive number, then
 * tasks will only be executed until the deadline (in terms of js event loop run
 * time) approaches, at which point execution will yield via setTimeout,
 * allowing events such as touches to start interactions and block queued tasks
 * from executing, making apps more responsive.
 */ var InteractionManager = {
    Events: {
        interactionStart: 'interactionStart',
        interactionComplete: 'interactionComplete'
    },
    /**
   * Schedule a function to run after all interactions have completed. Returns a cancellable
   * "promise".
   */ runAfterInteractions (task) {
        var tasks = [];
        var promise = new Promise((resolve)=>{
            _scheduleUpdate();
            if (task) {
                tasks.push(task);
            }
            tasks.push({
                run: resolve,
                name: 'resolve ' + (task && task.name || '?')
            });
            _taskQueue.enqueueTasks(tasks);
        });
        return {
            // $FlowFixMe[method-unbinding] added when improving typing for this parameters
            then: promise.then.bind(promise),
            cancel: function() {
                _taskQueue.cancelTasks(tasks);
            }
        };
    },
    /**
   * Notify manager that an interaction has started.
   */ createInteractionHandle () {
        DEBUG && infoLog('InteractionManager: create interaction handle');
        _scheduleUpdate();
        var handle = ++_inc;
        _addInteractionSet.add(handle);
        return handle;
    },
    /**
   * Notify manager that an interaction has completed.
   */ clearInteractionHandle (handle) {
        DEBUG && infoLog('InteractionManager: clear interaction handle');
        invariant(!!handle, 'InteractionManager: Must provide a handle to clear.');
        _scheduleUpdate();
        _addInteractionSet.delete(handle);
        _deleteInteractionSet.add(handle);
    },
    // $FlowFixMe[method-unbinding] added when improving typing for this parameters
    addListener: _emitter.addListener.bind(_emitter),
    /**
   * A positive number will use setTimeout to schedule any tasks after the
   * eventLoopRunningTime hits the deadline value, otherwise all tasks will be
   * executed in one setImmediate batch (default).
   */ setDeadline (deadline) {
        _deadline = deadline;
    }
};
var _interactionSet = new Set();
var _addInteractionSet = new Set();
var _deleteInteractionSet = new Set();
var _taskQueue = new TaskQueue({
    onMoreTasks: _scheduleUpdate
});
var _nextUpdateHandle = 0;
var _inc = 0;
var _deadline = -1;
/**
 * Schedule an asynchronous update to the interaction state.
 */ function _scheduleUpdate() {
    if (!_nextUpdateHandle) {
        if (_deadline > 0) {
            _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);
        } else {
            _nextUpdateHandle = setImmediate(_processUpdate);
        }
    }
}
/**
 * Notify listeners, process queue, etc
 */ function _processUpdate() {
    _nextUpdateHandle = 0;
    var interactionCount = _interactionSet.size;
    _addInteractionSet.forEach((handle)=>_interactionSet.add(handle));
    _deleteInteractionSet.forEach((handle)=>_interactionSet.delete(handle));
    var nextInteractionCount = _interactionSet.size;
    if (interactionCount !== 0 && nextInteractionCount === 0) {
        // transition from 1+ --> 0 interactions
        _emitter.emit(InteractionManager.Events.interactionComplete);
    } else if (interactionCount === 0 && nextInteractionCount !== 0) {
        // transition from 0 --> 1+ interactions
        _emitter.emit(InteractionManager.Events.interactionStart);
    }
    // process the queue regardless of a transition
    if (nextInteractionCount === 0) {
        while(_taskQueue.hasTasksToProcess()){
            _taskQueue.processNext();
            if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
                // Hit deadline before processing all tasks, so process more later.
                _scheduleUpdate();
                break;
            }
        }
    }
    _addInteractionSet.clear();
    _deleteInteractionSet.clear();
}
module.exports = _ReactNativeFeatureFlags.disableInteractionManager() ? __webpack_require__(/*! ./InteractionManagerStub */ "./node_modules/react-native/Libraries/Interaction/InteractionManagerStub.js") : InteractionManager;


}),
"./node_modules/react-native/Libraries/Interaction/InteractionManagerStub.js": 
/*!***********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Interaction/InteractionManagerStub.js ***!
  \***********************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ var invariant = __webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js");
/**
 * InteractionManager allows long-running work to be scheduled after any
 * interactions/animations have completed. In particular, this allows JavaScript
 * animations to run smoothly.
 *
 * Applications can schedule tasks to run after interactions with the following:
 *
 * ```
 * InteractionManager.runAfterInteractions(() => {
 *   // ...long-running synchronous task...
 * });
 * ```
 *
 * Compare this to other scheduling alternatives:
 *
 * - requestAnimationFrame(): for code that animates a view over time.
 * - setImmediate/setTimeout(): run code later, note this may delay animations.
 * - runAfterInteractions(): run code later, without delaying active animations.
 *
 * The touch handling system considers one or more active touches to be an
 * 'interaction' and will delay `runAfterInteractions()` callbacks until all
 * touches have ended or been cancelled.
 *
 * InteractionManager also allows applications to register animations by
 * creating an interaction 'handle' on animation start, and clearing it upon
 * completion:
 *
 * ```
 * var handle = InteractionManager.createInteractionHandle();
 * // run animation... (`runAfterInteractions` tasks are queued)
 * // later, on animation completion:
 * InteractionManager.clearInteractionHandle(handle);
 * // queued tasks run if all handles were cleared
 * ```
 *
 * `runAfterInteractions` takes either a plain callback function, or a
 * `PromiseTask` object with a `gen` method that returns a `Promise`.  If a
 * `PromiseTask` is supplied, then it is fully resolved (including asynchronous
 * dependencies that also schedule more tasks via `runAfterInteractions`) before
 * starting on the next task that might have been queued up synchronously
 * earlier.
 *
 * By default, queued tasks are executed together in a loop in one
 * `setImmediate` batch. If `setDeadline` is called with a positive number, then
 * tasks will only be executed until the deadline (in terms of js event loop run
 * time) approaches, at which point execution will yield via setTimeout,
 * allowing events such as touches to start interactions and block queued tasks
 * from executing, making apps more responsive.
 *
 * @deprecated
 */ var InteractionManagerStub = {
    Events: {
        interactionStart: 'interactionStart',
        interactionComplete: 'interactionComplete'
    },
    /**
   * Schedule a function to run after all interactions have completed. Returns a cancellable
   * "promise".
   *
   * @deprecated
   */ runAfterInteractions (task) {
        var immediateID;
        var promise = new Promise((resolve, reject)=>{
            immediateID = setImmediate(()=>{
                if (typeof task === 'object' && task !== null) {
                    if (typeof task.gen === 'function') {
                        task.gen().then(resolve, reject);
                    } else if (typeof task.run === 'function') {
                        try {
                            task.run();
                            resolve();
                        } catch (error) {
                            reject(error);
                        }
                    } else {
                        reject(new TypeError(`Task "${task.name}" missing gen or run.`));
                    }
                } else if (typeof task === 'function') {
                    try {
                        task();
                        resolve();
                    } catch (error) {
                        reject(error);
                    }
                } else {
                    reject(new TypeError('Invalid task of type: ' + typeof task));
                }
            });
        });
        return {
            // $FlowFixMe[method-unbinding] added when improving typing for this parameters
            then: promise.then.bind(promise),
            cancel () {
                clearImmediate(immediateID);
            }
        };
    },
    /**
   * Notify manager that an interaction has started.
   *
   * @deprecated
   */ createInteractionHandle () {
        return -1;
    },
    /**
   * Notify manager that an interaction has completed.
   *
   * @deprecated
   */ clearInteractionHandle (handle) {
        invariant(!!handle, 'InteractionManager: Must provide a handle to clear.');
    },
    /**
   * @deprecated
   */ addListener () {
        return {
            remove () {}
        };
    },
    /**
   * A positive number will use setTimeout to schedule any tasks after the
   * eventLoopRunningTime hits the deadline value, otherwise all tasks will be
   * executed in one setImmediate batch (default).
   *
   * @deprecated
   */ setDeadline (deadline) {
    // Do nothing.
    }
};
module.exports = InteractionManagerStub;


}),
"./node_modules/react-native/Libraries/Interaction/TaskQueue.js": 
/*!**********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Interaction/TaskQueue.js ***!
  \**********************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var infoLog = __webpack_require__(/*! ../Utilities/infoLog */ "./node_modules/react-native/Libraries/Utilities/infoLog.js");
var invariant = __webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js");
var DEBUG = false;
/**
 * TaskQueue - A system for queueing and executing a mix of simple callbacks and
 * trees of dependent tasks based on Promises. No tasks are executed unless
 * `processNext` is called.
 *
 * `enqueue` takes a Task object with either a simple `run` callback, or a
 * `gen` function that returns a `Promise` and puts it in the queue.  If a gen
 * function is supplied, then the promise it returns will block execution of
 * tasks already in the queue until it resolves. This can be used to make sure
 * the first task is fully resolved (including asynchronous dependencies that
 * also schedule more tasks via `enqueue`) before starting on the next task.
 * The `onMoreTasks` constructor argument is used to inform the owner that an
 * async task has resolved and that the queue should be processed again.
 *
 * Note: Tasks are only actually executed with explicit calls to `processNext`.
 */ var TaskQueue = /*#__PURE__*/ function() {
    function TaskQueue(ref) {
        var onMoreTasks = ref.onMoreTasks;
        _class_call_check._(this, TaskQueue);
        this._onMoreTasks = onMoreTasks;
        this._queueStack = [
            {
                tasks: [],
                popable: false
            }
        ];
    }
    _create_class._(TaskQueue, [
        {
            /**
   * Add a task to the queue.  It is recommended to name your tasks for easier
   * async debugging. Tasks will not be executed until `processNext` is called
   * explicitly.
   */ key: "enqueue",
            value: function enqueue(task) {
                this._getCurrentQueue().push(task);
            }
        },
        {
            key: "enqueueTasks",
            value: function enqueueTasks(tasks) {
                tasks.forEach((task)=>this.enqueue(task));
            }
        },
        {
            key: "cancelTasks",
            value: function cancelTasks(tasksToCancel) {
                // search through all tasks and remove them.
                this._queueStack = this._queueStack.map((queue)=>_object_spread_props._(_object_spread._({}, queue), {
                        tasks: queue.tasks.filter((task)=>tasksToCancel.indexOf(task) === -1)
                    })).filter((queue, idx)=>queue.tasks.length > 0 || idx === 0);
            }
        },
        {
            /**
   * Check to see if `processNext` should be called.
   *
   * @returns {boolean} Returns true if there are tasks that are ready to be
   * processed with `processNext`, or returns false if there are no more tasks
   * to be processed right now, although there may be tasks in the queue that
   * are blocked by earlier `PromiseTask`s that haven't resolved yet.
   * `onMoreTasks` will be called after each `PromiseTask` resolves if there are
   * tasks ready to run at that point.
   */ key: "hasTasksToProcess",
            value: function hasTasksToProcess() {
                return this._getCurrentQueue().length > 0;
            }
        },
        {
            /**
   * Executes the next task in the queue.
   */ key: "processNext",
            value: function processNext() {
                var queue = this._getCurrentQueue();
                if (queue.length) {
                    var task = queue.shift();
                    try {
                        if (typeof task === 'object' && task.gen) {
                            DEBUG && infoLog('TaskQueue: genPromise for task ' + task.name);
                            this._genPromise(task);
                        } else if (typeof task === 'object' && task.run) {
                            DEBUG && infoLog('TaskQueue: run task ' + task.name);
                            task.run();
                        } else {
                            invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
                            DEBUG && infoLog('TaskQueue: run anonymous task');
                            task();
                        }
                    } catch (e) {
                        e.message = // $FlowFixMe[incompatible-type]
                        'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
                        throw e;
                    }
                }
            }
        },
        {
            key: "_getCurrentQueue",
            value: function _getCurrentQueue() {
                var stackIdx = this._queueStack.length - 1;
                var queue = this._queueStack[stackIdx];
                if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
                    this._queueStack.pop();
                    DEBUG && infoLog('TaskQueue: popped queue: ', {
                        stackIdx,
                        queueStackSize: this._queueStack.length
                    });
                    return this._getCurrentQueue();
                } else {
                    return queue.tasks;
                }
            }
        },
        {
            key: "_genPromise",
            value: function _genPromise(task) {
                // Each async task pushes it's own queue onto the queue stack. This
                // effectively defers execution of previously queued tasks until the promise
                // resolves, at which point we allow the new queue to be popped, which
                // happens once it is fully processed.
                this._queueStack.push({
                    tasks: [],
                    popable: false
                });
                var stackIdx = this._queueStack.length - 1;
                var stackItem = this._queueStack[stackIdx];
                DEBUG && infoLog('TaskQueue: push new queue: ', {
                    stackIdx
                });
                DEBUG && infoLog('TaskQueue: exec gen task ' + task.name);
                task.gen().then(()=>{
                    DEBUG && infoLog('TaskQueue: onThen for gen task ' + task.name, {
                        stackIdx,
                        queueStackSize: this._queueStack.length
                    });
                    stackItem.popable = true;
                    this.hasTasksToProcess() && this._onMoreTasks();
                }).catch((ex)=>{
                    setTimeout(()=>{
                        ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;
                        throw ex;
                    }, 0);
                });
            }
        }
    ]);
    return TaskQueue;
}();
module.exports = TaskQueue;


}),
"./node_modules/react-native/Libraries/LayoutAnimation/LayoutAnimation.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LayoutAnimation/LayoutAnimation.js ***!
  \********************************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../src/private/featureflags/ReactNativeFeatureFlags */ "./node_modules/react-native/src/private/featureflags/ReactNativeFeatureFlags.js"));
var _FabricUIManager = __webpack_require__(/*! ../ReactNative/FabricUIManager */ "./node_modules/react-native/Libraries/ReactNative/FabricUIManager.js");
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var UIManager = __webpack_require__(/*! ../ReactNative/UIManager */ "./node_modules/react-native/Libraries/ReactNative/UIManager.js");
// Reexport type
var isLayoutAnimationEnabled = _ReactNativeFeatureFlags.isLayoutAnimationEnabled();
function setEnabled(value) {
    isLayoutAnimationEnabled = isLayoutAnimationEnabled;
}
/**
 * Configures the next commit to be animated.
 *
 * onAnimationDidEnd is guaranteed to be called when the animation completes.
 * onAnimationDidFail is *never* called in the classic, pre-Fabric renderer,
 * and never has been. In the new renderer (Fabric) it is called only if configuration
 * parsing fails.
 */ function configureNext(config, onAnimationDidEnd, onAnimationDidFail) {
    if (_Platform.default.isDisableAnimations) {
        return;
    }
    if (!isLayoutAnimationEnabled) {
        return;
    }
    // Since LayoutAnimations may possibly be disabled for now on iOS (Fabric),
    // or Android (non-Fabric) we race a setTimeout with animation completion,
    // in case onComplete is never called
    // from native. Once LayoutAnimations+Fabric unconditionally ship everywhere, we can
    // delete this mechanism at least in the Fabric branch.
    var animationCompletionHasRun = false;
    var onAnimationComplete = ()=>{
        if (animationCompletionHasRun) {
            return;
        }
        animationCompletionHasRun = true;
        clearTimeout(raceWithAnimationId);
        onAnimationDidEnd === null || onAnimationDidEnd === void 0 ? void 0 : onAnimationDidEnd();
    };
    var raceWithAnimationId = setTimeout(onAnimationComplete, (config.duration ?? 0) + 17 /* one frame + 1ms */ );
    // In Fabric, LayoutAnimations are unconditionally enabled for Android, and
    // conditionally enabled on iOS (pending fully shipping; this is a temporary state).
    var FabricUIManager = (0, _FabricUIManager.getFabricUIManager)();
    if (FabricUIManager === null || FabricUIManager === void 0 ? void 0 : FabricUIManager.configureNextLayoutAnimation) {
        var _global_nativeFabricUIManager, _global;
        (_global = __webpack_require__.g) === null || _global === void 0 ? void 0 : (_global_nativeFabricUIManager = _global.nativeFabricUIManager) === null || _global_nativeFabricUIManager === void 0 ? void 0 : _global_nativeFabricUIManager.configureNextLayoutAnimation(config, onAnimationComplete, onAnimationDidFail ?? function() {} /* this will only be called if configuration parsing fails */ );
        return;
    }
    // This will only run if Fabric is *not* installed.
    // If you have Fabric + non-Fabric running in the same VM, non-Fabric LayoutAnimations
    // will not work.
    if (UIManager === null || UIManager === void 0 ? void 0 : UIManager.configureNextLayoutAnimation) {
        UIManager.configureNextLayoutAnimation(config, onAnimationComplete ?? function() {}, onAnimationDidFail ?? function() {} /* this should never be called in Non-Fabric */ );
    }
}
function create(duration, type, property) {
    return {
        duration,
        create: {
            type,
            property
        },
        update: {
            type
        },
        delete: {
            type,
            property
        }
    };
}
var Presets = {
    easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),
    linear: create(500, 'linear', 'opacity'),
    spring: {
        duration: 700,
        create: {
            type: 'linear',
            property: 'opacity'
        },
        update: {
            type: 'spring',
            springDamping: 0.4
        },
        delete: {
            type: 'linear',
            property: 'opacity'
        }
    }
};
/**
 * Automatically animates views to their new positions when the
 * next layout happens.
 *
 * A common way to use this API is to call it before calling `setState`.
 *
 * Note that in order to get this to work on **Android** you need to set the following flags via `UIManager`:
 *
 *     UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);
 */ var LayoutAnimation = {
    /**
   * Schedules an animation to happen on the next layout.
   *
   * @param config Specifies animation properties:
   *
   *   - `duration` in milliseconds
   *   - `create`, `AnimationConfig` for animating in new views
   *   - `update`, `AnimationConfig` for animating views that have been updated
   *
   * @param onAnimationDidEnd Called when the animation finished.
   * Only supported on iOS.
   * @param onError Called on error. Only supported on iOS.
   */ configureNext,
    /**
   * Helper for creating a config for `configureNext`.
   */ create,
    Types: Object.freeze({
        spring: 'spring',
        linear: 'linear',
        easeInEaseOut: 'easeInEaseOut',
        easeIn: 'easeIn',
        easeOut: 'easeOut',
        keyboard: 'keyboard'
    }),
    Properties: Object.freeze({
        opacity: 'opacity',
        scaleX: 'scaleX',
        scaleY: 'scaleY',
        scaleXY: 'scaleXY'
    }),
    checkConfig (...args) {
        console.error('LayoutAnimation.checkConfig(...) has been disabled.');
    },
    Presets,
    easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
    linear: configureNext.bind(null, Presets.linear),
    spring: configureNext.bind(null, Presets.spring),
    setEnabled
};
module.exports = LayoutAnimation;


}),
"./node_modules/react-native/Libraries/Linking/Linking.js": 
/*!****************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Linking/Linking.js ***!
  \****************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../EventEmitter/NativeEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _NativeIntentAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeIntentAndroid */ "./node_modules/react-native/Libraries/Linking/NativeIntentAndroid.js"));
var _NativeLinkingManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeLinkingManager */ "./node_modules/react-native/Libraries/Linking/NativeLinkingManager.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! nullthrows */ "./node_modules/nullthrows/nullthrows.js"));
/**
 * `Linking` gives you a general interface to interact with both incoming
 * and outgoing app links.
 *
 * See https://reactnative.dev/docs/linking
 */ var Linking = /*#__PURE__*/ function(NativeEventEmitter) {
    "use strict";
    _inherits._(Linking, NativeEventEmitter);
    function Linking() {
        _class_call_check._(this, Linking);
        return _call_super._(this, Linking, [
            _Platform.default.OS === 'ios' ? (0, _nullthrows.default)(_NativeLinkingManager.default) : undefined
        ]);
    }
    _create_class._(Linking, [
        {
            /**
   * Add a handler to Linking changes by listening to the `url` event type
   * and providing the handler
   *
   * See https://reactnative.dev/docs/linking#addeventlistener
   */ key: "addEventListener",
            value: function addEventListener(eventType, listener, context) {
                return this.addListener(eventType, listener);
            }
        },
        {
            /**
   * Try to open the given `url` with any of the installed apps.
   *
   * See https://reactnative.dev/docs/linking#openurl
   */ key: "openURL",
            value: function openURL(url) {
                this._validateURL(url);
                if (_Platform.default.OS === 'android') {
                    return (0, _nullthrows.default)(_NativeIntentAndroid.default).openURL(url);
                } else {
                    return (0, _nullthrows.default)(_NativeLinkingManager.default).openURL(url);
                }
            }
        },
        {
            /**
   * Determine whether or not an installed app can handle a given URL.
   *
   * See https://reactnative.dev/docs/linking#canopenurl
   */ key: "canOpenURL",
            value: function canOpenURL(url) {
                this._validateURL(url);
                if (_Platform.default.OS === 'android') {
                    return (0, _nullthrows.default)(_NativeIntentAndroid.default).canOpenURL(url);
                } else {
                    return (0, _nullthrows.default)(_NativeLinkingManager.default).canOpenURL(url);
                }
            }
        },
        {
            /**
   * Open app settings.
   *
   * See https://reactnative.dev/docs/linking#opensettings
   */ key: "openSettings",
            value: function openSettings() {
                if (_Platform.default.OS === 'android') {
                    return (0, _nullthrows.default)(_NativeIntentAndroid.default).openSettings();
                } else {
                    return (0, _nullthrows.default)(_NativeLinkingManager.default).openSettings();
                }
            }
        },
        {
            /**
   * If the app launch was triggered by an app link,
   * it will give the link url, otherwise it will give `null`
   *
   * See https://reactnative.dev/docs/linking#getinitialurl
   */ key: "getInitialURL",
            value: function getInitialURL() {
                return _Platform.default.OS === 'android' ? (0, _nullthrows.default)(_NativeIntentAndroid.default).getInitialURL() : (0, _nullthrows.default)(_NativeLinkingManager.default).getInitialURL();
            }
        },
        {
            /*
   * Launch an Android intent with extras (optional)
   *
   * @platform android
   *
   * See https://reactnative.dev/docs/linking#sendintent
   */ key: "sendIntent",
            value: function sendIntent(action, extras) {
                if (_Platform.default.OS === 'android') {
                    return (0, _nullthrows.default)(_NativeIntentAndroid.default).sendIntent(action, extras);
                } else {
                    return new Promise((resolve, reject)=>reject(new Error('Unsupported')));
                }
            }
        },
        {
            key: "_validateURL",
            value: function _validateURL(url) {
                (0, _invariant.default)(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
                (0, _invariant.default)(url, 'Invalid URL: cannot be empty');
            }
        }
    ]);
    return Linking;
}(_NativeEventEmitter.default);
module.exports = new Linking();


}),
"./node_modules/react-native/Libraries/Lists/FlatList.js": 
/*!***************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Lists/FlatList.js ***!
  \***************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../src/private/featureflags/ReactNativeFeatureFlags */ "./node_modules/react-native/src/private/featureflags/ReactNativeFeatureFlags.js"));
var _virtualizedlists = __webpack_require__(/*! @react-native/virtualized-lists */ "webpack/sharing/consume/default/@react-native/virtualized-lists/@react-native/virtualized-lists");
var _memoizeone = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! memoize-one */ "./node_modules/memoize-one/dist/memoize-one.cjs.js"));
var View = __webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js");
var StyleSheet = __webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js");
var deepDiffer = __webpack_require__(/*! ../Utilities/differ/deepDiffer */ "./node_modules/react-native/Libraries/Utilities/differ/deepDiffer.js");
var Platform = __webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js");
var invariant = __webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js");
var React = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
/**
 * Default Props Helper Functions
 * Use the following helper functions for default values
 */ // removeClippedSubviewsOrDefault(this.props.removeClippedSubviews)
function removeClippedSubviewsOrDefault(removeClippedSubviews) {
    if (_ReactNativeFeatureFlags.shouldUseRemoveClippedSubviewsAsDefaultOnIOS()) {
        return removeClippedSubviews ?? true;
    } else {
        return removeClippedSubviews ?? Platform.OS === 'android';
    }
}
// numColumnsOrDefault(this.props.numColumns)
function numColumnsOrDefault(numColumns) {
    return numColumns ?? 1;
}
function isArrayLike(data) {
    // $FlowExpectedError[incompatible-use]
    return typeof Object(data).length === 'number';
}
/**
 * A performant interface for rendering simple, flat lists, supporting the most handy features:
 *
 *  - Fully cross-platform.
 *  - Optional horizontal mode.
 *  - Configurable viewability callbacks.
 *  - Header support.
 *  - Footer support.
 *  - Separator support.
 *  - Pull to Refresh.
 *  - Scroll loading.
 *  - ScrollToIndex support.
 *
 * If you need section support, use [`<SectionList>`](docs/sectionlist.html).
 *
 * Minimal Example:
 *
 *     <FlatList
 *       data={[{key: 'a'}, {key: 'b'}]}
 *       renderItem={({item}) => <Text>{item.key}</Text>}
 *     />
 *
 * More complex, multi-select example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.
 *
 * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will
 *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even
 *   if the components rendered in `MyListItem` did not have such optimizations.
 * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render
 *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it
 *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will
 *   not show any changes.
 * - `keyExtractor` tells the list to use the `id`s for the react keys instead of the default `key` property.
 *
 *
 *     class MyListItem extends React.PureComponent {
 *       _onPress = () => {
 *         this.props.onPressItem(this.props.id);
 *       };
 *
 *       render() {
 *         const textColor = this.props.selected ? "red" : "black";
 *         return (
 *           <TouchableOpacity onPress={this._onPress}>
 *             <View>
 *               <Text style={{ color: textColor }}>
 *                 {this.props.title}
 *               </Text>
 *             </View>
 *           </TouchableOpacity>
 *         );
 *       }
 *     }
 *
 *     class MultiSelectList extends React.PureComponent {
 *       state = {selected: (new Map(): Map<string, boolean>)};
 *
 *       _keyExtractor = (item, index) => item.id;
 *
 *       _onPressItem = (id: string) => {
 *         // updater functions are preferred for transactional updates
 *         this.setState((state) => {
 *           // copy the map rather than modifying state.
 *           const selected = new Map(state.selected);
 *           selected.set(id, !selected.get(id)); // toggle
 *           return {selected};
 *         });
 *       };
 *
 *       _renderItem = ({item}) => (
 *         <MyListItem
 *           id={item.id}
 *           onPressItem={this._onPressItem}
 *           selected={!!this.state.selected.get(item.id)}
 *           title={item.title}
 *         />
 *       );
 *
 *       render() {
 *         return (
 *           <FlatList
 *             data={this.props.data}
 *             extraData={this.state}
 *             keyExtractor={this._keyExtractor}
 *             renderItem={this._renderItem}
 *           />
 *         );
 *       }
 *     }
 *
 * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),
 * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed
 * here, along with the following caveats:
 *
 * - Internal state is not preserved when content scrolls out of the render window. Make sure all
 *   your data is captured in the item data or external stores like Flux, Redux, or Relay.
 * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-
 *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop
 *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on
 *   changes. This includes the `data` prop and parent component state.
 * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously
 *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see
 *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,
 *   and we are working on improving it behind the scenes.
 * - By default, the list looks for a `key` prop on each item and uses that for the React key.
 *   Alternatively, you can provide a custom `keyExtractor` prop.
 *
 * Also inherits [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.
 */ var FlatList = /*#__PURE__*/ function(_React_PureComponent) {
    "use strict";
    _inherits._(FlatList, _React_PureComponent);
    function FlatList(props) {
        _class_call_check._(this, FlatList);
        var _this;
        _this = _call_super._(this, FlatList, [
            props
        ]), _this._virtualizedListPairs = [], _this._captureRef = (ref)=>{
            _this._listRef = ref;
        }, _this._getItem = (data, index)=>{
            var numColumns = numColumnsOrDefault(_this.props.numColumns);
            if (numColumns > 1) {
                var ret = [];
                for(var kk = 0; kk < numColumns; kk++){
                    var itemIndex = index * numColumns + kk;
                    if (itemIndex < data.length) {
                        var item = data[itemIndex];
                        ret.push(item);
                    }
                }
                return ret;
            } else {
                return data[index];
            }
        }, _this._getItemCount = (data)=>{
            // Legacy behavior of FlatList was to forward "undefined" length if invalid
            // data like a non-arraylike object is passed. VirtualizedList would then
            // coerce this, and the math would work out to no-op. For compatibility, if
            // invalid data is passed, we tell VirtualizedList there are zero items
            // available to prevent it from trying to read from the invalid data
            // (without propagating invalidly typed data).
            if (data != null && isArrayLike(data)) {
                var numColumns = numColumnsOrDefault(_this.props.numColumns);
                return numColumns > 1 ? Math.ceil(data.length / numColumns) : data.length;
            } else {
                return 0;
            }
        }, _this._keyExtractor = (items, index)=>{
            var numColumns = numColumnsOrDefault(_this.props.numColumns);
            var keyExtractor = _this.props.keyExtractor ?? _virtualizedlists.keyExtractor;
            if (numColumns > 1) {
                invariant(Array.isArray(items), 'FlatList: Encountered internal consistency error, expected each item to consist of an ' + 'array with 1-%s columns; instead, received a single item.', numColumns);
                return items.map((item, kk)=>keyExtractor(item, index * numColumns + kk)).join(':');
            }
            // $FlowFixMe[incompatible-call] Can't call keyExtractor with an array
            return keyExtractor(items, index);
        }, _this._renderer = (ListItemComponent, renderItem, columnWrapperStyle, numColumns, extraData)=>{
            var cols = numColumnsOrDefault(numColumns);
            var render = (props)=>{
                if (ListItemComponent) {
                    // $FlowFixMe[not-a-component] Component isn't valid
                    // $FlowFixMe[incompatible-type-arg] Component isn't valid
                    // $FlowFixMe[incompatible-return] Component isn't valid
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ListItemComponent, _object_spread._({}, props));
                } else if (renderItem) {
                    // $FlowFixMe[incompatible-call]
                    return renderItem(props);
                } else {
                    return null;
                }
            };
            var renderProp = (info)=>{
                if (cols > 1) {
                    var item = info.item, index = info.index;
                    invariant(Array.isArray(item), 'Expected array of items with numColumns > 1');
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                        style: StyleSheet.compose(styles.row, columnWrapperStyle),
                        children: item.map((it, kk)=>{
                            var element = render({
                                // $FlowFixMe[incompatible-call]
                                item: it,
                                index: index * cols + kk,
                                separators: info.separators
                            });
                            return element != null ? /*#__PURE__*/ (0, _jsxruntime.jsx)(React.Fragment, {
                                children: element
                            }, kk) : null;
                        })
                    });
                } else {
                    return render(info);
                }
            };
            return ListItemComponent ? {
                ListItemComponent: renderProp
            } : {
                renderItem: renderProp
            };
        }, // $FlowFixMe[missing-local-annot]
        _this._memoizedRenderer = (0, _memoizeone.default)(_this._renderer);
        _this._checkProps(_this.props);
        if (_this.props.viewabilityConfigCallbackPairs) {
            _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map((pair)=>({
                    viewabilityConfig: pair.viewabilityConfig,
                    onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)
                }));
        } else if (_this.props.onViewableItemsChanged) {
            _this._virtualizedListPairs.push({
                /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This
         * comment suppresses an error found when Flow v0.63 was deployed. To
         * see the error delete this comment and run Flow. */ viewabilityConfig: _this.props.viewabilityConfig,
                onViewableItemsChanged: _this._createOnViewableItemsChanged(// NOTE: we use a wrapper function to allow the actual callback to change
                // while still keeping the function provided to native to be stable
                (...args)=>{
                    var _this_props;
                    invariant(_this.props.onViewableItemsChanged, 'Changing the nullability of onViewableItemsChanged is not supported. ' + 'Once a function or null is supplied that cannot be changed.');
                    return (_this_props = _this.props).onViewableItemsChanged.apply(_this_props, _to_consumable_array._(args));
                })
            });
        }
        return _this;
    }
    _create_class._(FlatList, [
        {
            /**
   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.
   */ key: "scrollToEnd",
            value: function scrollToEnd(params) {
                if (this._listRef) {
                    this._listRef.scrollToEnd(params);
                }
            }
        },
        {
            /**
   * Scrolls to the item at the specified index such that it is positioned in the viewable area
   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the
   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.
   *
   * Note: cannot scroll to locations outside the render window without specifying the
   * `getItemLayout` prop.
   */ key: "scrollToIndex",
            value: function scrollToIndex(params) {
                if (this._listRef) {
                    this._listRef.scrollToIndex(params);
                }
            }
        },
        {
            /**
   * Requires linear scan through data - use `scrollToIndex` instead if possible.
   *
   * Note: cannot scroll to locations outside the render window without specifying the
   * `getItemLayout` prop.
   */ key: "scrollToItem",
            value: function scrollToItem(params) {
                if (this._listRef) {
                    this._listRef.scrollToItem(params);
                }
            }
        },
        {
            /**
   * Scroll to a specific content pixel offset in the list.
   *
   * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList
   */ key: "scrollToOffset",
            value: function scrollToOffset(params) {
                if (this._listRef) {
                    this._listRef.scrollToOffset(params);
                }
            }
        },
        {
            /**
   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.
   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by
   * taps on items or by navigation actions.
   */ key: "recordInteraction",
            value: function recordInteraction() {
                if (this._listRef) {
                    this._listRef.recordInteraction();
                }
            }
        },
        {
            /**
   * Displays the scroll indicators momentarily.
   *
   * @platform ios
   */ key: "flashScrollIndicators",
            value: function flashScrollIndicators() {
                if (this._listRef) {
                    this._listRef.flashScrollIndicators();
                }
            }
        },
        {
            /**
   * Provides a handle to the underlying scroll responder.
   */ key: "getScrollResponder",
            value: function getScrollResponder() {
                if (this._listRef) {
                    return this._listRef.getScrollResponder();
                }
            }
        },
        {
            /**
   * Provides a reference to the underlying host component
   */ key: "getNativeScrollRef",
            value: function getNativeScrollRef() {
                if (this._listRef) {
                    /* $FlowFixMe[incompatible-return] Suppresses errors found when fixing
       * TextInput typing */ return this._listRef.getScrollRef();
                }
            }
        },
        {
            key: "getScrollableNode",
            value: function getScrollableNode() {
                if (this._listRef) {
                    return this._listRef.getScrollableNode();
                }
            }
        },
        {
            key: "setNativeProps",
            value: function setNativeProps(props) {
                if (this._listRef) {
                    this._listRef.setNativeProps(props);
                }
            }
        },
        {
            // $FlowFixMe[missing-local-annot]
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                invariant(prevProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');
                invariant(prevProps.onViewableItemsChanged == null === (this.props.onViewableItemsChanged == null), 'Changing onViewableItemsChanged nullability on the fly is not supported');
                invariant(!deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig), 'Changing viewabilityConfig on the fly is not supported');
                invariant(prevProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');
                this._checkProps(this.props);
            }
        },
        {
            // $FlowFixMe[missing-local-annot]
            key: "_checkProps",
            value: function _checkProps(props) {
                var // $FlowFixMe[prop-missing] this prop doesn't exist, is only used for an invariant
                getItem = props.getItem, // $FlowFixMe[prop-missing] this prop doesn't exist, is only used for an invariant
                getItemCount = props.getItemCount, horizontal = props.horizontal, columnWrapperStyle = props.columnWrapperStyle, onViewableItemsChanged = props.onViewableItemsChanged, viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;
                var numColumns = numColumnsOrDefault(this.props.numColumns);
                invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');
                if (numColumns > 1) {
                    invariant(!horizontal, 'numColumns does not support horizontal.');
                } else {
                    invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
                }
                invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), 'FlatList does not support setting both onViewableItemsChanged and ' + 'viewabilityConfigCallbackPairs.');
            }
        },
        {
            key: "_pushMultiColumnViewable",
            value: function _pushMultiColumnViewable(arr, v) {
                var numColumns = numColumnsOrDefault(this.props.numColumns);
                var keyExtractor = this.props.keyExtractor ?? _virtualizedlists.keyExtractor;
                v.item.forEach((item, ii)=>{
                    invariant(v.index != null, 'Missing index!');
                    var index = v.index * numColumns + ii;
                    arr.push(_object_spread_props._(_object_spread._({}, v), {
                        item,
                        key: keyExtractor(item, index),
                        index
                    }));
                });
            }
        },
        {
            key: "_createOnViewableItemsChanged",
            value: function _createOnViewableItemsChanged(onViewableItemsChanged) {
                return (info)=>{
                    var numColumns = numColumnsOrDefault(this.props.numColumns);
                    if (onViewableItemsChanged) {
                        if (numColumns > 1) {
                            var changed = [];
                            var viewableItems = [];
                            info.viewableItems.forEach((v)=>this._pushMultiColumnViewable(viewableItems, v));
                            info.changed.forEach((v)=>this._pushMultiColumnViewable(changed, v));
                            onViewableItemsChanged({
                                viewableItems,
                                changed
                            });
                        } else {
                            onViewableItemsChanged(info);
                        }
                    }
                };
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, numColumns = _this_props.numColumns, columnWrapperStyle = _this_props.columnWrapperStyle, _removeClippedSubviews = _this_props.removeClippedSubviews, _this_props_strictMode = _this_props.strictMode, strictMode = _this_props_strictMode === void 0 ? false : _this_props_strictMode, restProps = _object_without_properties._(_this_props, [
                    "numColumns",
                    "columnWrapperStyle",
                    "removeClippedSubviews",
                    "strictMode"
                ]);
                var renderer = strictMode ? this._memoizedRenderer : this._renderer;
                return(// $FlowFixMe[incompatible-exact] - `restProps` (`Props`) is inexact.
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_virtualizedlists.VirtualizedList, _object_spread._(_object_spread_props._(_object_spread._({}, restProps), {
                    getItem: this._getItem,
                    getItemCount: this._getItemCount,
                    keyExtractor: this._keyExtractor,
                    ref: this._captureRef,
                    viewabilityConfigCallbackPairs: this._virtualizedListPairs,
                    removeClippedSubviews: removeClippedSubviewsOrDefault(_removeClippedSubviews)
                }), renderer(this.props.ListItemComponent, this.props.renderItem, columnWrapperStyle, numColumns, this.props.extraData))));
            }
        }
    ]);
    return FlatList;
}(React.PureComponent);
var styles = StyleSheet.create({
    row: {
        flexDirection: 'row'
    }
});
module.exports = FlatList;


}),
"./node_modules/react-native/Libraries/Lists/SectionList.js": 
/*!******************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Lists/SectionList.js ***!
  \******************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return SectionList;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _virtualizedlists = __webpack_require__(/*! @react-native/virtualized-lists */ "webpack/sharing/consume/default/@react-native/virtualized-lists/@react-native/virtualized-lists");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var SectionList = /*#__PURE__*/ function(_React_PureComponent) {
    _inherits._(SectionList, _React_PureComponent);
    function SectionList() {
        _class_call_check._(this, SectionList);
        var _this;
        _this = _call_super._(this, SectionList, arguments), /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
   * LTI update could not be added via codemod */ _this._captureRef = (ref)=>{
            _this._wrapperListRef = ref;
        };
        return _this;
    }
    _create_class._(SectionList, [
        {
            /**
   * Scrolls to the item at the specified `sectionIndex` and `itemIndex` (within the section)
   * positioned in the viewable area such that `viewPosition` 0 places it at the top (and may be
   * covered by a sticky header), 1 at the bottom, and 0.5 centered in the middle. `viewOffset` is a
   * fixed number of pixels to offset the final target position, e.g. to compensate for sticky
   * headers.
   *
   * Note: cannot scroll to locations outside the render window without specifying the
   * `getItemLayout` prop.
   */ key: "scrollToLocation",
            value: function scrollToLocation(params) {
                if (this._wrapperListRef != null) {
                    this._wrapperListRef.scrollToLocation(params);
                }
            }
        },
        {
            /**
   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.
   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by
   * taps on items or by navigation actions.
   */ key: "recordInteraction",
            value: function recordInteraction() {
                var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
                listRef && listRef.recordInteraction();
            }
        },
        {
            /**
   * Displays the scroll indicators momentarily.
   *
   * @platform ios
   */ key: "flashScrollIndicators",
            value: function flashScrollIndicators() {
                var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
                listRef && listRef.flashScrollIndicators();
            }
        },
        {
            /**
   * Provides a handle to the underlying scroll responder.
   */ key: "getScrollResponder",
            value: function getScrollResponder() {
                var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
                if (listRef) {
                    return listRef.getScrollResponder();
                }
            }
        },
        {
            key: "getScrollableNode",
            value: function getScrollableNode() {
                var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
                if (listRef) {
                    return listRef.getScrollableNode();
                }
            }
        },
        {
            key: "setNativeProps",
            value: function setNativeProps(props) {
                var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
                if (listRef) {
                    listRef.setNativeProps(props);
                }
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, _stickySectionHeadersEnabled = _this_props.stickySectionHeadersEnabled, restProps = _object_without_properties._(_this_props, [
                    "stickySectionHeadersEnabled"
                ]);
                var stickySectionHeadersEnabled = _stickySectionHeadersEnabled ?? _Platform.default.OS === 'ios';
                return(/* $FlowFixMe[incompatible-type] Error revealed after improved builtin
       * React utility types */ /* $FlowFixMe[incompatible-type] Error revealed after improved builtin
       * React utility types */ /*#__PURE__*/ (0, _jsxruntime.jsx)(_virtualizedlists.VirtualizedSectionList, _object_spread_props._(_object_spread._({}, restProps), {
                    stickySectionHeadersEnabled: stickySectionHeadersEnabled,
                    ref: this._captureRef,
                    // $FlowFixMe[missing-local-annot]
                    getItemCount: (items)=>items.length,
                    // $FlowFixMe[missing-local-annot]
                    getItem: (items, index)=>items[index]
                })));
            }
        }
    ]);
    return SectionList;
}(_react.PureComponent);


}),
"./node_modules/react-native/Libraries/LogBox/LogBoxNotificationContainer.js": 
/*!***********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/LogBoxNotificationContainer.js ***!
  \***********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get _LogBoxNotificationContainer () {
        return _LogBoxNotificationContainer;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _SafeAreaView_INTERNAL_DO_NOT_USE = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../src/private/components/SafeAreaView_INTERNAL_DO_NOT_USE */ "./node_modules/react-native/src/private/components/SafeAreaView_INTERNAL_DO_NOT_USE.js"));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _LogBoxData = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./Data/LogBoxData */ "./node_modules/react-native/Libraries/LogBox/Data/LogBoxData.js"));
var _LogBoxLog = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./Data/LogBoxLog */ "./node_modules/react-native/Libraries/LogBox/Data/LogBoxLog.js"));
var _LogBoxNotification = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./UI/LogBoxNotification */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxNotification.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function _LogBoxNotificationContainer(props) {
    var logs = props.logs;
    var onDismissWarns = ()=>{
        _LogBoxData.clearWarnings();
    };
    var onDismissErrors = ()=>{
        _LogBoxData.clearErrors();
    };
    var setSelectedLog = (index)=>{
        _LogBoxData.setSelectedLog(index);
    };
    function openLog(log) {
        if (log.onNotificationPress) {
            log.onNotificationPress();
            return;
        }
        var index = logs.length - 1;
        // Stop at zero because if we don't find any log, we'll open the first log.
        while(index > 0 && logs[index] !== log){
            index -= 1;
        }
        setSelectedLog(index);
    }
    if (logs.length === 0 || props.isDisabled === true) {
        return null;
    }
    var warnings = logs.filter((log)=>log.level === 'warn');
    var errors = logs.filter((log)=>log.level === 'error' || log.level === 'fatal');
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_SafeAreaView_INTERNAL_DO_NOT_USE.default, {
        style: styles.list,
        children: [
            warnings.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                style: styles.toast,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxNotification.default, {
                    log: warnings[warnings.length - 1],
                    level: "warn",
                    totalLogCount: warnings.length,
                    onPressOpen: ()=>openLog(warnings[warnings.length - 1]),
                    onPressDismiss: onDismissWarns
                })
            }),
            errors.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                style: styles.toast,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxNotification.default, {
                    log: errors[errors.length - 1],
                    level: "error",
                    totalLogCount: errors.length,
                    onPressOpen: ()=>openLog(errors[errors.length - 1]),
                    onPressDismiss: onDismissErrors
                })
            })
        ]
    });
}
var styles = _StyleSheet.default.create({
    list: {
        bottom: 20,
        left: 10,
        right: 10,
        position: 'absolute'
    },
    toast: {
        borderRadius: 8,
        marginBottom: 5,
        overflow: 'hidden'
    }
});
var _default = _LogBoxData.withSubscription(_LogBoxNotificationContainer);


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js": 
/*!***********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js ***!
  \***********************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _TouchableWithoutFeedback = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/Touchable/TouchableWithoutFeedback */ "./node_modules/react-native/Libraries/Components/Touchable/TouchableWithoutFeedback.js"));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function LogBoxButton(props) {
    var _React_useState = _sliced_to_array._(_react.useState(false), 2), pressed = _React_useState[0], setPressed = _React_useState[1];
    var backgroundColor = props.backgroundColor;
    if (!backgroundColor) {
        backgroundColor = {
            default: _LogBoxStyle.getBackgroundColor(0.95),
            pressed: _LogBoxStyle.getBackgroundColor(0.6)
        };
    }
    var content = /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
        style: _StyleSheet.default.compose({
            backgroundColor: pressed ? backgroundColor.pressed : backgroundColor.default
        }, props.style),
        children: props.children
    });
    return props.onPress == null ? content : /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableWithoutFeedback.default, {
        hitSlop: props.hitSlop,
        onPress: props.onPress,
        onPressIn: ()=>setPressed(true),
        onPressOut: ()=>setPressed(false),
        children: content
    });
}
var _default = LogBoxButton;


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxMessage.js": 
/*!************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxMessage.js ***!
  \************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _Linking = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Linking/Linking */ "./node_modules/react-native/Libraries/Linking/Linking.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function getLinkRanges(string) {
    var regex = /https?:\/\/[^\s$.?#].[^\s]*/gi;
    var matches = [];
    var regexResult;
    while((regexResult = regex.exec(string)) !== null){
        if (regexResult != null) {
            matches.push({
                lowerBound: regexResult.index,
                upperBound: regex.lastIndex
            });
        }
    }
    return matches;
}
function TappableLinks(props) {
    var _loop = function(linkRange) {
        if (startIndex < linkRange.lowerBound) {
            var text = props.content.substring(startIndex, linkRange.lowerBound);
            fragments.push(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                children: text
            }, ++indexCounter));
        }
        var link = props.content.substring(linkRange.lowerBound, linkRange.upperBound);
        fragments.push(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
            onPress: ()=>{
                // $FlowFixMe[unused-promise]
                _Linking.default.openURL(link);
            },
            style: styles.linkText,
            children: link
        }, ++indexCounter));
        startIndex = linkRange.upperBound;
    };
    var matches = getLinkRanges(props.content);
    if (matches.length === 0) {
        // No URLs detected. Just return the content.
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
            style: props.style,
            children: props.content
        });
    }
    // URLs were detected. Construct array of Text nodes.
    var fragments = [];
    var indexCounter = 0;
    var startIndex = 0;
    for (var linkRange of matches)_loop(linkRange);
    if (startIndex < props.content.length) {
        var text = props.content.substring(startIndex);
        fragments.push(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
            style: props.style,
            children: text
        }, ++indexCounter));
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
        style: props.style,
        children: fragments
    });
}
var cleanContent = (content)=>content.replace(/^(TransformError |Warning: (Warning: )?|Error: )/g, '');
function LogBoxMessage(props) {
    var _props_message = props.message, content = _props_message.content, substitutions = _props_message.substitutions;
    if (props.plaintext === true) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
            children: cleanContent(content)
        });
    }
    var maxLength = props.maxLength != null ? props.maxLength : Infinity;
    var substitutionStyle = props.style;
    var elements = [];
    var length = 0;
    var createUnderLength = (key, message, style)=>{
        var cleanMessage = cleanContent(message);
        if (props.maxLength != null) {
            cleanMessage = cleanMessage.slice(0, props.maxLength - length);
        }
        if (length < maxLength) {
            elements.push(/*#__PURE__*/ (0, _jsxruntime.jsx)(TappableLinks, {
                content: cleanMessage,
                style: style
            }, key));
        }
        length += cleanMessage.length;
    };
    var lastOffset = substitutions.reduce((prevOffset, substitution, index)=>{
        var key = String(index);
        if (substitution.offset > prevOffset) {
            var prevPart = content.slice(prevOffset, substitution.offset);
            createUnderLength(key, prevPart);
        }
        var substitutionPart = content.slice(substitution.offset, substitution.offset + substitution.length);
        createUnderLength(key + '.5', substitutionPart, substitutionStyle);
        return substitution.offset + substitution.length;
    }, 0);
    if (lastOffset < content.length) {
        var lastPart = content.slice(lastOffset);
        createUnderLength('-1', lastPart);
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: elements
    });
}
var styles = _StyleSheet.default.create({
    linkText: {
        textDecorationLine: 'underline'
    }
});
var _default = LogBoxMessage;


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxNotification.js": 
/*!*****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxNotification.js ***!
  \*****************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return LogBoxNotification;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _LogBoxData = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../Data/LogBoxData */ "./node_modules/react-native/Libraries/LogBox/Data/LogBoxData.js"));
var _LogBoxLog = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Data/LogBoxLog */ "./node_modules/react-native/Libraries/LogBox/Data/LogBoxLog.js"));
var _LogBoxButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxButton */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js"));
var _LogBoxNotificationCountBadge = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxNotificationCountBadge */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxNotificationCountBadge.js"));
var _LogBoxNotificationDismissButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxNotificationDismissButton */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxNotificationDismissButton.js"));
var _LogBoxNotificationMessage = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxNotificationMessage */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxNotificationMessage.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function LogBoxNotification(props) {
    var totalLogCount = props.totalLogCount, level = props.level, log = props.log;
    // Eagerly symbolicate so the stack is available when pressing to inspect.
    (0, _react.useEffect)(()=>{
        _LogBoxData.symbolicateLogLazy(log);
    }, [
        log
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
        style: styles.container,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxButton.default, {
            onPress: props.onPressOpen,
            style: styles.press,
            backgroundColor: {
                default: _LogBoxStyle.getBackgroundColor(1),
                pressed: _LogBoxStyle.getBackgroundColor(0.9)
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, {
                style: styles.content,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxNotificationCountBadge.default, {
                        count: totalLogCount,
                        level: level
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxNotificationMessage.default, {
                        message: log.message
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxNotificationDismissButton.default, {
                        onPress: props.onPressDismiss
                    })
                ]
            })
        })
    });
}
var styles = _StyleSheet.default.create({
    container: {
        height: 48,
        position: 'relative',
        width: '100%',
        justifyContent: 'center',
        marginTop: 0.5,
        backgroundColor: _LogBoxStyle.getTextColor(1)
    },
    press: {
        height: 48,
        position: 'relative',
        width: '100%',
        justifyContent: 'center',
        marginTop: 0.5,
        paddingHorizontal: 12
    },
    content: {
        alignItems: 'flex-start',
        flexDirection: 'row',
        borderRadius: 8,
        flexGrow: 0,
        flexShrink: 0,
        flexBasis: 'auto'
    }
});


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxNotificationCountBadge.js": 
/*!***************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxNotificationCountBadge.js ***!
  \***************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return LogBoxNotificationCountBadge;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function LogBoxNotificationCountBadge(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
        style: styles.outside,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
            style: [
                styles.inside,
                styles[props.level]
            ],
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                style: styles.text,
                children: props.count <= 1 ? '!' : props.count
            })
        })
    });
}
var styles = _StyleSheet.default.create({
    warn: {
        backgroundColor: _LogBoxStyle.getWarningColor(1)
    },
    error: {
        backgroundColor: _LogBoxStyle.getErrorColor(1)
    },
    outside: {
        padding: 2,
        borderRadius: 25,
        backgroundColor: '#fff',
        marginRight: 8
    },
    inside: {
        minWidth: 18,
        paddingLeft: 4,
        paddingRight: 4,
        borderRadius: 25,
        fontWeight: '600'
    },
    text: {
        color: _LogBoxStyle.getTextColor(1),
        fontSize: 14,
        lineHeight: 18,
        textAlign: 'center',
        fontWeight: '600',
        textShadowColor: _LogBoxStyle.getBackgroundColor(0.4),
        textShadowOffset: {
            width: 0,
            height: 0
        },
        textShadowRadius: 3
    }
});


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxNotificationDismissButton.js": 
/*!******************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxNotificationDismissButton.js ***!
  \******************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return LogBoxNotificationDismissButton;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _Image = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Image/Image */ "./node_modules/react-native/Libraries/Image/Image.android.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _LogBoxButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxButton */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function LogBoxNotificationDismissButton(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
        style: styles.container,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxButton.default, {
            backgroundColor: {
                default: _LogBoxStyle.getTextColor(0.3),
                pressed: _LogBoxStyle.getTextColor(0.5)
            },
            hitSlop: {
                top: 12,
                right: 10,
                bottom: 12,
                left: 10
            },
            onPress: props.onPress,
            style: styles.press,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Image.default, {
                source: __webpack_require__(/*! ./LogBoxImages/close.png */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/close.png"),
                style: styles.image
            })
        })
    });
}
var styles = _StyleSheet.default.create({
    container: {
        alignSelf: 'center',
        flexDirection: 'row',
        flexGrow: 0,
        flexShrink: 0,
        flexBasis: 'auto',
        marginLeft: 5
    },
    press: {
        height: 20,
        width: 20,
        borderRadius: 25,
        alignSelf: 'flex-end',
        alignItems: 'center',
        justifyContent: 'center'
    },
    image: {
        height: 8,
        width: 8,
        tintColor: _LogBoxStyle.getBackgroundColor(1)
    }
});


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxNotificationMessage.js": 
/*!************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxNotificationMessage.js ***!
  \************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return LogBoxNotificationMessage;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../Text/Text */ "./node_modules/react-native/Libraries/Text/Text.js"));
var _LogBoxMessage = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./LogBoxMessage */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxMessage.js"));
var _LogBoxStyle = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./LogBoxStyle */ "./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function LogBoxNotificationMessage(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
        style: styles.container,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
            numberOfLines: 1,
            style: styles.text,
            children: props.message && /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxMessage.default, {
                plaintext: true,
                message: props.message,
                style: styles.substitutionText
            })
        })
    });
}
var styles = _StyleSheet.default.create({
    container: {
        alignSelf: 'stretch',
        flexGrow: 1,
        flexShrink: 1,
        flexBasis: 'auto',
        borderLeftColor: _LogBoxStyle.getTextColor(0.2),
        borderLeftWidth: 1,
        paddingLeft: 8
    },
    text: {
        color: _LogBoxStyle.getTextColor(1),
        flex: 1,
        fontSize: 14,
        lineHeight: 22
    },
    substitutionText: {
        color: _LogBoxStyle.getTextColor(0.6)
    }
});


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js": 
/*!**********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js ***!
  \**********************************************************************/
(function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get getBackgroundColor () {
        return getBackgroundColor;
    },
    get getBackgroundDarkColor () {
        return getBackgroundDarkColor;
    },
    get getBackgroundLightColor () {
        return getBackgroundLightColor;
    },
    get getDividerColor () {
        return getDividerColor;
    },
    get getErrorColor () {
        return getErrorColor;
    },
    get getErrorDarkColor () {
        return getErrorDarkColor;
    },
    get getFatalColor () {
        return getFatalColor;
    },
    get getFatalDarkColor () {
        return getFatalDarkColor;
    },
    get getHighlightColor () {
        return getHighlightColor;
    },
    get getLogColor () {
        return getLogColor;
    },
    get getTextColor () {
        return getTextColor;
    },
    get getWarningColor () {
        return getWarningColor;
    },
    get getWarningDarkColor () {
        return getWarningDarkColor;
    },
    get getWarningHighlightColor () {
        return getWarningHighlightColor;
    }
});
function getBackgroundColor(opacity) {
    return `rgba(51, 51, 51, ${opacity == null ? 1 : opacity})`;
}
function getBackgroundLightColor(opacity) {
    return `rgba(69, 69, 69, ${opacity == null ? 1 : opacity})`;
}
function getBackgroundDarkColor(opacity) {
    return `rgba(34, 34, 34, ${opacity == null ? 1 : opacity})`;
}
function getWarningColor(opacity) {
    return `rgba(250, 186, 48, ${opacity == null ? 1 : opacity})`;
}
function getWarningDarkColor(opacity) {
    return `rgba(224, 167, 8, ${opacity == null ? 1 : opacity})`;
}
function getFatalColor(opacity) {
    return `rgba(243, 83, 105, ${opacity == null ? 1 : opacity})`;
}
function getFatalDarkColor(opacity) {
    return `rgba(208, 75, 95, ${opacity == null ? 1 : opacity})`;
}
function getErrorColor(opacity) {
    return `rgba(243, 83, 105, ${opacity == null ? 1 : opacity})`;
}
function getErrorDarkColor(opacity) {
    return `rgba(208, 75, 95, ${opacity == null ? 1 : opacity})`;
}
function getLogColor(opacity) {
    return `rgba(119, 119, 119, ${opacity == null ? 1 : opacity})`;
}
function getWarningHighlightColor(opacity) {
    return `rgba(252, 176, 29, ${opacity == null ? 1 : opacity})`;
}
function getDividerColor(opacity) {
    return `rgba(255, 255, 255, ${opacity == null ? 1 : opacity})`;
}
function getHighlightColor(opacity) {
    return `rgba(252, 176, 29, ${opacity == null ? 1 : opacity})`;
}
function getTextColor(opacity) {
    return `rgba(255, 255, 255, ${opacity == null ? 1 : opacity})`;
}


}),
"./node_modules/react-native/Libraries/Network/FormData.js": 
/*!*****************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Network/FormData.js ***!
  \*****************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
/**
 * Encode a FormData filename compliant with RFC 2183
 *
 * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition#directives
 */ function encodeFilename(filename) {
    return encodeURIComponent(filename.replace(/\//g, '_'));
}
/**
 * Polyfill for XMLHttpRequest2 FormData API, allowing multipart POST requests
 * with mixed data (string, native files) to be submitted via XMLHttpRequest.
 *
 * Example:
 *
 *   var photo = {
 *     uri: uriFromCameraRoll,
 *     type: 'image/jpeg',
 *     name: 'photo.jpg',
 *   };
 *
 *   var body = new FormData();
 *   body.append('authToken', 'secret');
 *   body.append('photo', photo);
 *   body.append('title', 'A beautiful photo!');
 *
 *   xhr.open('POST', serverURL);
 *   xhr.send(body);
 */ var FormData = /*#__PURE__*/ function() {
    function FormData() {
        _class_call_check._(this, FormData);
        this._parts = [];
    }
    _create_class._(FormData, [
        {
            key: "append",
            value: function append(key, value) {
                // The XMLHttpRequest spec doesn't specify if duplicate keys are allowed.
                // MDN says that any new values should be appended to existing values.
                // In any case, major browsers allow duplicate keys, so that's what we'll do
                // too. They'll simply get appended as additional form data parts in the
                // request body, leaving the server to deal with them.
                this._parts.push([
                    key,
                    value
                ]);
            }
        },
        {
            key: "getAll",
            value: function getAll(key) {
                return this._parts.filter((ref)=>{
                    var _ref = _sliced_to_array._(ref, 1), name = _ref[0];
                    return name === key;
                }).map((ref)=>{
                    var _ref = _sliced_to_array._(ref, 2), value = _ref[1];
                    return value;
                });
            }
        },
        {
            key: "getParts",
            value: function getParts() {
                return this._parts.map((ref)=>{
                    var _ref = _sliced_to_array._(ref, 2), name = _ref[0], value = _ref[1];
                    var contentDisposition = 'form-data; name="' + name + '"';
                    var headers = {
                        'content-disposition': contentDisposition
                    };
                    // The body part is a "blob", which in React Native just means
                    // an object with a `uri` attribute. Optionally, it can also
                    // have a `name` and `type` attribute to specify filename and
                    // content type (cf. web Blob interface.)
                    if (typeof value === 'object' && !Array.isArray(value) && value) {
                        if (typeof value.name === 'string') {
                            headers['content-disposition'] += `; filename="${encodeFilename(value.name)}"`;
                        }
                        if (typeof value.type === 'string') {
                            headers['content-type'] = value.type;
                        }
                        return _object_spread_props._(_object_spread._({}, value), {
                            headers,
                            fieldName: name
                        });
                    }
                    // Convert non-object values to strings as per FormData.append() spec
                    return {
                        string: String(value),
                        headers,
                        fieldName: name
                    };
                });
            }
        }
    ]);
    return FormData;
}();
module.exports = FormData;


}),
"./node_modules/react-native/Libraries/Network/RCTNetworking.android.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Network/RCTNetworking.android.js ***!
  \******************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ // Do not require the native RCTNetworking module directly! Use this wrapper module instead.
// It will add the necessary requestId, so that you don't have to generate it yourself.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../EventEmitter/NativeEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _convertRequestBody = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./convertRequestBody */ "./node_modules/react-native/Libraries/Network/convertRequestBody.js"));
var _NativeNetworkingAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeNetworkingAndroid */ "./node_modules/react-native/Libraries/Network/NativeNetworkingAndroid.js"));
// Convert FormData headers to arrays, which are easier to consume in
// native on Android.
function convertHeadersMapToArray(headers) {
    var headerArray = [];
    for(var name in headers){
        headerArray.push([
            name,
            headers[name]
        ]);
    }
    return headerArray;
}
var _requestId = 1;
function generateRequestId() {
    return _requestId++;
}
var emitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
// If you want to use the native module on other platforms, please remove this condition and test its behavior
_Platform.default.OS !== 'ios' ? null : _NativeNetworkingAndroid.default);
/**
 * This object is a wrapper around the native RCTNetworking module. It adds a necessary unique
 * requestId to each network request that can be used to abort that request later on.
 */ var RCTNetworking = {
    addListener (eventType, listener, context) {
        // $FlowFixMe[incompatible-call]
        return emitter.addListener(eventType, listener, context);
    },
    sendRequest (method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
        var body = (0, _convertRequestBody.default)(data);
        if (body && body.formData) {
            body.formData = body.formData.map((part)=>_object_spread_props._(_object_spread._({}, part), {
                    headers: convertHeadersMapToArray(part.headers)
                }));
        }
        var requestId = generateRequestId();
        _NativeNetworkingAndroid.default.sendRequest(method, url, requestId, convertHeadersMapToArray(headers), _object_spread_props._(_object_spread._({}, body), {
            trackingName
        }), responseType, incrementalUpdates, timeout, withCredentials);
        callback(requestId);
    },
    abortRequest (requestId) {
        _NativeNetworkingAndroid.default.abortRequest(requestId);
    },
    clearCookies (callback) {
        _NativeNetworkingAndroid.default.clearCookies(callback);
    }
};
var _default = RCTNetworking;


}),
"./node_modules/react-native/Libraries/Network/XHRInterceptor.js": 
/*!***********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Network/XHRInterceptor.js ***!
  \***********************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
var XMLHttpRequest = __webpack_require__(/*! ./XMLHttpRequest */ "./node_modules/react-native/Libraries/Network/XMLHttpRequest.js");
// $FlowFixMe[method-unbinding]
var originalXHROpen = XMLHttpRequest.prototype.open;
// $FlowFixMe[method-unbinding]
var originalXHRSend = XMLHttpRequest.prototype.send;
// $FlowFixMe[method-unbinding]
var originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;
var openCallback;
var sendCallback;
var requestHeaderCallback;
var headerReceivedCallback;
var responseCallback;
var isInterceptorEnabled = false;
/**
 * A network interceptor which monkey-patches XMLHttpRequest methods
 * to gather all network requests/responses, in order to show their
 * information in the React Native inspector development tool.
 * This supports interception with XMLHttpRequest API, including Fetch API
 * and any other third party libraries that depend on XMLHttpRequest.
 */ var XHRInterceptor = {
    /**
   * Invoked before XMLHttpRequest.open(...) is called.
   */ setOpenCallback (callback) {
        openCallback = callback;
    },
    /**
   * Invoked before XMLHttpRequest.send(...) is called.
   */ setSendCallback (callback) {
        sendCallback = callback;
    },
    /**
   * Invoked after xhr's readyState becomes xhr.HEADERS_RECEIVED.
   */ setHeaderReceivedCallback (callback) {
        headerReceivedCallback = callback;
    },
    /**
   * Invoked after xhr's readyState becomes xhr.DONE.
   */ setResponseCallback (callback) {
        responseCallback = callback;
    },
    /**
   * Invoked before XMLHttpRequest.setRequestHeader(...) is called.
   */ setRequestHeaderCallback (callback) {
        requestHeaderCallback = callback;
    },
    isInterceptorEnabled () {
        return isInterceptorEnabled;
    },
    enableInterception () {
        if (isInterceptorEnabled) {
            return;
        }
        // Override `open` method for all XHR requests to intercept the request
        // method and url, then pass them through the `openCallback`.
        // $FlowFixMe[cannot-write]
        // $FlowFixMe[missing-this-annot]
        XMLHttpRequest.prototype.open = function(method, url) {
            if (openCallback) {
                openCallback(method, url, this);
            }
            originalXHROpen.apply(this, arguments);
        };
        // Override `setRequestHeader` method for all XHR requests to intercept
        // the request headers, then pass them through the `requestHeaderCallback`.
        // $FlowFixMe[cannot-write]
        // $FlowFixMe[missing-this-annot]
        XMLHttpRequest.prototype.setRequestHeader = function(header, value) {
            if (requestHeaderCallback) {
                requestHeaderCallback(header, value, this);
            }
            originalXHRSetRequestHeader.apply(this, arguments);
        };
        // Override `send` method of all XHR requests to intercept the data sent,
        // register listeners to intercept the response, and invoke the callbacks.
        // $FlowFixMe[cannot-write]
        // $FlowFixMe[missing-this-annot]
        XMLHttpRequest.prototype.send = function(data) {
            if (sendCallback) {
                sendCallback(data, this);
            }
            if (this.addEventListener) {
                this.addEventListener('readystatechange', ()=>{
                    if (!isInterceptorEnabled) {
                        return;
                    }
                    if (this.readyState === this.HEADERS_RECEIVED) {
                        var contentTypeString = this.getResponseHeader('Content-Type');
                        var contentLengthString = this.getResponseHeader('Content-Length');
                        var responseContentType, responseSize;
                        if (contentTypeString) {
                            responseContentType = contentTypeString.split(';')[0];
                        }
                        if (contentLengthString) {
                            responseSize = parseInt(contentLengthString, 10);
                        }
                        if (headerReceivedCallback) {
                            headerReceivedCallback(responseContentType, responseSize, this.getAllResponseHeaders(), this);
                        }
                    }
                    if (this.readyState === this.DONE) {
                        if (responseCallback) {
                            responseCallback(this.status, this.timeout, this.response, this.responseURL, this.responseType, this);
                        }
                    }
                }, false);
            }
            originalXHRSend.apply(this, arguments);
        };
        isInterceptorEnabled = true;
    },
    // Unpatch XMLHttpRequest methods and remove the callbacks.
    disableInterception () {
        if (!isInterceptorEnabled) {
            return;
        }
        isInterceptorEnabled = false;
        // $FlowFixMe[cannot-write]
        XMLHttpRequest.prototype.send = originalXHRSend;
        // $FlowFixMe[cannot-write]
        XMLHttpRequest.prototype.open = originalXHROpen;
        // $FlowFixMe[cannot-write]
        XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;
        responseCallback = null;
        openCallback = null;
        sendCallback = null;
        headerReceivedCallback = null;
        requestHeaderCallback = null;
    }
};
module.exports = XHRInterceptor;


}),
"./node_modules/react-native/Libraries/Network/XMLHttpRequest.js": 
/*!***********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Network/XMLHttpRequest.js ***!
  \***********************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _eventtargetshim = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! event-target-shim */ "./node_modules/event-target-shim/dist/event-target-shim.js"));
var BlobManager = __webpack_require__(/*! ../Blob/BlobManager */ "./node_modules/react-native/Libraries/Blob/BlobManager.js");
var GlobalPerformanceLogger = __webpack_require__(/*! ../Utilities/GlobalPerformanceLogger */ "./node_modules/react-native/Libraries/Utilities/GlobalPerformanceLogger.js");
var RCTNetworking = (__webpack_require__(/*! ./RCTNetworking */ "./node_modules/react-native/Libraries/Network/RCTNetworking.android.js")/* ["default"] */["default"]);
var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js");
var invariant = __webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js");
var DEBUG_NETWORK_SEND_DELAY = false; // Set to a number of milliseconds when debugging
var LABEL_FOR_MISSING_URL_FOR_PROFILING = 'Unknown URL';
// The native blob module is optional so inject it here if available.
if (BlobManager.isAvailable) {
    BlobManager.addNetworkingHandler();
}
var UNSENT = 0;
var OPENED = 1;
var HEADERS_RECEIVED = 2;
var LOADING = 3;
var DONE = 4;
var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof __webpack_require__.g.ArrayBuffer === 'function',
    blob: typeof __webpack_require__.g.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
};
var REQUEST_EVENTS = [
    'abort',
    'error',
    'load',
    'loadstart',
    'progress',
    'timeout',
    'loadend'
];
var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');
var XMLHttpRequestEventTarget = /*#__PURE__*/ function(_EventTarget) {
    _inherits._(XMLHttpRequestEventTarget, _EventTarget);
    function XMLHttpRequestEventTarget() {
        _class_call_check._(this, XMLHttpRequestEventTarget);
        return _call_super._(this, XMLHttpRequestEventTarget, arguments);
    }
    return XMLHttpRequestEventTarget;
}(_eventtargetshim.default.apply(void 0, _to_consumable_array._(REQUEST_EVENTS)));
/**
 * Shared base for platform-specific XMLHttpRequest implementations.
 */ var XMLHttpRequest = /*#__PURE__*/ function(_EventTarget) {
    _inherits._(XMLHttpRequest, _EventTarget);
    function XMLHttpRequest() {
        _class_call_check._(this, XMLHttpRequest);
        var _this;
        _this = _call_super._(this, XMLHttpRequest), _this.UNSENT = UNSENT, _this.OPENED = OPENED, _this.HEADERS_RECEIVED = HEADERS_RECEIVED, _this.LOADING = LOADING, _this.DONE = DONE, _this.readyState = UNSENT, _this.status = 0, _this.timeout = 0, _this.withCredentials = true, _this.upload = new XMLHttpRequestEventTarget(), _this._aborted = false, _this._hasError = false, _this._method = null, _this._perfKey = null, _this._response = '', _this._url = null, _this._timedOut = false, _this._trackingName = 'unknown', _this._incrementalEvents = false, _this._startTime = null, _this._performanceLogger = GlobalPerformanceLogger;
        _this._reset();
        return _this;
    }
    _create_class._(XMLHttpRequest, [
        {
            key: "_reset",
            value: function _reset() {
                this.readyState = this.UNSENT;
                this.responseHeaders = undefined;
                this.status = 0;
                delete this.responseURL;
                this._requestId = null;
                this._cachedResponse = undefined;
                this._hasError = false;
                this._headers = {};
                this._response = '';
                this._responseType = '';
                this._sent = false;
                this._lowerCaseResponseHeaders = {};
                this._clearSubscriptions();
                this._timedOut = false;
            }
        },
        {
            key: "responseType",
            get: function() {
                return this._responseType;
            },
            set: function(responseType) {
                if (this._sent) {
                    throw new Error("Failed to set the 'responseType' property on 'XMLHttpRequest': The " + 'response type cannot be set after the request has been sent.');
                }
                if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
                    console.warn(`The provided value '${responseType}' is not a valid 'responseType'.`);
                    return;
                }
                // redboxes early, e.g. for 'arraybuffer' on ios 7
                invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', `The provided value '${responseType}' is unsupported in this environment.`);
                if (responseType === 'blob') {
                    invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
                }
                this._responseType = responseType;
            }
        },
        {
            key: "responseText",
            get: function() {
                if (this._responseType !== '' && this._responseType !== 'text') {
                    throw new Error("The 'responseText' property is only available if 'responseType' " + `is set to '' or 'text', but it is '${this._responseType}'.`);
                }
                if (this.readyState < LOADING) {
                    return '';
                }
                return this._response;
            }
        },
        {
            key: "response",
            get: function() {
                var responseType = this.responseType;
                if (responseType === '' || responseType === 'text') {
                    return this.readyState < LOADING || this._hasError ? '' : this._response;
                }
                if (this.readyState !== DONE) {
                    return null;
                }
                if (this._cachedResponse !== undefined) {
                    return this._cachedResponse;
                }
                switch(responseType){
                    case 'document':
                        this._cachedResponse = null;
                        break;
                    case 'arraybuffer':
                        this._cachedResponse = base64.toByteArray(this._response).buffer;
                        break;
                    case 'blob':
                        if (typeof this._response === 'object' && this._response) {
                            this._cachedResponse = BlobManager.createFromOptions(this._response);
                        } else if (this._response === '') {
                            this._cachedResponse = BlobManager.createFromParts([]);
                        } else {
                            throw new Error('Invalid response for blob - expecting object, was ' + `${typeof this._response}: ${this._response.trim()}`);
                        }
                        break;
                    case 'json':
                        try {
                            this._cachedResponse = JSON.parse(this._response);
                        } catch (_) {
                            this._cachedResponse = null;
                        }
                        break;
                    default:
                        this._cachedResponse = null;
                }
                return this._cachedResponse;
            }
        },
        {
            // exposed for testing
            key: "__didCreateRequest",
            value: function __didCreateRequest(requestId) {
                this._requestId = requestId;
                XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
            }
        },
        {
            // exposed for testing
            key: "__didUploadProgress",
            value: function __didUploadProgress(requestId, progress, total) {
                if (requestId === this._requestId) {
                    this.upload.dispatchEvent({
                        type: 'progress',
                        lengthComputable: true,
                        loaded: progress,
                        total
                    });
                }
            }
        },
        {
            key: "__didReceiveResponse",
            value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
                if (requestId === this._requestId) {
                    this._perfKey != null && this._performanceLogger.stopTimespan(this._perfKey);
                    this.status = status;
                    this.setResponseHeaders(responseHeaders);
                    this.setReadyState(this.HEADERS_RECEIVED);
                    if (responseURL || responseURL === '') {
                        this.responseURL = responseURL;
                    } else {
                        delete this.responseURL;
                    }
                    XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
                }
            }
        },
        {
            key: "__didReceiveData",
            value: function __didReceiveData(requestId, response) {
                if (requestId !== this._requestId) {
                    return;
                }
                this._response = response;
                this._cachedResponse = undefined; // force lazy recomputation
                this.setReadyState(this.LOADING);
                XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
            }
        },
        {
            key: "__didReceiveIncrementalData",
            value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
                if (requestId !== this._requestId) {
                    return;
                }
                if (!this._response) {
                    this._response = responseText;
                } else {
                    this._response += responseText;
                }
                if (XMLHttpRequest._profiling) {
                    performance.mark('Track:XMLHttpRequest:Incremental Data: ' + this._getMeasureURL());
                }
                XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
                this.setReadyState(this.LOADING);
                this.__didReceiveDataProgress(requestId, progress, total);
            }
        },
        {
            key: "__didReceiveDataProgress",
            value: function __didReceiveDataProgress(requestId, loaded, total) {
                if (requestId !== this._requestId) {
                    return;
                }
                this.dispatchEvent({
                    type: 'progress',
                    lengthComputable: total >= 0,
                    loaded,
                    total
                });
            }
        },
        {
            // exposed for testing
            key: "__didCompleteResponse",
            value: function __didCompleteResponse(requestId, error, timeOutError) {
                if (requestId === this._requestId) {
                    if (error) {
                        if (this._responseType === '' || this._responseType === 'text') {
                            this._response = error;
                        }
                        this._hasError = true;
                        if (timeOutError) {
                            this._timedOut = true;
                        }
                    }
                    this._clearSubscriptions();
                    this._requestId = null;
                    this.setReadyState(this.DONE);
                    if (XMLHttpRequest._profiling && this._startTime != null) {
                        var start = this._startTime;
                        performance.measure('Track:XMLHttpRequest:' + this._getMeasureURL(), {
                            start,
                            end: performance.now()
                        });
                    }
                    if (error) {
                        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
                    } else {
                        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
                    }
                }
            }
        },
        {
            key: "_clearSubscriptions",
            value: function _clearSubscriptions() {
                (this._subscriptions || []).forEach((sub)=>{
                    if (sub) {
                        sub.remove();
                    }
                });
                this._subscriptions = [];
            }
        },
        {
            key: "getAllResponseHeaders",
            value: function getAllResponseHeaders() {
                if (!this.responseHeaders) {
                    // according to the spec, return null if no response has been received
                    return null;
                }
                // Assign to non-nullable local variable.
                var responseHeaders = this.responseHeaders;
                var unsortedHeaders = new Map();
                for (var rawHeaderName of Object.keys(responseHeaders)){
                    var headerValue = responseHeaders[rawHeaderName];
                    var lowerHeaderName = rawHeaderName.toLowerCase();
                    var header = unsortedHeaders.get(lowerHeaderName);
                    if (header) {
                        header.headerValue += ', ' + headerValue;
                        unsortedHeaders.set(lowerHeaderName, header);
                    } else {
                        unsortedHeaders.set(lowerHeaderName, {
                            lowerHeaderName,
                            upperHeaderName: rawHeaderName.toUpperCase(),
                            headerValue
                        });
                    }
                }
                // Sort in ascending order, with a being less than b if a's name is legacy-uppercased-byte less than b's name.
                var sortedHeaders = _to_consumable_array._(unsortedHeaders.values()).sort((a, b)=>{
                    if (a.upperHeaderName < b.upperHeaderName) {
                        return -1;
                    }
                    if (a.upperHeaderName > b.upperHeaderName) {
                        return 1;
                    }
                    return 0;
                });
                // Combine into single text response.
                return sortedHeaders.map((header)=>{
                    return header.lowerHeaderName + ': ' + header.headerValue;
                }).join('\r\n') + '\r\n';
            }
        },
        {
            key: "getResponseHeader",
            value: function getResponseHeader(header) {
                var value = this._lowerCaseResponseHeaders[header.toLowerCase()];
                return value !== undefined ? value : null;
            }
        },
        {
            key: "setRequestHeader",
            value: function setRequestHeader(header, value) {
                if (this.readyState !== this.OPENED) {
                    throw new Error('Request has not been opened');
                }
                this._headers[header.toLowerCase()] = String(value);
            }
        },
        {
            /**
   * Custom extension for tracking origins of request.
   */ key: "setTrackingName",
            value: function setTrackingName(trackingName) {
                this._trackingName = trackingName;
                return this;
            }
        },
        {
            /**
   * Custom extension for setting a custom performance logger
   */ key: "setPerformanceLogger",
            value: function setPerformanceLogger(performanceLogger) {
                this._performanceLogger = performanceLogger;
                return this;
            }
        },
        {
            key: "open",
            value: function open(method, url, async) {
                /* Other optional arguments are not supported yet */ if (this.readyState !== this.UNSENT) {
                    throw new Error('Cannot open, already sending');
                }
                if (async !== undefined && !async) {
                    // async is default
                    throw new Error('Synchronous http requests are not supported');
                }
                if (!url) {
                    throw new Error('Cannot load an empty url');
                }
                this._method = method.toUpperCase();
                this._url = url;
                this._aborted = false;
                this.setReadyState(this.OPENED);
            }
        },
        {
            key: "send",
            value: function send(data) {
                if (this.readyState !== this.OPENED) {
                    throw new Error('Request has not been opened');
                }
                if (this._sent) {
                    throw new Error('Request has already been sent');
                }
                this._sent = true;
                var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;
                this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', (args)=>this.__didUploadProgress.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', (args)=>this.__didReceiveResponse.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', (args)=>this.__didReceiveData.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', (args)=>this.__didReceiveIncrementalData.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', (args)=>this.__didReceiveDataProgress.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', (args)=>this.__didCompleteResponse.apply(this, _to_consumable_array._(args))));
                var nativeResponseType = 'text';
                if (this._responseType === 'arraybuffer') {
                    nativeResponseType = 'base64';
                }
                if (this._responseType === 'blob') {
                    nativeResponseType = 'blob';
                }
                var doSend = ()=>{
                    var friendlyName = this._trackingName !== 'unknown' ? this._trackingName : this._url;
                    this._perfKey = 'network_XMLHttpRequest_' + String(friendlyName);
                    this._performanceLogger.startTimespan(this._perfKey);
                    this._startTime = performance.now();
                    invariant(this._method, 'XMLHttpRequest method needs to be defined (%s).', friendlyName);
                    invariant(this._url, 'XMLHttpRequest URL needs to be defined (%s).', friendlyName);
                    RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found
         * when making Flow check .android.js files. */ nativeResponseType, incrementalEvents, this.timeout, // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                    this.__didCreateRequest.bind(this), this.withCredentials);
                };
                if (DEBUG_NETWORK_SEND_DELAY) {
                    setTimeout(doSend, DEBUG_NETWORK_SEND_DELAY);
                } else {
                    doSend();
                }
            }
        },
        {
            key: "abort",
            value: function abort() {
                this._aborted = true;
                if (this._requestId) {
                    RCTNetworking.abortRequest(this._requestId);
                }
                // only call onreadystatechange if there is something to abort,
                // below logic is per spec
                if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
                    this._reset();
                    this.setReadyState(this.DONE);
                }
                // Reset again after, in case modified in handler
                this._reset();
            }
        },
        {
            key: "setResponseHeaders",
            value: function setResponseHeaders(responseHeaders) {
                this.responseHeaders = responseHeaders || null;
                var headers = responseHeaders || {};
                this._lowerCaseResponseHeaders = Object.keys(headers).reduce((lcaseHeaders, headerName)=>{
                    // $FlowFixMe[invalid-computed-prop]
                    lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
                    return lcaseHeaders;
                }, {});
            }
        },
        {
            key: "setReadyState",
            value: function setReadyState(newState) {
                this.readyState = newState;
                this.dispatchEvent({
                    type: 'readystatechange'
                });
                if (newState === this.DONE) {
                    if (this._aborted) {
                        this.dispatchEvent({
                            type: 'abort'
                        });
                    } else if (this._hasError) {
                        if (this._timedOut) {
                            this.dispatchEvent({
                                type: 'timeout'
                            });
                        } else {
                            this.dispatchEvent({
                                type: 'error'
                            });
                        }
                    } else {
                        this.dispatchEvent({
                            type: 'load'
                        });
                    }
                    this.dispatchEvent({
                        type: 'loadend'
                    });
                }
            }
        },
        {
            /* global EventListener */ key: "addEventListener",
            value: function addEventListener(type, listener) {
                // If we dont' have a 'readystatechange' event handler, we don't
                // have to send repeated LOADING events with incremental updates
                // to responseText, which will avoid a bunch of native -> JS
                // bridge traffic.
                if (type === 'readystatechange' || type === 'progress') {
                    this._incrementalEvents = true;
                }
                _get._(_get_prototype_of._(XMLHttpRequest.prototype), "addEventListener", this).call(this, type, listener);
            }
        },
        {
            key: "_getMeasureURL",
            value: function _getMeasureURL() {
                return this._trackingName ?? this._url ?? LABEL_FOR_MISSING_URL_FOR_PROFILING;
            }
        }
    ], [
        {
            key: "setInterceptor",
            value: function setInterceptor(interceptor) {
                XMLHttpRequest._interceptor = interceptor;
            }
        },
        {
            key: "enableProfiling",
            value: function enableProfiling(enableProfiling) {
                XMLHttpRequest._profiling = enableProfiling;
            }
        }
    ]);
    return XMLHttpRequest;
}(_eventtargetshim.default.apply(void 0, _to_consumable_array._(XHR_EVENTS)));
XMLHttpRequest.UNSENT = UNSENT;
XMLHttpRequest.OPENED = OPENED;
XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
XMLHttpRequest.LOADING = LOADING;
XMLHttpRequest.DONE = DONE;
XMLHttpRequest._interceptor = null;
XMLHttpRequest._profiling = false;
module.exports = XMLHttpRequest;


}),
"./node_modules/react-native/Libraries/Network/convertRequestBody.js": 
/*!***************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Network/convertRequestBody.js ***!
  \***************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
var Blob = __webpack_require__(/*! ../Blob/Blob */ "./node_modules/react-native/Libraries/Blob/Blob.js");
var binaryToBase64 = __webpack_require__(/*! ../Utilities/binaryToBase64 */ "./node_modules/react-native/Libraries/Utilities/binaryToBase64.js");
var FormData = __webpack_require__(/*! ./FormData */ "./node_modules/react-native/Libraries/Network/FormData.js");
function convertRequestBody(body) {
    if (typeof body === 'string') {
        return {
            string: body
        };
    }
    if (body instanceof Blob) {
        return {
            blob: body.data
        };
    }
    if (body instanceof FormData) {
        return {
            formData: body.getParts()
        };
    }
    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
        /* $FlowFixMe[incompatible-call] : no way to assert that 'body' is indeed
     * an ArrayBufferView */ return {
            base64: binaryToBase64(body)
        };
    }
    return body;
}
module.exports = convertRequestBody;


}),
"./node_modules/react-native/Libraries/Pressability/HoverState.js": 
/*!************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Pressability/HoverState.js ***!
  \************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "isHoverEnabled", ({
    enumerable: true,
    get: function() {
        return isHoverEnabled;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var isEnabled = false;
/* $FlowFixMe[incompatible-type] Error found due to incomplete typing of
 * Platform.flow.js */ if (_Platform.default.OS === 'web') {
    var canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
    if (canUseDOM) {
        /**
     * Web browsers emulate mouse events (and hover states) after touch events.
     * This code infers when the currently-in-use modality supports hover
     * (including for multi-modality devices) and considers "hover" to be enabled
     * if a mouse movement occurs more than 1 second after the last touch event.
     * This threshold is long enough to account for longer delays between the
     * browser firing touch and mouse events on low-powered devices.
     */ var HOVER_THRESHOLD_MS = 1000;
        var lastTouchTimestamp = 0;
        var enableHover = ()=>{
            if (isEnabled || Date.now() - lastTouchTimestamp < HOVER_THRESHOLD_MS) {
                return;
            }
            isEnabled = true;
        };
        var disableHover = ()=>{
            lastTouchTimestamp = Date.now();
            if (isEnabled) {
                isEnabled = false;
            }
        };
        document.addEventListener('touchstart', disableHover, true);
        document.addEventListener('touchmove', disableHover, true);
        document.addEventListener('mousemove', enableHover, true);
    }
}
function isHoverEnabled() {
    return isEnabled;
}


}),
"./node_modules/react-native/Libraries/Pressability/Pressability.js": 
/*!**************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Pressability/Pressability.js ***!
  \**************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return Pressability;
    }
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _SoundManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Components/Sound/SoundManager */ "./node_modules/react-native/Libraries/Components/Sound/SoundManager.js"));
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../ReactNative/ReactNativeFeatureFlags */ "./node_modules/react-native/Libraries/ReactNative/ReactNativeFeatureFlags.js"));
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../ReactNative/UIManager */ "./node_modules/react-native/Libraries/ReactNative/UIManager.js"));
var _Rect = __webpack_require__(/*! ../StyleSheet/Rect */ "./node_modules/react-native/Libraries/StyleSheet/Rect.js");
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _HoverState = __webpack_require__(/*! ./HoverState */ "./node_modules/react-native/Libraries/Pressability/HoverState.js");
var _PressabilityPerformanceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./PressabilityPerformanceEventEmitter.js */ "./node_modules/react-native/Libraries/Pressability/PressabilityPerformanceEventEmitter.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var Transitions = Object.freeze({
    NOT_RESPONDER: {
        DELAY: 'ERROR',
        RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',
        RESPONDER_RELEASE: 'ERROR',
        RESPONDER_TERMINATED: 'ERROR',
        ENTER_PRESS_RECT: 'ERROR',
        LEAVE_PRESS_RECT: 'ERROR',
        LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_INACTIVE_PRESS_IN: {
        DELAY: 'RESPONDER_ACTIVE_PRESS_IN',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',
        LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
        DELAY: 'RESPONDER_ACTIVE_PRESS_OUT',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',
        LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_ACTIVE_PRESS_IN: {
        DELAY: 'ERROR',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',
        LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
        DELAY: 'ERROR',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',
        LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
        DELAY: 'ERROR',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
        LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
        DELAY: 'ERROR',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
        LONG_PRESS_DETECTED: 'ERROR'
    },
    ERROR: {
        DELAY: 'NOT_RESPONDER',
        RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'NOT_RESPONDER',
        LEAVE_PRESS_RECT: 'NOT_RESPONDER',
        LONG_PRESS_DETECTED: 'NOT_RESPONDER'
    }
});
var isActiveSignal = (signal)=>signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
var isActivationSignal = (signal)=>signal === 'RESPONDER_ACTIVE_PRESS_OUT' || signal === 'RESPONDER_ACTIVE_PRESS_IN';
var isPressInSignal = (signal)=>signal === 'RESPONDER_INACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
var isTerminalSignal = (signal)=>signal === 'RESPONDER_TERMINATED' || signal === 'RESPONDER_RELEASE';
var DEFAULT_LONG_PRESS_DELAY_MS = 500;
var DEFAULT_PRESS_RECT_OFFSETS = {
    bottom: 30,
    left: 20,
    right: 20,
    top: 20
};
var DEFAULT_MIN_PRESS_DURATION = 130;
var DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE = 10;
var longPressDeactivationDistance = DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE;
var Pressability = /*#__PURE__*/ function() {
    "use strict";
    function Pressability(config) {
        _class_call_check._(this, Pressability);
        this._eventHandlers = null;
        this._hoverInDelayTimeout = null;
        this._hoverOutDelayTimeout = null;
        this._isHovered = false;
        this._longPressDelayTimeout = null;
        this._pressDelayTimeout = null;
        this._pressOutDelayTimeout = null;
        this._responderID = null;
        this._responderRegion = null;
        this._touchState = 'NOT_RESPONDER';
        this._measureCallback = (left, top, width, height, pageX, pageY)=>{
            if (!left && !top && !width && !height && !pageX && !pageY) {
                return;
            }
            this._responderRegion = {
                bottom: pageY + height,
                left: pageX,
                right: pageX + width,
                top: pageY
            };
        };
        this.configure(config);
    }
    _create_class._(Pressability, [
        {
            key: "configure",
            value: function configure(config) {
                this._config = config;
            }
        },
        {
            /**
   * Resets any pending timers. This should be called on unmount.
   */ key: "reset",
            value: function reset() {
                this._cancelHoverInDelayTimeout();
                this._cancelHoverOutDelayTimeout();
                this._cancelLongPressDelayTimeout();
                this._cancelPressDelayTimeout();
                this._cancelPressOutDelayTimeout();
                // Ensure that, if any async event handlers are fired after unmount
                // due to a race, we don't call any configured callbacks.
                this._config = Object.freeze({});
            }
        },
        {
            /**
   * Returns a set of props to spread into the interactive element.
   */ key: "getEventHandlers",
            value: function getEventHandlers() {
                if (this._eventHandlers == null) {
                    this._eventHandlers = this._createEventHandlers();
                }
                return this._eventHandlers;
            }
        },
        {
            key: "_createEventHandlers",
            value: function _createEventHandlers() {
                var focusEventHandlers = {
                    onBlur: (event)=>{
                        var onBlur = this._config.onBlur;
                        if (onBlur != null) {
                            onBlur(event);
                        }
                    },
                    onFocus: (event)=>{
                        var onFocus = this._config.onFocus;
                        if (onFocus != null) {
                            onFocus(event);
                        }
                    }
                };
                var responderEventHandlers = {
                    onStartShouldSetResponder: ()=>{
                        var disabled = this._config.disabled;
                        return !disabled ?? true;
                    },
                    onResponderGrant: (event)=>{
                        event.persist();
                        this._cancelPressOutDelayTimeout();
                        this._responderID = event.currentTarget;
                        this._touchState = 'NOT_RESPONDER';
                        this._receiveSignal('RESPONDER_GRANT', event);
                        var delayPressIn = normalizeDelay(this._config.delayPressIn);
                        if (delayPressIn > 0) {
                            this._pressDelayTimeout = setTimeout(()=>{
                                this._receiveSignal('DELAY', event);
                            }, delayPressIn);
                        } else {
                            this._receiveSignal('DELAY', event);
                        }
                        var delayLongPress = normalizeDelay(this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS - delayPressIn);
                        this._longPressDelayTimeout = setTimeout(()=>{
                            this._handleLongPress(event);
                        }, delayLongPress + delayPressIn);
                        return this._config.blockNativeResponder === true;
                    },
                    onResponderMove: (event)=>{
                        var onPressMove = this._config.onPressMove;
                        if (onPressMove != null) {
                            onPressMove(event);
                        }
                        // Region may not have finished being measured, yet.
                        var responderRegion = this._responderRegion;
                        if (responderRegion == null) {
                            return;
                        }
                        var touch = getTouchFromPressEvent(event);
                        if (touch == null) {
                            this._cancelLongPressDelayTimeout();
                            this._receiveSignal('LEAVE_PRESS_RECT', event);
                            return;
                        }
                        if (this._touchActivatePosition != null) {
                            var deltaX = this._touchActivatePosition.pageX - touch.pageX;
                            var deltaY = this._touchActivatePosition.pageY - touch.pageY;
                            if (Math.hypot(deltaX, deltaY) > longPressDeactivationDistance) {
                                this._cancelLongPressDelayTimeout();
                            }
                        }
                        if (this._isTouchWithinResponderRegion(touch, responderRegion)) {
                            this._receiveSignal('ENTER_PRESS_RECT', event);
                        } else {
                            this._cancelLongPressDelayTimeout();
                            this._receiveSignal('LEAVE_PRESS_RECT', event);
                        }
                    },
                    onResponderRelease: (event)=>{
                        this._receiveSignal('RESPONDER_RELEASE', event);
                    },
                    onResponderTerminate: (event)=>{
                        this._receiveSignal('RESPONDER_TERMINATED', event);
                    },
                    onResponderTerminationRequest: ()=>{
                        var cancelable = this._config.cancelable;
                        return cancelable ?? true;
                    },
                    onClick: (event)=>{
                        var _event_nativeEvent_hasOwnProperty, _event_nativeEvent;
                        // If event has `pointerType`, it was emitted from a PointerEvent and
                        // we should ignore it to avoid triggering `onPress` twice.
                        if (event === null || event === void 0 ? void 0 : (_event_nativeEvent = event.nativeEvent) === null || _event_nativeEvent === void 0 ? void 0 : (_event_nativeEvent_hasOwnProperty = _event_nativeEvent.hasOwnProperty) === null || _event_nativeEvent_hasOwnProperty === void 0 ? void 0 : _event_nativeEvent_hasOwnProperty.call(_event_nativeEvent, 'pointerType')) {
                            return;
                        }
                        // for non-pointer click events (e.g. accessibility clicks), we should only dispatch when we're the "real" target
                        // in particular, we shouldn't respond to clicks from nested pressables
                        if ((event === null || event === void 0 ? void 0 : event.currentTarget) !== (event === null || event === void 0 ? void 0 : event.target)) {
                            event === null || event === void 0 ? void 0 : event.stopPropagation();
                            return;
                        }
                        var _this__config = this._config, onPress = _this__config.onPress, disabled = _this__config.disabled;
                        if (onPress != null && disabled !== true) {
                            onPress(event);
                        }
                    }
                };
                if (false) {}
                if (_ReactNativeFeatureFlags.default.shouldPressibilityUseW3CPointerEventsForHover()) {
                    var hoverPointerEvents = {
                        onPointerEnter: undefined,
                        onPointerLeave: undefined
                    };
                    var _this__config = this._config, onHoverIn = _this__config.onHoverIn, onHoverOut = _this__config.onHoverOut;
                    if (onHoverIn != null) {
                        hoverPointerEvents.onPointerEnter = (event)=>{
                            this._isHovered = true;
                            this._cancelHoverOutDelayTimeout();
                            if (onHoverIn != null) {
                                var delayHoverIn = normalizeDelay(this._config.delayHoverIn);
                                if (delayHoverIn > 0) {
                                    event.persist();
                                    this._hoverInDelayTimeout = setTimeout(()=>{
                                        onHoverIn(convertPointerEventToMouseEvent(event));
                                    }, delayHoverIn);
                                } else {
                                    onHoverIn(convertPointerEventToMouseEvent(event));
                                }
                            }
                        };
                    }
                    if (onHoverOut != null) {
                        hoverPointerEvents.onPointerLeave = (event)=>{
                            if (this._isHovered) {
                                this._isHovered = false;
                                this._cancelHoverInDelayTimeout();
                                if (onHoverOut != null) {
                                    var delayHoverOut = normalizeDelay(this._config.delayHoverOut);
                                    if (delayHoverOut > 0) {
                                        event.persist();
                                        this._hoverOutDelayTimeout = setTimeout(()=>{
                                            onHoverOut(convertPointerEventToMouseEvent(event));
                                        }, delayHoverOut);
                                    } else {
                                        onHoverOut(convertPointerEventToMouseEvent(event));
                                    }
                                }
                            }
                        };
                    }
                    return _object_spread._({}, focusEventHandlers, responderEventHandlers, hoverPointerEvents);
                } else {
                    var mouseEventHandlers = _Platform.default.OS === 'ios' || _Platform.default.OS === 'android' ? null : {
                        onMouseEnter: (event)=>{
                            if ((0, _HoverState.isHoverEnabled)()) {
                                this._isHovered = true;
                                this._cancelHoverOutDelayTimeout();
                                var onHoverIn = this._config.onHoverIn;
                                if (onHoverIn != null) {
                                    var delayHoverIn = normalizeDelay(this._config.delayHoverIn);
                                    if (delayHoverIn > 0) {
                                        event.persist();
                                        this._hoverInDelayTimeout = setTimeout(()=>{
                                            onHoverIn(event);
                                        }, delayHoverIn);
                                    } else {
                                        onHoverIn(event);
                                    }
                                }
                            }
                        },
                        onMouseLeave: (event)=>{
                            if (this._isHovered) {
                                this._isHovered = false;
                                this._cancelHoverInDelayTimeout();
                                var onHoverOut = this._config.onHoverOut;
                                if (onHoverOut != null) {
                                    var delayHoverOut = normalizeDelay(this._config.delayHoverOut);
                                    if (delayHoverOut > 0) {
                                        event.persist();
                                        this._hoverInDelayTimeout = setTimeout(()=>{
                                            onHoverOut(event);
                                        }, delayHoverOut);
                                    } else {
                                        onHoverOut(event);
                                    }
                                }
                            }
                        }
                    };
                    return _object_spread._({}, focusEventHandlers, responderEventHandlers, mouseEventHandlers);
                }
            }
        },
        {
            /**
   * Receives a state machine signal, performs side effects of the transition
   * and stores the new state. Validates the transition as well.
   */ key: "_receiveSignal",
            value: function _receiveSignal(signal, event) {
                var _Transitions_prevState;
                // Especially on iOS, not all events have timestamps associated.
                // For telemetry purposes, this doesn't matter too much, as long as *some* do.
                // Since the native timestamp is integral for logging telemetry, just skip
                // events if they don't have a timestamp attached.
                if (event.nativeEvent.timestamp != null) {
                    _PressabilityPerformanceEventEmitter.default.emitEvent(()=>{
                        return {
                            signal,
                            nativeTimestamp: event.nativeEvent.timestamp
                        };
                    });
                }
                var prevState = this._touchState;
                var nextState = (_Transitions_prevState = Transitions[prevState]) === null || _Transitions_prevState === void 0 ? void 0 : _Transitions_prevState[signal];
                if (this._responderID == null && signal === 'RESPONDER_RELEASE') {
                    return;
                }
                (0, _invariant.default)(nextState != null && nextState !== 'ERROR', 'Pressability: Invalid signal `%s` for state `%s` on responder: %s', signal, prevState, typeof this._responderID === 'number' ? this._responderID : '<<host component>>');
                if (prevState !== nextState) {
                    this._performTransitionSideEffects(prevState, nextState, signal, event);
                    this._touchState = nextState;
                }
            }
        },
        {
            /**
   * Performs a transition between touchable states and identify any activations
   * or deactivations (and callback invocations).
   */ key: "_performTransitionSideEffects",
            value: function _performTransitionSideEffects(prevState, nextState, signal, event) {
                if (isTerminalSignal(signal)) {
                    this._touchActivatePosition = null;
                    this._cancelLongPressDelayTimeout();
                }
                var isInitialTransition = prevState === 'NOT_RESPONDER' && nextState === 'RESPONDER_INACTIVE_PRESS_IN';
                var isActivationTransition = !isActivationSignal(prevState) && isActivationSignal(nextState);
                if (isInitialTransition || isActivationTransition) {
                    this._measureResponderRegion();
                }
                if (isPressInSignal(prevState) && signal === 'LONG_PRESS_DETECTED') {
                    var onLongPress = this._config.onLongPress;
                    if (onLongPress != null) {
                        onLongPress(event);
                    }
                }
                var isPrevActive = isActiveSignal(prevState);
                var isNextActive = isActiveSignal(nextState);
                if (!isPrevActive && isNextActive) {
                    this._activate(event);
                } else if (isPrevActive && !isNextActive) {
                    this._deactivate(event);
                }
                if (isPressInSignal(prevState) && signal === 'RESPONDER_RELEASE') {
                    // If we never activated (due to delays), activate and deactivate now.
                    if (!isNextActive && !isPrevActive) {
                        this._activate(event);
                        this._deactivate(event);
                    }
                    var _this__config = this._config, onLongPress1 = _this__config.onLongPress, onPress = _this__config.onPress, android_disableSound = _this__config.android_disableSound;
                    if (onPress != null) {
                        var isPressCanceledByLongPress = onLongPress1 != null && prevState === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
                        if (!isPressCanceledByLongPress) {
                            if (_Platform.default.OS === 'android' && android_disableSound !== true) {
                                _SoundManager.default.playTouchSound();
                            }
                            onPress(event);
                        }
                    }
                }
                this._cancelPressDelayTimeout();
            }
        },
        {
            key: "_activate",
            value: function _activate(event) {
                var onPressIn = this._config.onPressIn;
                var _getTouchFromPressEvent = getTouchFromPressEvent(event), pageX = _getTouchFromPressEvent.pageX, pageY = _getTouchFromPressEvent.pageY;
                this._touchActivatePosition = {
                    pageX,
                    pageY
                };
                this._touchActivateTime = Date.now();
                if (onPressIn != null) {
                    onPressIn(event);
                }
            }
        },
        {
            key: "_deactivate",
            value: function _deactivate(event) {
                var onPressOut = this._config.onPressOut;
                if (onPressOut != null) {
                    var minPressDuration = normalizeDelay(this._config.minPressDuration, 0, DEFAULT_MIN_PRESS_DURATION);
                    var pressDuration = Date.now() - (this._touchActivateTime ?? 0);
                    var delayPressOut = Math.max(minPressDuration - pressDuration, normalizeDelay(this._config.delayPressOut));
                    if (delayPressOut > 0) {
                        event.persist();
                        this._pressOutDelayTimeout = setTimeout(()=>{
                            onPressOut(event);
                        }, delayPressOut);
                    } else {
                        onPressOut(event);
                    }
                }
                this._touchActivateTime = null;
            }
        },
        {
            key: "_measureResponderRegion",
            value: function _measureResponderRegion() {
                if (this._responderID == null) {
                    return;
                }
                if (typeof this._responderID === 'number') {
                    _UIManager.default.measure(this._responderID, this._measureCallback);
                } else {
                    this._responderID.measure(this._measureCallback);
                }
            }
        },
        {
            key: "_isTouchWithinResponderRegion",
            value: function _isTouchWithinResponderRegion(touch, responderRegion) {
                var hitSlop = (0, _Rect.normalizeRect)(this._config.hitSlop);
                var pressRectOffset = (0, _Rect.normalizeRect)(this._config.pressRectOffset);
                var regionBottom = responderRegion.bottom;
                var regionLeft = responderRegion.left;
                var regionRight = responderRegion.right;
                var regionTop = responderRegion.top;
                if (hitSlop != null) {
                    if (hitSlop.bottom != null) {
                        regionBottom += hitSlop.bottom;
                    }
                    if (hitSlop.left != null) {
                        regionLeft -= hitSlop.left;
                    }
                    if (hitSlop.right != null) {
                        regionRight += hitSlop.right;
                    }
                    if (hitSlop.top != null) {
                        regionTop -= hitSlop.top;
                    }
                }
                regionBottom += (pressRectOffset === null || pressRectOffset === void 0 ? void 0 : pressRectOffset.bottom) ?? DEFAULT_PRESS_RECT_OFFSETS.bottom;
                regionLeft -= (pressRectOffset === null || pressRectOffset === void 0 ? void 0 : pressRectOffset.left) ?? DEFAULT_PRESS_RECT_OFFSETS.left;
                regionRight += (pressRectOffset === null || pressRectOffset === void 0 ? void 0 : pressRectOffset.right) ?? DEFAULT_PRESS_RECT_OFFSETS.right;
                regionTop -= (pressRectOffset === null || pressRectOffset === void 0 ? void 0 : pressRectOffset.top) ?? DEFAULT_PRESS_RECT_OFFSETS.top;
                return touch.pageX > regionLeft && touch.pageX < regionRight && touch.pageY > regionTop && touch.pageY < regionBottom;
            }
        },
        {
            key: "_handleLongPress",
            value: function _handleLongPress(event) {
                if (this._touchState === 'RESPONDER_ACTIVE_PRESS_IN' || this._touchState === 'RESPONDER_ACTIVE_LONG_PRESS_IN') {
                    this._receiveSignal('LONG_PRESS_DETECTED', event);
                }
            }
        },
        {
            key: "_cancelHoverInDelayTimeout",
            value: function _cancelHoverInDelayTimeout() {
                if (this._hoverInDelayTimeout != null) {
                    clearTimeout(this._hoverInDelayTimeout);
                    this._hoverInDelayTimeout = null;
                }
            }
        },
        {
            key: "_cancelHoverOutDelayTimeout",
            value: function _cancelHoverOutDelayTimeout() {
                if (this._hoverOutDelayTimeout != null) {
                    clearTimeout(this._hoverOutDelayTimeout);
                    this._hoverOutDelayTimeout = null;
                }
            }
        },
        {
            key: "_cancelLongPressDelayTimeout",
            value: function _cancelLongPressDelayTimeout() {
                if (this._longPressDelayTimeout != null) {
                    clearTimeout(this._longPressDelayTimeout);
                    this._longPressDelayTimeout = null;
                }
            }
        },
        {
            key: "_cancelPressDelayTimeout",
            value: function _cancelPressDelayTimeout() {
                if (this._pressDelayTimeout != null) {
                    clearTimeout(this._pressDelayTimeout);
                    this._pressDelayTimeout = null;
                }
            }
        },
        {
            key: "_cancelPressOutDelayTimeout",
            value: function _cancelPressOutDelayTimeout() {
                if (this._pressOutDelayTimeout != null) {
                    clearTimeout(this._pressOutDelayTimeout);
                    this._pressOutDelayTimeout = null;
                }
            }
        }
    ], [
        {
            key: "setLongPressDeactivationDistance",
            value: function setLongPressDeactivationDistance(distance) {
                longPressDeactivationDistance = distance;
            }
        }
    ]);
    return Pressability;
}();
function normalizeDelay(delay, ref, ref1) {
    var min = ref === void 0 ? 0 : ref, fallback = ref1 === void 0 ? 0 : ref1;
    return Math.max(min, delay ?? fallback);
}
var getTouchFromPressEvent = (event)=>{
    var _event_nativeEvent = event.nativeEvent, changedTouches = _event_nativeEvent.changedTouches, touches = _event_nativeEvent.touches;
    if (touches != null && touches.length > 0) {
        return touches[0];
    }
    if (changedTouches != null && changedTouches.length > 0) {
        return changedTouches[0];
    }
    return event.nativeEvent;
};
function convertPointerEventToMouseEvent(input) {
    var _input_nativeEvent = input.nativeEvent, clientX = _input_nativeEvent.clientX, clientY = _input_nativeEvent.clientY;
    return _object_spread_props._(_object_spread._({}, input), {
        nativeEvent: {
            clientX,
            clientY,
            pageX: clientX,
            pageY: clientY,
            timestamp: input.timeStamp
        }
    });
}


}),
"./node_modules/react-native/Libraries/Pressability/PressabilityPerformanceEventEmitter.js": 
/*!*************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Pressability/PressabilityPerformanceEventEmitter.js ***!
  \*************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var PressabilityPerformanceEventEmitter = /*#__PURE__*/ function() {
    "use strict";
    function PressabilityPerformanceEventEmitter() {
        _class_call_check._(this, PressabilityPerformanceEventEmitter);
        this._listeners = [];
    }
    _create_class._(PressabilityPerformanceEventEmitter, [
        {
            key: "addListener",
            value: function addListener(listener) {
                this._listeners.push(listener);
            }
        },
        {
            key: "removeListener",
            value: function removeListener(listener) {
                var index = this._listeners.indexOf(listener);
                if (index > -1) {
                    this._listeners.splice(index, 1);
                }
            }
        },
        {
            key: "emitEvent",
            value: function emitEvent(constructEvent) {
                if (this._listeners.length === 0) {
                    return;
                }
                var event = constructEvent();
                this._listeners.forEach((listener)=>listener(event));
            }
        }
    ]);
    return PressabilityPerformanceEventEmitter;
}();
var PressabilityPerformanceEventEmitterSingleton = new PressabilityPerformanceEventEmitter();
var _default = PressabilityPerformanceEventEmitterSingleton;


}),
"./node_modules/react-native/Libraries/Pressability/usePressability.js": 
/*!*****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Pressability/usePressability.js ***!
  \*****************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return usePressability;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _Pressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./Pressability */ "./node_modules/react-native/Libraries/Pressability/Pressability.js"));
var _react = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
function usePressability(config) {
    var pressabilityRef = (0, _react.useRef)(null);
    if (config != null && pressabilityRef.current == null) {
        pressabilityRef.current = new _Pressability.default(config);
    }
    var pressability = pressabilityRef.current;
    // On the initial mount, this is a no-op. On updates, `pressability` will be
    // re-configured to use the new configuration.
    (0, _react.useEffect)(()=>{
        if (config != null && pressability != null) {
            pressability.configure(config);
        }
    }, [
        config,
        pressability
    ]);
    // On unmount, reset pending state and timers inside `pressability`. This is
    // a separate effect because we do not want to reset when `config` changes.
    (0, _react.useEffect)(()=>{
        if (pressability != null) {
            return ()=>{
                pressability.reset();
            };
        }
    }, [
        pressability
    ]);
    return pressability == null ? null : pressability.getEventHandlers();
}


}),
"./node_modules/react-native/Libraries/ReactNative/AppContainer-dev.js": 
/*!*****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/ReactNative/AppContainer-dev.js ***!
  \*****************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _ReactNativeStyleAttributes = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Components/View/ReactNativeStyleAttributes */ "./node_modules/react-native/Libraries/Components/View/ReactNativeStyleAttributes.js"));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _DebuggingOverlay = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Debugging/DebuggingOverlay */ "./node_modules/react-native/Libraries/Debugging/DebuggingOverlay.js"));
var _useSubscribeToDebuggingOverlayRegistry = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Debugging/useSubscribeToDebuggingOverlayRegistry */ "./node_modules/react-native/Libraries/Debugging/useSubscribeToDebuggingOverlayRegistry.js"));
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../EventEmitter/RCTDeviceEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js"));
var _LogBoxNotificationContainer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../LogBox/LogBoxNotificationContainer */ "./node_modules/react-native/Libraries/LogBox/LogBoxNotificationContainer.js"));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../StyleSheet/StyleSheet */ "./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js"));
var _RootTag = __webpack_require__(/*! ./RootTag */ "./node_modules/react-native/Libraries/ReactNative/RootTag.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var useEffect = _react.useEffect, useState = _react.useState, useCallback = _react.useCallback;
var reactDevToolsHook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
// Required for React DevTools to view / edit React Native styles in Flipper.
// Flipper doesn't inject these values when initializing DevTools.
if (reactDevToolsHook) {
    reactDevToolsHook.resolveRNStyle = __webpack_require__(/*! ../StyleSheet/flattenStyle */ "./node_modules/react-native/Libraries/StyleSheet/flattenStyle.js");
    reactDevToolsHook.nativeStyleEditorValidAttributes = Object.keys(_ReactNativeStyleAttributes.default);
}
var InspectorDeferred = (ref)=>{
    var inspectedViewRef = ref.inspectedViewRef, onInspectedViewRerenderRequest = ref.onInspectedViewRerenderRequest, reactDevToolsAgent = ref.reactDevToolsAgent;
    // D39382967 adds a require cycle: InitializeCore -> AppContainer -> Inspector -> InspectorPanel -> ScrollView -> InitializeCore
    // We can't remove it yet, fallback to dynamic require for now. This is the only reason why this logic is in a separate function.
    var Inspector = __webpack_require__(/*! ../Inspector/Inspector */ "./node_modules/react-native/Libraries/Inspector/Inspector.js");
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(Inspector, {
        inspectedViewRef: inspectedViewRef,
        onRequestRerenderApp: onInspectedViewRerenderRequest,
        reactDevToolsAgent: reactDevToolsAgent
    });
};
var ReactDevToolsOverlayDeferred = (ref)=>{
    var inspectedViewRef = ref.inspectedViewRef, reactDevToolsAgent = ref.reactDevToolsAgent;
    var ReactDevToolsOverlay = (__webpack_require__(/*! ../Inspector/ReactDevToolsOverlay */ "./node_modules/react-native/Libraries/Inspector/ReactDevToolsOverlay.js")/* ["default"] */["default"]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ReactDevToolsOverlay, {
        inspectedViewRef: inspectedViewRef,
        reactDevToolsAgent: reactDevToolsAgent
    });
};
var AppContainer = (ref)=>{
    var children = ref.children, fabric = ref.fabric, initialProps = ref.initialProps, _ref_internal_excludeInspector = ref.internal_excludeInspector, internal_excludeInspector = _ref_internal_excludeInspector === void 0 ? false : _ref_internal_excludeInspector, _ref_internal_excludeLogBox = ref.internal_excludeLogBox, internal_excludeLogBox = _ref_internal_excludeLogBox === void 0 ? false : _ref_internal_excludeLogBox, rootTag = ref.rootTag, WrapperComponent = ref.WrapperComponent, rootViewStyle = ref.rootViewStyle;
    var appContainerRootViewRef = _react.useRef(null);
    var innerViewRef = _react.useRef(null);
    var debuggingOverlayRef = _react.useRef(null);
    (0, _useSubscribeToDebuggingOverlayRegistry.default)(appContainerRootViewRef, debuggingOverlayRef);
    var _useState = _sliced_to_array._(useState(0), 2), key = _useState[0], setKey = _useState[1];
    var _useState1 = _sliced_to_array._(useState(false), 2), shouldRenderInspector = _useState1[0], setShouldRenderInspector = _useState1[1];
    var _useState2 = _sliced_to_array._(useState(reactDevToolsHook === null || reactDevToolsHook === void 0 ? void 0 : reactDevToolsHook.reactDevtoolsAgent), 2), reactDevToolsAgent = _useState2[0], setReactDevToolsAgent = _useState2[1];
    useEffect(()=>{
        var inspectorSubscription = null;
        if (!internal_excludeInspector) {
            inspectorSubscription = _RCTDeviceEventEmitter.default.addListener('toggleElementInspector', ()=>setShouldRenderInspector((value)=>!value));
        }
        var reactDevToolsAgentListener = null;
        // If this is first render, subscribe to the event from React DevTools hook
        if (reactDevToolsHook != null && reactDevToolsAgent == null) {
            var _reactDevToolsHook_on;
            reactDevToolsAgentListener = setReactDevToolsAgent;
            (_reactDevToolsHook_on = reactDevToolsHook.on) === null || _reactDevToolsHook_on === void 0 ? void 0 : _reactDevToolsHook_on.call(reactDevToolsHook, 'react-devtools', reactDevToolsAgentListener);
        }
        return ()=>{
            inspectorSubscription === null || inspectorSubscription === void 0 ? void 0 : inspectorSubscription.remove();
            if ((reactDevToolsHook === null || reactDevToolsHook === void 0 ? void 0 : reactDevToolsHook.off) != null && reactDevToolsAgentListener != null) {
                reactDevToolsHook.off('react-devtools', reactDevToolsAgentListener);
            }
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    var innerView = /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
        collapsable: reactDevToolsAgent == null && !shouldRenderInspector,
        pointerEvents: "box-none",
        style: rootViewStyle || styles.container,
        ref: innerViewRef,
        children: children
    }, key);
    if (WrapperComponent != null) {
        innerView = /*#__PURE__*/ (0, _jsxruntime.jsx)(WrapperComponent, {
            initialProps: initialProps,
            fabric: fabric === true,
            children: innerView
        });
    }
    var onInspectedViewRerenderRequest = useCallback(()=>setKey((k)=>k + 1), []);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_RootTag.RootTagContext.Provider, {
        value: (0, _RootTag.createRootTag)(rootTag),
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, {
            ref: appContainerRootViewRef,
            style: rootViewStyle || styles.container,
            pointerEvents: "box-none",
            children: [
                innerView,
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_DebuggingOverlay.default, {
                    ref: debuggingOverlayRef
                }),
                reactDevToolsAgent != null && /*#__PURE__*/ (0, _jsxruntime.jsx)(ReactDevToolsOverlayDeferred, {
                    inspectedViewRef: innerViewRef,
                    reactDevToolsAgent: reactDevToolsAgent
                }),
                shouldRenderInspector && /*#__PURE__*/ (0, _jsxruntime.jsx)(InspectorDeferred, {
                    inspectedViewRef: innerViewRef,
                    onInspectedViewRerenderRequest: onInspectedViewRerenderRequest,
                    reactDevToolsAgent: reactDevToolsAgent
                }),
                !internal_excludeLogBox && /*#__PURE__*/ (0, _jsxruntime.jsx)(_LogBoxNotificationContainer.default, {})
            ]
        })
    });
};
var styles = _StyleSheet.default.create({
    container: {
        flex: 1
    }
});
var _default = AppContainer;


}),
"./node_modules/react-native/Libraries/ReactNative/AppContainer.js": 
/*!*************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/ReactNative/AppContainer.js ***!
  \*************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var AppContainer =  true ? (__webpack_require__(/*! ./AppContainer-dev */ "./node_modules/react-native/Libraries/ReactNative/AppContainer-dev.js")/* ["default"] */["default"]) : 0;
module.exports = AppContainer;


}),
"./node_modules/react-native/Libraries/ReactNative/I18nManager.js": 
/*!************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/ReactNative/I18nManager.js ***!
  \************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeI18nManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeI18nManager */ "./node_modules/react-native/Libraries/ReactNative/NativeI18nManager.js"));
var i18nConstants = getI18nManagerConstants();
function getI18nManagerConstants() {
    if (_NativeI18nManager.default) {
        var _NativeI18nManager_getConstants = _NativeI18nManager.default.getConstants(), isRTL = _NativeI18nManager_getConstants.isRTL, doLeftAndRightSwapInRTL = _NativeI18nManager_getConstants.doLeftAndRightSwapInRTL, localeIdentifier = _NativeI18nManager_getConstants.localeIdentifier;
        return {
            isRTL,
            doLeftAndRightSwapInRTL,
            localeIdentifier
        };
    }
    return {
        isRTL: false,
        doLeftAndRightSwapInRTL: true
    };
}
module.exports = {
    getConstants: ()=>{
        return i18nConstants;
    },
    allowRTL: (shouldAllow)=>{
        if (!_NativeI18nManager.default) {
            return;
        }
        _NativeI18nManager.default.allowRTL(shouldAllow);
    },
    forceRTL: (shouldForce)=>{
        if (!_NativeI18nManager.default) {
            return;
        }
        _NativeI18nManager.default.forceRTL(shouldForce);
    },
    swapLeftAndRightInRTL: (flipStyles)=>{
        if (!_NativeI18nManager.default) {
            return;
        }
        _NativeI18nManager.default.swapLeftAndRightInRTL(flipStyles);
    },
    isRTL: i18nConstants.isRTL,
    doLeftAndRightSwapInRTL: i18nConstants.doLeftAndRightSwapInRTL
};


}),
"./node_modules/react-native/Libraries/ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils.js": 
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils.js ***!
  \*********************************************************************************************************************/
(function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ /**
 * IMPORTANT!!
 *
 * This module cannot import `ReactFabric` (directly or indirectly)
 * because it can be used by apps only using the legacy renderer.
 * In that case `nativeFabricUIManager` isn't defined and `ReactFabric` throws.
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "isPublicInstance", ({
    enumerable: true,
    get: function() {
        return isPublicInstance;
    }
}));
function isPublicInstance(maybeInstance) {
    return maybeInstance != null && // TODO: implement a better check when the instance is defined in the React Native repository.
    (maybeInstance.__nativeTag != null || // TODO: remove this check when syncing the new version of the renderer from React to React Native.
    isLegacyFabricInstance(maybeInstance));
}
function isLegacyFabricInstance(maybeInstance) {
    /* eslint-disable dot-notation */ return maybeInstance != null && // $FlowExpectedError[incompatible-use]
    maybeInstance['_internalInstanceHandle'] != null && maybeInstance['_internalInstanceHandle'].stateNode != null && maybeInstance['_internalInstanceHandle'].stateNode.canonical != null;
}


}),
"./node_modules/react-native/Libraries/ReactNative/ReactNativeFeatureFlags.js": 
/*!************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/ReactNative/ReactNativeFeatureFlags.js ***!
  \************************************************************************************/
(function (module) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ var ReactNativeFeatureFlags = {
    shouldEmitW3CPointerEvents: ()=>false,
    shouldPressibilityUseW3CPointerEventsForHover: ()=>false
};
module.exports = ReactNativeFeatureFlags;


}),
"./node_modules/react-native/Libraries/ReactNative/RootTag.js": 
/*!********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/ReactNative/RootTag.js ***!
  \********************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get RootTagContext () {
        return RootTagContext;
    },
    get createRootTag () {
        return createRootTag;
    }
});
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var RootTagContext = /*#__PURE__*/ _react.createContext(0);
if (true) {
    RootTagContext.displayName = 'RootTagContext';
}
function createRootTag(rootTag) {
    return rootTag;
}


}),
"./node_modules/react-native/Libraries/Renderer/shims/createReactNativeComponentClass.js": 
/*!***********************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Renderer/shims/createReactNativeComponentClass.js ***!
  \***********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @noformat
 * @nolint
 *       strict-local
 * @generated SignedSource<<52163887de05f1cff05388145cf85b3b>>
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _ReactNativePrivateInterface = __webpack_require__(/*! react-native/Libraries/ReactPrivate/ReactNativePrivateInterface */ "webpack/sharing/consume/default/react-native/Libraries/ReactPrivate/ReactNativePrivateInterface/react-native/Libraries/ReactPrivate/ReactNativePrivateInterface");
var register = _ReactNativePrivateInterface.ReactNativeViewConfigRegistry.register;
/**
 * Creates a renderable ReactNative host component.
 * Use this method for view configs that are loaded from UIManager.
 * Use createReactNativeComponentClass() for view configs defined within JavaScript.
 *
 * @param {string} config iOS View configuration.
 * @private
 */ var createReactNativeComponentClass = function(name, callback) {
    return register(name, callback);
};
var _default = createReactNativeComponentClass;


}),
"./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js": 
/*!**********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js ***!
  \**********************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _composeStyles = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../src/private/styles/composeStyles */ "./node_modules/react-native/src/private/styles/composeStyles.js"));
var ReactNativeStyleAttributes = __webpack_require__(/*! ../Components/View/ReactNativeStyleAttributes */ "./node_modules/react-native/Libraries/Components/View/ReactNativeStyleAttributes.js");
var PixelRatio = (__webpack_require__(/*! ../Utilities/PixelRatio */ "./node_modules/react-native/Libraries/Utilities/PixelRatio.js")/* ["default"] */["default"]);
var flatten = __webpack_require__(/*! ./flattenStyle */ "./node_modules/react-native/Libraries/StyleSheet/flattenStyle.js");
/**
 * This type should be used as the type for anything that is a color. It is
 * most useful when using DynamicColorIOS which can be a string or a dynamic
 * color object.
 *
 * type props = {backgroundColor: ColorValue};
 */ /**
 * This type should be used as the type for a prop that is passed through
 * to a <View>'s `style` prop. This ensures call sites of the component
 * can't pass styles that View doesn't support such as `fontSize`.`
 *
 * type Props = {style: ViewStyleProp}
 * const MyComponent = (props: Props) => <View style={props.style} />
 */ /**
 * This type should be used as the type for a prop that is passed through
 * to a <Text>'s `style` prop. This ensures call sites of the component
 * can't pass styles that Text doesn't support such as `resizeMode`.`
 *
 * type Props = {style: TextStyleProp}
 * const MyComponent = (props: Props) => <Text style={props.style} />
 */ /**
 * This type should be used as the type for a prop that is passed through
 * to an <Image>'s `style` prop. This ensures call sites of the component
 * can't pass styles that Image doesn't support such as `fontSize`.`
 *
 * type Props = {style: ImageStyleProp}
 * const MyComponent = (props: Props) => <Image style={props.style} />
 */ /**
 * WARNING: You probably shouldn't be using this type. This type
 * is similar to the ones above except it allows styles that are accepted
 * by all of View, Text, or Image. It is therefore very unsafe to pass this
 * through to an underlying component. Using this is almost always a mistake
 * and using one of the other more restrictive types is likely the right choice.
 */ /**
 * Utility type for getting the values for specific style keys.
 *
 * The following is bad because position is more restrictive than 'string':
 * ```
 * type Props = {position: string};
 * ```
 *
 * You should use the following instead:
 *
 * ```
 * type Props = {position: TypeForStyleKey<'position'>};
 * ```
 *
 * This will correctly give you the type 'absolute' | 'relative'
 */ /**
 * This type is an object of the different possible style
 * properties that can be specified for View.
 *
 * Note that this isn't a safe way to type a style prop for a component as
 * results from StyleSheet.create return an internal identifier, not
 * an object of styles.
 *
 * If you want to type the style prop of a function,
 * consider using ViewStyleProp.
 *
 * A reasonable usage of this type is for helper functions that return an
 * object of styles to pass to a View that can't be precomputed with
 * StyleSheet.create.
 */ /**
 * This type is an object of the different possible style
 * properties that can be specified for Text.
 *
 * Note that this isn't a safe way to type a style prop for a component as
 * results from StyleSheet.create return an internal identifier, not
 * an object of styles.
 *
 * If you want to type the style prop of a function,
 * consider using TextStyleProp.
 *
 * A reasonable usage of this type is for helper functions that return an
 * object of styles to pass to a Text that can't be precomputed with
 * StyleSheet.create.
 */ /**
 * This type is an object of the different possible style
 * properties that can be specified for Image.
 *
 * Note that this isn't a safe way to type a style prop for a component as
 * results from StyleSheet.create return an internal identifier, not
 * an object of styles.
 *
 * If you want to type the style prop of a function,
 * consider using ImageStyleProp.
 *
 * A reasonable usage of this type is for helper functions that return an
 * object of styles to pass to an Image that can't be precomputed with
 * StyleSheet.create.
 */ /**
 * WARNING: You probably shouldn't be using this type. This type is an object
 * with all possible style keys and their values. Note that this isn't
 * a safe way to type a style prop for a component as results from
 * StyleSheet.create return an internal identifier, not an object of styles.
 *
 * If you want to type the style prop of a function, consider using
 * ViewStyleProp, TextStyleProp, or ImageStyleProp.
 *
 * This should only be used by very core utilities that operate on an object
 * containing any possible style value.
 */ var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);
if (hairlineWidth === 0) {
    hairlineWidth = 1 / PixelRatio.get();
}
var absoluteFill = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
};
if (true) {
    Object.freeze(absoluteFill);
}
/**
 * A StyleSheet is an abstraction similar to CSS StyleSheets
 *
 * Create a new StyleSheet:
 *
 * ```
 * const styles = StyleSheet.create({
 *   container: {
 *     borderRadius: 4,
 *     borderWidth: 0.5,
 *     borderColor: '#d6d7da',
 *   },
 *   title: {
 *     fontSize: 19,
 *     fontWeight: 'bold',
 *   },
 *   activeTitle: {
 *     color: 'red',
 *   },
 * });
 * ```
 *
 * Use a StyleSheet:
 *
 * ```
 * <View style={styles.container}>
 *   <Text style={[styles.title, this.props.isActive && styles.activeTitle]} />
 * </View>
 * ```
 *
 * Code quality:
 *
 *  - By moving styles away from the render function, you're making the code
 *    easier to understand.
 *  - Naming the styles is a good way to add meaning to the low level components
 *  in the render function, and encourage reuse.
 *  - In most IDEs, using `StyleSheet.create()` will offer static type checking
 *  and suggestions to help you write valid styles.
 *
 */ module.exports = {
    /**
   * This is defined as the width of a thin line on the platform. It can be
   * used as the thickness of a border or division between two elements.
   * Example:
   * ```
   *   {
   *     borderBottomColor: '#bbb',
   *     borderBottomWidth: StyleSheet.hairlineWidth
   *   }
   * ```
   *
   * This constant will always be a round number of pixels (so a line defined
   * by it look crisp) and will try to match the standard width of a thin line
   * on the underlying platform. However, you should not rely on it being a
   * constant size, because on different platforms and screen densities its
   * value may be calculated differently.
   *
   * A line with hairline width may not be visible if your simulator is downscaled.
   */ hairlineWidth,
    /**
   * A very common pattern is to create overlays with position absolute and zero positioning,
   * so `absoluteFill` can be used for convenience and to reduce duplication of these repeated
   * styles.
   */ absoluteFill: absoluteFill,
    /**
   * Sometimes you may want `absoluteFill` but with a couple tweaks - `absoluteFillObject` can be
   * used to create a customized entry in a `StyleSheet`, e.g.:
   *
   *   const styles = StyleSheet.create({
   *     wrapper: {
   *       ...StyleSheet.absoluteFillObject,
   *       top: 10,
   *       backgroundColor: 'transparent',
   *     },
   *   });
   */ absoluteFillObject: absoluteFill,
    /**
   * Combines two styles such that `style2` will override any styles in `style1`.
   * If either style is falsy, the other one is returned without allocating an
   * array, saving allocations and maintaining reference equality for
   * PureComponent checks.
   */ compose: _composeStyles.default,
    /**
   * Flattens an array of style objects, into one aggregated style object.
   *
   * Example:
   * ```
   * const styles = StyleSheet.create({
   *   listItem: {
   *     flex: 1,
   *     fontSize: 16,
   *     color: 'white'
   *   },
   *   selectedListItem: {
   *     color: 'green'
   *   }
   * });
   *
   * StyleSheet.flatten([styles.listItem, styles.selectedListItem])
   * // returns { flex: 1, fontSize: 16, color: 'green' }
   * ```
   */ flatten,
    /**
   * WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will
   * not be reliably announced. The whole thing might be deleted, who knows? Use
   * at your own risk.
   *
   * Sets a function to use to pre-process a style property value. This is used
   * internally to process color and transform values. You should not use this
   * unless you really know what you are doing and have exhausted other options.
   */ setStyleAttributePreprocessor (property, process) {
        var _ReactNativeStyleAttributes_property, _ReactNativeStyleAttributes_property1;
        var value;
        if (ReactNativeStyleAttributes[property] === true) {
            value = {
                process
            };
        } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
            value = _object_spread_props._(_object_spread._({}, ReactNativeStyleAttributes[property]), {
                process
            });
        } else {
            console.error(`${property} is not a valid style attribute`);
            return;
        }
        if ( true && typeof value.process === 'function' && typeof ((_ReactNativeStyleAttributes_property = ReactNativeStyleAttributes[property]) === null || _ReactNativeStyleAttributes_property === void 0 ? void 0 : _ReactNativeStyleAttributes_property.process) === 'function' && value.process !== ((_ReactNativeStyleAttributes_property1 = ReactNativeStyleAttributes[property]) === null || _ReactNativeStyleAttributes_property1 === void 0 ? void 0 : _ReactNativeStyleAttributes_property1.process)) {
            console.warn(`Overwriting ${property} style attribute preprocessor`);
        }
        ReactNativeStyleAttributes[property] = value;
    },
    /**
   * An identity function for creating style sheets.
   */ // $FlowFixMe[unsupported-variance-annotation]
    create (obj) {
        // TODO: This should return S as the return type. But first,
        // we need to codemod all the callsites that are typing this
        // return value as a number (even though it was opaque).
        if (true) {
            for(var key in obj){
                if (obj[key]) {
                    Object.freeze(obj[key]);
                }
            }
        }
        return obj;
    }
};


}),
"./node_modules/react-native/Libraries/StyleSheet/splitLayoutProps.js": 
/*!****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/StyleSheet/splitLayoutProps.js ***!
  \****************************************************************************/
(function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return splitLayoutProps;
    }
}));
function splitLayoutProps(props) {
    var outer = null;
    var inner = null;
    if (props != null) {
        // $FlowIgnore[incompatible-exact] Will contain a subset of keys from `props`.
        outer = {};
        // $FlowIgnore[incompatible-exact] Will contain a subset of keys from `props`.
        inner = {};
        for (var prop of Object.keys(props)){
            switch(prop){
                case 'margin':
                case 'marginHorizontal':
                case 'marginVertical':
                case 'marginBottom':
                case 'marginTop':
                case 'marginLeft':
                case 'marginRight':
                case 'flex':
                case 'flexGrow':
                case 'flexShrink':
                case 'flexBasis':
                case 'alignSelf':
                case 'height':
                case 'minHeight':
                case 'maxHeight':
                case 'width':
                case 'minWidth':
                case 'maxWidth':
                case 'position':
                case 'left':
                case 'right':
                case 'bottom':
                case 'top':
                case 'transform':
                case 'transformOrigin':
                case 'rowGap':
                case 'columnGap':
                case 'gap':
                    // $FlowFixMe[cannot-write]
                    // $FlowFixMe[incompatible-use]
                    // $FlowFixMe[prop-missing]
                    outer[prop] = props[prop];
                    break;
                default:
                    // $FlowFixMe[cannot-write]
                    // $FlowFixMe[incompatible-use]
                    // $FlowFixMe[prop-missing]
                    inner[prop] = props[prop];
                    break;
            }
        }
    }
    return {
        outer,
        inner
    };
}


}),
"./node_modules/react-native/Libraries/Text/Text.js": 
/*!**********************************************************!*\
  !*** ./node_modules/react-native/Libraries/Text/Text.js ***!
  \**********************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _PressabilityDebug = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../Pressability/PressabilityDebug */ "./node_modules/react-native/Libraries/Pressability/PressabilityDebug.js"));
var _usePressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Pressability/usePressability */ "./node_modules/react-native/Libraries/Pressability/usePressability.js"));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../StyleSheet/flattenStyle */ "./node_modules/react-native/Libraries/StyleSheet/flattenStyle.js"));
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../StyleSheet/processColor */ "./node_modules/react-native/Libraries/StyleSheet/processColor.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _TextAncestor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./TextAncestor */ "./node_modules/react-native/Libraries/Text/TextAncestor.js"));
var _TextNativeComponent = __webpack_require__(/*! ./TextNativeComponent */ "./node_modules/react-native/Libraries/Text/TextNativeComponent.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
/**
 * Text is the fundamental component for displaying text.
 *
 * @see https://reactnative.dev/docs/text
 */ var Text = /*#__PURE__*/ _react.forwardRef((_param, forwardedRef)=>{
    var accessible = _param.accessible, accessibilityLabel = _param.accessibilityLabel, accessibilityState = _param.accessibilityState, allowFontScaling = _param.allowFontScaling, ariaBusy = _param['aria-busy'], ariaChecked = _param['aria-checked'], ariaDisabled = _param['aria-disabled'], ariaExpanded = _param['aria-expanded'], ariaLabel = _param['aria-label'], ariaSelected = _param['aria-selected'], children = _param.children, ellipsizeMode = _param.ellipsizeMode, disabled = _param.disabled, id = _param.id, nativeID = _param.nativeID, numberOfLines = _param.numberOfLines, onLongPress = _param.onLongPress, onPress = _param.onPress, onPressIn = _param.onPressIn, onPressOut = _param.onPressOut, onResponderGrant = _param.onResponderGrant, onResponderMove = _param.onResponderMove, onResponderRelease = _param.onResponderRelease, onResponderTerminate = _param.onResponderTerminate, onResponderTerminationRequest = _param.onResponderTerminationRequest, onStartShouldSetResponder = _param.onStartShouldSetResponder, pressRetentionOffset = _param.pressRetentionOffset, selectable = _param.selectable, selectionColor = _param.selectionColor, suppressHighlighting = _param.suppressHighlighting, style = _param.style, restProps = _object_without_properties._(_param, [
        "accessible",
        "accessibilityLabel",
        "accessibilityState",
        "allowFontScaling",
        'aria-busy',
        'aria-checked',
        'aria-disabled',
        'aria-expanded',
        'aria-label',
        'aria-selected',
        "children",
        "ellipsizeMode",
        "disabled",
        "id",
        "nativeID",
        "numberOfLines",
        "onLongPress",
        "onPress",
        "onPressIn",
        "onPressOut",
        "onResponderGrant",
        "onResponderMove",
        "onResponderRelease",
        "onResponderTerminate",
        "onResponderTerminationRequest",
        "onStartShouldSetResponder",
        "pressRetentionOffset",
        "selectable",
        "selectionColor",
        "suppressHighlighting",
        "style"
    ]);
    var _accessibilityLabel = ariaLabel ?? accessibilityLabel;
    var _accessibilityState = accessibilityState;
    if (ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
        if (_accessibilityState != null) {
            _accessibilityState = {
                busy: ariaBusy ?? _accessibilityState.busy,
                checked: ariaChecked ?? _accessibilityState.checked,
                disabled: ariaDisabled ?? _accessibilityState.disabled,
                expanded: ariaExpanded ?? _accessibilityState.expanded,
                selected: ariaSelected ?? _accessibilityState.selected
            };
        } else {
            _accessibilityState = {
                busy: ariaBusy,
                checked: ariaChecked,
                disabled: ariaDisabled,
                expanded: ariaExpanded,
                selected: ariaSelected
            };
        }
    }
    var _accessibilityStateDisabled = _accessibilityState === null || _accessibilityState === void 0 ? void 0 : _accessibilityState.disabled;
    var _disabled = disabled ?? _accessibilityStateDisabled;
    var isPressable = (onPress != null || onLongPress != null || onStartShouldSetResponder != null) && _disabled !== true;
    // TODO: Move this processing to the view configuration.
    var _selectionColor = selectionColor != null ? (0, _processColor.default)(selectionColor) : undefined;
    var _style = style;
    if (true) {
        if (_PressabilityDebug.isEnabled() && onPress != null) {
            _style = [
                style,
                {
                    color: 'magenta'
                }
            ];
        }
    }
    var _numberOfLines = numberOfLines;
    if (_numberOfLines != null && !(_numberOfLines >= 0)) {
        if (true) {
            console.error(`'numberOfLines' in <Text> must be a non-negative number, received: ${_numberOfLines}. The value will be set to 0.`);
        }
        _numberOfLines = 0;
    }
    var _selectable = selectable;
    var processedStyle = (0, _flattenStyle.default)(_style);
    if (processedStyle != null) {
        var overrides = null;
        if (typeof processedStyle.fontWeight === 'number') {
            overrides = overrides || {};
            overrides.fontWeight = // $FlowFixMe[incompatible-cast]
            processedStyle.fontWeight.toString();
        }
        if (processedStyle.userSelect != null) {
            _selectable = userSelectToSelectableMap[processedStyle.userSelect];
            overrides = overrides || {};
            overrides.userSelect = undefined;
        }
        if (processedStyle.verticalAlign != null) {
            overrides = overrides || {};
            overrides.textAlignVertical = verticalAlignToTextAlignVerticalMap[processedStyle.verticalAlign];
            overrides.verticalAlign = undefined;
        }
        if (overrides != null) {
            // $FlowFixMe[incompatible-type]
            _style = [
                _style,
                overrides
            ];
        }
    }
    var _nativeID = id ?? nativeID;
    var hasTextAncestor = (0, _react.useContext)(_TextAncestor.default);
    if (hasTextAncestor) {
        if (isPressable) {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(NativePressableVirtualText, {
                ref: forwardedRef,
                textProps: _object_spread_props._(_object_spread._({}, restProps), {
                    accessibilityLabel: _accessibilityLabel,
                    accessibilityState: _accessibilityState,
                    nativeID: _nativeID,
                    numberOfLines: _numberOfLines,
                    selectable: _selectable,
                    selectionColor: _selectionColor,
                    style: _style,
                    disabled: disabled,
                    children
                }),
                textPressabilityProps: {
                    onLongPress,
                    onPress,
                    onPressIn,
                    onPressOut,
                    onResponderGrant,
                    onResponderMove,
                    onResponderRelease,
                    onResponderTerminate,
                    onResponderTerminationRequest,
                    onStartShouldSetResponder,
                    pressRetentionOffset,
                    suppressHighlighting
                }
            });
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextNativeComponent.NativeVirtualText, _object_spread_props._(_object_spread._({}, restProps), {
            accessibilityLabel: _accessibilityLabel,
            accessibilityState: _accessibilityState,
            nativeID: _nativeID,
            numberOfLines: _numberOfLines,
            ref: forwardedRef,
            selectable: _selectable,
            selectionColor: _selectionColor,
            style: _style,
            disabled: disabled,
            children: children
        }));
    }
    // If the disabled prop and accessibilityState.disabled are out of sync but not both in
    // falsy states we need to update the accessibilityState object to use the disabled prop.
    if (_disabled !== _accessibilityStateDisabled && (_disabled != null && _disabled !== false || _accessibilityStateDisabled != null && _accessibilityStateDisabled !== false)) {
        _accessibilityState = _object_spread_props._(_object_spread._({}, _accessibilityState), {
            disabled: _disabled
        });
    }
    var _accessible = _Platform.default.select({
        ios: accessible !== false,
        android: accessible == null ? onPress != null || onLongPress != null : accessible,
        default: accessible
    });
    var nativeText = null;
    if (isPressable) {
        nativeText = /*#__PURE__*/ (0, _jsxruntime.jsx)(NativePressableText, {
            ref: forwardedRef,
            textProps: _object_spread_props._(_object_spread._({}, restProps), {
                accessibilityLabel: _accessibilityLabel,
                accessibilityState: _accessibilityState,
                accessible: _accessible,
                allowFontScaling: allowFontScaling !== false,
                disabled: _disabled,
                ellipsizeMode: ellipsizeMode ?? 'tail',
                nativeID: _nativeID,
                numberOfLines: _numberOfLines,
                selectable: _selectable,
                selectionColor: _selectionColor,
                style: _style,
                children
            }),
            textPressabilityProps: {
                onLongPress,
                onPress,
                onPressIn,
                onPressOut,
                onResponderGrant,
                onResponderMove,
                onResponderRelease,
                onResponderTerminate,
                onResponderTerminationRequest,
                onStartShouldSetResponder,
                pressRetentionOffset,
                suppressHighlighting
            }
        });
    } else {
        nativeText = /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextNativeComponent.NativeText, _object_spread_props._(_object_spread._({}, restProps), {
            accessibilityLabel: _accessibilityLabel,
            accessibilityState: _accessibilityState,
            accessible: _accessible,
            allowFontScaling: allowFontScaling !== false,
            disabled: _disabled,
            ellipsizeMode: ellipsizeMode ?? 'tail',
            nativeID: _nativeID,
            numberOfLines: _numberOfLines,
            ref: forwardedRef,
            selectable: _selectable,
            selectionColor: _selectionColor,
            style: _style,
            children: children
        }));
    }
    if (children == null) {
        return nativeText;
    }
    // If the children do not contain a JSX element it would not be possible to have a
    // nested `Text` component so we can skip adding the `TextAncestor` context wrapper
    // which has a performance overhead. Since we do this for performance reasons we need
    // to keep the check simple to avoid regressing overall perf. For this reason the
    // `children.length` constant is set to `3`, this should be a reasonable tradeoff
    // to capture the majority of `Text` uses but also not make this check too expensive.
    if (Array.isArray(children) && children.length <= 3) {
        var hasNonTextChild = false;
        for (var child of children){
            if (child != null && typeof child === 'object') {
                hasNonTextChild = true;
                break;
            }
        }
        if (!hasNonTextChild) {
            return nativeText;
        }
    } else if (typeof children !== 'object') {
        return nativeText;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextAncestor.default.Provider, {
        value: true,
        children: nativeText
    });
});
Text.displayName = 'Text';
/**
 * Hook that handles setting up Pressability of Text components.
 *
 * NOTE: This hook is relatively expensive so it should only be used absolutely necessary.
 */ function useTextPressability(ref) {
    var onLongPress = ref.onLongPress, onPress = ref.onPress, onPressIn = ref.onPressIn, onPressOut = ref.onPressOut, onResponderGrant = ref.onResponderGrant, onResponderMove = ref.onResponderMove, onResponderRelease = ref.onResponderRelease, onResponderTerminate = ref.onResponderTerminate, onResponderTerminationRequest = ref.onResponderTerminationRequest, onStartShouldSetResponder = ref.onStartShouldSetResponder, pressRetentionOffset = ref.pressRetentionOffset, suppressHighlighting = ref.suppressHighlighting;
    var _useState = _sliced_to_array._((0, _react.useState)(false), 2), isHighlighted = _useState[0], setHighlighted = _useState[1];
    // Setup pressability config and wrap callbacks needs to track the highlight state.
    var config = (0, _react.useMemo)(()=>{
        var _onPressIn = onPressIn;
        var _onPressOut = onPressOut;
        // Updating isHighlighted causes unnecessary re-renders for platforms that don't use it
        // in the best case, and cause issues with text selection in the worst case. Forcing
        // the isHighlighted prop to false on all platforms except iOS.
        if (_Platform.default.OS === 'ios') {
            _onPressIn = (event)=>{
                setHighlighted(suppressHighlighting == null || !suppressHighlighting);
                onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(event);
            };
            _onPressOut = (event)=>{
                setHighlighted(false);
                onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(event);
            };
        }
        return {
            disabled: false,
            pressRectOffset: pressRetentionOffset,
            onLongPress,
            onPress,
            onPressIn: _onPressIn,
            onPressOut: _onPressOut
        };
    }, [
        pressRetentionOffset,
        onLongPress,
        onPress,
        onPressIn,
        onPressOut,
        suppressHighlighting
    ]);
    // Init the pressability class
    var eventHandlers = (0, _usePressability.default)(config);
    // Create NativeText event handlers which proxy events to pressability
    var eventHandlersForText = (0, _react.useMemo)(()=>eventHandlers == null ? null : {
            onResponderGrant (event) {
                eventHandlers.onResponderGrant(event);
                if (onResponderGrant != null) {
                    onResponderGrant(event);
                }
            },
            onResponderMove (event) {
                eventHandlers.onResponderMove(event);
                if (onResponderMove != null) {
                    onResponderMove(event);
                }
            },
            onResponderRelease (event) {
                eventHandlers.onResponderRelease(event);
                if (onResponderRelease != null) {
                    onResponderRelease(event);
                }
            },
            onResponderTerminate (event) {
                eventHandlers.onResponderTerminate(event);
                if (onResponderTerminate != null) {
                    onResponderTerminate(event);
                }
            },
            onClick: eventHandlers.onClick,
            onResponderTerminationRequest: onResponderTerminationRequest != null ? onResponderTerminationRequest : eventHandlers.onResponderTerminationRequest,
            onStartShouldSetResponder: onStartShouldSetResponder != null ? onStartShouldSetResponder : eventHandlers.onStartShouldSetResponder
        }, [
        eventHandlers,
        onResponderGrant,
        onResponderMove,
        onResponderRelease,
        onResponderTerminate,
        onResponderTerminationRequest,
        onStartShouldSetResponder
    ]);
    // Return the highlight state and NativeText event handlers
    return (0, _react.useMemo)(()=>[
            isHighlighted,
            eventHandlersForText
        ], [
        isHighlighted,
        eventHandlersForText
    ]);
}
/**
 * Wrap the NativeVirtualText component and initialize pressability.
 *
 * This logic is split out from the main Text component to enable the more
 * expensive pressability logic to be only initialized when needed.
 */ var NativePressableVirtualText = /*#__PURE__*/ _react.forwardRef((ref, forwardedRef)=>{
    var textProps = ref.textProps, textPressabilityProps = ref.textPressabilityProps;
    var _useTextPressability = _sliced_to_array._(useTextPressability(textPressabilityProps), 2), isHighlighted = _useTextPressability[0], eventHandlersForText = _useTextPressability[1];
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextNativeComponent.NativeVirtualText, _object_spread_props._(_object_spread._({}, textProps, eventHandlersForText), {
        isHighlighted: isHighlighted,
        isPressable: true,
        ref: forwardedRef
    }));
});
/**
 * Wrap the NativeText component and initialize pressability.
 *
 * This logic is split out from the main Text component to enable the more
 * expensive pressability logic to be only initialized when needed.
 */ var NativePressableText = /*#__PURE__*/ _react.forwardRef((ref, forwardedRef)=>{
    var textProps = ref.textProps, textPressabilityProps = ref.textPressabilityProps;
    var _useTextPressability = _sliced_to_array._(useTextPressability(textPressabilityProps), 2), isHighlighted = _useTextPressability[0], eventHandlersForText = _useTextPressability[1];
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextNativeComponent.NativeText, _object_spread_props._(_object_spread._({}, textProps, eventHandlersForText), {
        isHighlighted: isHighlighted,
        isPressable: true,
        ref: forwardedRef
    }));
});
var userSelectToSelectableMap = {
    auto: true,
    text: true,
    none: false,
    contain: true,
    all: true
};
var verticalAlignToTextAlignVerticalMap = {
    auto: 'auto',
    top: 'top',
    bottom: 'bottom',
    middle: 'center'
};
module.exports = Text;


}),
"./node_modules/react-native/Libraries/Utilities/GlobalPerformanceLogger.js": 
/*!**********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/GlobalPerformanceLogger.js ***!
  \**********************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _createPerformanceLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./createPerformanceLogger */ "./node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js"));
/**
 * This is a global shared instance of IPerformanceLogger that is created with
 * createPerformanceLogger().
 * This logger should be used only for global performance metrics like the ones
 * that are logged during loading bundle. If you want to log something from your
 * React component you should use PerformanceLoggerContext instead.
 */ var GlobalPerformanceLogger = (0, _createPerformanceLogger.default)();
module.exports = GlobalPerformanceLogger;


}),
"./node_modules/react-native/Libraries/Utilities/binaryToBase64.js": 
/*!*************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/binaryToBase64.js ***!
  \*************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js");
function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
        // $FlowFixMe[reassign-const]
        data = new Uint8Array(data);
    }
    if (data instanceof Uint8Array) {
        return base64.fromByteArray(data);
    }
    if (!ArrayBuffer.isView(data)) {
        throw new Error('data must be ArrayBuffer or typed array');
    }
    // Already checked that `data` is `DataView` in `ArrayBuffer.isView(data)`
    var buffer = data.buffer, byteOffset = data.byteOffset, byteLength = data.byteLength;
    return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
}
module.exports = binaryToBase64;


}),
"./node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js": 
/*!**********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js ***!
  \**********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get // Re-exporting for backwards compatibility with all the clients that
    // may still import it from this module.
    /**
 * This function creates performance loggers that can be used to collect and log
 * various performance data such as timespans, points and extras.
 * The loggers need to have minimal overhead since they're used in production.
 */ default () {
        return createPerformanceLogger;
    },
    get getCurrentTimestamp () {
        return getCurrentTimestamp;
    }
});
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _infoLog = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./infoLog */ "./node_modules/react-native/Libraries/Utilities/infoLog.js"));
var PRINT_TO_CONSOLE = false; // Type as false to prevent accidentally committing `true`;
var getCurrentTimestamp = __webpack_require__.g.nativeQPLTimestamp ?? (()=>__webpack_require__.g.performance.now());
var PerformanceLogger = /*#__PURE__*/ function() {
    "use strict";
    function PerformanceLogger() {
        _class_call_check._(this, PerformanceLogger);
        this._timespans = {};
        this._extras = {};
        this._points = {};
        this._pointExtras = {};
        this._closed = false;
    }
    _create_class._(PerformanceLogger, [
        {
            key: "addTimespan",
            value: function addTimespan(key, startTime, endTime, startExtras, endExtras) {
                if (this._closed) {
                    if (PRINT_TO_CONSOLE && true) {
                        (0, _infoLog.default)('PerformanceLogger: addTimespan - has closed ignoring: ', key);
                    }
                    return;
                }
                if (this._timespans[key]) {
                    if (PRINT_TO_CONSOLE && true) {
                        (0, _infoLog.default)('PerformanceLogger: Attempting to add a timespan that already exists ', key);
                    }
                    return;
                }
                this._timespans[key] = {
                    startTime,
                    endTime,
                    totalTime: endTime - (startTime || 0),
                    startExtras,
                    endExtras
                };
            }
        },
        {
            key: "append",
            value: function append(performanceLogger) {
                this._timespans = _object_spread._({}, performanceLogger.getTimespans(), this._timespans);
                this._extras = _object_spread._({}, performanceLogger.getExtras(), this._extras);
                this._points = _object_spread._({}, performanceLogger.getPoints(), this._points);
                this._pointExtras = _object_spread._({}, performanceLogger.getPointExtras(), this._pointExtras);
            }
        },
        {
            key: "clear",
            value: function clear() {
                this._timespans = {};
                this._extras = {};
                this._points = {};
                if (PRINT_TO_CONSOLE) {
                    (0, _infoLog.default)('PerformanceLogger.js', 'clear');
                }
            }
        },
        {
            key: "clearCompleted",
            value: function clearCompleted() {
                for(var key in this._timespans){
                    var _this__timespans_key;
                    if (((_this__timespans_key = this._timespans[key]) === null || _this__timespans_key === void 0 ? void 0 : _this__timespans_key.totalTime) != null) {
                        delete this._timespans[key];
                    }
                }
                this._extras = {};
                this._points = {};
                if (PRINT_TO_CONSOLE) {
                    (0, _infoLog.default)('PerformanceLogger.js', 'clearCompleted');
                }
            }
        },
        {
            key: "close",
            value: function close() {
                this._closed = true;
            }
        },
        {
            key: "currentTimestamp",
            value: function currentTimestamp() {
                return getCurrentTimestamp();
            }
        },
        {
            key: "getExtras",
            value: function getExtras() {
                return this._extras;
            }
        },
        {
            key: "getPoints",
            value: function getPoints() {
                return this._points;
            }
        },
        {
            key: "getPointExtras",
            value: function getPointExtras() {
                return this._pointExtras;
            }
        },
        {
            key: "getTimespans",
            value: function getTimespans() {
                return this._timespans;
            }
        },
        {
            key: "hasTimespan",
            value: function hasTimespan(key) {
                return !!this._timespans[key];
            }
        },
        {
            key: "isClosed",
            value: function isClosed() {
                return this._closed;
            }
        },
        {
            key: "logEverything",
            value: function logEverything() {
                if (PRINT_TO_CONSOLE) {
                    // log timespans
                    for(var key in this._timespans){
                        var _this__timespans_key;
                        if (((_this__timespans_key = this._timespans[key]) === null || _this__timespans_key === void 0 ? void 0 : _this__timespans_key.totalTime) != null) {
                            (0, _infoLog.default)(key + ': ' + this._timespans[key].totalTime + 'ms');
                        }
                    }
                    // log extras
                    (0, _infoLog.default)(this._extras);
                    // log points
                    for(var key1 in this._points){
                        if (this._points[key1] != null) {
                            (0, _infoLog.default)(key1 + ': ' + this._points[key1] + 'ms');
                        }
                    }
                }
            }
        },
        {
            key: "markPoint",
            value: function markPoint(key, ref, extras) {
                var timestamp = ref === void 0 ? getCurrentTimestamp() : ref;
                if (this._closed) {
                    if (PRINT_TO_CONSOLE && true) {
                        (0, _infoLog.default)('PerformanceLogger: markPoint - has closed ignoring: ', key);
                    }
                    return;
                }
                if (this._points[key] != null) {
                    if (PRINT_TO_CONSOLE && true) {
                        (0, _infoLog.default)('PerformanceLogger: Attempting to mark a point that has been already logged ', key);
                    }
                    return;
                }
                this._points[key] = timestamp;
                if (extras) {
                    this._pointExtras[key] = extras;
                }
            }
        },
        {
            key: "removeExtra",
            value: function removeExtra(key) {
                var value = this._extras[key];
                delete this._extras[key];
                return value;
            }
        },
        {
            key: "setExtra",
            value: function setExtra(key, value) {
                if (this._closed) {
                    if (PRINT_TO_CONSOLE && true) {
                        (0, _infoLog.default)('PerformanceLogger: setExtra - has closed ignoring: ', key);
                    }
                    return;
                }
                if (this._extras.hasOwnProperty(key)) {
                    if (PRINT_TO_CONSOLE && true) {
                        (0, _infoLog.default)('PerformanceLogger: Attempting to set an extra that already exists ', {
                            key,
                            currentValue: this._extras[key],
                            attemptedValue: value
                        });
                    }
                    return;
                }
                this._extras[key] = value;
            }
        },
        {
            key: "startTimespan",
            value: function startTimespan(key, ref, extras) {
                var timestamp = ref === void 0 ? getCurrentTimestamp() : ref;
                if (this._closed) {
                    if (PRINT_TO_CONSOLE && true) {
                        (0, _infoLog.default)('PerformanceLogger: startTimespan - has closed ignoring: ', key);
                    }
                    return;
                }
                if (this._timespans[key]) {
                    if (PRINT_TO_CONSOLE && true) {
                        (0, _infoLog.default)('PerformanceLogger: Attempting to start a timespan that already exists ', key);
                    }
                    return;
                }
                this._timespans[key] = {
                    startTime: timestamp,
                    startExtras: extras
                };
                if (PRINT_TO_CONSOLE) {
                    (0, _infoLog.default)('PerformanceLogger.js', 'start: ' + key);
                }
            }
        },
        {
            key: "stopTimespan",
            value: function stopTimespan(key, ref, extras) {
                var timestamp = ref === void 0 ? getCurrentTimestamp() : ref;
                if (this._closed) {
                    if (PRINT_TO_CONSOLE && true) {
                        (0, _infoLog.default)('PerformanceLogger: stopTimespan - has closed ignoring: ', key);
                    }
                    return;
                }
                var timespan = this._timespans[key];
                if (!timespan || timespan.startTime == null) {
                    if (PRINT_TO_CONSOLE && true) {
                        (0, _infoLog.default)('PerformanceLogger: Attempting to end a timespan that has not started ', key);
                    }
                    return;
                }
                if (timespan.endTime != null) {
                    if (PRINT_TO_CONSOLE && true) {
                        (0, _infoLog.default)('PerformanceLogger: Attempting to end a timespan that has already ended ', key);
                    }
                    return;
                }
                timespan.endExtras = extras;
                timespan.endTime = timestamp;
                timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
                if (PRINT_TO_CONSOLE) {
                    (0, _infoLog.default)('PerformanceLogger.js', 'end: ' + key);
                }
            }
        }
    ]);
    return PerformanceLogger;
}();
function createPerformanceLogger() {
    return new PerformanceLogger();
}


}),
"./node_modules/react-native/Libraries/Utilities/dismissKeyboard.js": 
/*!**************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/dismissKeyboard.js ***!
  \**************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ // This function dismisses the currently-open keyboard, if any.

var TextInputState = __webpack_require__(/*! ../Components/TextInput/TextInputState */ "./node_modules/react-native/Libraries/Components/TextInput/TextInputState.js");
function dismissKeyboard() {
    TextInputState.blurTextInput(TextInputState.currentlyFocusedInput());
}
module.exports = dismissKeyboard;


}),
"./node_modules/react-native/Libraries/Utilities/infoLog.js": 
/*!******************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/infoLog.js ***!
  \******************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
/**
 * Intentional info-level logging for clear separation from ad-hoc console debug logging.
 */ function infoLog(...args) {
    var _console;
    return (_console = console).log.apply(_console, _to_consumable_array._(args));
}
module.exports = infoLog;


}),
"./node_modules/react-native/Libraries/Utilities/mapWithSeparator.js": 
/*!***************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/mapWithSeparator.js ***!
  \***************************************************************************/
(function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
function mapWithSeparator(items, itemRenderer, spacerRenderer) {
    var mapped = [];
    if (items.length > 0) {
        mapped.push(itemRenderer(items[0], 0, items));
        for(var ii = 1; ii < items.length; ii++){
            mapped.push(spacerRenderer(ii - 1), itemRenderer(items[ii], ii, items));
        }
    }
    return mapped;
}
module.exports = mapWithSeparator;


}),
"./node_modules/react-native/Libraries/Utilities/useMergeRefs.js": 
/*!***********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/useMergeRefs.js ***!
  \***********************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useMergeRefs;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _useRefEffect = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./useRefEffect */ "./node_modules/react-native/Libraries/Utilities/useRefEffect.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
function useMergeRefs(...refs) {
    var refEffect = (0, _react.useCallback)((current)=>{
        var cleanups = refs.map((ref)=>{
            if (ref == null) {
                return undefined;
            } else {
                if (typeof ref === 'function') {
                    // $FlowIssue[incompatible-type] - Flow does not understand ref cleanup.
                    var cleanup = ref(current);
                    return typeof cleanup === 'function' ? cleanup : ()=>{
                        ref(null);
                    };
                } else {
                    ref.current = current;
                    return ()=>{
                        ref.current = null;
                    };
                }
            }
        });
        return ()=>{
            for (var cleanup of cleanups){
                cleanup === null || cleanup === void 0 ? void 0 : cleanup();
            }
        };
    }, _to_consumable_array._(refs));
    return (0, _useRefEffect.default)(refEffect);
}


}),
"./node_modules/react-native/Libraries/Utilities/useRefEffect.js": 
/*!***********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/useRefEffect.js ***!
  \***********************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useRefEffect;
    }
}));
var _react = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
function useRefEffect(effect) {
    var cleanupRef = (0, _react.useRef)(undefined);
    return (0, _react.useCallback)((instance)=>{
        if (cleanupRef.current) {
            cleanupRef.current();
            cleanupRef.current = undefined;
        }
        if (instance != null) {
            cleanupRef.current = effect(instance);
        }
    }, [
        effect
    ]);
}


}),
"./node_modules/react-native/Libraries/WebSocket/WebSocketInterceptor.js": 
/*!*******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/WebSocket/WebSocketInterceptor.js ***!
  \*******************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../EventEmitter/NativeEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _NativeWebSocketModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeWebSocketModule */ "./node_modules/react-native/Libraries/WebSocket/NativeWebSocketModule.js"));
var _base64js = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js"));
var originalRCTWebSocketConnect = _NativeWebSocketModule.default.connect;
var originalRCTWebSocketSend = _NativeWebSocketModule.default.send;
var originalRCTWebSocketSendBinary = _NativeWebSocketModule.default.sendBinary;
var originalRCTWebSocketClose = _NativeWebSocketModule.default.close;
var eventEmitter;
var subscriptions;
var closeCallback;
var sendCallback;
var connectCallback;
var onOpenCallback;
var onMessageCallback;
var onErrorCallback;
var onCloseCallback;
var isInterceptorEnabled = false;
/**
 * A network interceptor which monkey-patches RCTWebSocketModule methods
 * to gather all websocket network requests/responses, in order to show
 * their information in the React Native inspector development tool.
 */ var WebSocketInterceptor = {
    /**
   * Invoked when RCTWebSocketModule.close(...) is called.
   */ setCloseCallback (callback) {
        closeCallback = callback;
    },
    /**
   * Invoked when RCTWebSocketModule.send(...) or sendBinary(...) is called.
   */ setSendCallback (callback) {
        sendCallback = callback;
    },
    /**
   * Invoked when RCTWebSocketModule.connect(...) is called.
   */ setConnectCallback (callback) {
        connectCallback = callback;
    },
    /**
   * Invoked when event "websocketOpen" happens.
   */ setOnOpenCallback (callback) {
        onOpenCallback = callback;
    },
    /**
   * Invoked when event "websocketMessage" happens.
   */ setOnMessageCallback (callback) {
        onMessageCallback = callback;
    },
    /**
   * Invoked when event "websocketFailed" happens.
   */ setOnErrorCallback (callback) {
        onErrorCallback = callback;
    },
    /**
   * Invoked when event "websocketClosed" happens.
   */ setOnCloseCallback (callback) {
        onCloseCallback = callback;
    },
    isInterceptorEnabled () {
        return isInterceptorEnabled;
    },
    _unregisterEvents () {
        subscriptions.forEach((e)=>e.remove());
        subscriptions = [];
    },
    /**
   * Add listeners to the RCTWebSocketModule events to intercept them.
   */ _registerEvents () {
        subscriptions = [
            // $FlowFixMe[incompatible-type]
            eventEmitter.addListener('websocketMessage', (ev)=>{
                if (onMessageCallback) {
                    onMessageCallback(ev.id, ev.type === 'binary' ? WebSocketInterceptor._arrayBufferToString(ev.data) : ev.data);
                }
            }),
            // $FlowFixMe[incompatible-type]
            eventEmitter.addListener('websocketOpen', (ev)=>{
                if (onOpenCallback) {
                    onOpenCallback(ev.id);
                }
            }),
            // $FlowFixMe[incompatible-type]
            eventEmitter.addListener('websocketClosed', (ev)=>{
                if (onCloseCallback) {
                    onCloseCallback(ev.id, {
                        code: ev.code,
                        reason: ev.reason
                    });
                }
            }),
            // $FlowFixMe[incompatible-type]
            eventEmitter.addListener('websocketFailed', (ev)=>{
                if (onErrorCallback) {
                    onErrorCallback(ev.id, {
                        message: ev.message
                    });
                }
            })
        ];
    },
    enableInterception () {
        if (isInterceptorEnabled) {
            return;
        }
        // $FlowFixMe[underconstrained-implicit-instantiation]
        eventEmitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
        // If you want to use the native module on other platforms, please remove this condition and test its behavior
        _Platform.default.OS !== 'ios' ? null : _NativeWebSocketModule.default);
        WebSocketInterceptor._registerEvents();
        // Override `connect` method for all RCTWebSocketModule requests
        // to intercept the request url, protocols, options and socketId,
        // then pass them through the `connectCallback`.
        // $FlowFixMe[cannot-write]
        // $FlowFixMe[missing-this-annot]
        _NativeWebSocketModule.default.connect = function(url, protocols, options, socketId) {
            if (connectCallback) {
                connectCallback(url, protocols, options, socketId);
            }
            originalRCTWebSocketConnect.apply(this, arguments);
        };
        // Override `send` method for all RCTWebSocketModule requests to intercept
        // the data sent, then pass them through the `sendCallback`.
        // $FlowFixMe[cannot-write]
        // $FlowFixMe[missing-this-annot]
        _NativeWebSocketModule.default.send = function(data, socketId) {
            if (sendCallback) {
                sendCallback(data, socketId);
            }
            originalRCTWebSocketSend.apply(this, arguments);
        };
        // Override `sendBinary` method for all RCTWebSocketModule requests to
        // intercept the data sent, then pass them through the `sendCallback`.
        // $FlowFixMe[cannot-write]
        // $FlowFixMe[missing-this-annot]
        _NativeWebSocketModule.default.sendBinary = function(data, socketId) {
            if (sendCallback) {
                sendCallback(WebSocketInterceptor._arrayBufferToString(data), socketId);
            }
            originalRCTWebSocketSendBinary.apply(this, arguments);
        };
        // Override `close` method for all RCTWebSocketModule requests to intercept
        // the close information, then pass them through the `closeCallback`.
        // $FlowFixMe[cannot-write]
        // $FlowFixMe[missing-this-annot]
        _NativeWebSocketModule.default.close = function() {
            if (closeCallback) {
                if (arguments.length === 3) {
                    closeCallback(arguments[0], arguments[1], arguments[2]);
                } else {
                    closeCallback(null, null, arguments[0]);
                }
            }
            originalRCTWebSocketClose.apply(this, arguments);
        };
        isInterceptorEnabled = true;
    },
    _arrayBufferToString (data) {
        var value = _base64js.default.toByteArray(data).buffer;
        if (value === undefined || value === null) {
            return '(no value)';
        }
        if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && value instanceof ArrayBuffer) {
            return `ArrayBuffer {${String(Array.from(new Uint8Array(value)))}}`;
        }
        return value;
    },
    // Unpatch RCTWebSocketModule methods and remove the callbacks.
    disableInterception () {
        if (!isInterceptorEnabled) {
            return;
        }
        isInterceptorEnabled = false;
        // $FlowFixMe[cannot-write]
        _NativeWebSocketModule.default.send = originalRCTWebSocketSend;
        // $FlowFixMe[cannot-write]
        _NativeWebSocketModule.default.sendBinary = originalRCTWebSocketSendBinary;
        // $FlowFixMe[cannot-write]
        _NativeWebSocketModule.default.close = originalRCTWebSocketClose;
        // $FlowFixMe[cannot-write]
        _NativeWebSocketModule.default.connect = originalRCTWebSocketConnect;
        connectCallback = null;
        closeCallback = null;
        sendCallback = null;
        onOpenCallback = null;
        onMessageCallback = null;
        onCloseCallback = null;
        onErrorCallback = null;
        WebSocketInterceptor._unregisterEvents();
    }
};
module.exports = WebSocketInterceptor;


}),
"./node_modules/react-native/src/private/animated/useAnimatedPropsMemo.js": 
/*!********************************************************************************!*\
  !*** ./node_modules/react-native/src/private/animated/useAnimatedPropsMemo.js ***!
  \********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get areCompositeKeysEqual () {
        return areCompositeKeysEqual;
    },
    get createCompositeKeyForProps () {
        return createCompositeKeyForProps;
    },
    get useAnimatedPropsMemo () {
        return useAnimatedPropsMemo;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _AnimatedEvent = __webpack_require__(/*! ../../../Libraries/Animated/AnimatedEvent */ "./node_modules/react-native/Libraries/Animated/AnimatedEvent.js");
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/Animated/nodes/AnimatedNode */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedNode.js"));
var _AnimatedObject = __webpack_require__(/*! ../../../Libraries/Animated/nodes/AnimatedObject */ "./node_modules/react-native/Libraries/Animated/nodes/AnimatedObject.js");
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/StyleSheet/flattenStyle */ "./node_modules/react-native/Libraries/StyleSheet/flattenStyle.js"));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! nullthrows */ "./node_modules/nullthrows/nullthrows.js"));
var _react = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11");
function useAnimatedPropsMemo(create, // TODO: Make this two separate arguments after the experiment is over. This
// is only an array-like structure to make it easier to experiment with this
// and `useMemo`.
ref) {
    var _ref = _sliced_to_array._(ref, 2), allowlist = _ref[0], props = _ref[1];
    var compositeKey = (0, _react.useMemo)(()=>createCompositeKeyForProps(props, allowlist), [
        allowlist,
        props
    ]);
    var _useState = _sliced_to_array._((0, _react.useState)(()=>({
            allowlist,
            compositeKey,
            value: create()
        })), 2), state = _useState[0], setState = _useState[1];
    if (state.allowlist !== allowlist || !areCompositeKeysEqual(state.compositeKey, compositeKey)) {
        setState({
            allowlist,
            compositeKey,
            value: create()
        });
    }
    return state.value;
}
function createCompositeKeyForProps(props, allowlist) {
    var compositeKey = null;
    var keys = Object.keys(props);
    for(var ii = 0, length = keys.length; ii < length; ii++){
        var key = keys[ii];
        var value = props[key];
        if (allowlist == null || hasOwn(allowlist, key)) {
            var compositeKeyComponent = void 0;
            if (key === 'style') {
                // $FlowFixMe[incompatible-call] - `style` is a valid argument.
                // $FlowFixMe[incompatible-type] - `flattenStyle` returns an object.
                var flatStyle = (0, _flattenStyle.default)(value);
                if (flatStyle != null) {
                    compositeKeyComponent = createCompositeKeyForObject(flatStyle, allowlist === null || allowlist === void 0 ? void 0 : allowlist.style);
                }
            } else if (value instanceof _AnimatedNode.default || value instanceof _AnimatedEvent.AnimatedEvent) {
                compositeKeyComponent = value;
            } else if (Array.isArray(value)) {
                compositeKeyComponent = allowlist == null ? value : createCompositeKeyForArray(value);
            } else if ((0, _AnimatedObject.isPlainObject)(value)) {
                compositeKeyComponent = allowlist == null ? value : createCompositeKeyForObject(value);
            }
            if (compositeKeyComponent != null) {
                if (compositeKey == null) {
                    compositeKey = {};
                }
                compositeKey[key] = compositeKeyComponent;
            }
        }
    }
    return compositeKey;
}
/**
 * Creates a new composite key for an array that retains all values that are or
 * contain `AnimatedNode` instances, and `null` for the rest.
 *
 * If `array` contains no `AnimatedNode` instances, this returns null.
 */ function createCompositeKeyForArray(array) {
    var compositeKey = null;
    for(var ii = 0, length = array.length; ii < length; ii++){
        var value = array[ii];
        var compositeKeyComponent = void 0;
        if (value instanceof _AnimatedNode.default) {
            compositeKeyComponent = value;
        } else if (Array.isArray(value)) {
            compositeKeyComponent = createCompositeKeyForArray(value);
        } else if ((0, _AnimatedObject.isPlainObject)(value)) {
            compositeKeyComponent = createCompositeKeyForObject(value);
        }
        if (compositeKeyComponent != null) {
            if (compositeKey == null) {
                compositeKey = new Array(array.length).fill(null);
            }
            compositeKey[ii] = compositeKeyComponent;
        }
    }
    return compositeKey;
}
/**
 * Creates a new composite key for an object that retains only properties that
 * are or contain `AnimatedNode` instances.
 *
 * When used to create composite keys for `style` props:
 *
 * - With an allowlist, those properties are searched.
 * - Without an allowlist, every property is searched.
 *
 * If `object` contains no `AnimatedNode` instances, this returns null.
 */ function createCompositeKeyForObject(object, allowlist) {
    var compositeKey = null;
    var keys = Object.keys(object);
    for(var ii = 0, length = keys.length; ii < length; ii++){
        var key = keys[ii];
        if (allowlist == null || hasOwn(allowlist, key)) {
            var value = object[key];
            var compositeKeyComponent = void 0;
            if (value instanceof _AnimatedNode.default) {
                compositeKeyComponent = value;
            } else if (Array.isArray(value)) {
                compositeKeyComponent = createCompositeKeyForArray(value);
            } else if ((0, _AnimatedObject.isPlainObject)(value)) {
                compositeKeyComponent = createCompositeKeyForObject(value);
            }
            if (compositeKeyComponent != null) {
                if (compositeKey == null) {
                    compositeKey = {};
                }
                compositeKey[key] = compositeKeyComponent;
            }
        }
    }
    return compositeKey;
}
function areCompositeKeysEqual(maybePrev, maybeNext, allowlist) {
    if (maybePrev === maybeNext) {
        return true;
    }
    if (maybePrev === null || maybeNext === null) {
        return false;
    }
    // Help Flow retain the type refinements of these.
    var prev = maybePrev;
    var next = maybeNext;
    var keys = Object.keys(prev);
    var length = keys.length;
    if (length !== Object.keys(next).length) {
        return false;
    }
    for(var ii = 0; ii < length; ii++){
        var key = keys[ii];
        if (!hasOwn(next, key)) {
            return false;
        }
        var prevComponent = prev[key];
        var nextComponent = next[key];
        if (key === 'style') {
            // We know style components are objects with non-mixed values.
            if (!areCompositeKeyComponentsEqual(// $FlowIgnore[incompatible-cast]
            prevComponent, // $FlowIgnore[incompatible-cast]
            nextComponent)) {
                return false;
            }
        } else if (prevComponent instanceof _AnimatedNode.default || prevComponent instanceof _AnimatedEvent.AnimatedEvent) {
            if (prevComponent !== nextComponent) {
                return false;
            }
        } else {
            // When `allowlist` is null, the components must be the same. Otherwise,
            // we created the components using deep traversal, so deep compare them.
            if (allowlist == null) {
                if (prevComponent !== nextComponent) {
                    return false;
                }
            } else {
                if (!areCompositeKeyComponentsEqual(// $FlowIgnore[incompatible-cast]
                prevComponent, // $FlowIgnore[incompatible-cast]
                nextComponent)) {
                    return false;
                }
            }
        }
    }
    return true;
}
function areCompositeKeyComponentsEqual(prev, next) {
    if (prev === next) {
        return true;
    }
    if (prev instanceof _AnimatedNode.default) {
        return prev === next;
    }
    if (Array.isArray(prev)) {
        if (!Array.isArray(next)) {
            return false;
        }
        var length = prev.length;
        if (length !== next.length) {
            return false;
        }
        for(var ii = 0; ii < length; ii++){
            if (!areCompositeKeyComponentsEqual(prev[ii], next[ii])) {
                return false;
            }
        }
        return true;
    }
    if ((0, _AnimatedObject.isPlainObject)(prev)) {
        if (!(0, _AnimatedObject.isPlainObject)(next)) {
            return false;
        }
        var keys = Object.keys(prev);
        var length1 = keys.length;
        if (length1 !== Object.keys(next).length) {
            return false;
        }
        for(var ii1 = 0; ii1 < length1; ii1++){
            var key = keys[ii1];
            if (!hasOwn((0, _nullthrows.default)(next), key) || !areCompositeKeyComponentsEqual(prev[key], next[key])) {
                return false;
            }
        }
        return true;
    }
    return false;
}
// Supported versions of JSC do not implement the newer Object.hasOwn. Remove
// this shim when they do.
// $FlowIgnore[method-unbinding]
var _hasOwnProp = Object.prototype.hasOwnProperty;
var hasOwn = // $FlowIgnore[method-unbinding]
Object.hasOwn ?? ((obj, prop)=>_hasOwnProp.call(obj, prop));


}),
"./node_modules/react-native/src/private/components/HScrollViewNativeComponents.js": 
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/components/HScrollViewNativeComponents.js ***!
  \*****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get HScrollContentViewNativeComponent () {
        return HScrollContentViewNativeComponent;
    },
    get HScrollViewNativeComponent () {
        return HScrollViewNativeComponent;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _AndroidHorizontalScrollViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/Components/ScrollView/AndroidHorizontalScrollViewNativeComponent */ "./node_modules/react-native/Libraries/Components/ScrollView/AndroidHorizontalScrollViewNativeComponent.js"));
var _ScrollContentViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/Components/ScrollView/ScrollContentViewNativeComponent */ "./node_modules/react-native/Libraries/Components/ScrollView/ScrollContentViewNativeComponent.js"));
var _ScrollViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/Components/ScrollView/ScrollViewNativeComponent */ "./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewNativeComponent.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _AndroidHorizontalScrollContentViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../specs/components/AndroidHorizontalScrollContentViewNativeComponent */ "./node_modules/react-native/src/private/specs/components/AndroidHorizontalScrollContentViewNativeComponent.js"));
var HScrollViewNativeComponent = _Platform.default.OS === 'android' ? _AndroidHorizontalScrollViewNativeComponent.default : _ScrollViewNativeComponent.default;
var HScrollContentViewNativeComponent = _Platform.default.OS === 'android' ? _AndroidHorizontalScrollContentViewNativeComponent.default : _ScrollContentViewNativeComponent.default;


}),
"./node_modules/react-native/src/private/components/SafeAreaView_INTERNAL_DO_NOT_USE.js": 
/*!**********************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/components/SafeAreaView_INTERNAL_DO_NOT_USE.js ***!
  \**********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/ReactNative/UIManager */ "./node_modules/react-native/Libraries/ReactNative/UIManager.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?3e11"));
var exported = _Platform.default.select({
    ios: (__webpack_require__(/*! ../../../src/private/specs/components/RCTSafeAreaViewNativeComponent */ "./node_modules/react-native/src/private/specs/components/RCTSafeAreaViewNativeComponent.js")/* ["default"] */["default"]),
    android: _UIManager.default.hasViewManagerConfig('RCTSafeAreaView') ? (__webpack_require__(/*! ../../../src/private/specs/components/RCTSafeAreaViewNativeComponent */ "./node_modules/react-native/src/private/specs/components/RCTSafeAreaViewNativeComponent.js")/* ["default"] */["default"]) : _View.default,
    default: _View.default
});
var _default = exported;


}),
"./node_modules/react-native/src/private/components/VScrollViewNativeComponents.js": 
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/components/VScrollViewNativeComponents.js ***!
  \*****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get VScrollContentViewNativeComponent () {
        return VScrollContentViewNativeComponent;
    },
    get VScrollViewNativeComponent () {
        return VScrollViewNativeComponent;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _ScrollContentViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/Components/ScrollView/ScrollContentViewNativeComponent */ "./node_modules/react-native/Libraries/Components/ScrollView/ScrollContentViewNativeComponent.js"));
var _ScrollViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/Components/ScrollView/ScrollViewNativeComponent */ "./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewNativeComponent.js"));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/Components/View/View */ "./node_modules/react-native/Libraries/Components/View/View.js"));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../Libraries/Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js"));
var VScrollViewNativeComponent = _ScrollViewNativeComponent.default;
var VScrollContentViewNativeComponent = _Platform.default.OS === 'android' ? _View.default : _ScrollContentViewNativeComponent.default;


}),
"./node_modules/react-native/src/private/styles/composeStyles.js": 
/*!***********************************************************************!*\
  !*** ./node_modules/react-native/src/private/styles/composeStyles.js ***!
  \***********************************************************************/
(function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * Combines two styles such that `style2` will override any styles in `style1`.
 * If either style is null or undefined, the other one is returned without
 * allocating an array, saving allocations and enabling memoization.
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return composeStyles;
    }
}));
function composeStyles(style1, style2) {
    if (style1 == null) {
        return style2;
    }
    if (style2 == null) {
        return style1;
    }
    return [
        style1,
        style2
    ];
}


}),
"./node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/close.png": 
/*!******************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/close.png ***!
  \******************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
var AssetRegistry = __webpack_require__(/*! react-native/Libraries/Image/AssetRegistry */ "webpack/sharing/consume/default/react-native/Libraries/Image/AssetRegistry/react-native/Libraries/Image/AssetRegistry");
module.exports = AssetRegistry.registerAsset({
  __packager_asset: true,
  scales: [1],
  name: "close",
  type: "png",
  hash: "369745d4a4a6fa62fa0ed495f89aa964",
  httpServerLocation: "assets/node_modules/react-native/Libraries/LogBox/UI/LogBoxImages",
  
  height: 28,
  width: 28,
});

}),

}]);//# sourceMappingURL=vendors-node_modules_react-native_Libraries_ReactNative_AppContainer_js.chunk.bundle.map?platform=android