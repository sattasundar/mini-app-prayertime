{"version":3,"file":"node_modules_react-native_Libraries_Image_resolveAssetSource_js.chunk.bundle","sources":["webpack://sataccommodation/./node_modules/react-native/Libraries/NativeModules/specs/NativeSourceCode.js","webpack://sataccommodation/./node_modules/react-native/src/private/specs/modules/NativeSourceCode.js","webpack://sataccommodation/./node_modules/react-native/Libraries/Image/resolveAssetSource.js"],"sourcesContent":["export * from '../../../src/private/specs/modules/NativeSourceCode';\nimport NativeSourceCode from '../../../src/private/specs/modules/NativeSourceCode';\nexport default NativeSourceCode;","                                                                               \nimport * as TurboModuleRegistry from '../../../../Libraries/TurboModule/TurboModuleRegistry';\n                                    \n                   \n   \n                                           \n                                          \n \nconst NativeModule = TurboModuleRegistry.getEnforcing      ('SourceCode');\nlet constants = null;\nconst NativeSourceCode = {\n  getConstants()                      {\n    if (constants == null) {\n      constants = NativeModule.getConstants();\n    }\n    return constants;\n  }\n};\nexport default NativeSourceCode;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict-local\n */\n\n// Utilities for resolving an asset into a `source` for e.g. `Image`\n\n                                                               \n                                               \n\nimport SourceCode from '../NativeModules/specs/NativeSourceCode';\n\nconst AssetSourceResolver = require('./AssetSourceResolver');\nconst {pickScale} = require('./AssetUtils');\nconst AssetRegistry = require('@react-native/assets-registry/registry');\n\n                                \n                                \n                          \n\nlet _customSourceTransformers                                 = [];\nlet _serverURL         ;\nlet _scriptURL         ;\nlet _sourceCodeScriptURL         ;\n\nfunction getSourceCodeScriptURL()          {\n  if (_sourceCodeScriptURL != null) {\n    return _sourceCodeScriptURL;\n  }\n\n  _sourceCodeScriptURL = SourceCode.getConstants().scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL()          {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match = sourceCodeScriptURL?.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nfunction _coerceLocalScriptURL(scriptURL         )          {\n  let normalizedScriptURL = scriptURL;\n\n  if (normalizedScriptURL != null) {\n    if (normalizedScriptURL.startsWith('assets://')) {\n      // android: running from within assets, no offline path to use\n      return null;\n    }\n    normalizedScriptURL = normalizedScriptURL.substring(\n      0,\n      normalizedScriptURL.lastIndexOf('/') + 1,\n    );\n    if (!normalizedScriptURL.includes('://')) {\n      // Add file protocol in case we have an absolute file path and not a URL.\n      // This shouldn't really be necessary. scriptURL should be a URL.\n      normalizedScriptURL = 'file://' + normalizedScriptURL;\n    }\n  }\n\n  return normalizedScriptURL;\n}\n\nfunction getScriptURL()          {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());\n  }\n  return _scriptURL;\n}\n\n/**\n * `transformer` can optionally be used to apply a custom transformation when\n * resolving an asset source. This methods overrides all other custom transformers\n * that may have been previously registered.\n */\nfunction setCustomSourceTransformer(\n  transformer                         ,\n)       {\n  _customSourceTransformers = [transformer];\n}\n\n/**\n * Adds a `transformer` into the chain of custom source transformers, which will\n * be applied in the order registered, until one returns a non-null value.\n */\nfunction addCustomSourceTransformer(\n  transformer                         ,\n)       {\n  _customSourceTransformers.push(transformer);\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nfunction resolveAssetSource(source              )                       {\n  if (source == null || typeof source === 'object') {\n    // $FlowFixMe[incompatible-exact] `source` doesn't exactly match `ResolvedAssetSource`\n    // $FlowFixMe[incompatible-return] `source` doesn't exactly match `ResolvedAssetSource`\n    return source;\n  }\n\n  const asset = AssetRegistry.getAssetByID(source);\n  if (!asset) {\n    return null;\n  }\n\n  const resolver = new AssetSourceResolver(\n    getDevServerURL(),\n    getScriptURL(),\n    asset,\n  );\n\n  // Apply (chained) custom source transformers, if any\n  if (_customSourceTransformers) {\n    for (const customSourceTransformer of _customSourceTransformers) {\n      const transformedSource = customSourceTransformer(resolver);\n      if (transformedSource != null) {\n        return transformedSource;\n      }\n    }\n  }\n\n  return resolver.defaultAsset();\n}\n\nresolveAssetSource.pickScale = pickScale;\nresolveAssetSource.setCustomSourceTransformer = setCustomSourceTransformer;\nresolveAssetSource.addCustomSourceTransformer = addCustomSourceTransformer;\nmodule.exports = resolveAssetSource;\n"],"names":["_default","_NativeSourceCode","NativeModule","_TurboModuleRegistry","constants","NativeSourceCode","AssetSourceResolver","require","pickScale","AssetRegistry","_customSourceTransformers","_serverURL","_scriptURL","_sourceCodeScriptURL","getSourceCodeScriptURL","getDevServerURL","undefined","sourceCodeScriptURL","match","_coerceLocalScriptURL","scriptURL","normalizedScriptURL","getScriptURL","setCustomSourceTransformer","transformer","addCustomSourceTransformer","resolveAssetSource","source","asset","resolver","customSourceTransformer","transformedSource","module"],"mappings":";;;;;;;;;2CAEAA;;;eAAAA;;;;;oGAFc;IAEdA,WAAeC,yBAAgB;;;;;;;;;;;;2CCgB/BD;;;eAAAA;;;;yFAjBqC;AAOrC,IAAME,eAAeC,qBAAoB,YAAY,CAAO;AAC5D,IAAIC,YAAY;AAChB,IAAMC,mBAAmB;IACvB;QACE,IAAID,aAAa,MAAM;YACrBA,YAAYF,aAAa,YAAY;QACvC;QACA,OAAOE;IACT;AACF;IACAJ,WAAeK;;;;;;;;;AClBf;;;;;;;;CAQC,GAED,oEAAoE;;;;;qFAK7C;AAEvB,IAAMC,sBAAsBC,mBAAOA,CAAC,iGAAuB;AAC3D,IAAOC,YAAaD,gIAAJC;AAChB,IAAMC,gBAAgBF,mBAAOA,CAAC,6JAAwC;AAMtE,IAAIG,4BAA4D,EAAE;AAClE,IAAIC;AACJ,IAAIC;AACJ,IAAIC;AAEJ,SAASC;IACP,IAAID,wBAAwB,MAAM;QAChC,OAAOA;IACT;IAEAA,uBAAuBZ,yBAAU,CAAC,YAAY,GAAG,SAAS;IAC1D,OAAOY;AACT;AAEA,SAASE;IACP,IAAIJ,eAAeK,WAAW;QAC5B,IAAMC,sBAAsBH;QAC5B,IAAMI,QAAQD,gCAAAA,0CAAAA,oBAAqB,KAAK,CAAC;QACzC,IAAIC,OAAO;YACT,mCAAmC;YACnCP,aAAaO,KAAK,CAAC,EAAE;QACvB,OAAO;YACL,gCAAgC;YAChCP,aAAa;QACf;IACF;IACA,OAAOA;AACT;AAEA,SAASQ,sBAAsBC,SAAS;IACtC,IAAIC,sBAAsBD;IAE1B,IAAIC,uBAAuB,MAAM;QAC/B,IAAIA,oBAAoB,UAAU,CAAC,cAAc;YAC/C,8DAA8D;YAC9D,OAAO;QACT;QACAA,sBAAsBA,oBAAoB,SAAS,CACjD,GACAA,oBAAoB,WAAW,CAAC,OAAO;QAEzC,IAAI,CAACA,oBAAoB,QAAQ,CAAC,QAAQ;YACxC,yEAAyE;YACzE,iEAAiE;YACjEA,sBAAsB,YAAYA;QACpC;IACF;IAEA,OAAOA;AACT;AAEA,SAASC;IACP,IAAIV,eAAeI,WAAW;QAC5BJ,aAAaO,sBAAsBL;IACrC;IACA,OAAOF;AACT;AAEA;;;;CAIC,GACD,SAASW,2BACPC,WAAW;IAEXd,4BAA4B;QAACc;KAAY;AAC3C;AAEA;;;CAGC,GACD,SAASC,2BACPD,WAAW;IAEXd,0BAA0B,IAAI,CAACc;AACjC;AAEA;;;CAGC,GACD,SAASE,mBAAmBC,MAAM;IAChC,IAAIA,UAAU,QAAQ,OAAOA,WAAW,UAAU;QAChD,sFAAsF;QACtF,uFAAuF;QACvF,OAAOA;IACT;IAEA,IAAMC,QAAQnB,cAAc,YAAY,CAACkB;IACzC,IAAI,CAACC,OAAO;QACV,OAAO;IACT;IAEA,IAAMC,WAAW,IAAIvB,oBACnBS,mBACAO,gBACAM;IAGF,qDAAqD;IACrD,IAAIlB,2BAA2B;QAC7B,KAAK,IAAMoB,2BAA2BpB,0BAA2B;YAC/D,IAAMqB,oBAAoBD,wBAAwBD;YAClD,IAAIE,qBAAqB,MAAM;gBAC7B,OAAOA;YACT;QACF;IACF;IAEA,OAAOF,SAAS,YAAY;AAC9B;AAEAH,mBAAmB,SAAS,GAAGlB;AAC/BkB,mBAAmB,0BAA0B,GAAGH;AAChDG,mBAAmB,0BAA0B,GAAGD;AAChDO,cAAc,GAAGN"}