{"version":3,"file":"node_modules_react-native_Libraries_Renderer_shims_ReactNativeViewConfigRegistry_js-_91fd1.chunk.bundle","sources":["webpack://sataccommodation/./node_modules/react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noformat\n * @nolint\n *       strict-local\n * @generated SignedSource<<83073425aa3f71ced2c8c51f25a25938>>\n */\n\n'use strict';\n\n                                                   \nimport invariant from 'invariant';\n\n// Event configs\nexport const customBubblingEventTypes   \n                                  \n                                        \n                       \n                      \n                              \n       \n     \n  = {};\nexport const customDirectEventTypes   \n                                  \n                             \n     \n  = {};\n\nconst viewConfigCallbacks = new Map                           ();\nconst viewConfigs = new Map                    ();\n\nfunction processEventTypes(viewConfig            )       {\n  const {bubblingEventTypes, directEventTypes} = viewConfig;\n\n  if (__DEV__) {\n    if (bubblingEventTypes != null && directEventTypes != null) {\n      for (const topLevelType in directEventTypes) {\n        invariant(\n          bubblingEventTypes[topLevelType] == null,\n          'Event cannot be both direct and bubbling: %s',\n          topLevelType,\n        );\n      }\n    }\n  }\n\n  if (bubblingEventTypes != null) {\n    for (const topLevelType in bubblingEventTypes) {\n      if (customBubblingEventTypes[topLevelType] == null) {\n        customBubblingEventTypes[topLevelType] =\n          bubblingEventTypes[topLevelType];\n      }\n    }\n  }\n\n  if (directEventTypes != null) {\n    for (const topLevelType in directEventTypes) {\n      if (customDirectEventTypes[topLevelType] == null) {\n        customDirectEventTypes[topLevelType] = directEventTypes[topLevelType];\n      }\n    }\n  }\n}\n\n/**\n * Registers a native view/component by name.\n * A callback is provided to load the view config from UIManager.\n * The callback is deferred until the view is actually rendered.\n */\nexport function register(name        , callback                  )         {\n  invariant(\n    !viewConfigCallbacks.has(name),\n    'Tried to register two views with the same name %s',\n    name,\n  );\n  invariant(\n    typeof callback === 'function',\n    'View config getter callback for component `%s` must be a function (received `%s`)',\n    name,\n    callback === null ? 'null' : typeof callback,\n  );\n  viewConfigCallbacks.set(name, callback);\n  return name;\n}\n\n/**\n * Retrieves a config for the specified view.\n * If this is the first time the view has been used,\n * This configuration will be lazy-loaded from UIManager.\n */\nexport function get(name        )             {\n  let viewConfig = viewConfigs.get(name);\n  if (viewConfig == null) {\n    const callback = viewConfigCallbacks.get(name);\n    if (typeof callback !== 'function') {\n      invariant(\n        false,\n        'View config getter callback for component `%s` must be a function (received `%s`).%s',\n        name,\n        callback === null ? 'null' : typeof callback,\n        // $FlowFixMe[recursive-definition]\n        typeof name[0] === 'string' && /[a-z]/.test(name[0])\n          ? ' Make sure to start component names with a capital letter.'\n          : '',\n      );\n    }\n    viewConfig = callback();\n    invariant(viewConfig, 'View config not found for component `%s`', name);\n\n    processEventTypes(viewConfig);\n    viewConfigs.set(name, viewConfig);\n\n    // Clear the callback after the config is set so that\n    // we don't mask any errors during registration.\n    viewConfigCallbacks.set(name, null);\n  }\n  return viewConfig;\n}\n"],"names":["customBubblingEventTypes","customDirectEventTypes","get","register","viewConfigCallbacks","Map","viewConfigs","processEventTypes","viewConfig","bubblingEventTypes","directEventTypes","__DEV__","topLevelType","_invariant","topLevelType1","topLevelType2","name","callback"],"mappings":";;;;;;;AAAA;;;;;;;;;;CAUC,GAEY;;;;;;;;;;;QAMAA;eAAAA;;QASAC;eAAAA;;QAoEGC;eAAAA;;QArBAC;eAAAA;;;;8EA3DM;AAGf,IAAMH,2BAQT,CAAC;AACE,IAAMC,yBAIT,CAAC;AAEL,IAAMG,sBAAsB,IAAIC;AAChC,IAAMC,cAAc,IAAID;AAExB,SAASE,kBAAkBC,UAAU;IACnC,IAAOC,qBAAwCD,WAAxCC,oBAAoBC,mBAAoBF,WAApBE;IAE3B,IAAIC,IAAOA,EAAE;QACX,IAAIF,sBAAsB,QAAQC,oBAAoB,MAAM;YAC1D,IAAK,IAAME,gBAAgBF,iBAAkB;gBAC3CG,IAAAA,kBAAS,EACPJ,kBAAkB,CAACG,aAAa,IAAI,MACpC,gDACAA;YAEJ;QACF;IACF;IAEA,IAAIH,sBAAsB,MAAM;QAC9B,IAAK,IAAMK,iBAAgBL,mBAAoB;YAC7C,IAAIT,wBAAwB,CAACc,cAAa,IAAI,MAAM;gBAClDd,wBAAwB,CAACc,cAAa,GACpCL,kBAAkB,CAACK,cAAa;YACpC;QACF;IACF;IAEA,IAAIJ,oBAAoB,MAAM;QAC5B,IAAK,IAAMK,iBAAgBL,iBAAkB;YAC3C,IAAIT,sBAAsB,CAACc,cAAa,IAAI,MAAM;gBAChDd,sBAAsB,CAACc,cAAa,GAAGL,gBAAgB,CAACK,cAAa;YACvE;QACF;IACF;AACF;AAOO,SAASZ,SAASa,IAAI,EAAUC,QAAQ;IAC7CJ,IAAAA,kBAAS,EACP,CAACT,oBAAoB,GAAG,CAACY,OACzB,qDACAA;IAEFH,IAAAA,kBAAS,EACP,OAAOI,aAAa,YACpB,qFACAD,MACAC,aAAa,OAAO,SAAS,OAAOA;IAEtCb,oBAAoB,GAAG,CAACY,MAAMC;IAC9B,OAAOD;AACT;AAOO,SAASd,IAAIc,IAAI;IACtB,IAAIR,aAAaF,YAAY,GAAG,CAACU;IACjC,IAAIR,cAAc,MAAM;QACtB,IAAMS,WAAWb,oBAAoB,GAAG,CAACY;QACzC,IAAI,OAAOC,aAAa,YAAY;YAClCJ,IAAAA,kBAAS,EACP,OACA,wFACAG,MACAC,aAAa,OAAO,SAAS,OAAOA,UACpC,mCAAmC;YACnC,OAAOD,IAAI,CAAC,EAAE,KAAK,YAAY,QAAQ,IAAI,CAACA,IAAI,CAAC,EAAE,IAC/C,+DACA;QAER;QACAR,aAAaS;QACbJ,IAAAA,kBAAS,EAACL,YAAY,4CAA4CQ;QAElET,kBAAkBC;QAClBF,YAAY,GAAG,CAACU,MAAMR;QAEtB,qDAAqD;QACrD,gDAAgD;QAChDJ,oBAAoB,GAAG,CAACY,MAAM;IAChC;IACA,OAAOR;AACT"}