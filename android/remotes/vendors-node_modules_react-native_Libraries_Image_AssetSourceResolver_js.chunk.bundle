(self["webpackChunksataccommodation"] = self["webpackChunksataccommodation"] || []).push([["vendors-node_modules_react-native_Libraries_Image_AssetSourceResolver_js"], {
"./node_modules/react-native/Libraries/Utilities/NativeDeviceInfo.js": 
/*!***************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/NativeDeviceInfo.js ***!
  \***************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeDeviceInfo = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativeDeviceInfo */ "./node_modules/react-native/src/private/specs/modules/NativeDeviceInfo.js"), exports));
var _default = _NativeDeviceInfo.default;


}),
"./node_modules/react-native/Libraries/Utilities/NativePlatformConstantsAndroid.js": 
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/NativePlatformConstantsAndroid.js ***!
  \*****************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(/*! @swc/helpers/_/_export_star */ "./node_modules/@swc/helpers/cjs/_export_star.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativePlatformConstantsAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(/*! ../../src/private/specs/modules/NativePlatformConstantsAndroid */ "./node_modules/react-native/src/private/specs/modules/NativePlatformConstantsAndroid.js"), exports));
var _default = _NativePlatformConstantsAndroid.default;


}),
"./node_modules/react-native/src/private/specs/modules/NativeDeviceInfo.js": 
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativeDeviceInfo.js ***!
  \*********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var NativeModule = _TurboModuleRegistry.getEnforcing('DeviceInfo');
var constants = null;
var NativeDeviceInfo = {
    getConstants () {
        if (constants == null) {
            constants = NativeModule.getConstants();
        }
        return constants;
    }
};
var _default = NativeDeviceInfo;


}),
"./node_modules/react-native/src/private/specs/modules/NativePlatformConstantsAndroid.js": 
/*!***********************************************************************************************!*\
  !*** ./node_modules/react-native/src/private/specs/modules/NativePlatformConstantsAndroid.js ***!
  \***********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ../../../../Libraries/TurboModule/TurboModuleRegistry */ "./node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"));
var _default = _TurboModuleRegistry.getEnforcing('PlatformConstants');


}),
"./node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js": 
/*!***********************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js ***!
  \***********************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _Systrace = __webpack_require__(/*! ../Performance/Systrace */ "./node_modules/react-native/Libraries/Performance/Systrace.js");
var _EventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../vendor/emitter/EventEmitter */ "./node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js"));
// FIXME: use typed events
/**
 * Global EventEmitter used by the native platform to emit events to JavaScript.
 * Events are identified by globally unique event names.
 *
 * NativeModules that emit events should instead subclass `NativeEventEmitter`.
 */ var RCTDeviceEventEmitter = /*#__PURE__*/ function(EventEmitter) {
    "use strict";
    _inherits._(RCTDeviceEventEmitter, EventEmitter);
    function RCTDeviceEventEmitter() {
        _class_call_check._(this, RCTDeviceEventEmitter);
        return _call_super._(this, RCTDeviceEventEmitter, arguments);
    }
    _create_class._(RCTDeviceEventEmitter, [
        {
            // Add systrace to RCTDeviceEventEmitter.emit method for debugging
            key: "emit",
            value: function emit(eventType, ...args) {
                var _$_get;
                (0, _Systrace.beginEvent)(()=>`RCTDeviceEventEmitter.emit#${eventType}`);
                (_$_get = _get._(_get_prototype_of._(RCTDeviceEventEmitter.prototype), "emit", this)).call.apply(_$_get, [
                    this,
                    eventType
                ].concat(_to_consumable_array._(args)));
                (0, _Systrace.endEvent)();
            }
        }
    ]);
    return RCTDeviceEventEmitter;
}(_EventEmitter.default);
var instance = new RCTDeviceEventEmitter();
Object.defineProperty(__webpack_require__.g, '__rctDeviceEventEmitter', {
    configurable: true,
    value: instance
});
var _default = instance;


}),
"./node_modules/react-native/Libraries/Image/AssetSourceResolver.js": 
/*!**************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Image/AssetSourceResolver.js ***!
  \**************************************************************************/
(function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var PixelRatio = (__webpack_require__(/*! ../Utilities/PixelRatio */ "./node_modules/react-native/Libraries/Utilities/PixelRatio.js")/* ["default"] */["default"]);
var Platform = __webpack_require__(/*! ../Utilities/Platform */ "./node_modules/react-native/Libraries/Utilities/Platform.android.js");
var pickScale = (__webpack_require__(/*! ./AssetUtils */ "./node_modules/react-native/Libraries/Image/AssetUtils.js")/* .pickScale */.pickScale);
var _require = __webpack_require__(/*! @react-native/assets-registry/path-support */ "webpack/sharing/consume/default/@react-native/assets-registry/path-support/@react-native/assets-registry/path-support"), getAndroidResourceFolderName = _require.getAndroidResourceFolderName, getAndroidResourceIdentifier = _require.getAndroidResourceIdentifier, getBasePath = _require.getBasePath;
var invariant = __webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js");
/**
 * Returns a path like 'assets/AwesomeModule/icon@2x.png'
 */ function getScaledAssetPath(asset) {
    var scale = pickScale(asset.scales, PixelRatio.get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
    var assetDir = getBasePath(asset);
    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}
/**
 * Returns a path like 'drawable-mdpi/icon.png'
 */ function getAssetPathInDrawableFolder(asset) {
    var scale = pickScale(asset.scales, PixelRatio.get());
    var drawableFolder = getAndroidResourceFolderName(asset, scale);
    var fileName = getAndroidResourceIdentifier(asset);
    return drawableFolder + '/' + fileName + '.' + asset.type;
}
/**
 * Returns true if the asset can be loaded over the network.
 *
 * This prevents an issue loading XML assets on Android. XML asset types like
 * vector drawables can only be loaded from precompiled source. Android does
 * not support loading these over the network, and AAPT precompiles data by
 * breaking path data and resource information apart into multiple files,
 * stuffing it all into the resource table. As a result, we should only attempt
 * to load resources as we would in release builds: by the resource name.
 *
 * For more information, see:
 * https://issuetracker.google.com/issues/62435069
 * https://issuetracker.google.com/issues/68293189
 */ function assetSupportsNetworkLoads(asset) {
    return !(asset.type === 'xml' && Platform.OS === 'android');
}
var AssetSourceResolver = /*#__PURE__*/ function() {
    function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
        _class_call_check._(this, AssetSourceResolver);
        this.serverUrl = serverUrl;
        this.jsbundleUrl = jsbundleUrl;
        this.asset = asset;
    }
    _create_class._(AssetSourceResolver, [
        {
            key: "isLoadedFromServer",
            value: function isLoadedFromServer() {
                return this.serverUrl != null && this.serverUrl !== '' && assetSupportsNetworkLoads(this.asset);
            }
        },
        {
            key: "isLoadedFromFileSystem",
            value: function isLoadedFromFileSystem() {
                var _this_jsbundleUrl;
                return this.jsbundleUrl != null && ((_this_jsbundleUrl = this.jsbundleUrl) === null || _this_jsbundleUrl === void 0 ? void 0 : _this_jsbundleUrl.startsWith('file://'));
            }
        },
        {
            key: "defaultAsset",
            value: function defaultAsset() {
                if (this.isLoadedFromServer()) {
                    return this.assetServerURL();
                }
                if (this.asset.resolver != null) {
                    return this.getAssetUsingResolver(this.asset.resolver);
                }
                if (Platform.OS === 'android') {
                    return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
                } else {
                    return this.scaledAssetURLNearBundle();
                }
            }
        },
        {
            key: "getAssetUsingResolver",
            value: function getAssetUsingResolver(resolver) {
                switch(resolver){
                    case 'android':
                        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
                    case 'generic':
                        return this.scaledAssetURLNearBundle();
                    default:
                        throw new Error("Don't know how to get asset via provided resolver: " + resolver + '\nAsset: ' + JSON.stringify(this.asset, null, '\t') + '\nPossible resolvers are:' + JSON.stringify([
                            'android',
                            'generic'
                        ], null, '\t'));
                }
            }
        },
        {
            /**
   * Returns an absolute URL which can be used to fetch the asset
   * from the devserver
   */ key: "assetServerURL",
            value: function assetServerURL() {
                invariant(this.serverUrl != null, 'need server to load from');
                return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
            }
        },
        {
            /**
   * Resolves to just the scaled asset filename
   * E.g. 'assets/AwesomeModule/icon@2x.png'
   */ key: "scaledAssetPath",
            value: function scaledAssetPath() {
                return this.fromSource(getScaledAssetPath(this.asset));
            }
        },
        {
            /**
   * Resolves to where the bundle is running from, with a scaled asset filename
   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'
   */ key: "scaledAssetURLNearBundle",
            value: function scaledAssetURLNearBundle() {
                var path = this.jsbundleUrl ?? 'file://';
                return this.fromSource(// Assets can have relative paths outside of the project root.
                // When bundling them we replace `../` with `_` to make sure they
                // don't end up outside of the expected assets directory.
                path + getScaledAssetPath(this.asset).replace(/\.\.\//g, '_'));
            }
        },
        {
            /**
   * The default location of assets bundled with the app, located by
   * resource identifier
   * The Android resource system picks the correct scale.
   * E.g. 'assets_awesomemodule_icon'
   */ key: "resourceIdentifierWithoutScale",
            value: function resourceIdentifierWithoutScale() {
                invariant(Platform.OS === 'android', 'resource identifiers work on Android');
                return this.fromSource(getAndroidResourceIdentifier(this.asset));
            }
        },
        {
            /**
   * If the jsbundle is running from a sideload location, this resolves assets
   * relative to its location
   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'
   */ key: "drawableFolderInBundle",
            value: function drawableFolderInBundle() {
                var path = this.jsbundleUrl ?? 'file://';
                return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
            }
        },
        {
            key: "fromSource",
            value: function fromSource(source) {
                return {
                    __packager_asset: true,
                    width: this.asset.width,
                    height: this.asset.height,
                    uri: source,
                    scale: pickScale(this.asset.scales, PixelRatio.get())
                };
            }
        }
    ]);
    return AssetSourceResolver;
}();
AssetSourceResolver.pickScale = pickScale;
module.exports = AssetSourceResolver;


}),
"./node_modules/react-native/Libraries/Image/AssetUtils.js": 
/*!*****************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Image/AssetUtils.js ***!
  \*****************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get getUrlCacheBreaker () {
        return getUrlCacheBreaker;
    },
    get pickScale () {
        return pickScale;
    },
    get setUrlCacheBreaker () {
        return setUrlCacheBreaker;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _PixelRatio = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../Utilities/PixelRatio */ "./node_modules/react-native/Libraries/Utilities/PixelRatio.js"));
var cacheBreaker;
var warnIfCacheBreakerUnset = true;
function pickScale(scales, deviceScale) {
    var requiredDeviceScale = deviceScale ?? _PixelRatio.default.get();
    // Packager guarantees that `scales` array is sorted
    for(var i = 0; i < scales.length; i++){
        if (scales[i] >= requiredDeviceScale) {
            return scales[i];
        }
    }
    // If nothing matches, device scale is larger than any available
    // scales, so we return the biggest one. Unless the array is empty,
    // in which case we default to 1
    return scales[scales.length - 1] || 1;
}
function setUrlCacheBreaker(appendage) {
    cacheBreaker = appendage;
}
function getUrlCacheBreaker() {
    if (cacheBreaker == null) {
        if ( true && warnIfCacheBreakerUnset) {
            warnIfCacheBreakerUnset = false;
            console.warn('AssetUtils.getUrlCacheBreaker: Cache breaker value is unset');
        }
        return '';
    }
    return cacheBreaker;
}


}),
"./node_modules/react-native/Libraries/Utilities/Dimensions.js": 
/*!*********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/Dimensions.js ***!
  \*********************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../EventEmitter/RCTDeviceEventEmitter */ "./node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js"));
var _EventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../vendor/emitter/EventEmitter */ "./node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js"));
var _NativeDeviceInfo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativeDeviceInfo */ "./node_modules/react-native/Libraries/Utilities/NativeDeviceInfo.js"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js"));
var eventEmitter = new _EventEmitter.default();
var dimensionsInitialized = false;
var dimensions;
var Dimensions = /*#__PURE__*/ function() {
    "use strict";
    function Dimensions() {
        _class_call_check._(this, Dimensions);
    }
    _create_class._(Dimensions, null, [
        {
            key: "get",
            value: /**
   * NOTE: `useWindowDimensions` is the preferred API for React components.
   *
   * Initial dimensions are set before `runApplication` is called so they should
   * be available before any other require's are run, but may be updated later.
   *
   * Note: Although dimensions are available immediately, they may change (e.g
   * due to device rotation) so any rendering logic or styles that depend on
   * these constants should try to call this function on every render, rather
   * than caching the value (for example, using inline styles rather than
   * setting a value in a `StyleSheet`).
   *
   * Example: `const {height, width} = Dimensions.get('window');`
   *
   * @param {string} dim Name of dimension as defined when calling `set`.
   * @returns {DisplayMetrics? | DisplayMetricsAndroid?} Value for the dimension.
   */ function get(dim) {
                // $FlowFixMe[invalid-computed-prop]
                (0, _invariant.default)(dimensions[dim], 'No dimension set for key ' + dim);
                return dimensions[dim];
            }
        },
        {
            key: "set",
            value: /**
   * This should only be called from native code by sending the
   * didUpdateDimensions event.
   *
   * @param {DimensionsPayload} dims Simple string-keyed object of dimensions to set
   */ function set(dims) {
                // We calculate the window dimensions in JS so that we don't encounter loss of
                // precision in transferring the dimensions (which could be non-integers) over
                // the bridge.
                var screen = dims.screen, window = dims.window;
                var windowPhysicalPixels = dims.windowPhysicalPixels;
                if (windowPhysicalPixels) {
                    window = {
                        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
                        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
                        scale: windowPhysicalPixels.scale,
                        fontScale: windowPhysicalPixels.fontScale
                    };
                }
                var screenPhysicalPixels = dims.screenPhysicalPixels;
                if (screenPhysicalPixels) {
                    screen = {
                        width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
                        height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
                        scale: screenPhysicalPixels.scale,
                        fontScale: screenPhysicalPixels.fontScale
                    };
                } else if (screen == null) {
                    screen = window;
                }
                dimensions = {
                    window,
                    screen
                };
                if (dimensionsInitialized) {
                    // Don't fire 'change' the first time the dimensions are set.
                    eventEmitter.emit('change', dimensions);
                } else {
                    dimensionsInitialized = true;
                }
            }
        },
        {
            key: "addEventListener",
            value: /**
   * Add an event handler. Supported events:
   *
   * - `change`: Fires when a property within the `Dimensions` object changes. The argument
   *   to the event handler is an object with `window` and `screen` properties whose values
   *   are the same as the return values of `Dimensions.get('window')` and
   *   `Dimensions.get('screen')`, respectively.
   */ function addEventListener(type, handler) {
                (0, _invariant.default)(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
                return eventEmitter.addListener(type, handler);
            }
        }
    ]);
    return Dimensions;
}();
// Subscribe before calling getConstants to make sure we don't miss any updates in between.
_RCTDeviceEventEmitter.default.addListener('didUpdateDimensions', (update)=>{
    Dimensions.set(update);
});
Dimensions.set(_NativeDeviceInfo.default.getConstants().Dimensions);
var _default = Dimensions;


}),
"./node_modules/react-native/Libraries/Utilities/PixelRatio.js": 
/*!*********************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/PixelRatio.js ***!
  \*********************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var Dimensions = (__webpack_require__(/*! ./Dimensions */ "./node_modules/react-native/Libraries/Utilities/Dimensions.js")/* ["default"] */["default"]);
/**
 * PixelRatio class gives access to the device pixel density.
 *
 * ## Fetching a correctly sized image
 *
 * You should get a higher resolution image if you are on a high pixel density
 * device. A good rule of thumb is to multiply the size of the image you display
 * by the pixel ratio.
 *
 * ```
 * var image = getImage({
 *   width: PixelRatio.getPixelSizeForLayoutSize(200),
 *   height: PixelRatio.getPixelSizeForLayoutSize(100),
 * });
 * <Image source={image} style={{width: 200, height: 100}} />
 * ```
 *
 * ## Pixel grid snapping
 *
 * In iOS, you can specify positions and dimensions for elements with arbitrary
 * precision, for example 29.674825. But, ultimately the physical display only
 * have a fixed number of pixels, for example 640×960 for iPhone 4 or 750×1334
 * for iPhone 6. iOS tries to be as faithful as possible to the user value by
 * spreading one original pixel into multiple ones to trick the eye. The
 * downside of this technique is that it makes the resulting element look
 * blurry.
 *
 * In practice, we found out that developers do not want this feature and they
 * have to work around it by doing manual rounding in order to avoid having
 * blurry elements. In React Native, we are rounding all the pixels
 * automatically.
 *
 * We have to be careful when to do this rounding. You never want to work with
 * rounded and unrounded values at the same time as you're going to accumulate
 * rounding errors. Having even one rounding error is deadly because a one
 * pixel border may vanish or be twice as big.
 *
 * In React Native, everything in JavaScript and within the layout engine works
 * with arbitrary precision numbers. It's only when we set the position and
 * dimensions of the native element on the main thread that we round. Also,
 * rounding is done relative to the root rather than the parent, again to avoid
 * accumulating rounding errors.
 *
 */ var PixelRatio = /*#__PURE__*/ function() {
    function PixelRatio() {
        _class_call_check._(this, PixelRatio);
    }
    _create_class._(PixelRatio, null, [
        {
            key: "get",
            value: /**
   * Returns the device pixel density. Some examples:
   *
   *   - PixelRatio.get() === 1
   *     - mdpi Android devices (160 dpi)
   *   - PixelRatio.get() === 1.5
   *     - hdpi Android devices (240 dpi)
   *   - PixelRatio.get() === 2
   *     - iPhone 4, 4S
   *     - iPhone 5, 5c, 5s
   *     - iPhone 6
   *     - iPhone 7
   *     - iPhone 8
   *     - iPhone SE
   *     - xhdpi Android devices (320 dpi)
   *   - PixelRatio.get() === 3
   *     - iPhone 6 Plus
   *     - iPhone 7 Plus
   *     - iPhone 8 Plus
   *     - iPhone X
   *     - xxhdpi Android devices (480 dpi)
   *   - PixelRatio.get() === 3.5
   *     - Nexus 6
   */ function get() {
                return Dimensions.get('window').scale;
            }
        },
        {
            key: "getFontScale",
            value: /**
   * Returns the scaling factor for font sizes. This is the ratio that is used to calculate the
   * absolute font size, so any elements that heavily depend on that should use this to do
   * calculations.
   *
   * If a font scale is not set, this returns the device pixel ratio.
   *
   * This reflects the user preference set in:
   *  - Settings > Display > Font size on Android,
   *  - Settings > Display & Brightness > Text Size on iOS.
   */ function getFontScale() {
                return Dimensions.get('window').fontScale || PixelRatio.get();
            }
        },
        {
            key: "getPixelSizeForLayoutSize",
            value: /**
   * Converts a layout size (dp) to pixel size (px).
   *
   * Guaranteed to return an integer number.
   */ function getPixelSizeForLayoutSize(layoutSize) {
                return Math.round(layoutSize * PixelRatio.get());
            }
        },
        {
            key: "roundToNearestPixel",
            value: /**
   * Rounds a layout size (dp) to the nearest layout size that corresponds to
   * an integer number of pixels. For example, on a device with a PixelRatio
   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to
   * exactly (8.33 * 3) = 25 pixels.
   */ function roundToNearestPixel(layoutSize) {
                var ratio = PixelRatio.get();
                return Math.round(layoutSize * ratio) / ratio;
            }
        },
        {
            key: "startDetecting",
            value: // No-op for iOS, but used on the web. Should not be documented.
            function startDetecting() {}
        }
    ]);
    return PixelRatio;
}();
var _default = PixelRatio;


}),
"./node_modules/react-native/Libraries/Utilities/Platform.android.js": 
/*!***************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/Utilities/Platform.android.js ***!
  \***************************************************************************/
(function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativePlatformConstantsAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./NativePlatformConstantsAndroid */ "./node_modules/react-native/Libraries/Utilities/NativePlatformConstantsAndroid.js"));
var Platform = {
    __constants: null,
    OS: 'android',
    // $FlowFixMe[unsafe-getters-setters]
    get Version () {
        // $FlowFixMe[object-this-reference]
        return this.constants.Version;
    },
    // $FlowFixMe[unsafe-getters-setters]
    get constants () {
        // $FlowFixMe[object-this-reference]
        if (this.__constants == null) {
            // $FlowFixMe[object-this-reference]
            this.__constants = _NativePlatformConstantsAndroid.default.getConstants();
        }
        // $FlowFixMe[object-this-reference]
        return this.__constants;
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isTesting () {
        if (true) {
            // $FlowFixMe[object-this-reference]
            return this.constants.isTesting;
        }
        return false;
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isDisableAnimations () {
        // $FlowFixMe[object-this-reference]
        return this.constants.isDisableAnimations ?? this.isTesting;
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isTV () {
        // $FlowFixMe[object-this-reference]
        return this.constants.uiMode === 'tv';
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isVision () {
        return false;
    },
    select: (spec)=>'android' in spec ? spec.android : 'native' in spec ? spec.native : spec.default
};
module.exports = Platform;


}),
"./node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js": 
/*!****************************************************************************!*\
  !*** ./node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js ***!
  \****************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * EventEmitter manages listeners and publishes events to them.
 *
 * EventEmitter accepts a single type parameter that defines the valid events
 * and associated listener argument(s).
 *
 * @example
 *
 *   const emitter = new EventEmitter<{
 *     success: [number, string],
 *     error: [Error],
 *   }>();
 *
 *   emitter.on('success', (statusCode, responseText) => {...});
 *   emitter.emit('success', 200, '...');
 *
 *   emitter.on('error', error => {...});
 *   emitter.emit('error', new Error('Resource not found'));
 *
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return EventEmitter;
    }
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _class_private_field_loose_base = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_base */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_base.cjs");
var _class_private_field_loose_key = __webpack_require__(/*! @swc/helpers/_/_class_private_field_loose_key */ "./node_modules/@swc/helpers/cjs/_class_private_field_loose_key.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/@swc/helpers/cjs/_create_class.cjs");
var // $FlowFixMe[incompatible-type]
_registry = /*#__PURE__*/ _class_private_field_loose_key._("_registry");
var EventEmitter = /*#__PURE__*/ function() {
    "use strict";
    function EventEmitter() {
        _class_call_check._(this, EventEmitter);
        Object.defineProperty(this, _registry, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(this, _registry)[_registry] = {};
    }
    _create_class._(EventEmitter, [
        {
            /**
   * Registers a listener that is called when the supplied event is emitted.
   * Returns a subscription that has a `remove` method to undo registration.
   */ key: "addListener",
            value: function addListener(eventType, listener, context) {
                if (typeof listener !== 'function') {
                    throw new TypeError('EventEmitter.addListener(...): 2nd argument must be a function.');
                }
                var registrations = allocate(_class_private_field_loose_base._(this, _registry)[_registry], eventType);
                var registration = {
                    context,
                    listener,
                    remove () {
                        registrations.delete(registration);
                    }
                };
                registrations.add(registration);
                return registration;
            }
        },
        {
            /**
   * Emits the supplied event. Additional arguments supplied to `emit` will be
   * passed through to each of the registered listeners.
   *
   * If a listener modifies the listeners registered for the same event, those
   * changes will not be reflected in the current invocation of `emit`.
   */ key: "emit",
            value: function emit(eventType, ...args) {
                var registrations = _class_private_field_loose_base._(this, _registry)[_registry][eventType];
                if (registrations != null) {
                    // Copy `registrations` to take a snapshot when we invoke `emit`, in case
                    // registrations are added or removed when listeners are invoked.
                    for (var registration of Array.from(registrations)){
                        // $FlowFixMe[incompatible-call]
                        registration.listener.apply(registration.context, args);
                    }
                }
            }
        },
        {
            /**
   * Removes all registered listeners.
   */ key: "removeAllListeners",
            value: function removeAllListeners(eventType) {
                if (eventType == null) {
                    // $FlowFixMe[incompatible-type]
                    _class_private_field_loose_base._(this, _registry)[_registry] = {};
                } else {
                    delete _class_private_field_loose_base._(this, _registry)[_registry][eventType];
                }
            }
        },
        {
            /**
   * Returns the number of registered listeners for the supplied event.
   */ key: "listenerCount",
            value: function listenerCount(eventType) {
                var registrations = _class_private_field_loose_base._(this, _registry)[_registry][eventType];
                return registrations == null ? 0 : registrations.size;
            }
        }
    ]);
    return EventEmitter;
}();
function allocate(registry, eventType) {
    var registrations = registry[eventType];
    if (registrations == null) {
        registrations = new Set();
        registry[eventType] = registrations;
    }
    return registrations;
}


}),

}]);//# sourceMappingURL=vendors-node_modules_react-native_Libraries_Image_AssetSourceResolver_js.chunk.bundle.map?platform=android