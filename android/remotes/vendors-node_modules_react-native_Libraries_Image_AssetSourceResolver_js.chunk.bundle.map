{"version":3,"file":"vendors-node_modules_react-native_Libraries_Image_AssetSourceResolver_js.chunk.bundle","sources":["webpack://sataccommodation/./node_modules/react-native/Libraries/Utilities/NativeDeviceInfo.js","webpack://sataccommodation/./node_modules/react-native/Libraries/Utilities/NativePlatformConstantsAndroid.js","webpack://sataccommodation/./node_modules/react-native/src/private/specs/modules/NativeDeviceInfo.js","webpack://sataccommodation/./node_modules/react-native/src/private/specs/modules/NativePlatformConstantsAndroid.js","webpack://sataccommodation/./node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js","webpack://sataccommodation/./node_modules/react-native/Libraries/Image/AssetSourceResolver.js","webpack://sataccommodation/./node_modules/react-native/Libraries/Image/AssetUtils.js","webpack://sataccommodation/./node_modules/react-native/Libraries/Utilities/Dimensions.js","webpack://sataccommodation/./node_modules/react-native/Libraries/Utilities/PixelRatio.js","webpack://sataccommodation/./node_modules/react-native/Libraries/Utilities/Platform.android.js","webpack://sataccommodation/./node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js"],"sourcesContent":["export * from '../../src/private/specs/modules/NativeDeviceInfo';\nimport NativeDeviceInfo from '../../src/private/specs/modules/NativeDeviceInfo';\nexport default NativeDeviceInfo;","export * from '../../src/private/specs/modules/NativePlatformConstantsAndroid';\nimport NativePlatformConstantsAndroid from '../../src/private/specs/modules/NativePlatformConstantsAndroid';\nexport default NativePlatformConstantsAndroid;","                                                                               \nimport * as TurboModuleRegistry from '../../../../Libraries/TurboModule/TurboModuleRegistry';\n                                      \n                \n                 \n                \n                    \n                     \n   \n                               \n                \n                 \n                \n                    \n   \n                                  \n                          \n                          \n                                               \n                                               \n   \n                                    \n                                 \n                                  \n   \n                                           \n                                          \n \nconst NativeModule       = TurboModuleRegistry.getEnforcing      ('DeviceInfo');\nlet constants                       = null;\nconst NativeDeviceInfo = {\n  getConstants()                      {\n    if (constants == null) {\n      constants = NativeModule.getConstants();\n    }\n    return constants;\n  }\n};\nexport default NativeDeviceInfo;","                                                                               \nimport * as TurboModuleRegistry from '../../../../Libraries/TurboModule/TurboModuleRegistry';\n                                          \n                \n                \n                \n                      \n   \n                                         \n                     \n                                \n                                                \n                  \n                  \n                 \n                      \n                \n                      \n                 \n                \n                       \n   \n                                           \n                                                \n                              \n \nexport default (TurboModuleRegistry.getEnforcing      ('PlatformConstants')      );","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n * @format\n */\n\n                                                                  \n\nimport {beginEvent, endEvent} from '../Performance/Systrace';\nimport EventEmitter from '../vendor/emitter/EventEmitter';\n\n// FIXME: use typed events\n                                            \n\n/**\n * Global EventEmitter used by the native platform to emit events to JavaScript.\n * Events are identified by globally unique event names.\n *\n * NativeModules that emit events should instead subclass `NativeEventEmitter`.\n */\nclass RCTDeviceEventEmitter extends EventEmitter                            {\n  // Add systrace to RCTDeviceEventEmitter.emit method for debugging\n  emit                                          (\n    eventType        ,\n    ...args                                   \n  )       {\n    beginEvent(() => `RCTDeviceEventEmitter.emit#${eventType}`);\n    super.emit(eventType, ...args);\n    endEvent();\n  }\n}\nconst instance = new RCTDeviceEventEmitter();\n\nObject.defineProperty(global, '__rctDeviceEventEmitter', {\n  configurable: true,\n  value: instance,\n});\n\nexport default (instance                                          );\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict-local\n * @format\n */\n\n'use strict';\n\n                                    \n                             \n                  \n                   \n               \n                 \n   \n\n             \n                        \n                \n                                                \n\nconst PixelRatio = require('../Utilities/PixelRatio').default;\nconst Platform = require('../Utilities/Platform');\nconst {pickScale} = require('./AssetUtils');\nconst {\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath,\n} = require('@react-native/assets-registry/path-support');\nconst invariant = require('invariant');\n\n/**\n * Returns a path like 'assets/AwesomeModule/icon@2x.png'\n */\nfunction getScaledAssetPath(asset               )         {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\n/**\n * Returns a path like 'drawable-mdpi/icon.png'\n */\nfunction getAssetPathInDrawableFolder(asset               )         {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const drawableFolder = getAndroidResourceFolderName(asset, scale);\n  const fileName = getAndroidResourceIdentifier(asset);\n  return drawableFolder + '/' + fileName + '.' + asset.type;\n}\n\n/**\n * Returns true if the asset can be loaded over the network.\n *\n * This prevents an issue loading XML assets on Android. XML asset types like\n * vector drawables can only be loaded from precompiled source. Android does\n * not support loading these over the network, and AAPT precompiles data by\n * breaking path data and resource information apart into multiple files,\n * stuffing it all into the resource table. As a result, we should only attempt\n * to load resources as we would in release builds: by the resource name.\n *\n * For more information, see:\n * https://issuetracker.google.com/issues/62435069\n * https://issuetracker.google.com/issues/68293189\n */\nfunction assetSupportsNetworkLoads(asset               )          {\n  return !(asset.type === 'xml' && Platform.OS === 'android');\n}\n\nclass AssetSourceResolver {\n  serverUrl         ;\n  // where the jsbundle is being run from\n  jsbundleUrl         ;\n  // the asset to resolve\n  asset               ;\n\n  constructor(serverUrl         , jsbundleUrl         , asset               ) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer()          {\n    return (\n      this.serverUrl != null &&\n      this.serverUrl !== '' &&\n      assetSupportsNetworkLoads(this.asset)\n    );\n  }\n\n  isLoadedFromFileSystem()          {\n    return this.jsbundleUrl != null && this.jsbundleUrl?.startsWith('file://');\n  }\n\n  defaultAsset()                      {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    if (this.asset.resolver != null) {\n      return this.getAssetUsingResolver(this.asset.resolver);\n    }\n\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem()\n        ? this.drawableFolderInBundle()\n        : this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetURLNearBundle();\n    }\n  }\n\n  getAssetUsingResolver(resolver                       )                      {\n    switch (resolver) {\n      case 'android':\n        return this.isLoadedFromFileSystem()\n          ? this.drawableFolderInBundle()\n          : this.resourceIdentifierWithoutScale();\n      case 'generic':\n        return this.scaledAssetURLNearBundle();\n      default:\n        throw new Error(\n          \"Don't know how to get asset via provided resolver: \" +\n            resolver +\n            '\\nAsset: ' +\n            JSON.stringify(this.asset, null, '\\t') +\n            '\\nPossible resolvers are:' +\n            JSON.stringify(['android', 'generic'], null, '\\t'),\n        );\n    }\n  }\n\n  /**\n   * Returns an absolute URL which can be used to fetch the asset\n   * from the devserver\n   */\n  assetServerURL()                      {\n    invariant(this.serverUrl != null, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl +\n        getScaledAssetPath(this.asset) +\n        '?platform=' +\n        Platform.OS +\n        '&hash=' +\n        this.asset.hash,\n    );\n  }\n\n  /**\n   * Resolves to just the scaled asset filename\n   * E.g. 'assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPath()                      {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * Resolves to where the bundle is running from, with a scaled asset filename\n   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetURLNearBundle()                      {\n    const path = this.jsbundleUrl ?? 'file://';\n    return this.fromSource(\n      // Assets can have relative paths outside of the project root.\n      // When bundling them we replace `../` with `_` to make sure they\n      // don't end up outside of the expected assets directory.\n      path + getScaledAssetPath(this.asset).replace(/\\.\\.\\//g, '_'),\n    );\n  }\n\n  /**\n   * The default location of assets bundled with the app, located by\n   * resource identifier\n   * The Android resource system picks the correct scale.\n   * E.g. 'assets_awesomemodule_icon'\n   */\n  resourceIdentifierWithoutScale()                      {\n    invariant(\n      Platform.OS === 'android',\n      'resource identifiers work on Android',\n    );\n    return this.fromSource(getAndroidResourceIdentifier(this.asset));\n  }\n\n  /**\n   * If the jsbundle is running from a sideload location, this resolves assets\n   * relative to its location\n   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'\n   */\n  drawableFolderInBundle()                      {\n    const path = this.jsbundleUrl ?? 'file://';\n    return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n  }\n\n  fromSource(source        )                      {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale                                                          =\n    pickScale;\n}\n\nmodule.exports = AssetSourceResolver;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict-local\n * @format\n */\n\nimport PixelRatio from '../Utilities/PixelRatio';\n\nlet cacheBreaker;\nlet warnIfCacheBreakerUnset = true;\n\nexport function pickScale(scales               , deviceScale         )         {\n  const requiredDeviceScale = deviceScale ?? PixelRatio.get();\n\n  // Packager guarantees that `scales` array is sorted\n  for (let i = 0; i < scales.length; i++) {\n    if (scales[i] >= requiredDeviceScale) {\n      return scales[i];\n    }\n  }\n\n  // If nothing matches, device scale is larger than any available\n  // scales, so we return the biggest one. Unless the array is empty,\n  // in which case we default to 1\n  return scales[scales.length - 1] || 1;\n}\n\nexport function setUrlCacheBreaker(appendage        ) {\n  cacheBreaker = appendage;\n}\n\nexport function getUrlCacheBreaker()         {\n  if (cacheBreaker == null) {\n    if (__DEV__ && warnIfCacheBreakerUnset) {\n      warnIfCacheBreakerUnset = false;\n      console.warn(\n        'AssetUtils.getUrlCacheBreaker: Cache breaker value is unset',\n      );\n    }\n    return '';\n  }\n  return cacheBreaker;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *      \n */\n\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport EventEmitter   \n                         \n  from '../vendor/emitter/EventEmitter';\nimport NativeDeviceInfo   \n                         \n                      \n                             \n  from './NativeDeviceInfo';\nimport invariant from 'invariant';\n\nconst eventEmitter = new EventEmitter  \n                              \n  ();\nlet dimensionsInitialized = false;\nlet dimensions                   ;\n\nclass Dimensions {\n  /**\n   * NOTE: `useWindowDimensions` is the preferred API for React components.\n   *\n   * Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `const {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {DisplayMetrics? | DisplayMetricsAndroid?} Value for the dimension.\n   */\n  static get(dim        )                                         {\n    // $FlowFixMe[invalid-computed-prop]\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  /**\n   * This should only be called from native code by sending the\n   * didUpdateDimensions event.\n   *\n   * @param {DimensionsPayload} dims Simple string-keyed object of dimensions to set\n   */\n  static set(dims                              )       {\n    // We calculate the window dimensions in JS so that we don't encounter loss of\n    // precision in transferring the dimensions (which could be non-integers) over\n    // the bridge.\n    let {screen, window} = dims;\n    const {windowPhysicalPixels} = dims;\n    if (windowPhysicalPixels) {\n      window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale,\n      };\n    }\n    const {screenPhysicalPixels} = dims;\n    if (screenPhysicalPixels) {\n      screen = {\n        width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n        height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n        scale: screenPhysicalPixels.scale,\n        fontScale: screenPhysicalPixels.fontScale,\n      };\n    } else if (screen == null) {\n      screen = window;\n    }\n\n    dimensions = {window, screen};\n    if (dimensionsInitialized) {\n      // Don't fire 'change' the first time the dimensions are set.\n      eventEmitter.emit('change', dimensions);\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n   *   to the event handler is an object with `window` and `screen` properties whose values\n   *   are the same as the return values of `Dimensions.get('window')` and\n   *   `Dimensions.get('screen')`, respectively.\n   */\n  static addEventListener(\n    type          ,\n    handler          ,\n  )                    {\n    invariant(\n      type === 'change',\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    return eventEmitter.addListener(type, handler);\n  }\n}\n\n// Subscribe before calling getConstants to make sure we don't miss any updates in between.\nRCTDeviceEventEmitter.addListener(\n  'didUpdateDimensions',\n  (update                   ) => {\n    Dimensions.set(update);\n  },\n);\nDimensions.set(NativeDeviceInfo.getConstants().Dimensions);\n\nexport default Dimensions;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict-local\n */\n\n'use strict';\n\nconst Dimensions = require('./Dimensions').default;\n\n/**\n * PixelRatio class gives access to the device pixel density.\n *\n * ## Fetching a correctly sized image\n *\n * You should get a higher resolution image if you are on a high pixel density\n * device. A good rule of thumb is to multiply the size of the image you display\n * by the pixel ratio.\n *\n * ```\n * var image = getImage({\n *   width: PixelRatio.getPixelSizeForLayoutSize(200),\n *   height: PixelRatio.getPixelSizeForLayoutSize(100),\n * });\n * <Image source={image} style={{width: 200, height: 100}} />\n * ```\n *\n * ## Pixel grid snapping\n *\n * In iOS, you can specify positions and dimensions for elements with arbitrary\n * precision, for example 29.674825. But, ultimately the physical display only\n * have a fixed number of pixels, for example 640×960 for iPhone 4 or 750×1334\n * for iPhone 6. iOS tries to be as faithful as possible to the user value by\n * spreading one original pixel into multiple ones to trick the eye. The\n * downside of this technique is that it makes the resulting element look\n * blurry.\n *\n * In practice, we found out that developers do not want this feature and they\n * have to work around it by doing manual rounding in order to avoid having\n * blurry elements. In React Native, we are rounding all the pixels\n * automatically.\n *\n * We have to be careful when to do this rounding. You never want to work with\n * rounded and unrounded values at the same time as you're going to accumulate\n * rounding errors. Having even one rounding error is deadly because a one\n * pixel border may vanish or be twice as big.\n *\n * In React Native, everything in JavaScript and within the layout engine works\n * with arbitrary precision numbers. It's only when we set the position and\n * dimensions of the native element on the main thread that we round. Also,\n * rounding is done relative to the root rather than the parent, again to avoid\n * accumulating rounding errors.\n *\n */\nclass PixelRatio {\n  /**\n   * Returns the device pixel density. Some examples:\n   *\n   *   - PixelRatio.get() === 1\n   *     - mdpi Android devices (160 dpi)\n   *   - PixelRatio.get() === 1.5\n   *     - hdpi Android devices (240 dpi)\n   *   - PixelRatio.get() === 2\n   *     - iPhone 4, 4S\n   *     - iPhone 5, 5c, 5s\n   *     - iPhone 6\n   *     - iPhone 7\n   *     - iPhone 8\n   *     - iPhone SE\n   *     - xhdpi Android devices (320 dpi)\n   *   - PixelRatio.get() === 3\n   *     - iPhone 6 Plus\n   *     - iPhone 7 Plus\n   *     - iPhone 8 Plus\n   *     - iPhone X\n   *     - xxhdpi Android devices (480 dpi)\n   *   - PixelRatio.get() === 3.5\n   *     - Nexus 6\n   */\n  static get()         {\n    return Dimensions.get('window').scale;\n  }\n\n  /**\n   * Returns the scaling factor for font sizes. This is the ratio that is used to calculate the\n   * absolute font size, so any elements that heavily depend on that should use this to do\n   * calculations.\n   *\n   * If a font scale is not set, this returns the device pixel ratio.\n   *\n   * This reflects the user preference set in:\n   *  - Settings > Display > Font size on Android,\n   *  - Settings > Display & Brightness > Text Size on iOS.\n   */\n  static getFontScale()         {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  }\n\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   *\n   * Guaranteed to return an integer number.\n   */\n  static getPixelSizeForLayoutSize(layoutSize        )         {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n  static roundToNearestPixel(layoutSize        )         {\n    const ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  }\n\n  // No-op for iOS, but used on the web. Should not be documented.\n  static startDetecting() {}\n}\n\nexport default PixelRatio;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict\n */\n\n             \n                           \n                     \n                         \n\nimport NativePlatformConstantsAndroid from './NativePlatformConstantsAndroid';\n\nconst Platform               = {\n  __constants: null,\n  OS: 'android',\n  // $FlowFixMe[unsafe-getters-setters]\n  get Version()         {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.Version;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get constants()    \n                       \n                                  \n                          \n                    \n                    \n                    \n                          \n       \n                    \n                    \n                   \n                        \n                  \n                        \n                   \n                  \n                         \n     {\n    // $FlowFixMe[object-this-reference]\n    if (this.__constants == null) {\n      // $FlowFixMe[object-this-reference]\n      this.__constants = NativePlatformConstantsAndroid.getConstants();\n    }\n    // $FlowFixMe[object-this-reference]\n    return this.__constants;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTesting()          {\n    if (__DEV__) {\n      // $FlowFixMe[object-this-reference]\n      return this.constants.isTesting;\n    }\n    return false;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isDisableAnimations()          {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.isDisableAnimations ?? this.isTesting;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTV()          {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.uiMode === 'tv';\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isVision()          {\n    return false;\n  },\n  select:    (spec                       )    =>\n    'android' in spec\n      ? // $FlowFixMe[incompatible-return]\n        spec.android\n      : 'native' in spec\n        ? // $FlowFixMe[incompatible-return]\n          spec.native\n        : // $FlowFixMe[incompatible-return]\n          spec.default,\n};\n\nmodule.exports = Platform;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n * @format\n */\n\n                                    \n                 \n \n\n                                                        \n                                              \n                      \n                                                          \n                    \n                       \n\n                                       \n                      \n                                    \n          \n\n                                                                                \n\n                                                                           \n \n\n                               \n                  \n                                       \n                      \n \n\n                                         \n                                                                      \n  \n\n/**\n * EventEmitter manages listeners and publishes events to them.\n *\n * EventEmitter accepts a single type parameter that defines the valid events\n * and associated listener argument(s).\n *\n * @example\n *\n *   const emitter = new EventEmitter<{\n *     success: [number, string],\n *     error: [Error],\n *   }>();\n *\n *   emitter.on('success', (statusCode, responseText) => {...});\n *   emitter.emit('success', 200, '...');\n *\n *   emitter.on('error', error => {...});\n *   emitter.emit('error', new Error('Resource not found'));\n *\n */\nexport default class EventEmitter                        \n                                           \n{\n  // $FlowFixMe[incompatible-type]\n  #registry                            = {};\n\n  /**\n   * Registers a listener that is called when the supplied event is emitted.\n   * Returns a subscription that has a `remove` method to undo registration.\n   */\n  addListener                                (\n    eventType        ,\n    listener                                             ,\n    context       ,\n  )                    {\n    if (typeof listener !== 'function') {\n      throw new TypeError(\n        'EventEmitter.addListener(...): 2nd argument must be a function.',\n      );\n    }\n    const registrations = allocate \n                      \n             \n                              \n     (this.#registry, eventType);\n    const registration                                        = {\n      context,\n      listener,\n      remove()       {\n        registrations.delete(registration);\n      },\n    };\n    registrations.add(registration);\n    return registration;\n  }\n\n  /**\n   * Emits the supplied event. Additional arguments supplied to `emit` will be\n   * passed through to each of the registered listeners.\n   *\n   * If a listener modifies the listeners registered for the same event, those\n   * changes will not be reflected in the current invocation of `emit`.\n   */\n  emit                                (\n    eventType        ,\n    ...args                         \n  )       {\n    const registrations                                              =\n      this.#registry[eventType];\n    if (registrations != null) {\n      // Copy `registrations` to take a snapshot when we invoke `emit`, in case\n      // registrations are added or removed when listeners are invoked.\n      for (const registration of Array.from(registrations)) {\n        // $FlowFixMe[incompatible-call]\n        registration.listener.apply(registration.context, args);\n      }\n    }\n  }\n\n  /**\n   * Removes all registered listeners.\n   */\n  removeAllListeners                                (\n    eventType          ,\n  )       {\n    if (eventType == null) {\n      // $FlowFixMe[incompatible-type]\n      this.#registry = {};\n    } else {\n      delete this.#registry[eventType];\n    }\n  }\n\n  /**\n   * Returns the number of registered listeners for the supplied event.\n   */\n  listenerCount                                (eventType        )         {\n    const registrations                            = this.#registry[eventType];\n    return registrations == null ? 0 : registrations.size;\n  }\n}\n\nfunction allocate \n                         \n                                 \n                                      \n (\n  registry                           ,\n  eventType        ,\n)                                {\n  let registrations                                 = registry[eventType];\n  if (registrations == null) {\n    registrations = new Set();\n    registry[eventType] = registrations;\n  }\n  return registrations;\n}\n"],"names":["_default","_NativeDeviceInfo","_NativePlatformConstantsAndroid","NativeModule","_TurboModuleRegistry","constants","NativeDeviceInfo","RCTDeviceEventEmitter","emit","eventType","args","_$_get","_Systrace","_EventEmitter","instance","Object","global","PixelRatio","require","Platform","pickScale","_require","getAndroidResourceFolderName","getAndroidResourceIdentifier","getBasePath","invariant","getScaledAssetPath","asset","scale","scaleSuffix","assetDir","getAssetPathInDrawableFolder","drawableFolder","fileName","assetSupportsNetworkLoads","AssetSourceResolver","serverUrl","jsbundleUrl","isLoadedFromServer","isLoadedFromFileSystem","_this_jsbundleUrl","defaultAsset","getAssetUsingResolver","resolver","Error","JSON","assetServerURL","scaledAssetPath","scaledAssetURLNearBundle","path","resourceIdentifierWithoutScale","drawableFolderInBundle","fromSource","source","module","getUrlCacheBreaker","setUrlCacheBreaker","cacheBreaker","warnIfCacheBreakerUnset","scales","deviceScale","requiredDeviceScale","_PixelRatio","i","appendage","__DEV__","console","eventEmitter","dimensionsInitialized","dimensions","Dimensions","get","dim","_invariant","set","dims","screen","window","windowPhysicalPixels","screenPhysicalPixels","addEventListener","type","handler","_RCTDeviceEventEmitter","update","getFontScale","getPixelSizeForLayoutSize","layoutSize","Math","roundToNearestPixel","ratio","startDetecting","spec","EventEmitter","_registry","addListener","listener","context","TypeError","registrations","allocate","registration","Array","removeAllListeners","listenerCount","registry","Set"],"mappings":"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"}